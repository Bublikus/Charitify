import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, a as assign, e as exclude_internal_props, b as svg_element, c as claim_element, f as children, g as detach_dev, x as xlink_attr, h as attr_dev, j as add_location, n as null_to_empty, k as insert_dev, l as append_dev, m as noop, o as create_slot, p as createEventDispatcher, q as element, r as listen_dev, t as get_slot_context, u as get_slot_changes, v as transition_in, w as transition_out, y as create_component, z as space, A as claim_component, B as claim_space, C as mount_component, D as destroy_component, E as empty, F as set_attributes, G as toggle_class, H as set_input_value, I as get_spread_update, J as run_all, K as group_outros, L as check_outros, M as prop_dev, N as onMount, O as text, P as claim_text } from './index.c0613ed2.js';

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var classnames = createCommonjsModule(function (module) {
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg) && arg.length) {
				var inner = classNames.apply(null, arg);
				if (inner) {
					classes.push(inner);
				}
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if ( module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else {
		window.classNames = classNames;
	}
}());
});

const toCSSString = (styles = {}) => Object.entries(styles)
  .filter(([_propName, propValue]) => propValue !== undefined && propValue !== null)
  .reduce((styleString, [propName, propValue]) => {
    propName = propName.replace(/[A-Z]/g, match => `-${match.toLowerCase()}`);
    return `${styleString}${propName}:${propValue};`
  }, '');

/* src/components/Icon.svelte generated by Svelte v3.16.7 */
const file = "src/components/Icon.svelte";

function create_fragment(ctx) {
	let svg;
	let use;
	let use_xlink_href_value;
	let svg_class_value;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			use = svg_element("use");
			this.h();
		},
		l: function claim(nodes) {
			svg = claim_element(
				nodes,
				"svg",
				{
					id: true,
					title: true,
					class: true,
					style: true,
					"aria-label": true
				},
				1
			);

			var svg_nodes = children(svg);
			use = claim_element(svg_nodes, "use", { "xlink:href": true, class: true }, 1);
			children(use).forEach(detach_dev);
			svg_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			xlink_attr(use, "xlink:href", use_xlink_href_value = `#ico-${/*type*/ ctx[0]}`);
			attr_dev(use, "class", "ico_use svelte-3suh4w");
			add_location(use, file, 26, 4, 746);
			attr_dev(svg, "id", /*id*/ ctx[1]);
			attr_dev(svg, "title", /*titleProp*/ ctx[3]);
			attr_dev(svg, "class", svg_class_value = "" + (null_to_empty(/*classProp*/ ctx[2]) + " svelte-3suh4w"));
			attr_dev(svg, "style", /*styleProp*/ ctx[5]);
			attr_dev(svg, "aria-label", /*ariaLabelProp*/ ctx[4]);
			add_location(svg, file, 19, 0, 609);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, use);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*type*/ 1 && use_xlink_href_value !== (use_xlink_href_value = `#ico-${/*type*/ ctx[0]}`)) {
				xlink_attr(use, "xlink:href", use_xlink_href_value);
			}

			if (dirty & /*id*/ 2) {
				attr_dev(svg, "id", /*id*/ ctx[1]);
			}

			if (dirty & /*classProp*/ 4 && svg_class_value !== (svg_class_value = "" + (null_to_empty(/*classProp*/ ctx[2]) + " svelte-3suh4w"))) {
				attr_dev(svg, "class", svg_class_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { type } = $$props;
	let { is = "primary" } = $$props;
	let { size = "medium" } = $$props;
	let { rotate = 0 } = $$props;
	let { style = undefined } = $$props;
	let { id = undefined } = $$props;
	let { title = undefined } = $$props;
	let { ariaLabel = undefined } = $$props;
	let titleProp = title || ariaLabel;
	let ariaLabelProp = ariaLabel || title;

	let styleProp = toCSSString({
		transform: !!rotate ? `rotateZ(${rotate}deg)` : null,
		...style
	});

	$$self.$set = $$new_props => {
		$$invalidate(12, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("type" in $$new_props) $$invalidate(0, type = $$new_props.type);
		if ("is" in $$new_props) $$invalidate(6, is = $$new_props.is);
		if ("size" in $$new_props) $$invalidate(7, size = $$new_props.size);
		if ("rotate" in $$new_props) $$invalidate(8, rotate = $$new_props.rotate);
		if ("style" in $$new_props) $$invalidate(9, style = $$new_props.style);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("title" in $$new_props) $$invalidate(10, title = $$new_props.title);
		if ("ariaLabel" in $$new_props) $$invalidate(11, ariaLabel = $$new_props.ariaLabel);
	};

	$$self.$capture_state = () => {
		return {
			type,
			is,
			size,
			rotate,
			style,
			id,
			title,
			ariaLabel,
			titleProp,
			ariaLabelProp,
			styleProp,
			classProp
		};
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(12, $$props = assign(assign({}, $$props), $$new_props));
		if ("type" in $$props) $$invalidate(0, type = $$new_props.type);
		if ("is" in $$props) $$invalidate(6, is = $$new_props.is);
		if ("size" in $$props) $$invalidate(7, size = $$new_props.size);
		if ("rotate" in $$props) $$invalidate(8, rotate = $$new_props.rotate);
		if ("style" in $$props) $$invalidate(9, style = $$new_props.style);
		if ("id" in $$props) $$invalidate(1, id = $$new_props.id);
		if ("title" in $$props) $$invalidate(10, title = $$new_props.title);
		if ("ariaLabel" in $$props) $$invalidate(11, ariaLabel = $$new_props.ariaLabel);
		if ("titleProp" in $$props) $$invalidate(3, titleProp = $$new_props.titleProp);
		if ("ariaLabelProp" in $$props) $$invalidate(4, ariaLabelProp = $$new_props.ariaLabelProp);
		if ("styleProp" in $$props) $$invalidate(5, styleProp = $$new_props.styleProp);
		if ("classProp" in $$props) $$invalidate(2, classProp = $$new_props.classProp);
	};

	let classProp;

	$$self.$$.update = () => {
		 $$invalidate(2, classProp = classnames("ico", is, size, $$props.class));
	};

	$$props = exclude_internal_props($$props);

	return [
		type,
		id,
		classProp,
		titleProp,
		ariaLabelProp,
		styleProp,
		is,
		size,
		rotate,
		style,
		title,
		ariaLabel
	];
}

class Icon extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			type: 0,
			is: 6,
			size: 7,
			rotate: 8,
			style: 9,
			id: 1,
			title: 10,
			ariaLabel: 11
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Icon",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || ({});

		if (/*type*/ ctx[0] === undefined && !("type" in props)) {
			console.warn("<Icon> was created without expected prop 'type'");
		}
	}

	get type() {
		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get is() {
		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set is(value) {
		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get size() {
		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rotate() {
		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rotate(value) {
		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ariaLabel() {
		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ariaLabel(value) {
		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Form.svelte generated by Svelte v3.16.7 */
const file$1 = "src/components/Form.svelte";

function create_fragment$1(ctx) {
	let form;
	let current;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[13].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);

	const block = {
		c: function create() {
			form = element("form");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			form = claim_element(nodes, "FORM", {
				id: true,
				name: true,
				title: true,
				class: true,
				"aria-label": true,
				autocomplete: true
			});

			var form_nodes = children(form);
			if (default_slot) default_slot.l(form_nodes);
			form_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(form, "id", /*id*/ ctx[1]);
			attr_dev(form, "name", /*name*/ ctx[0]);
			attr_dev(form, "title", /*titleProp*/ ctx[3]);
			attr_dev(form, "class", /*classProp*/ ctx[2]);
			attr_dev(form, "aria-label", /*ariaLabelProp*/ ctx[4]);
			attr_dev(form, "autocomplete", /*autocompleteProp*/ ctx[5]);
			add_location(form, file$1, 24, 0, 598);
			dispose = listen_dev(form, "submit", /*onSubmit*/ ctx[6], false, false, false);
		},
		m: function mount(target, anchor) {
			insert_dev(target, form, anchor);

			if (default_slot) {
				default_slot.m(form, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot && default_slot.p && dirty & /*$$scope*/ 4096) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[12], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, null));
			}

			if (!current || dirty & /*id*/ 2) {
				attr_dev(form, "id", /*id*/ ctx[1]);
			}

			if (!current || dirty & /*name*/ 1) {
				attr_dev(form, "name", /*name*/ ctx[0]);
			}

			if (!current || dirty & /*classProp*/ 4) {
				attr_dev(form, "class", /*classProp*/ ctx[2]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(form);
			if (default_slot) default_slot.d(detaching);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { name } = $$props;
	let { id = undefined } = $$props;
	let { title = undefined } = $$props;
	let { ariaLabel = undefined } = $$props;
	let { autocomplete = true } = $$props;
	let titleProp = title || ariaLabel;
	let ariaLabelProp = ariaLabel || title;
	let autocompleteProp = autocomplete ? "on" : "off";

	function onSubmit(e) {
		e.preventDefault();
		dispatch("submit", e);
	}

	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$new_props => {
		$$invalidate(11, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("name" in $$new_props) $$invalidate(0, name = $$new_props.name);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("title" in $$new_props) $$invalidate(7, title = $$new_props.title);
		if ("ariaLabel" in $$new_props) $$invalidate(8, ariaLabel = $$new_props.ariaLabel);
		if ("autocomplete" in $$new_props) $$invalidate(9, autocomplete = $$new_props.autocomplete);
		if ("$$scope" in $$new_props) $$invalidate(12, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => {
		return {
			name,
			id,
			title,
			ariaLabel,
			autocomplete,
			titleProp,
			ariaLabelProp,
			autocompleteProp,
			classProp
		};
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(11, $$props = assign(assign({}, $$props), $$new_props));
		if ("name" in $$props) $$invalidate(0, name = $$new_props.name);
		if ("id" in $$props) $$invalidate(1, id = $$new_props.id);
		if ("title" in $$props) $$invalidate(7, title = $$new_props.title);
		if ("ariaLabel" in $$props) $$invalidate(8, ariaLabel = $$new_props.ariaLabel);
		if ("autocomplete" in $$props) $$invalidate(9, autocomplete = $$new_props.autocomplete);
		if ("titleProp" in $$props) $$invalidate(3, titleProp = $$new_props.titleProp);
		if ("ariaLabelProp" in $$props) $$invalidate(4, ariaLabelProp = $$new_props.ariaLabelProp);
		if ("autocompleteProp" in $$props) $$invalidate(5, autocompleteProp = $$new_props.autocompleteProp);
		if ("classProp" in $$props) $$invalidate(2, classProp = $$new_props.classProp);
	};

	let classProp;

	$$self.$$.update = () => {
		 $$invalidate(2, classProp = classnames("form", $$props.class));
	};

	$$props = exclude_internal_props($$props);

	return [
		name,
		id,
		classProp,
		titleProp,
		ariaLabelProp,
		autocompleteProp,
		onSubmit,
		title,
		ariaLabel,
		autocomplete,
		dispatch,
		$$props,
		$$scope,
		$$slots
	];
}

class Form extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			name: 0,
			id: 1,
			title: 7,
			ariaLabel: 8,
			autocomplete: 9
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Form",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || ({});

		if (/*name*/ ctx[0] === undefined && !("name" in props)) {
			console.warn("<Form> was created without expected prop 'name'");
		}
	}

	get name() {
		throw new Error("<Form>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<Form>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Form>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Form>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<Form>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Form>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ariaLabel() {
		throw new Error("<Form>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ariaLabel(value) {
		throw new Error("<Form>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get autocomplete() {
		throw new Error("<Form>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set autocomplete(value) {
		throw new Error("<Form>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Rate.svelte generated by Svelte v3.16.7 */
const file$2 = "src/components/Rate.svelte";

function create_fragment$2(ctx) {
	let section;
	let t0;
	let t1;
	let t2;
	let t3;
	let current;

	const icon0 = new Icon({
			props: { type: "heart-filled", is: "danger" },
			$$inline: true
		});

	const icon1 = new Icon({
			props: { type: "heart-filled", is: "danger" },
			$$inline: true
		});

	const icon2 = new Icon({
			props: { type: "heart-filled", is: "danger" },
			$$inline: true
		});

	const icon3 = new Icon({
			props: { type: "heart-filled", is: "danger" },
			$$inline: true
		});

	const icon4 = new Icon({
			props: { type: "heart-filled", is: "danger" },
			$$inline: true
		});

	const block = {
		c: function create() {
			section = element("section");
			create_component(icon0.$$.fragment);
			t0 = space();
			create_component(icon1.$$.fragment);
			t1 = space();
			create_component(icon2.$$.fragment);
			t2 = space();
			create_component(icon3.$$.fragment);
			t3 = space();
			create_component(icon4.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			claim_component(icon0.$$.fragment, section_nodes);
			t0 = claim_space(section_nodes);
			claim_component(icon1.$$.fragment, section_nodes);
			t1 = claim_space(section_nodes);
			claim_component(icon2.$$.fragment, section_nodes);
			t2 = claim_space(section_nodes);
			claim_component(icon3.$$.fragment, section_nodes);
			t3 = claim_space(section_nodes);
			claim_component(icon4.$$.fragment, section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(section, "class", "svelte-17bo5zk");
			add_location(section, file$2, 4, 0, 69);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			mount_component(icon0, section, null);
			append_dev(section, t0);
			mount_component(icon1, section, null);
			append_dev(section, t1);
			mount_component(icon2, section, null);
			append_dev(section, t2);
			mount_component(icon3, section, null);
			append_dev(section, t3);
			mount_component(icon4, section, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(icon0.$$.fragment, local);
			transition_in(icon1.$$.fragment, local);
			transition_in(icon2.$$.fragment, local);
			transition_in(icon3.$$.fragment, local);
			transition_in(icon4.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon0.$$.fragment, local);
			transition_out(icon1.$$.fragment, local);
			transition_out(icon2.$$.fragment, local);
			transition_out(icon3.$$.fragment, local);
			transition_out(icon4.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			destroy_component(icon0);
			destroy_component(icon1);
			destroy_component(icon2);
			destroy_component(icon3);
			destroy_component(icon4);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

class Rate extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Rate",
			options,
			id: create_fragment$2.name
		});
	}
}

/* src/components/Input.svelte generated by Svelte v3.16.7 */
const file$3 = "src/components/Input.svelte";

// (78:0) {:else}
function create_else_block(ctx) {
	let input;
	let dispose;

	let input_levels = [
		{ min: /*min*/ ctx[6] },
		{ max: /*max*/ ctx[7] },
		{ name: /*name*/ ctx[1] },
		{ list: /*list*/ ctx[8] },
		{ form: /*form*/ ctx[9] },
		{ align: /*align*/ ctx[2] },
		{ readOnly: /*readonly*/ ctx[10] },
		{ disabled: /*disabled*/ ctx[5] },
		{ required: /*required*/ ctx[11] },
		{ maxlength: /*maxlength*/ ctx[3] },
		{ placeholder: /*placeholder*/ ctx[12] },
		{ id: /*idProp*/ ctx[15] },
		{ class: /*classProp*/ ctx[13] },
		{ title: /*titleProp*/ ctx[17] },
		{ style: /*styleProp*/ ctx[20] },
		{ pattern: /*patternProp*/ ctx[21] },
		{ "aria-label": /*ariaLabelProp*/ ctx[18] },
		{
			autocomplete: /*autocompleteProp*/ ctx[19]
		},
		{ type: /*typeProp*/ ctx[16] }
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	const block = {
		c: function create() {
			input = element("input");
			this.h();
		},
		l: function claim(nodes) {
			input = claim_element(nodes, "INPUT", {
				min: true,
				max: true,
				name: true,
				list: true,
				form: true,
				align: true,
				readonly: true,
				disabled: true,
				required: true,
				maxlength: true,
				placeholder: true,
				id: true,
				class: true,
				title: true,
				style: true,
				pattern: true,
				"aria-label": true,
				autocomplete: true
			});

			this.h();
		},
		h: function hydrate() {
			set_attributes(input, input_data);
			toggle_class(input, "svelte-xp6uy5", true);
			add_location(input, file$3, 78, 4, 2801);

			dispose = [
				listen_dev(input, "input", /*input_input_handler*/ ctx[36]),
				listen_dev(input, "blur", /*blur_handler_1*/ ctx[37], false, false, false),
				listen_dev(input, "focus", /*focus_handler_1*/ ctx[38], false, false, false),
				listen_dev(input, "click", /*onClick*/ ctx[22], false, false, false)
			];
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			set_input_value(input, /*value*/ ctx[0]);
		},
		p: function update(ctx, dirty) {
			set_attributes(input, get_spread_update(input_levels, [
				dirty[0] & /*min*/ 64 && ({ min: /*min*/ ctx[6] }),
				dirty[0] & /*max*/ 128 && ({ max: /*max*/ ctx[7] }),
				dirty[0] & /*name*/ 2 && ({ name: /*name*/ ctx[1] }),
				dirty[0] & /*list*/ 256 && ({ list: /*list*/ ctx[8] }),
				dirty[0] & /*form*/ 512 && ({ form: /*form*/ ctx[9] }),
				dirty[0] & /*align*/ 4 && ({ align: /*align*/ ctx[2] }),
				dirty[0] & /*readonly*/ 1024 && ({ readOnly: /*readonly*/ ctx[10] }),
				dirty[0] & /*disabled*/ 32 && ({ disabled: /*disabled*/ ctx[5] }),
				dirty[0] & /*required*/ 2048 && ({ required: /*required*/ ctx[11] }),
				dirty[0] & /*maxlength*/ 8 && ({ maxlength: /*maxlength*/ ctx[3] }),
				dirty[0] & /*placeholder*/ 4096 && ({ placeholder: /*placeholder*/ ctx[12] }),
				dirty[0] & /*idProp*/ 32768 && ({ id: /*idProp*/ ctx[15] }),
				dirty[0] & /*classProp*/ 8192 && ({ class: /*classProp*/ ctx[13] }),
				dirty[0] & /*titleProp*/ 131072 && ({ title: /*titleProp*/ ctx[17] }),
				dirty[0] & /*styleProp*/ 1048576 && ({ style: /*styleProp*/ ctx[20] }),
				dirty[0] & /*patternProp*/ 2097152 && ({ pattern: /*patternProp*/ ctx[21] }),
				dirty[0] & /*ariaLabelProp*/ 262144 && ({ "aria-label": /*ariaLabelProp*/ ctx[18] }),
				dirty[0] & /*autocompleteProp*/ 524288 && ({
					autocomplete: /*autocompleteProp*/ ctx[19]
				}),
				dirty[0] & /*typeProp*/ 65536 && ({ type: /*typeProp*/ ctx[16] })
			]));

			if (dirty[0] & /*value*/ 1 && input.value !== /*value*/ ctx[0]) {
				set_input_value(input, /*value*/ ctx[0]);
			}

			toggle_class(input, "svelte-xp6uy5", true);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(78:0) {:else}",
		ctx
	});

	return block;
}

// (52:0) {#if rows}
function create_if_block(ctx) {
	let textarea;
	let dispose;

	let textarea_levels = [
		{ min: /*min*/ ctx[6] },
		{ max: /*max*/ ctx[7] },
		{ rows: /*rows*/ ctx[4] },
		{ name: /*name*/ ctx[1] },
		{ form: /*form*/ ctx[9] },
		{ align: /*align*/ ctx[2] },
		{ readOnly: /*readonly*/ ctx[10] },
		{ disabled: /*disabled*/ ctx[5] },
		{ required: /*required*/ ctx[11] },
		{ maxlength: /*maxlength*/ ctx[3] },
		{ placeholder: /*placeholder*/ ctx[12] },
		{ id: /*idProp*/ ctx[15] },
		{ class: /*classProp*/ ctx[13] },
		{ title: /*titleProp*/ ctx[17] },
		{ style: /*styleProp*/ ctx[20] },
		{ pattern: /*patternProp*/ ctx[21] },
		{ "aria-label": /*ariaLabelProp*/ ctx[18] },
		{
			autocomplete: /*autocompleteProp*/ ctx[19]
		},
		{ type: /*typeProp*/ ctx[16] }
	];

	let textarea_data = {};

	for (let i = 0; i < textarea_levels.length; i += 1) {
		textarea_data = assign(textarea_data, textarea_levels[i]);
	}

	const block = {
		c: function create() {
			textarea = element("textarea");
			this.h();
		},
		l: function claim(nodes) {
			textarea = claim_element(nodes, "TEXTAREA", {
				min: true,
				max: true,
				rows: true,
				name: true,
				form: true,
				align: true,
				readonly: true,
				disabled: true,
				required: true,
				maxlength: true,
				placeholder: true,
				id: true,
				class: true,
				title: true,
				style: true,
				pattern: true,
				"aria-label": true,
				autocomplete: true
			});

			children(textarea).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(textarea, textarea_data);
			toggle_class(textarea, "svelte-xp6uy5", true);
			add_location(textarea, file$3, 52, 4, 2081);

			dispose = [
				listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[33]),
				listen_dev(textarea, "blur", /*blur_handler*/ ctx[34], false, false, false),
				listen_dev(textarea, "focus", /*focus_handler*/ ctx[35], false, false, false),
				listen_dev(textarea, "click", /*onClick*/ ctx[22], false, false, false)
			];
		},
		m: function mount(target, anchor) {
			insert_dev(target, textarea, anchor);
			set_input_value(textarea, /*value*/ ctx[0]);
		},
		p: function update(ctx, dirty) {
			set_attributes(textarea, get_spread_update(textarea_levels, [
				dirty[0] & /*min*/ 64 && ({ min: /*min*/ ctx[6] }),
				dirty[0] & /*max*/ 128 && ({ max: /*max*/ ctx[7] }),
				dirty[0] & /*rows*/ 16 && ({ rows: /*rows*/ ctx[4] }),
				dirty[0] & /*name*/ 2 && ({ name: /*name*/ ctx[1] }),
				dirty[0] & /*form*/ 512 && ({ form: /*form*/ ctx[9] }),
				dirty[0] & /*align*/ 4 && ({ align: /*align*/ ctx[2] }),
				dirty[0] & /*readonly*/ 1024 && ({ readOnly: /*readonly*/ ctx[10] }),
				dirty[0] & /*disabled*/ 32 && ({ disabled: /*disabled*/ ctx[5] }),
				dirty[0] & /*required*/ 2048 && ({ required: /*required*/ ctx[11] }),
				dirty[0] & /*maxlength*/ 8 && ({ maxlength: /*maxlength*/ ctx[3] }),
				dirty[0] & /*placeholder*/ 4096 && ({ placeholder: /*placeholder*/ ctx[12] }),
				dirty[0] & /*idProp*/ 32768 && ({ id: /*idProp*/ ctx[15] }),
				dirty[0] & /*classProp*/ 8192 && ({ class: /*classProp*/ ctx[13] }),
				dirty[0] & /*titleProp*/ 131072 && ({ title: /*titleProp*/ ctx[17] }),
				dirty[0] & /*styleProp*/ 1048576 && ({ style: /*styleProp*/ ctx[20] }),
				dirty[0] & /*patternProp*/ 2097152 && ({ pattern: /*patternProp*/ ctx[21] }),
				dirty[0] & /*ariaLabelProp*/ 262144 && ({ "aria-label": /*ariaLabelProp*/ ctx[18] }),
				dirty[0] & /*autocompleteProp*/ 524288 && ({
					autocomplete: /*autocompleteProp*/ ctx[19]
				}),
				dirty[0] & /*typeProp*/ 65536 && ({ type: /*typeProp*/ ctx[16] })
			]));

			if (dirty[0] & /*value*/ 1) {
				set_input_value(textarea, /*value*/ ctx[0]);
			}

			toggle_class(textarea, "svelte-xp6uy5", true);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(textarea);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(52:0) {#if rows}",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*rows*/ ctx[4]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { name } = $$props;
	let { value = "" } = $$props;
	let { style = {} } = $$props;
	let { type = "text" } = $$props;
	let { id = undefined } = $$props;
	let { align = undefined } = $$props;
	let { maxlength = 1000 } = $$props;
	let { rows = undefined } = $$props;
	let { disabled = false } = $$props;
	let { title = undefined } = $$props;
	let { invalid = undefined } = $$props;
	let { min = undefined } = $$props;
	let { max = undefined } = $$props;
	let { list = undefined } = $$props;
	let { form = undefined } = $$props;
	let { readonly = undefined } = $$props;
	let { required = undefined } = $$props;
	let { pattern = undefined } = $$props;
	let { autocomplete = true } = $$props;
	let { autoselect = false } = $$props;
	let { ariaLabel = undefined } = $$props;
	let { placeholder = undefined } = $$props;
	let idProp = id || name;
	let typeProp = type === "number" ? "text" : type;
	let titleProp = title || ariaLabel || placeholder;
	let ariaLabelProp = ariaLabel || title || placeholder;
	let autocompleteProp = autocomplete ? "on" : "off";
	let styleProp = toCSSString({ ...style, textAlign: align });
	let patternProp = type === "number" && !pattern ? "[0-9]*" : pattern;

	function onClick(e) {
		!disabled && dispatch("click", e);
		!disabled && autoselect && e.target.select();
	}

	function textarea_input_handler() {
		value = this.value;
		$$invalidate(0, value);
	}

	const blur_handler = e => !disabled && dispatch("blur", e);
	const focus_handler = e => !disabled && dispatch("focus", e);

	function input_input_handler() {
		value = this.value;
		$$invalidate(0, value);
	}

	const blur_handler_1 = e => !disabled && dispatch("blur", e);
	const focus_handler_1 = e => !disabled && dispatch("focus", e);

	$$self.$set = $$new_props => {
		$$invalidate(32, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("name" in $$new_props) $$invalidate(1, name = $$new_props.name);
		if ("value" in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ("style" in $$new_props) $$invalidate(23, style = $$new_props.style);
		if ("type" in $$new_props) $$invalidate(24, type = $$new_props.type);
		if ("id" in $$new_props) $$invalidate(25, id = $$new_props.id);
		if ("align" in $$new_props) $$invalidate(2, align = $$new_props.align);
		if ("maxlength" in $$new_props) $$invalidate(3, maxlength = $$new_props.maxlength);
		if ("rows" in $$new_props) $$invalidate(4, rows = $$new_props.rows);
		if ("disabled" in $$new_props) $$invalidate(5, disabled = $$new_props.disabled);
		if ("title" in $$new_props) $$invalidate(26, title = $$new_props.title);
		if ("invalid" in $$new_props) $$invalidate(27, invalid = $$new_props.invalid);
		if ("min" in $$new_props) $$invalidate(6, min = $$new_props.min);
		if ("max" in $$new_props) $$invalidate(7, max = $$new_props.max);
		if ("list" in $$new_props) $$invalidate(8, list = $$new_props.list);
		if ("form" in $$new_props) $$invalidate(9, form = $$new_props.form);
		if ("readonly" in $$new_props) $$invalidate(10, readonly = $$new_props.readonly);
		if ("required" in $$new_props) $$invalidate(11, required = $$new_props.required);
		if ("pattern" in $$new_props) $$invalidate(28, pattern = $$new_props.pattern);
		if ("autocomplete" in $$new_props) $$invalidate(29, autocomplete = $$new_props.autocomplete);
		if ("autoselect" in $$new_props) $$invalidate(30, autoselect = $$new_props.autoselect);
		if ("ariaLabel" in $$new_props) $$invalidate(31, ariaLabel = $$new_props.ariaLabel);
		if ("placeholder" in $$new_props) $$invalidate(12, placeholder = $$new_props.placeholder);
	};

	$$self.$capture_state = () => {
		return {
			name,
			value,
			style,
			type,
			id,
			align,
			maxlength,
			rows,
			disabled,
			title,
			invalid,
			min,
			max,
			list,
			form,
			readonly,
			required,
			pattern,
			autocomplete,
			autoselect,
			ariaLabel,
			placeholder,
			idProp,
			typeProp,
			titleProp,
			ariaLabelProp,
			autocompleteProp,
			styleProp,
			patternProp,
			classProp
		};
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(32, $$props = assign(assign({}, $$props), $$new_props));
		if ("name" in $$props) $$invalidate(1, name = $$new_props.name);
		if ("value" in $$props) $$invalidate(0, value = $$new_props.value);
		if ("style" in $$props) $$invalidate(23, style = $$new_props.style);
		if ("type" in $$props) $$invalidate(24, type = $$new_props.type);
		if ("id" in $$props) $$invalidate(25, id = $$new_props.id);
		if ("align" in $$props) $$invalidate(2, align = $$new_props.align);
		if ("maxlength" in $$props) $$invalidate(3, maxlength = $$new_props.maxlength);
		if ("rows" in $$props) $$invalidate(4, rows = $$new_props.rows);
		if ("disabled" in $$props) $$invalidate(5, disabled = $$new_props.disabled);
		if ("title" in $$props) $$invalidate(26, title = $$new_props.title);
		if ("invalid" in $$props) $$invalidate(27, invalid = $$new_props.invalid);
		if ("min" in $$props) $$invalidate(6, min = $$new_props.min);
		if ("max" in $$props) $$invalidate(7, max = $$new_props.max);
		if ("list" in $$props) $$invalidate(8, list = $$new_props.list);
		if ("form" in $$props) $$invalidate(9, form = $$new_props.form);
		if ("readonly" in $$props) $$invalidate(10, readonly = $$new_props.readonly);
		if ("required" in $$props) $$invalidate(11, required = $$new_props.required);
		if ("pattern" in $$props) $$invalidate(28, pattern = $$new_props.pattern);
		if ("autocomplete" in $$props) $$invalidate(29, autocomplete = $$new_props.autocomplete);
		if ("autoselect" in $$props) $$invalidate(30, autoselect = $$new_props.autoselect);
		if ("ariaLabel" in $$props) $$invalidate(31, ariaLabel = $$new_props.ariaLabel);
		if ("placeholder" in $$props) $$invalidate(12, placeholder = $$new_props.placeholder);
		if ("idProp" in $$props) $$invalidate(15, idProp = $$new_props.idProp);
		if ("typeProp" in $$props) $$invalidate(16, typeProp = $$new_props.typeProp);
		if ("titleProp" in $$props) $$invalidate(17, titleProp = $$new_props.titleProp);
		if ("ariaLabelProp" in $$props) $$invalidate(18, ariaLabelProp = $$new_props.ariaLabelProp);
		if ("autocompleteProp" in $$props) $$invalidate(19, autocompleteProp = $$new_props.autocompleteProp);
		if ("styleProp" in $$props) $$invalidate(20, styleProp = $$new_props.styleProp);
		if ("patternProp" in $$props) $$invalidate(21, patternProp = $$new_props.patternProp);
		if ("classProp" in $$props) $$invalidate(13, classProp = $$new_props.classProp);
	};

	let classProp;

	$$self.$$.update = () => {
		 $$invalidate(13, classProp = classnames("inp", "theme-bg-color", $$props.class, { disabled, readonly, required, invalid }));
	};

	$$props = exclude_internal_props($$props);

	return [
		value,
		name,
		align,
		maxlength,
		rows,
		disabled,
		min,
		max,
		list,
		form,
		readonly,
		required,
		placeholder,
		classProp,
		dispatch,
		idProp,
		typeProp,
		titleProp,
		ariaLabelProp,
		autocompleteProp,
		styleProp,
		patternProp,
		onClick,
		style,
		type,
		id,
		title,
		invalid,
		pattern,
		autocomplete,
		autoselect,
		ariaLabel,
		$$props,
		textarea_input_handler,
		blur_handler,
		focus_handler,
		input_input_handler,
		blur_handler_1,
		focus_handler_1
	];
}

class Input extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance$2,
			create_fragment$3,
			safe_not_equal,
			{
				name: 1,
				value: 0,
				style: 23,
				type: 24,
				id: 25,
				align: 2,
				maxlength: 3,
				rows: 4,
				disabled: 5,
				title: 26,
				invalid: 27,
				min: 6,
				max: 7,
				list: 8,
				form: 9,
				readonly: 10,
				required: 11,
				pattern: 28,
				autocomplete: 29,
				autoselect: 30,
				ariaLabel: 31,
				placeholder: 12
			},
			[-1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Input",
			options,
			id: create_fragment$3.name
		});

		const { ctx } = this.$$;
		const props = options.props || ({});

		if (/*name*/ ctx[1] === undefined && !("name" in props)) {
			console.warn("<Input> was created without expected prop 'name'");
		}
	}

	get name() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get type() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get align() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set align(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get maxlength() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set maxlength(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rows() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rows(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get invalid() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set invalid(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get min() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set min(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get max() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set max(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get list() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set list(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get form() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set form(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get readonly() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set readonly(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get required() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set required(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get pattern() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set pattern(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get autocomplete() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set autocomplete(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get autoselect() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set autoselect(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ariaLabel() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ariaLabel(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get placeholder() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set placeholder(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Picture.svelte generated by Svelte v3.16.7 */
const file$4 = "src/components/Picture.svelte";

function create_fragment$4(ctx) {
	let figure;
	let img;
	let img_src_value;
	let t;
	let figcaption;
	let figure_class_value;
	let current;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[13].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);

	const block = {
		c: function create() {
			figure = element("figure");
			img = element("img");
			t = space();
			figcaption = element("figcaption");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			figure = claim_element(nodes, "FIGURE", { class: true });
			var figure_nodes = children(figure);

			img = claim_element(figure_nodes, "IMG", {
				id: true,
				alt: true,
				src: true,
				width: true,
				height: true,
				class: true
			});

			t = claim_space(figure_nodes);
			figcaption = claim_element(figure_nodes, "FIGCAPTION", {});
			var figcaption_nodes = children(figcaption);
			if (default_slot) default_slot.l(figcaption_nodes);
			figcaption_nodes.forEach(detach_dev);
			figure_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "id", /*id*/ ctx[2]);
			attr_dev(img, "alt", /*alt*/ ctx[1]);
			if (img.src !== (img_src_value = /*src*/ ctx[0])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "width", /*width*/ ctx[3]);
			attr_dev(img, "height", /*height*/ ctx[4]);
			attr_dev(img, "class", "pic svelte-1rkw8xk");
			add_location(img, file$4, 30, 4, 654);
			add_location(figcaption, file$4, 41, 4, 849);
			attr_dev(figure, "class", figure_class_value = "" + (null_to_empty(/*wrapClassProp*/ ctx[5]) + " svelte-1rkw8xk"));
			add_location(figure, file$4, 29, 0, 619);

			dispose = [
				listen_dev(img, "load", /*onLoad*/ ctx[6], false, false, false),
				listen_dev(img, "error", /*onError*/ ctx[7], false, false, false)
			];
		},
		m: function mount(target, anchor) {
			insert_dev(target, figure, anchor);
			append_dev(figure, img);
			append_dev(figure, t);
			append_dev(figure, figcaption);

			if (default_slot) {
				default_slot.m(figcaption, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*id*/ 4) {
				attr_dev(img, "id", /*id*/ ctx[2]);
			}

			if (!current || dirty & /*alt*/ 2) {
				attr_dev(img, "alt", /*alt*/ ctx[1]);
			}

			if (!current || dirty & /*src*/ 1 && img.src !== (img_src_value = /*src*/ ctx[0])) {
				attr_dev(img, "src", img_src_value);
			}

			if (!current || dirty & /*width*/ 8) {
				attr_dev(img, "width", /*width*/ ctx[3]);
			}

			if (!current || dirty & /*height*/ 16) {
				attr_dev(img, "height", /*height*/ ctx[4]);
			}

			if (default_slot && default_slot.p && dirty & /*$$scope*/ 4096) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[12], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, null));
			}

			if (!current || dirty & /*wrapClassProp*/ 32 && figure_class_value !== (figure_class_value = "" + (null_to_empty(/*wrapClassProp*/ ctx[5]) + " svelte-1rkw8xk"))) {
				attr_dev(figure, "class", figure_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(figure);
			if (default_slot) default_slot.d(detaching);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { src } = $$props;
	let { alt } = $$props;
	let { id = undefined } = $$props;
	let { width = undefined } = $$props;
	let { height = undefined } = $$props;
	let loading = true;
	let isError = false;

	function onLoad(e) {
		$$invalidate(8, loading = false);
		dispatch("load", e);
	}

	function onError(e) {
		$$invalidate(8, loading = false);
		$$invalidate(9, isError = true);
		dispatch("error", e);
	}

	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$new_props => {
		$$invalidate(11, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("src" in $$new_props) $$invalidate(0, src = $$new_props.src);
		if ("alt" in $$new_props) $$invalidate(1, alt = $$new_props.alt);
		if ("id" in $$new_props) $$invalidate(2, id = $$new_props.id);
		if ("width" in $$new_props) $$invalidate(3, width = $$new_props.width);
		if ("height" in $$new_props) $$invalidate(4, height = $$new_props.height);
		if ("$$scope" in $$new_props) $$invalidate(12, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => {
		return {
			src,
			alt,
			id,
			width,
			height,
			loading,
			isError,
			wrapClassProp
		};
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(11, $$props = assign(assign({}, $$props), $$new_props));
		if ("src" in $$props) $$invalidate(0, src = $$new_props.src);
		if ("alt" in $$props) $$invalidate(1, alt = $$new_props.alt);
		if ("id" in $$props) $$invalidate(2, id = $$new_props.id);
		if ("width" in $$props) $$invalidate(3, width = $$new_props.width);
		if ("height" in $$props) $$invalidate(4, height = $$new_props.height);
		if ("loading" in $$props) $$invalidate(8, loading = $$new_props.loading);
		if ("isError" in $$props) $$invalidate(9, isError = $$new_props.isError);
		if ("wrapClassProp" in $$props) $$invalidate(5, wrapClassProp = $$new_props.wrapClassProp);
	};

	let wrapClassProp;

	$$self.$$.update = () => {
		 $$invalidate(5, wrapClassProp = classnames("picture", $$props.class, { loading, isError }));
	};

	$$props = exclude_internal_props($$props);

	return [
		src,
		alt,
		id,
		width,
		height,
		wrapClassProp,
		onLoad,
		onError,
		loading,
		isError,
		dispatch,
		$$props,
		$$scope,
		$$slots
	];
}

class Picture extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$3, create_fragment$4, safe_not_equal, {
			src: 0,
			alt: 1,
			id: 2,
			width: 3,
			height: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Picture",
			options,
			id: create_fragment$4.name
		});

		const { ctx } = this.$$;
		const props = options.props || ({});

		if (/*src*/ ctx[0] === undefined && !("src" in props)) {
			console.warn("<Picture> was created without expected prop 'src'");
		}

		if (/*alt*/ ctx[1] === undefined && !("alt" in props)) {
			console.warn("<Picture> was created without expected prop 'alt'");
		}
	}

	get src() {
		throw new Error("<Picture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set src(value) {
		throw new Error("<Picture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get alt() {
		throw new Error("<Picture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set alt(value) {
		throw new Error("<Picture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Picture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Picture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get width() {
		throw new Error("<Picture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<Picture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<Picture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<Picture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Avatar.svelte generated by Svelte v3.16.7 */
const file$5 = "src/components/Avatar.svelte";

function create_fragment$5(ctx) {
	let div;
	let div_class_value;
	let current;

	const picture = new Picture({
			props: { src: /*src*/ ctx[0], alt: /*alt*/ ctx[1] },
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(picture.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(picture.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", div_class_value = "" + (null_to_empty(/*classProp*/ ctx[2]) + " svelte-1grex72"));
			add_location(div, file$5, 11, 0, 266);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(picture, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const picture_changes = {};
			if (dirty & /*src*/ 1) picture_changes.src = /*src*/ ctx[0];
			if (dirty & /*alt*/ 2) picture_changes.alt = /*alt*/ ctx[1];
			picture.$set(picture_changes);

			if (!current || dirty & /*classProp*/ 4 && div_class_value !== (div_class_value = "" + (null_to_empty(/*classProp*/ ctx[2]) + " svelte-1grex72"))) {
				attr_dev(div, "class", div_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(picture.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(picture.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(picture);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$5.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	let { src } = $$props;
	let { alt } = $$props;
	let { size = "medium" } = $$props;

	$$self.$set = $$new_props => {
		$$invalidate(4, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("src" in $$new_props) $$invalidate(0, src = $$new_props.src);
		if ("alt" in $$new_props) $$invalidate(1, alt = $$new_props.alt);
		if ("size" in $$new_props) $$invalidate(3, size = $$new_props.size);
	};

	$$self.$capture_state = () => {
		return { src, alt, size, classProp };
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(4, $$props = assign(assign({}, $$props), $$new_props));
		if ("src" in $$props) $$invalidate(0, src = $$new_props.src);
		if ("alt" in $$props) $$invalidate(1, alt = $$new_props.alt);
		if ("size" in $$props) $$invalidate(3, size = $$new_props.size);
		if ("classProp" in $$props) $$invalidate(2, classProp = $$new_props.classProp);
	};

	let classProp;

	$$self.$$.update = () => {
		 $$invalidate(2, classProp = classnames("ava", size, $$props.class));
	};

	$$props = exclude_internal_props($$props);
	return [src, alt, classProp, size];
}

class Avatar extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$4, create_fragment$5, safe_not_equal, { src: 0, alt: 1, size: 3 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Avatar",
			options,
			id: create_fragment$5.name
		});

		const { ctx } = this.$$;
		const props = options.props || ({});

		if (/*src*/ ctx[0] === undefined && !("src" in props)) {
			console.warn("<Avatar> was created without expected prop 'src'");
		}

		if (/*alt*/ ctx[1] === undefined && !("alt" in props)) {
			console.warn("<Avatar> was created without expected prop 'alt'");
		}
	}

	get src() {
		throw new Error("<Avatar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set src(value) {
		throw new Error("<Avatar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get alt() {
		throw new Error("<Avatar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set alt(value) {
		throw new Error("<Avatar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get size() {
		throw new Error("<Avatar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Avatar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Button.svelte generated by Svelte v3.16.7 */
const file$6 = "src/components/Button.svelte";

// (32:0) {:else}
function create_else_block$1(ctx) {
	let button;
	let button_class_value;
	let current;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[13].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);

	const block = {
		c: function create() {
			button = element("button");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", {
				id: true,
				type: true,
				disabled: true,
				title: true,
				class: true,
				"aria-label": true
			});

			var button_nodes = children(button);
			if (default_slot) default_slot.l(button_nodes);
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "id", /*id*/ ctx[0]);
			attr_dev(button, "type", /*type*/ ctx[2]);
			button.disabled = /*disabled*/ ctx[3];
			attr_dev(button, "title", /*titleProp*/ ctx[6]);
			attr_dev(button, "class", button_class_value = "" + (null_to_empty(/*classProp*/ ctx[4]) + " svelte-kgv1bk"));
			attr_dev(button, "aria-label", /*ariaLabelProp*/ ctx[7]);
			add_location(button, file$6, 32, 4, 805);
			dispose = listen_dev(button, "click", /*click_handler_1*/ ctx[15], false, false, false);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);

			if (default_slot) {
				default_slot.m(button, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot && default_slot.p && dirty & /*$$scope*/ 4096) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[12], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, null));
			}

			if (!current || dirty & /*id*/ 1) {
				attr_dev(button, "id", /*id*/ ctx[0]);
			}

			if (!current || dirty & /*type*/ 4) {
				attr_dev(button, "type", /*type*/ ctx[2]);
			}

			if (!current || dirty & /*disabled*/ 8) {
				prop_dev(button, "disabled", /*disabled*/ ctx[3]);
			}

			if (!current || dirty & /*classProp*/ 16 && button_class_value !== (button_class_value = "" + (null_to_empty(/*classProp*/ ctx[4]) + " svelte-kgv1bk"))) {
				attr_dev(button, "class", button_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			if (default_slot) default_slot.d(detaching);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$1.name,
		type: "else",
		source: "(32:0) {:else}",
		ctx
	});

	return block;
}

// (21:0) {#if href}
function create_if_block$1(ctx) {
	let a;
	let a_class_value;
	let current;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[13].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);

	const block = {
		c: function create() {
			a = element("a");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", {
				id: true,
				href: true,
				title: true,
				class: true,
				"aria-label": true
			});

			var a_nodes = children(a);
			if (default_slot) default_slot.l(a_nodes);
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "id", /*id*/ ctx[0]);
			attr_dev(a, "href", /*href*/ ctx[1]);
			attr_dev(a, "title", /*titleProp*/ ctx[6]);
			attr_dev(a, "class", a_class_value = "" + (null_to_empty(/*classProp*/ ctx[4]) + " svelte-kgv1bk"));
			attr_dev(a, "aria-label", /*ariaLabelProp*/ ctx[7]);
			add_location(a, file$6, 21, 4, 554);
			dispose = listen_dev(a, "click", /*click_handler*/ ctx[14], false, false, false);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);

			if (default_slot) {
				default_slot.m(a, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot && default_slot.p && dirty & /*$$scope*/ 4096) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[12], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, null));
			}

			if (!current || dirty & /*id*/ 1) {
				attr_dev(a, "id", /*id*/ ctx[0]);
			}

			if (!current || dirty & /*href*/ 2) {
				attr_dev(a, "href", /*href*/ ctx[1]);
			}

			if (!current || dirty & /*classProp*/ 16 && a_class_value !== (a_class_value = "" + (null_to_empty(/*classProp*/ ctx[4]) + " svelte-kgv1bk"))) {
				attr_dev(a, "class", a_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			if (default_slot) default_slot.d(detaching);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(21:0) {#if href}",
		ctx
	});

	return block;
}

function create_fragment$6(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$1, create_else_block$1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*href*/ ctx[1]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$6.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$5($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { is = undefined } = $$props;
	let { id = undefined } = $$props;
	let { href = undefined } = $$props;
	let { type = "button" } = $$props;
	let { title = undefined } = $$props;
	let { disabled = false } = $$props;
	let { ariaLabel = undefined } = $$props;
	let titleProp = title || ariaLabel;
	let ariaLabelProp = ariaLabel || title;
	let { $$slots = {}, $$scope } = $$props;
	const click_handler = e => !disabled && dispatch("click", e);
	const click_handler_1 = e => !disabled && dispatch("click", e);

	$$self.$set = $$new_props => {
		$$invalidate(11, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("is" in $$new_props) $$invalidate(8, is = $$new_props.is);
		if ("id" in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ("href" in $$new_props) $$invalidate(1, href = $$new_props.href);
		if ("type" in $$new_props) $$invalidate(2, type = $$new_props.type);
		if ("title" in $$new_props) $$invalidate(9, title = $$new_props.title);
		if ("disabled" in $$new_props) $$invalidate(3, disabled = $$new_props.disabled);
		if ("ariaLabel" in $$new_props) $$invalidate(10, ariaLabel = $$new_props.ariaLabel);
		if ("$$scope" in $$new_props) $$invalidate(12, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => {
		return {
			is,
			id,
			href,
			type,
			title,
			disabled,
			ariaLabel,
			titleProp,
			ariaLabelProp,
			classProp
		};
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(11, $$props = assign(assign({}, $$props), $$new_props));
		if ("is" in $$props) $$invalidate(8, is = $$new_props.is);
		if ("id" in $$props) $$invalidate(0, id = $$new_props.id);
		if ("href" in $$props) $$invalidate(1, href = $$new_props.href);
		if ("type" in $$props) $$invalidate(2, type = $$new_props.type);
		if ("title" in $$props) $$invalidate(9, title = $$new_props.title);
		if ("disabled" in $$props) $$invalidate(3, disabled = $$new_props.disabled);
		if ("ariaLabel" in $$props) $$invalidate(10, ariaLabel = $$new_props.ariaLabel);
		if ("titleProp" in $$props) $$invalidate(6, titleProp = $$new_props.titleProp);
		if ("ariaLabelProp" in $$props) $$invalidate(7, ariaLabelProp = $$new_props.ariaLabelProp);
		if ("classProp" in $$props) $$invalidate(4, classProp = $$new_props.classProp);
	};

	let classProp;

	$$self.$$.update = () => {
		 $$invalidate(4, classProp = classnames("btn", is, $$props.class, { disabled }));
	};

	$$props = exclude_internal_props($$props);

	return [
		id,
		href,
		type,
		disabled,
		classProp,
		dispatch,
		titleProp,
		ariaLabelProp,
		is,
		title,
		ariaLabel,
		$$props,
		$$scope,
		$$slots,
		click_handler,
		click_handler_1
	];
}

class Button extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$5, create_fragment$6, safe_not_equal, {
			is: 8,
			id: 0,
			href: 1,
			type: 2,
			title: 9,
			disabled: 3,
			ariaLabel: 10
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Button",
			options,
			id: create_fragment$6.name
		});
	}

	get is() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set is(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get href() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set href(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get type() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ariaLabel() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ariaLabel(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Progress.svelte generated by Svelte v3.16.7 */
const file$7 = "src/components/Progress.svelte";

function create_fragment$7(ctx) {
	let div2;
	let div1;
	let div0;
	let div0_style_value;
	let div2_class_value;

	const block = {
		c: function create() {
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", {
				id: true,
				class: true,
				title: true,
				"aria-label": true,
				role: true,
				"aria-valuemin": true,
				"aria-valuemax": true,
				"aria-valuenow": true
			});

			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true, style: true });
			children(div0).forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "progress-core svelte-1ooklb7");
			attr_dev(div0, "style", div0_style_value = `width:${/*val*/ ctx[1]}%`);
			add_location(div0, file$7, 34, 8, 942);
			attr_dev(div1, "class", "progress-inner-frame svelte-1ooklb7");
			add_location(div1, file$7, 33, 4, 899);
			attr_dev(div2, "id", /*id*/ ctx[0]);
			attr_dev(div2, "class", div2_class_value = "" + (null_to_empty(/*classProp*/ ctx[4]) + " svelte-1ooklb7"));
			attr_dev(div2, "title", /*titleProp*/ ctx[2]);
			attr_dev(div2, "aria-label", /*ariaLabelProp*/ ctx[3]);
			attr_dev(div2, "role", "progressbar");
			attr_dev(div2, "aria-valuemin", "0");
			attr_dev(div2, "aria-valuemax", "100");
			attr_dev(div2, "aria-valuenow", /*val*/ ctx[1]);
			add_location(div2, file$7, 23, 0, 679);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div1);
			append_dev(div1, div0);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*val*/ 2 && div0_style_value !== (div0_style_value = `width:${/*val*/ ctx[1]}%`)) {
				attr_dev(div0, "style", div0_style_value);
			}

			if (dirty & /*id*/ 1) {
				attr_dev(div2, "id", /*id*/ ctx[0]);
			}

			if (dirty & /*classProp*/ 16 && div2_class_value !== (div2_class_value = "" + (null_to_empty(/*classProp*/ ctx[4]) + " svelte-1ooklb7"))) {
				attr_dev(div2, "class", div2_class_value);
			}

			if (dirty & /*titleProp*/ 4) {
				attr_dev(div2, "title", /*titleProp*/ ctx[2]);
			}

			if (dirty & /*ariaLabelProp*/ 8) {
				attr_dev(div2, "aria-label", /*ariaLabelProp*/ ctx[3]);
			}

			if (dirty & /*val*/ 2) {
				attr_dev(div2, "aria-valuenow", /*val*/ ctx[1]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$7.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$6($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { id = undefined } = $$props;
	let { value = 0 } = $$props;
	let { title = undefined } = $$props;
	let { ariaLabel = undefined } = $$props;

	onMount(() => {
		setTimeout(
			() => $$invalidate(1, val = Number.isFinite(+value)
			? Math.max(0, Math.min(+value, 100))
			: 0),
			0
		);
	});

	$$self.$set = $$new_props => {
		$$invalidate(9, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("id" in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ("value" in $$new_props) $$invalidate(5, value = $$new_props.value);
		if ("title" in $$new_props) $$invalidate(6, title = $$new_props.title);
		if ("ariaLabel" in $$new_props) $$invalidate(7, ariaLabel = $$new_props.ariaLabel);
	};

	$$self.$capture_state = () => {
		return {
			id,
			value,
			title,
			ariaLabel,
			val,
			titleProp,
			ariaLabelProp,
			classProp
		};
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(9, $$props = assign(assign({}, $$props), $$new_props));
		if ("id" in $$props) $$invalidate(0, id = $$new_props.id);
		if ("value" in $$props) $$invalidate(5, value = $$new_props.value);
		if ("title" in $$props) $$invalidate(6, title = $$new_props.title);
		if ("ariaLabel" in $$props) $$invalidate(7, ariaLabel = $$new_props.ariaLabel);
		if ("val" in $$props) $$invalidate(1, val = $$new_props.val);
		if ("titleProp" in $$props) $$invalidate(2, titleProp = $$new_props.titleProp);
		if ("ariaLabelProp" in $$props) $$invalidate(3, ariaLabelProp = $$new_props.ariaLabelProp);
		if ("classProp" in $$props) $$invalidate(4, classProp = $$new_props.classProp);
	};

	let val;
	let titleProp;
	let ariaLabelProp;
	let classProp;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*title, val*/ 66) {
			 $$invalidate(2, titleProp = title || `Progress - ${val}%`);
		}

		if ($$self.$$.dirty & /*ariaLabel, val*/ 130) {
			 $$invalidate(3, ariaLabelProp = ariaLabel || `Progress - ${val}%`);
		}

		 $$invalidate(4, classProp = classnames("progress", $$props.class));
	};

	 $$invalidate(1, val = 0);
	$$props = exclude_internal_props($$props);
	return [id, val, titleProp, ariaLabelProp, classProp, value, title, ariaLabel];
}

class Progress extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$6, create_fragment$7, safe_not_equal, { id: 0, value: 5, title: 6, ariaLabel: 7 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Progress",
			options,
			id: create_fragment$7.name
		});
	}

	get id() {
		throw new Error("<Progress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Progress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<Progress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Progress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<Progress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Progress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ariaLabel() {
		throw new Error("<Progress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ariaLabel(value) {
		throw new Error("<Progress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Nav.svelte generated by Svelte v3.16.7 */

const file$8 = "src/components/Nav.svelte";

function create_fragment$8(ctx) {
	let nav;
	let ul;
	let li0;
	let a0;
	let t0;
	let t1;
	let li1;
	let a1;
	let t2;
	let t3;
	let li2;
	let a2;
	let t4;
	let t5;
	let button;
	let t6;
	let dispose;

	const block = {
		c: function create() {
			nav = element("nav");
			ul = element("ul");
			li0 = element("li");
			a0 = element("a");
			t0 = text("home");
			t1 = space();
			li1 = element("li");
			a1 = element("a");
			t2 = text("about");
			t3 = space();
			li2 = element("li");
			a2 = element("a");
			t4 = text("blog");
			t5 = space();
			button = element("button");
			t6 = text("Switch theme");
			this.h();
		},
		l: function claim(nodes) {
			nav = claim_element(nodes, "NAV", { class: true });
			var nav_nodes = children(nav);
			ul = claim_element(nav_nodes, "UL", {});
			var ul_nodes = children(ul);
			li0 = claim_element(ul_nodes, "LI", {});
			var li0_nodes = children(li0);
			a0 = claim_element(li0_nodes, "A", { href: true, class: true });
			var a0_nodes = children(a0);
			t0 = claim_text(a0_nodes, "home");
			a0_nodes.forEach(detach_dev);
			li0_nodes.forEach(detach_dev);
			t1 = claim_space(ul_nodes);
			li1 = claim_element(ul_nodes, "LI", {});
			var li1_nodes = children(li1);
			a1 = claim_element(li1_nodes, "A", { href: true, class: true });
			var a1_nodes = children(a1);
			t2 = claim_text(a1_nodes, "about");
			a1_nodes.forEach(detach_dev);
			li1_nodes.forEach(detach_dev);
			t3 = claim_space(ul_nodes);
			li2 = claim_element(ul_nodes, "LI", {});
			var li2_nodes = children(li2);
			a2 = claim_element(li2_nodes, "A", { rel: true, href: true, class: true });
			var a2_nodes = children(a2);
			t4 = claim_text(a2_nodes, "blog");
			a2_nodes.forEach(detach_dev);
			li2_nodes.forEach(detach_dev);
			ul_nodes.forEach(detach_dev);
			t5 = claim_space(nav_nodes);
			button = claim_element(nav_nodes, "BUTTON", { type: true });
			var button_nodes = children(button);
			t6 = claim_text(button_nodes, "Switch theme");
			button_nodes.forEach(detach_dev);
			nav_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a0, "href", ".");
			attr_dev(a0, "class", "svelte-8q888w");
			toggle_class(a0, "selected", /*segment*/ ctx[0] === undefined);
			add_location(a0, file$8, 15, 6, 341);
			add_location(li0, file$8, 15, 2, 337);
			attr_dev(a1, "href", "about");
			attr_dev(a1, "class", "svelte-8q888w");
			toggle_class(a1, "selected", /*segment*/ ctx[0] === "about");
			add_location(a1, file$8, 16, 6, 414);
			add_location(li1, file$8, 16, 2, 410);
			attr_dev(a2, "rel", "prefetch");
			attr_dev(a2, "href", "blog");
			attr_dev(a2, "class", "svelte-8q888w");
			toggle_class(a2, "selected", /*segment*/ ctx[0] === "blog");
			add_location(a2, file$8, 20, 6, 648);
			add_location(li2, file$8, 20, 2, 644);
			add_location(ul, file$8, 14, 1, 330);
			attr_dev(button, "type", "button");
			add_location(button, file$8, 23, 2, 738);
			attr_dev(nav, "class", "theme-bg svelte-8q888w");
			add_location(nav, file$8, 13, 0, 306);
			dispose = listen_dev(button, "click", /*changeTheme*/ ctx[1], false, false, false);
		},
		m: function mount(target, anchor) {
			insert_dev(target, nav, anchor);
			append_dev(nav, ul);
			append_dev(ul, li0);
			append_dev(li0, a0);
			append_dev(a0, t0);
			append_dev(ul, t1);
			append_dev(ul, li1);
			append_dev(li1, a1);
			append_dev(a1, t2);
			append_dev(ul, t3);
			append_dev(ul, li2);
			append_dev(li2, a2);
			append_dev(a2, t4);
			append_dev(nav, t5);
			append_dev(nav, button);
			append_dev(button, t6);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*segment, undefined*/ 1) {
				toggle_class(a0, "selected", /*segment*/ ctx[0] === undefined);
			}

			if (dirty & /*segment*/ 1) {
				toggle_class(a1, "selected", /*segment*/ ctx[0] === "about");
			}

			if (dirty & /*segment*/ 1) {
				toggle_class(a2, "selected", /*segment*/ ctx[0] === "blog");
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(nav);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$8.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$7($$self, $$props, $$invalidate) {
	let { segment } = $$props;
	let isDarkTheme = true;

	function changeTheme() {
		isDarkTheme = !isDarkTheme;
		document.body.classList.remove("theme-dark");
		document.body.classList.remove("theme-light");
		document.body.classList.add(isDarkTheme ? "theme-dark" : "theme-light");
	}

	const writable_props = ["segment"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Nav> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("segment" in $$props) $$invalidate(0, segment = $$props.segment);
	};

	$$self.$capture_state = () => {
		return { segment, isDarkTheme };
	};

	$$self.$inject_state = $$props => {
		if ("segment" in $$props) $$invalidate(0, segment = $$props.segment);
		if ("isDarkTheme" in $$props) isDarkTheme = $$props.isDarkTheme;
	};

	return [segment, changeTheme];
}

class Nav extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$7, create_fragment$8, safe_not_equal, { segment: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Nav",
			options,
			id: create_fragment$8.name
		});

		const { ctx } = this.$$;
		const props = options.props || ({});

		if (/*segment*/ ctx[0] === undefined && !("segment" in props)) {
			console.warn("<Nav> was created without expected prop 'segment'");
		}
	}

	get segment() {
		throw new Error("<Nav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set segment(value) {
		throw new Error("<Nav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Avatar as A, Button as B, Form as F, Input as I, Nav as N, Progress as P, Rate as R, Icon as a, Picture as b };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
