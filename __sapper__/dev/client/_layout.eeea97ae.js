import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, a0 as SearchLine, Q as Footer, p as space, e as element, o as create_component, A as text, r as claim_space, c as claim_element, b as children, q as claim_component, B as claim_text, f as detach_dev, h as add_location, g as attr_dev, a1 as toggle_class, k as insert_dev, l as append_dev, t as mount_component, x as transition_out, K as check_outros, w as transition_in, y as destroy_component, J as group_outros } from './index.4afd8a71.js';
import './index.5ab0bbcc.js';
import CharitiesList from './index.20984ad3.js';
import OrganizationsList from './index.9d6d2de0.js';

/* src/routes/lists/_layout.svelte generated by Svelte v3.16.7 */
const file = "src/routes/lists/_layout.svelte";

// (31:1) {:else}
function create_else_block(ctx) {
	let current;
	const charitieslist = new CharitiesList({ $$inline: true });

	const block = {
		c: function create() {
			create_component(charitieslist.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(charitieslist.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(charitieslist, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(charitieslist.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(charitieslist.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(charitieslist, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(31:1) {:else}",
		ctx
	});

	return block;
}

// (29:1) {#if segment === 'organizations'}
function create_if_block(ctx) {
	let current;
	const organizationslist = new OrganizationsList({ $$inline: true });

	const block = {
		c: function create() {
			create_component(organizationslist.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(organizationslist.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(organizationslist, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(organizationslist.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(organizationslist.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(organizationslist, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(29:1) {#if segment === 'organizations'}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let div0;
	let br0;
	let t1;
	let t2;
	let nav;
	let ul;
	let li0;
	let a0;
	let t3;
	let t4;
	let li1;
	let a1;
	let t5;
	let t6;
	let div1;
	let br1;
	let t7;
	let current_block_type_index;
	let if_block;
	let t8;
	let br2;
	let t9;
	let br3;
	let t10;
	let current;
	const searchline = new SearchLine({ $$inline: true });
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*segment*/ ctx[0] === "organizations") return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	const footer = new Footer({ $$inline: true });

	const block = {
		c: function create() {
			t0 = space();
			div0 = element("div");
			br0 = element("br");
			t1 = space();
			create_component(searchline.$$.fragment);
			t2 = space();
			nav = element("nav");
			ul = element("ul");
			li0 = element("li");
			a0 = element("a");
			t3 = text("list");
			t4 = space();
			li1 = element("li");
			a1 = element("a");
			t5 = text("organizations");
			t6 = space();
			div1 = element("div");
			br1 = element("br");
			t7 = space();
			if_block.c();
			t8 = space();
			br2 = element("br");
			t9 = space();
			br3 = element("br");
			t10 = space();
			create_component(footer.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			t0 = claim_space(nodes);
			div0 = claim_element(nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			br0 = claim_element(div0_nodes, "BR", {});
			t1 = claim_space(div0_nodes);
			claim_component(searchline.$$.fragment, div0_nodes);
			t2 = claim_space(div0_nodes);
			nav = claim_element(div0_nodes, "NAV", { class: true });
			var nav_nodes = children(nav);
			ul = claim_element(nav_nodes, "UL", { class: true });
			var ul_nodes = children(ul);
			li0 = claim_element(ul_nodes, "LI", { class: true });
			var li0_nodes = children(li0);
			a0 = claim_element(li0_nodes, "A", { rel: true, href: true, class: true });
			var a0_nodes = children(a0);
			t3 = claim_text(a0_nodes, "list");
			a0_nodes.forEach(detach_dev);
			li0_nodes.forEach(detach_dev);
			t4 = claim_space(ul_nodes);
			li1 = claim_element(ul_nodes, "LI", { class: true });
			var li1_nodes = children(li1);
			a1 = claim_element(li1_nodes, "A", { rel: true, href: true, class: true });
			var a1_nodes = children(a1);
			t5 = claim_text(a1_nodes, "organizations");
			a1_nodes.forEach(detach_dev);
			li1_nodes.forEach(detach_dev);
			ul_nodes.forEach(detach_dev);
			nav_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t6 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			br1 = claim_element(div1_nodes, "BR", {});
			t7 = claim_space(div1_nodes);
			if_block.l(div1_nodes);
			t8 = claim_space(div1_nodes);
			br2 = claim_element(div1_nodes, "BR", {});
			t9 = claim_space(div1_nodes);
			br3 = claim_element(div1_nodes, "BR", {});
			div1_nodes.forEach(detach_dev);
			t10 = claim_space(nodes);
			claim_component(footer.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			document.title = "Charitify - is the application for helping those in need.";
			add_location(br0, file, 13, 1, 344);
			attr_dev(a0, "rel", "prefetch");
			attr_dev(a0, "href", "lists");
			attr_dev(a0, "class", "svelte-1vo7cwi");
			toggle_class(a0, "selected", /*segment*/ ctx[0] === undefined);
			add_location(a0, file, 19, 7, 387);
			attr_dev(li0, "class", "svelte-1vo7cwi");
			add_location(li0, file, 19, 3, 383);
			attr_dev(a1, "rel", "prefetch");
			attr_dev(a1, "href", "lists/organizations");
			attr_dev(a1, "class", "svelte-1vo7cwi");
			toggle_class(a1, "selected", /*segment*/ ctx[0] === "organizations");
			add_location(a1, file, 20, 7, 478);
			attr_dev(li1, "class", "svelte-1vo7cwi");
			add_location(li1, file, 20, 3, 474);
			attr_dev(ul, "class", "svelte-1vo7cwi");
			add_location(ul, file, 18, 2, 375);
			attr_dev(nav, "class", "svelte-1vo7cwi");
			add_location(nav, file, 17, 1, 367);
			attr_dev(div0, "class", "search theme-bg container svelte-1vo7cwi");
			add_location(div0, file, 12, 0, 303);
			add_location(br1, file, 26, 1, 640);
			add_location(br2, file, 34, 1, 741);
			add_location(br3, file, 35, 1, 747);
			attr_dev(div1, "class", "list-wrap svelte-1vo7cwi");
			add_location(div1, file, 25, 0, 615);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, div0, anchor);
			append_dev(div0, br0);
			append_dev(div0, t1);
			mount_component(searchline, div0, null);
			append_dev(div0, t2);
			append_dev(div0, nav);
			append_dev(nav, ul);
			append_dev(ul, li0);
			append_dev(li0, a0);
			append_dev(a0, t3);
			append_dev(ul, t4);
			append_dev(ul, li1);
			append_dev(li1, a1);
			append_dev(a1, t5);
			insert_dev(target, t6, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, br1);
			append_dev(div1, t7);
			if_blocks[current_block_type_index].m(div1, null);
			append_dev(div1, t8);
			append_dev(div1, br2);
			append_dev(div1, t9);
			append_dev(div1, br3);
			insert_dev(target, t10, anchor);
			mount_component(footer, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*segment, undefined*/ 1) {
				toggle_class(a0, "selected", /*segment*/ ctx[0] === undefined);
			}

			if (dirty & /*segment*/ 1) {
				toggle_class(a1, "selected", /*segment*/ ctx[0] === "organizations");
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index !== previous_block_index) {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(div1, t8);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(searchline.$$.fragment, local);
			transition_in(if_block);
			transition_in(footer.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(searchline.$$.fragment, local);
			transition_out(if_block);
			transition_out(footer.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div0);
			destroy_component(searchline);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(div1);
			if_blocks[current_block_type_index].d();
			if (detaching) detach_dev(t10);
			destroy_component(footer, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { segment } = $$props;
	const writable_props = ["segment"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Layout> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("segment" in $$props) $$invalidate(0, segment = $$props.segment);
	};

	$$self.$capture_state = () => {
		return { segment };
	};

	$$self.$inject_state = $$props => {
		if ("segment" in $$props) $$invalidate(0, segment = $$props.segment);
	};

	return [segment];
}

class Layout extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { segment: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Layout",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || ({});

		if (/*segment*/ ctx[0] === undefined && !("segment" in props)) {
			console.warn("<Layout> was created without expected prop 'segment'");
		}
	}

	get segment() {
		throw new Error("<Layout>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set segment(value) {
		throw new Error("<Layout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Layout;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2xheW91dC5lZWVhOTdhZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3JvdXRlcy9saXN0cy9fbGF5b3V0LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c3ZlbHRlOmhlYWQ+XG5cdDx0aXRsZT5DaGFyaXRpZnkgLSBpcyB0aGUgYXBwbGljYXRpb24gZm9yIGhlbHBpbmcgdGhvc2UgaW4gbmVlZC48L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cblxuPHNjcmlwdD5cblx0aW1wb3J0IHsgU2VhcmNoTGluZSwgRm9vdGVyIH0gZnJvbSAnLi4vLi4vbGF5b3V0cydcblx0aW1wb3J0IENoYXJpdGllc0xpc3QgZnJvbSAnLi9pbmRleC5zdmVsdGUnXG5cdGltcG9ydCBPcmdhbml6YXRpb25zTGlzdCBmcm9tICcuL29yZ2FuaXphdGlvbnMvaW5kZXguc3ZlbHRlJ1xuXG5cdGV4cG9ydCBsZXQgc2VnbWVudFxuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJzZWFyY2ggdGhlbWUtYmcgY29udGFpbmVyXCI+XG5cdDxicj5cblxuXHQ8U2VhcmNoTGluZS8+XG5cblx0PG5hdj5cblx0XHQ8dWw+XG5cdFx0XHQ8bGk+PGEgcmVsPXByZWZldGNoIGhyZWY9J2xpc3RzJyBjbGFzczpzZWxlY3RlZD0ne3NlZ21lbnQgPT09IHVuZGVmaW5lZH0nPmxpc3Q8L2E+PC9saT5cblx0XHRcdDxsaT48YSByZWw9cHJlZmV0Y2ggaHJlZj0nbGlzdHMvb3JnYW5pemF0aW9ucycgY2xhc3M6c2VsZWN0ZWQ9J3tzZWdtZW50ID09PSBcIm9yZ2FuaXphdGlvbnNcIn0nPm9yZ2FuaXphdGlvbnM8L2E+PC9saT5cblx0XHQ8L3VsPlxuXHQ8L25hdj5cbjwvZGl2PlxuXG48ZGl2IGNsYXNzPVwibGlzdC13cmFwXCI+XG5cdDxicj5cblxuXHR7I2lmIHNlZ21lbnQgPT09ICdvcmdhbml6YXRpb25zJ31cblx0XHQ8T3JnYW5pemF0aW9uc0xpc3QvPlxuXHR7OmVsc2V9XG5cdFx0PENoYXJpdGllc0xpc3QvPlxuXHR7L2lmfVxuXG5cdDxicj5cblx0PGJyPlxuPC9kaXY+XG5cbjxGb290ZXIvPlxuXG48c3R5bGU+XG5cdC5zZWFyY2gge1xuXHRcdHBvc2l0aW9uOiBzdGlja3k7XG5cdFx0dG9wOiA0N3B4O1xuXHRcdGJveC1zaGFkb3c6IHZhcigtLXNoYWRvdy1wcmltYXJ5KTtcblx0fVxuXG5cdC5saXN0LXdyYXAge1xuXHRcdGZsZXg6IDEgMSBhdXRvO1xuXHRcdHBhZGRpbmc6IDAgdmFyKC0tc2NyZWVuLXBhZGRpbmcpXG5cdH1cblxuXHRuYXYgdWwsIG5hdiBsaSB7XG5cdFx0ZGlzcGxheTogZmxleDtcblx0XHRhbGlnbi1zZWxmOiBzdHJldGNoO1xuXHRcdGFsaWduLWl0ZW1zOiBzdHJldGNoO1xuXHRcdGp1c3RpZnktY29udGVudDogc3RyZXRjaDtcblx0fVxuXG5cdGxpIHtcblx0XHRmbGV4OiAxIDEgMDtcblx0fVxuXG5cdGxpIGEge1xuXHRcdGZsZXg6IDEgMSAwO1xuXHRcdGFsaWduLXNlbGY6IHN0cmV0Y2g7XG5cdFx0ZGlzcGxheTogZmxleDtcblx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHRcdHRleHQtYWxpZ246IGNlbnRlcjtcblx0XHRwYWRkaW5nOiAyMHB4IDEwcHg7XG5cdH1cblxuXHRsaSBhOmhvdmVyLCBsaSBhLnNlbGVjdGVkIHtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKHZhcigtLWNvbG9yLWJsYWNrKSwgLjEpO1xuXHR9XG48L3N0eWxlPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tCQTRCTSxHQUFPLFFBQUssZUFBZTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NENBVG9CLEdBQU8sUUFBSyxTQUFTOzs7Ozs7OzRDQUNQLEdBQU8sUUFBSyxlQUFlOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs2Q0FEekMsR0FBTyxRQUFLLFNBQVM7Ozs7NkNBQ1AsR0FBTyxRQUFLLGVBQWU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BZmxGLE9BQU87Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
