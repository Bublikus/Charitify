import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, a as assign, q as element, z as create_component, A as space, c as claim_element, f as children, B as claim_component, C as claim_space, g as detach_dev, h as attr_dev, j as add_location, k as insert_dev, D as mount_component, l as append_dev, J as get_spread_update, Z as get_spread_object, w as transition_in, y as transition_out, E as destroy_component, T as text, U as claim_text, V as set_style, M as check_outros, Q as destroy_each, L as group_outros, m as noop } from './index.50c5fe52.js';
import { S as Swipe, B as Button, I as Input, P as Progress, A as Avatar, R as Rate, D as Divider, F as Form, a as Icon, b as Picture, c as SwipeItem, C as CharityCard } from './index.8ca53645.js';

/* src/routes/index.svelte generated by Svelte v3.16.7 */

const file = "src/routes/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[18] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[18] = list[i];
	return child_ctx;
}

// (137:16) <SwipeItem>
function create_default_slot_23(ctx) {
	let current;

	const picture = new Picture({
			props: {
				src: "https://placeimg.com/300/300/people",
				alt: "sample"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(picture.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(picture.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(picture, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(picture.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(picture.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(picture, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_23.name,
		type: "slot",
		source: "(137:16) <SwipeItem>",
		ctx
	});

	return block;
}

// (140:16) <SwipeItem>
function create_default_slot_22(ctx) {
	let current;

	const picture = new Picture({
			props: {
				src: "https://placeimg.com/300/300/any",
				alt: "sample"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(picture.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(picture.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(picture, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(picture.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(picture.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(picture, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_22.name,
		type: "slot",
		source: "(140:16) <SwipeItem>",
		ctx
	});

	return block;
}

// (143:16) <SwipeItem>
function create_default_slot_21(ctx) {
	let current;

	const picture = new Picture({
			props: {
				src: "https://placeimg.com/300/300/arch",
				alt: "sample"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(picture.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(picture.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(picture, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(picture.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(picture.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(picture, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_21.name,
		type: "slot",
		source: "(143:16) <SwipeItem>",
		ctx
	});

	return block;
}

// (146:16) <SwipeItem>
function create_default_slot_20(ctx) {
	let current;

	const picture = new Picture({
			props: {
				src: "https://placeimg.com/300/300/nature",
				alt: "sample"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(picture.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(picture.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(picture, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(picture.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(picture.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(picture, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_20.name,
		type: "slot",
		source: "(146:16) <SwipeItem>",
		ctx
	});

	return block;
}

// (149:16) <SwipeItem>
function create_default_slot_19(ctx) {
	let current;

	const picture = new Picture({
			props: {
				src: "https://placeimg.com/300/300/tech",
				alt: "sample"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(picture.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(picture.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(picture, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(picture.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(picture.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(picture, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_19.name,
		type: "slot",
		source: "(149:16) <SwipeItem>",
		ctx
	});

	return block;
}

// (136:12) <Swipe>
function create_default_slot_18(ctx) {
	let t0;
	let t1;
	let t2;
	let t3;
	let current;

	const swipeitem0 = new SwipeItem({
			props: {
				$$slots: { default: [create_default_slot_23] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const swipeitem1 = new SwipeItem({
			props: {
				$$slots: { default: [create_default_slot_22] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const swipeitem2 = new SwipeItem({
			props: {
				$$slots: { default: [create_default_slot_21] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const swipeitem3 = new SwipeItem({
			props: {
				$$slots: { default: [create_default_slot_20] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const swipeitem4 = new SwipeItem({
			props: {
				$$slots: { default: [create_default_slot_19] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(swipeitem0.$$.fragment);
			t0 = space();
			create_component(swipeitem1.$$.fragment);
			t1 = space();
			create_component(swipeitem2.$$.fragment);
			t2 = space();
			create_component(swipeitem3.$$.fragment);
			t3 = space();
			create_component(swipeitem4.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(swipeitem0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(swipeitem1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(swipeitem2.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(swipeitem3.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(swipeitem4.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(swipeitem0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(swipeitem1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(swipeitem2, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(swipeitem3, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(swipeitem4, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const swipeitem0_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				swipeitem0_changes.$$scope = { dirty, ctx };
			}

			swipeitem0.$set(swipeitem0_changes);
			const swipeitem1_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				swipeitem1_changes.$$scope = { dirty, ctx };
			}

			swipeitem1.$set(swipeitem1_changes);
			const swipeitem2_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				swipeitem2_changes.$$scope = { dirty, ctx };
			}

			swipeitem2.$set(swipeitem2_changes);
			const swipeitem3_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				swipeitem3_changes.$$scope = { dirty, ctx };
			}

			swipeitem3.$set(swipeitem3_changes);
			const swipeitem4_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				swipeitem4_changes.$$scope = { dirty, ctx };
			}

			swipeitem4.$set(swipeitem4_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(swipeitem0.$$.fragment, local);
			transition_in(swipeitem1.$$.fragment, local);
			transition_in(swipeitem2.$$.fragment, local);
			transition_in(swipeitem3.$$.fragment, local);
			transition_in(swipeitem4.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(swipeitem0.$$.fragment, local);
			transition_out(swipeitem1.$$.fragment, local);
			transition_out(swipeitem2.$$.fragment, local);
			transition_out(swipeitem3.$$.fragment, local);
			transition_out(swipeitem4.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(swipeitem0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(swipeitem1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(swipeitem2, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(swipeitem3, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(swipeitem4, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_18.name,
		type: "slot",
		source: "(136:12) <Swipe>",
		ctx
	});

	return block;
}

// (157:16) <Button is="success" on:click="{e => console.log(e)}">
function create_default_slot_17(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("test1");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "test1");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_17.name,
		type: "slot",
		source: "(157:16) <Button is=\\\"success\\\" on:click=\\\"{e => console.log(e)}\\\">",
		ctx
	});

	return block;
}

// (160:16) <Button is="success" on:click="{e => console.log(e)}">
function create_default_slot_16(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("test12");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "test12");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_16.name,
		type: "slot",
		source: "(160:16) <Button is=\\\"success\\\" on:click=\\\"{e => console.log(e)}\\\">",
		ctx
	});

	return block;
}

// (163:16) <Button is="success" on:click="{e => console.log(e)}">
function create_default_slot_15(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("test123");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "test123");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_15.name,
		type: "slot",
		source: "(163:16) <Button is=\\\"success\\\" on:click=\\\"{e => console.log(e)}\\\">",
		ctx
	});

	return block;
}

// (183:16) <Button is="warning" on:click="{e => console.log(e)}">
function create_default_slot_14(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Submit");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Submit");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_14.name,
		type: "slot",
		source: "(183:16) <Button is=\\\"warning\\\" on:click=\\\"{e => console.log(e)}\\\">",
		ctx
	});

	return block;
}

// (226:8) {#each cards as card}
function create_each_block_1(ctx) {
	let li;
	let t;
	let current;
	const charitycard_spread_levels = [/*card*/ ctx[18]];
	let charitycard_props = {};

	for (let i = 0; i < charitycard_spread_levels.length; i += 1) {
		charitycard_props = assign(charitycard_props, charitycard_spread_levels[i]);
	}

	const charitycard = new CharityCard({ props: charitycard_props, $$inline: true });

	const block = {
		c: function create() {
			li = element("li");
			create_component(charitycard.$$.fragment);
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			claim_component(charitycard.$$.fragment, li_nodes);
			t = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(li, "class", "svelte-1l1j0nq");
			add_location(li, file, 226, 12, 5979);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			mount_component(charitycard, li, null);
			append_dev(li, t);
			current = true;
		},
		p: function update(ctx, dirty) {
			const charitycard_changes = (dirty & /*cards*/ 1)
			? get_spread_update(charitycard_spread_levels, [get_spread_object(/*card*/ ctx[18])])
			: {};

			charitycard.$set(charitycard_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(charitycard.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(charitycard.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			destroy_component(charitycard);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(226:8) {#each cards as card}",
		ctx
	});

	return block;
}

// (245:8) {#each cards as card}
function create_each_block(ctx) {
	let li;
	let t;
	let current;
	const charitycard_spread_levels = [/*card*/ ctx[18]];
	let charitycard_props = {};

	for (let i = 0; i < charitycard_spread_levels.length; i += 1) {
		charitycard_props = assign(charitycard_props, charitycard_spread_levels[i]);
	}

	const charitycard = new CharityCard({ props: charitycard_props, $$inline: true });

	const block = {
		c: function create() {
			li = element("li");
			create_component(charitycard.$$.fragment);
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			claim_component(charitycard.$$.fragment, li_nodes);
			t = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(li, "class", "svelte-1l1j0nq");
			add_location(li, file, 245, 12, 6295);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			mount_component(charitycard, li, null);
			append_dev(li, t);
			current = true;
		},
		p: function update(ctx, dirty) {
			const charitycard_changes = (dirty & /*cards*/ 1)
			? get_spread_update(charitycard_spread_levels, [get_spread_object(/*card*/ ctx[18])])
			: {};

			charitycard.$set(charitycard_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(charitycard.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(charitycard.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			destroy_component(charitycard);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(245:8) {#each cards as card}",
		ctx
	});

	return block;
}

// (304:4) <Button is="success" type="submit">
function create_default_slot_13(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Submit");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Submit");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_13.name,
		type: "slot",
		source: "(304:4) <Button is=\\\"success\\\" type=\\\"submit\\\">",
		ctx
	});

	return block;
}

// (260:0) <Form on:submit="{(e) => console.log(e)}" name="main-form">
function create_default_slot_12(ctx) {
	let br0;
	let t0;
	let br1;
	let t1;
	let t2;
	let br2;
	let t3;
	let br3;
	let t4;
	let t5;
	let br4;
	let t6;
	let br5;
	let t7;
	let t8;
	let br6;
	let t9;
	let br7;
	let t10;
	let t11;
	let br8;
	let t12;
	let br9;
	let t13;
	let t14;
	let br10;
	let t15;
	let br11;
	let t16;
	let t17;
	let br12;
	let t18;
	let br13;
	let t19;
	let t20;
	let br14;
	let t21;
	let br15;
	let t22;
	let t23;
	let br16;
	let t24;
	let br17;
	let t25;
	let current;

	const input0 = new Input({
			props: {
				name: "test1",
				type: "number",
				list: "sum-suggestions"
			},
			$$inline: true
		});

	const input1 = new Input({
			props: {
				name: "test2",
				type: "text",
				list: "sum-suggestions"
			},
			$$inline: true
		});

	const input2 = new Input({
			props: {
				name: "test3",
				type: "email",
				list: "sum-suggestions"
			},
			$$inline: true
		});

	const input3 = new Input({
			props: {
				name: "test4",
				type: "url",
				list: "sum-suggestions"
			},
			$$inline: true
		});

	const input4 = new Input({
			props: {
				name: "test5",
				type: "search",
				list: "sum-suggestions"
			},
			$$inline: true
		});

	const input5 = new Input({
			props: {
				name: "test6",
				type: "date",
				list: "sum-suggestions"
			},
			$$inline: true
		});

	const input6 = new Input({
			props: {
				name: "test7",
				type: "password",
				list: "sum-suggestions"
			},
			$$inline: true
		});

	const input7 = new Input({
			props: {
				name: "test8",
				type: "tel",
				list: "sum-suggestions"
			},
			$$inline: true
		});

	const button = new Button({
			props: {
				is: "success",
				type: "submit",
				$$slots: { default: [create_default_slot_13] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			br0 = element("br");
			t0 = space();
			br1 = element("br");
			t1 = space();
			create_component(input0.$$.fragment);
			t2 = space();
			br2 = element("br");
			t3 = space();
			br3 = element("br");
			t4 = space();
			create_component(input1.$$.fragment);
			t5 = space();
			br4 = element("br");
			t6 = space();
			br5 = element("br");
			t7 = space();
			create_component(input2.$$.fragment);
			t8 = space();
			br6 = element("br");
			t9 = space();
			br7 = element("br");
			t10 = space();
			create_component(input3.$$.fragment);
			t11 = space();
			br8 = element("br");
			t12 = space();
			br9 = element("br");
			t13 = space();
			create_component(input4.$$.fragment);
			t14 = space();
			br10 = element("br");
			t15 = space();
			br11 = element("br");
			t16 = space();
			create_component(input5.$$.fragment);
			t17 = space();
			br12 = element("br");
			t18 = space();
			br13 = element("br");
			t19 = space();
			create_component(input6.$$.fragment);
			t20 = space();
			br14 = element("br");
			t21 = space();
			br15 = element("br");
			t22 = space();
			create_component(input7.$$.fragment);
			t23 = space();
			br16 = element("br");
			t24 = space();
			br17 = element("br");
			t25 = space();
			create_component(button.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			br0 = claim_element(nodes, "BR", {});
			t0 = claim_space(nodes);
			br1 = claim_element(nodes, "BR", {});
			t1 = claim_space(nodes);
			claim_component(input0.$$.fragment, nodes);
			t2 = claim_space(nodes);
			br2 = claim_element(nodes, "BR", {});
			t3 = claim_space(nodes);
			br3 = claim_element(nodes, "BR", {});
			t4 = claim_space(nodes);
			claim_component(input1.$$.fragment, nodes);
			t5 = claim_space(nodes);
			br4 = claim_element(nodes, "BR", {});
			t6 = claim_space(nodes);
			br5 = claim_element(nodes, "BR", {});
			t7 = claim_space(nodes);
			claim_component(input2.$$.fragment, nodes);
			t8 = claim_space(nodes);
			br6 = claim_element(nodes, "BR", {});
			t9 = claim_space(nodes);
			br7 = claim_element(nodes, "BR", {});
			t10 = claim_space(nodes);
			claim_component(input3.$$.fragment, nodes);
			t11 = claim_space(nodes);
			br8 = claim_element(nodes, "BR", {});
			t12 = claim_space(nodes);
			br9 = claim_element(nodes, "BR", {});
			t13 = claim_space(nodes);
			claim_component(input4.$$.fragment, nodes);
			t14 = claim_space(nodes);
			br10 = claim_element(nodes, "BR", {});
			t15 = claim_space(nodes);
			br11 = claim_element(nodes, "BR", {});
			t16 = claim_space(nodes);
			claim_component(input5.$$.fragment, nodes);
			t17 = claim_space(nodes);
			br12 = claim_element(nodes, "BR", {});
			t18 = claim_space(nodes);
			br13 = claim_element(nodes, "BR", {});
			t19 = claim_space(nodes);
			claim_component(input6.$$.fragment, nodes);
			t20 = claim_space(nodes);
			br14 = claim_element(nodes, "BR", {});
			t21 = claim_space(nodes);
			br15 = claim_element(nodes, "BR", {});
			t22 = claim_space(nodes);
			claim_component(input7.$$.fragment, nodes);
			t23 = claim_space(nodes);
			br16 = claim_element(nodes, "BR", {});
			t24 = claim_space(nodes);
			br17 = claim_element(nodes, "BR", {});
			t25 = claim_space(nodes);
			claim_component(button.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			add_location(br0, file, 260, 4, 6486);
			add_location(br1, file, 261, 4, 6495);
			add_location(br2, file, 265, 4, 6569);
			add_location(br3, file, 266, 4, 6578);
			add_location(br4, file, 270, 4, 6650);
			add_location(br5, file, 271, 4, 6659);
			add_location(br6, file, 275, 4, 6732);
			add_location(br7, file, 276, 4, 6741);
			add_location(br8, file, 280, 4, 6812);
			add_location(br9, file, 281, 4, 6821);
			add_location(br10, file, 285, 4, 6895);
			add_location(br11, file, 286, 4, 6904);
			add_location(br12, file, 290, 4, 6976);
			add_location(br13, file, 291, 4, 6985);
			add_location(br14, file, 295, 4, 7061);
			add_location(br15, file, 296, 4, 7070);
			add_location(br16, file, 300, 4, 7141);
			add_location(br17, file, 301, 4, 7150);
		},
		m: function mount(target, anchor) {
			insert_dev(target, br0, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, br1, anchor);
			insert_dev(target, t1, anchor);
			mount_component(input0, target, anchor);
			insert_dev(target, t2, anchor);
			insert_dev(target, br2, anchor);
			insert_dev(target, t3, anchor);
			insert_dev(target, br3, anchor);
			insert_dev(target, t4, anchor);
			mount_component(input1, target, anchor);
			insert_dev(target, t5, anchor);
			insert_dev(target, br4, anchor);
			insert_dev(target, t6, anchor);
			insert_dev(target, br5, anchor);
			insert_dev(target, t7, anchor);
			mount_component(input2, target, anchor);
			insert_dev(target, t8, anchor);
			insert_dev(target, br6, anchor);
			insert_dev(target, t9, anchor);
			insert_dev(target, br7, anchor);
			insert_dev(target, t10, anchor);
			mount_component(input3, target, anchor);
			insert_dev(target, t11, anchor);
			insert_dev(target, br8, anchor);
			insert_dev(target, t12, anchor);
			insert_dev(target, br9, anchor);
			insert_dev(target, t13, anchor);
			mount_component(input4, target, anchor);
			insert_dev(target, t14, anchor);
			insert_dev(target, br10, anchor);
			insert_dev(target, t15, anchor);
			insert_dev(target, br11, anchor);
			insert_dev(target, t16, anchor);
			mount_component(input5, target, anchor);
			insert_dev(target, t17, anchor);
			insert_dev(target, br12, anchor);
			insert_dev(target, t18, anchor);
			insert_dev(target, br13, anchor);
			insert_dev(target, t19, anchor);
			mount_component(input6, target, anchor);
			insert_dev(target, t20, anchor);
			insert_dev(target, br14, anchor);
			insert_dev(target, t21, anchor);
			insert_dev(target, br15, anchor);
			insert_dev(target, t22, anchor);
			mount_component(input7, target, anchor);
			insert_dev(target, t23, anchor);
			insert_dev(target, br16, anchor);
			insert_dev(target, t24, anchor);
			insert_dev(target, br17, anchor);
			insert_dev(target, t25, anchor);
			mount_component(button, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(input0.$$.fragment, local);
			transition_in(input1.$$.fragment, local);
			transition_in(input2.$$.fragment, local);
			transition_in(input3.$$.fragment, local);
			transition_in(input4.$$.fragment, local);
			transition_in(input5.$$.fragment, local);
			transition_in(input6.$$.fragment, local);
			transition_in(input7.$$.fragment, local);
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(input0.$$.fragment, local);
			transition_out(input1.$$.fragment, local);
			transition_out(input2.$$.fragment, local);
			transition_out(input3.$$.fragment, local);
			transition_out(input4.$$.fragment, local);
			transition_out(input5.$$.fragment, local);
			transition_out(input6.$$.fragment, local);
			transition_out(input7.$$.fragment, local);
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(br0);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(br1);
			if (detaching) detach_dev(t1);
			destroy_component(input0, detaching);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(br2);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(br3);
			if (detaching) detach_dev(t4);
			destroy_component(input1, detaching);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(br4);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(br5);
			if (detaching) detach_dev(t7);
			destroy_component(input2, detaching);
			if (detaching) detach_dev(t8);
			if (detaching) detach_dev(br6);
			if (detaching) detach_dev(t9);
			if (detaching) detach_dev(br7);
			if (detaching) detach_dev(t10);
			destroy_component(input3, detaching);
			if (detaching) detach_dev(t11);
			if (detaching) detach_dev(br8);
			if (detaching) detach_dev(t12);
			if (detaching) detach_dev(br9);
			if (detaching) detach_dev(t13);
			destroy_component(input4, detaching);
			if (detaching) detach_dev(t14);
			if (detaching) detach_dev(br10);
			if (detaching) detach_dev(t15);
			if (detaching) detach_dev(br11);
			if (detaching) detach_dev(t16);
			destroy_component(input5, detaching);
			if (detaching) detach_dev(t17);
			if (detaching) detach_dev(br12);
			if (detaching) detach_dev(t18);
			if (detaching) detach_dev(br13);
			if (detaching) detach_dev(t19);
			destroy_component(input6, detaching);
			if (detaching) detach_dev(t20);
			if (detaching) detach_dev(br14);
			if (detaching) detach_dev(t21);
			if (detaching) detach_dev(br15);
			if (detaching) detach_dev(t22);
			destroy_component(input7, detaching);
			if (detaching) detach_dev(t23);
			if (detaching) detach_dev(br16);
			if (detaching) detach_dev(t24);
			if (detaching) detach_dev(br17);
			if (detaching) detach_dev(t25);
			destroy_component(button, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_12.name,
		type: "slot",
		source: "(260:0) <Form on:submit=\\\"{(e) => console.log(e)}\\\" name=\\\"main-form\\\">",
		ctx
	});

	return block;
}

// (359:8) <Button on:click="{e => console.log(e)}">
function create_default_slot_11(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("test");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "test");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11.name,
		type: "slot",
		source: "(359:8) <Button on:click=\\\"{e => console.log(e)}\\\">",
		ctx
	});

	return block;
}

// (362:8) <Button is="success" on:click="{e => console.log(e)}">
function create_default_slot_10(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("test");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "test");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10.name,
		type: "slot",
		source: "(362:8) <Button is=\\\"success\\\" on:click=\\\"{e => console.log(e)}\\\">",
		ctx
	});

	return block;
}

// (365:8) <Button is="success" on:click="{e => console.log(e)}" ariaLabel="text">
function create_default_slot_9(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("test");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "test");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(365:8) <Button is=\\\"success\\\" on:click=\\\"{e => console.log(e)}\\\" ariaLabel=\\\"text\\\">",
		ctx
	});

	return block;
}

// (369:8) <Button is="success" on:click="{e => console.log(e)}">
function create_default_slot_8(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("test");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "test");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(369:8) <Button is=\\\"success\\\" on:click=\\\"{e => console.log(e)}\\\">",
		ctx
	});

	return block;
}

// (373:8) <Button is="warning" on:click="{e => console.log(e)}">
function create_default_slot_7(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Some example of Button");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Some example of Button");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(373:8) <Button is=\\\"warning\\\" on:click=\\\"{e => console.log(e)}\\\">",
		ctx
	});

	return block;
}

// (376:8) <Button is="danger" on:click="{e => console.log(e)}">
function create_default_slot_6(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Some example of Button");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Some example of Button");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(376:8) <Button is=\\\"danger\\\" on:click=\\\"{e => console.log(e)}\\\">",
		ctx
	});

	return block;
}

// (386:8) <Button on:click="{e => console.log(e)}" href="#">
function create_default_slot_5(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("test");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "test");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(386:8) <Button on:click=\\\"{e => console.log(e)}\\\" href=\\\"#\\\">",
		ctx
	});

	return block;
}

// (389:8) <Button is="success" on:click="{e => console.log(e)}" href="#">
function create_default_slot_4(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("test");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "test");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(389:8) <Button is=\\\"success\\\" on:click=\\\"{e => console.log(e)}\\\" href=\\\"#\\\">",
		ctx
	});

	return block;
}

// (392:8) <Button is="success" on:click="{e => console.log(e)}" href="#">
function create_default_slot_3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("test");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "test");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(392:8) <Button is=\\\"success\\\" on:click=\\\"{e => console.log(e)}\\\" href=\\\"#\\\">",
		ctx
	});

	return block;
}

// (396:8) <Button is="success" on:click="{e => console.log(e)}" href="#">
function create_default_slot_2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("test");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "test");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(396:8) <Button is=\\\"success\\\" on:click=\\\"{e => console.log(e)}\\\" href=\\\"#\\\">",
		ctx
	});

	return block;
}

// (400:8) <Button is="warning" on:click="{e => console.log(e)}" href="#">
function create_default_slot_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Some example of Button");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Some example of Button");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(400:8) <Button is=\\\"warning\\\" on:click=\\\"{e => console.log(e)}\\\" href=\\\"#\\\">",
		ctx
	});

	return block;
}

// (403:8) <Button is="danger" on:click="{e => console.log(e)}" href="#">
function create_default_slot(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Some example of Button");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Some example of Button");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(403:8) <Button is=\\\"danger\\\" on:click=\\\"{e => console.log(e)}\\\" href=\\\"#\\\">",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let section2;
	let section0;
	let div0;
	let t1;
	let ul0;
	let li0;
	let t2;
	let li1;
	let t3;
	let li2;
	let t4;
	let li3;
	let br0;
	let t5;
	let t6;
	let datalist0;
	let option0;
	let option1;
	let option2;
	let t7;
	let li4;
	let t8;
	let t9;
	let section1;
	let div1;
	let t10;
	let span0;
	let h3;
	let t11;
	let t12;
	let p0;
	let t13;
	let t14;
	let t15;
	let br1;
	let t16;
	let h10;
	let t17;
	let t18;
	let br2;
	let t19;
	let p1;
	let t20;
	let t21;
	let br3;
	let t22;
	let br4;
	let t23;
	let br5;
	let t24;
	let div2;
	let t25;
	let h20;
	let t26;
	let t27;
	let t28;
	let br6;
	let t29;
	let ul1;
	let t30;
	let br7;
	let t31;
	let br8;
	let t32;
	let div3;
	let t33;
	let h21;
	let t34;
	let t35;
	let t36;
	let br9;
	let t37;
	let ul2;
	let t38;
	let br10;
	let t39;
	let br11;
	let t40;
	let br12;
	let t41;
	let t42;
	let t43;
	let h11;
	let t44;
	let t45;
	let br13;
	let t46;
	let br14;
	let t47;
	let h22;
	let t48;
	let t49;
	let br15;
	let t50;
	let br16;
	let t51;
	let p2;
	let t52;
	let t53;
	let p3;
	let t54;
	let t55;
	let p4;
	let t56;
	let t57;
	let br17;
	let t58;
	let br18;
	let t59;
	let h23;
	let t60;
	let t61;
	let ul3;
	let li5;
	let span1;
	let t62;
	let t63;
	let t64;
	let li6;
	let span2;
	let t65;
	let t66;
	let t67;
	let li7;
	let span3;
	let t68;
	let t69;
	let t70;
	let br19;
	let t71;
	let br20;
	let t72;
	let section3;
	let div4;
	let br21;
	let t73;
	let br22;
	let t74;
	let br23;
	let t75;
	let t76;
	let br24;
	let t77;
	let br25;
	let t78;
	let t79;
	let br26;
	let t80;
	let br27;
	let t81;
	let t82;
	let br28;
	let t83;
	let br29;
	let t84;
	let t85;
	let br30;
	let t86;
	let br31;
	let t87;
	let t88;
	let br32;
	let t89;
	let br33;
	let t90;
	let t91;
	let br34;
	let t92;
	let br35;
	let t93;
	let div5;
	let br36;
	let t94;
	let br37;
	let t95;
	let br38;
	let t96;
	let t97;
	let br39;
	let t98;
	let br40;
	let t99;
	let t100;
	let br41;
	let t101;
	let br42;
	let t102;
	let t103;
	let br43;
	let t104;
	let br44;
	let t105;
	let t106;
	let br45;
	let t107;
	let br46;
	let t108;
	let t109;
	let br47;
	let t110;
	let br48;
	let t111;
	let t112;
	let br49;
	let t113;
	let br50;
	let t114;
	let br51;
	let t115;
	let br52;
	let t116;
	let h24;
	let t117;
	let t118;
	let br53;
	let t119;
	let br54;
	let t120;
	let section4;
	let t121;
	let br55;
	let t122;
	let br56;
	let t123;
	let t124;
	let br57;
	let t125;
	let br58;
	let t126;
	let t127;
	let datalist1;
	let option3;
	let option4;
	let option5;
	let t128;
	let label;
	let t129;
	let t130;
	let input4;
	let t131;
	let br59;
	let t132;
	let br60;
	let t133;
	let a;
	let t134;
	let t135;
	let br61;
	let t136;
	let br62;
	let t137;
	let button16;
	let t138;
	let t139;
	let br63;
	let t140;
	let br64;
	let t141;
	let h25;
	let t142;
	let t143;
	let br65;
	let t144;
	let br66;
	let t145;
	let t146;
	let br67;
	let t147;
	let br68;
	let t148;
	let h26;
	let t149;
	let t150;
	let p5;
	let strong;
	let t151;
	let t152;
	let p6;
	let t153;
	let current;

	const swipe = new Swipe({
			props: {
				$$slots: { default: [create_default_slot_18] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const button0 = new Button({
			props: {
				is: "success",
				$$slots: { default: [create_default_slot_17] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button0.$on("click", /*click_handler*/ ctx[1]);

	const button1 = new Button({
			props: {
				is: "success",
				$$slots: { default: [create_default_slot_16] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button1.$on("click", /*click_handler_1*/ ctx[2]);

	const button2 = new Button({
			props: {
				is: "success",
				$$slots: { default: [create_default_slot_15] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button2.$on("click", /*click_handler_2*/ ctx[3]);

	const input0 = new Input({
			props: {
				type: "number",
				name: "num",
				list: "sum-suggestions",
				placeholder: "Num",
				autoselect: true,
				align: "right"
			},
			$$inline: true
		});

	const button3 = new Button({
			props: {
				is: "warning",
				$$slots: { default: [create_default_slot_14] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button3.$on("click", /*click_handler_3*/ ctx[4]);
	const progress = new Progress({ props: { value: "65" }, $$inline: true });

	const avatar = new Avatar({
			props: {
				src: "https://placeimg.com/300/300/people",
				alt: "avatar"
			},
			$$inline: true
		});

	const rate = new Rate({ $$inline: true });
	const divider0 = new Divider({ props: { size: "16" }, $$inline: true });
	const divider1 = new Divider({ props: { size: "20" }, $$inline: true });
	let each_value_1 = /*cards*/ ctx[0];
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks_1[i], 1, 1, () => {
		each_blocks_1[i] = null;
	});

	const divider2 = new Divider({ props: { size: "16" }, $$inline: true });
	const divider3 = new Divider({ props: { size: "20" }, $$inline: true });
	let each_value = /*cards*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out_1 = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const divider4 = new Divider({ $$inline: true });

	const form = new Form({
			props: {
				name: "main-form",
				$$slots: { default: [create_default_slot_12] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	form.$on("submit", /*submit_handler*/ ctx[5]);

	const icon0 = new Icon({
			props: { size: "small", type: "heart-filled" },
			$$inline: true
		});

	const icon1 = new Icon({
			props: {
				size: "small",
				type: "heart-filled",
				is: "warning"
			},
			$$inline: true
		});

	const icon2 = new Icon({
			props: {
				size: "small",
				type: "heart-filled",
				is: "danger"
			},
			$$inline: true
		});

	const icon3 = new Icon({
			props: { type: "heart-filled" },
			$$inline: true
		});

	const icon4 = new Icon({
			props: { type: "heart-filled", is: "warning" },
			$$inline: true
		});

	const icon5 = new Icon({
			props: { type: "heart-filled", is: "danger" },
			$$inline: true
		});

	const icon6 = new Icon({
			props: { size: "big", type: "heart-filled" },
			$$inline: true
		});

	const icon7 = new Icon({
			props: {
				size: "big",
				type: "heart-filled",
				is: "warning"
			},
			$$inline: true
		});

	const icon8 = new Icon({
			props: {
				size: "big",
				type: "heart-filled",
				is: "danger"
			},
			$$inline: true
		});

	const button4 = new Button({
			props: {
				$$slots: { default: [create_default_slot_11] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button4.$on("click", /*click_handler_4*/ ctx[6]);

	const button5 = new Button({
			props: {
				is: "success",
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button5.$on("click", /*click_handler_5*/ ctx[7]);

	const button6 = new Button({
			props: {
				is: "success",
				ariaLabel: "text",
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button6.$on("click", /*click_handler_6*/ ctx[8]);

	const button7 = new Button({
			props: {
				is: "success",
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button7.$on("click", /*click_handler_7*/ ctx[9]);

	const button8 = new Button({
			props: {
				is: "warning",
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button8.$on("click", /*click_handler_8*/ ctx[10]);

	const button9 = new Button({
			props: {
				is: "danger",
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button9.$on("click", /*click_handler_9*/ ctx[11]);

	const button10 = new Button({
			props: {
				href: "#",
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button10.$on("click", /*click_handler_10*/ ctx[12]);

	const button11 = new Button({
			props: {
				is: "success",
				href: "#",
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button11.$on("click", /*click_handler_11*/ ctx[13]);

	const button12 = new Button({
			props: {
				is: "success",
				href: "#",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button12.$on("click", /*click_handler_12*/ ctx[14]);

	const button13 = new Button({
			props: {
				is: "success",
				href: "#",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button13.$on("click", /*click_handler_13*/ ctx[15]);

	const button14 = new Button({
			props: {
				is: "warning",
				href: "#",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button14.$on("click", /*click_handler_14*/ ctx[16]);

	const button15 = new Button({
			props: {
				is: "danger",
				href: "#",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button15.$on("click", /*click_handler_15*/ ctx[17]);

	const input1 = new Input({
			props: { rows: 2, name: "tex", list: "lis" },
			$$inline: true
		});

	const input2 = new Input({
			props: {
				name: "tex1",
				list: "lis",
				placeholder: "Some placeholder text"
			},
			$$inline: true
		});

	const input3 = new Input({
			props: {
				type: "number",
				name: "tex2",
				list: "lis"
			},
			$$inline: true
		});

	const picture = new Picture({
			props: {
				src: "https://placeimg.com/1000/1000/any",
				alt: "sample"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			section2 = element("section");
			section0 = element("section");
			div0 = element("div");
			create_component(swipe.$$.fragment);
			t1 = space();
			ul0 = element("ul");
			li0 = element("li");
			create_component(button0.$$.fragment);
			t2 = space();
			li1 = element("li");
			create_component(button1.$$.fragment);
			t3 = space();
			li2 = element("li");
			create_component(button2.$$.fragment);
			t4 = space();
			li3 = element("li");
			br0 = element("br");
			t5 = space();
			create_component(input0.$$.fragment);
			t6 = space();
			datalist0 = element("datalist");
			option0 = element("option");
			option1 = element("option");
			option2 = element("option");
			t7 = space();
			li4 = element("li");
			create_component(button3.$$.fragment);
			t8 = space();
			create_component(progress.$$.fragment);
			t9 = space();
			section1 = element("section");
			div1 = element("div");
			create_component(avatar.$$.fragment);
			t10 = space();
			span0 = element("span");
			h3 = element("h3");
			t11 = text("Tina Kandelaki");
			t12 = space();
			p0 = element("p");
			t13 = text("ORG charity charitify");
			t14 = space();
			create_component(rate.$$.fragment);
			t15 = space();
			br1 = element("br");
			t16 = space();
			h10 = element("h1");
			t17 = text("The main title");
			t18 = space();
			br2 = element("br");
			t19 = space();
			p1 = element("p");
			t20 = text("A small description that describes the title above and just makes text longer.");
			t21 = space();
			br3 = element("br");
			t22 = space();
			br4 = element("br");
			t23 = space();
			br5 = element("br");
			t24 = space();
			div2 = element("div");
			create_component(divider0.$$.fragment);
			t25 = space();
			h20 = element("h2");
			t26 = text("The nearest list:");
			t27 = space();
			create_component(divider1.$$.fragment);
			t28 = space();
			br6 = element("br");
			t29 = space();
			ul1 = element("ul");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t30 = space();
			br7 = element("br");
			t31 = space();
			br8 = element("br");
			t32 = space();
			div3 = element("div");
			create_component(divider2.$$.fragment);
			t33 = space();
			h21 = element("h2");
			t34 = text("The nearest list:");
			t35 = space();
			create_component(divider3.$$.fragment);
			t36 = space();
			br9 = element("br");
			t37 = space();
			ul2 = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t38 = space();
			br10 = element("br");
			t39 = space();
			br11 = element("br");
			t40 = space();
			br12 = element("br");
			t41 = space();
			create_component(divider4.$$.fragment);
			t42 = space();
			create_component(form.$$.fragment);
			t43 = space();
			h11 = element("h1");
			t44 = text("Charitify - is the application for helping those in need.");
			t45 = space();
			br13 = element("br");
			t46 = space();
			br14 = element("br");
			t47 = space();
			h22 = element("h2");
			t48 = text("Typography");
			t49 = space();
			br15 = element("br");
			t50 = space();
			br16 = element("br");
			t51 = space();
			p2 = element("p");
			t52 = text("Few paragraphs to text fonts");
			t53 = space();
			p3 = element("p");
			t54 = text("Декілька параграфів для тесту тексту");
			t55 = space();
			p4 = element("p");
			t56 = text("Несколько параграфов для теста текста");
			t57 = space();
			br17 = element("br");
			t58 = space();
			br18 = element("br");
			t59 = space();
			h23 = element("h2");
			t60 = text("Interactive elements");
			t61 = space();
			ul3 = element("ul");
			li5 = element("li");
			span1 = element("span");
			create_component(icon0.$$.fragment);
			t62 = space();
			create_component(icon1.$$.fragment);
			t63 = space();
			create_component(icon2.$$.fragment);
			t64 = space();
			li6 = element("li");
			span2 = element("span");
			create_component(icon3.$$.fragment);
			t65 = space();
			create_component(icon4.$$.fragment);
			t66 = space();
			create_component(icon5.$$.fragment);
			t67 = space();
			li7 = element("li");
			span3 = element("span");
			create_component(icon6.$$.fragment);
			t68 = space();
			create_component(icon7.$$.fragment);
			t69 = space();
			create_component(icon8.$$.fragment);
			t70 = space();
			br19 = element("br");
			t71 = space();
			br20 = element("br");
			t72 = space();
			section3 = element("section");
			div4 = element("div");
			br21 = element("br");
			t73 = text("\n        Buttons\n        ");
			br22 = element("br");
			t74 = space();
			br23 = element("br");
			t75 = space();
			create_component(button4.$$.fragment);
			t76 = space();
			br24 = element("br");
			t77 = space();
			br25 = element("br");
			t78 = space();
			create_component(button5.$$.fragment);
			t79 = space();
			br26 = element("br");
			t80 = space();
			br27 = element("br");
			t81 = space();
			create_component(button6.$$.fragment);
			t82 = space();
			br28 = element("br");
			t83 = space();
			br29 = element("br");
			t84 = text("\n        With text\n        ");
			create_component(button7.$$.fragment);
			t85 = text("\n        and behind.\n        ");
			br30 = element("br");
			t86 = space();
			br31 = element("br");
			t87 = space();
			create_component(button8.$$.fragment);
			t88 = space();
			br32 = element("br");
			t89 = space();
			br33 = element("br");
			t90 = space();
			create_component(button9.$$.fragment);
			t91 = space();
			br34 = element("br");
			t92 = space();
			br35 = element("br");
			t93 = space();
			div5 = element("div");
			br36 = element("br");
			t94 = text("\n        Links as buttons\n        ");
			br37 = element("br");
			t95 = space();
			br38 = element("br");
			t96 = space();
			create_component(button10.$$.fragment);
			t97 = space();
			br39 = element("br");
			t98 = space();
			br40 = element("br");
			t99 = space();
			create_component(button11.$$.fragment);
			t100 = space();
			br41 = element("br");
			t101 = space();
			br42 = element("br");
			t102 = space();
			create_component(button12.$$.fragment);
			t103 = space();
			br43 = element("br");
			t104 = space();
			br44 = element("br");
			t105 = text("\n        With text\n        ");
			create_component(button13.$$.fragment);
			t106 = text("\n        and behind.\n        ");
			br45 = element("br");
			t107 = space();
			br46 = element("br");
			t108 = space();
			create_component(button14.$$.fragment);
			t109 = space();
			br47 = element("br");
			t110 = space();
			br48 = element("br");
			t111 = space();
			create_component(button15.$$.fragment);
			t112 = space();
			br49 = element("br");
			t113 = space();
			br50 = element("br");
			t114 = space();
			br51 = element("br");
			t115 = space();
			br52 = element("br");
			t116 = space();
			h24 = element("h2");
			t117 = text("Input fields");
			t118 = space();
			br53 = element("br");
			t119 = space();
			br54 = element("br");
			t120 = space();
			section4 = element("section");
			create_component(input1.$$.fragment);
			t121 = space();
			br55 = element("br");
			t122 = space();
			br56 = element("br");
			t123 = space();
			create_component(input2.$$.fragment);
			t124 = space();
			br57 = element("br");
			t125 = space();
			br58 = element("br");
			t126 = space();
			create_component(input3.$$.fragment);
			t127 = space();
			datalist1 = element("datalist");
			option3 = element("option");
			option4 = element("option");
			option5 = element("option");
			t128 = space();
			label = element("label");
			t129 = text("label");
			t130 = space();
			input4 = element("input");
			t131 = space();
			br59 = element("br");
			t132 = space();
			br60 = element("br");
			t133 = space();
			a = element("a");
			t134 = text("Some link");
			t135 = space();
			br61 = element("br");
			t136 = space();
			br62 = element("br");
			t137 = space();
			button16 = element("button");
			t138 = text("Button example");
			t139 = space();
			br63 = element("br");
			t140 = space();
			br64 = element("br");
			t141 = space();
			h25 = element("h2");
			t142 = text("Images");
			t143 = space();
			br65 = element("br");
			t144 = space();
			br66 = element("br");
			t145 = space();
			create_component(picture.$$.fragment);
			t146 = space();
			br67 = element("br");
			t147 = space();
			br68 = element("br");
			t148 = space();
			h26 = element("h2");
			t149 = text("Other");
			t150 = space();
			p5 = element("p");
			strong = element("strong");
			t151 = text("Try editing this file (src/routes/index.svelte) to test live reloading.");
			t152 = space();
			p6 = element("p");
			t153 = text("A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.");
			this.h();
		},
		l: function claim(nodes) {
			t0 = claim_space(nodes);
			section2 = claim_element(nodes, "SECTION", { class: true });
			var section2_nodes = children(section2);
			section0 = claim_element(section2_nodes, "SECTION", { class: true });
			var section0_nodes = children(section0);
			div0 = claim_element(section0_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(swipe.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(section0_nodes);
			ul0 = claim_element(section0_nodes, "UL", { class: true });
			var ul0_nodes = children(ul0);
			li0 = claim_element(ul0_nodes, "LI", { class: true });
			var li0_nodes = children(li0);
			claim_component(button0.$$.fragment, li0_nodes);
			li0_nodes.forEach(detach_dev);
			t2 = claim_space(ul0_nodes);
			li1 = claim_element(ul0_nodes, "LI", { class: true });
			var li1_nodes = children(li1);
			claim_component(button1.$$.fragment, li1_nodes);
			li1_nodes.forEach(detach_dev);
			t3 = claim_space(ul0_nodes);
			li2 = claim_element(ul0_nodes, "LI", { class: true });
			var li2_nodes = children(li2);
			claim_component(button2.$$.fragment, li2_nodes);
			li2_nodes.forEach(detach_dev);
			t4 = claim_space(ul0_nodes);
			li3 = claim_element(ul0_nodes, "LI", { class: true });
			var li3_nodes = children(li3);
			br0 = claim_element(li3_nodes, "BR", {});
			t5 = claim_space(li3_nodes);
			claim_component(input0.$$.fragment, li3_nodes);
			t6 = claim_space(li3_nodes);
			datalist0 = claim_element(li3_nodes, "DATALIST", { id: true });
			var datalist0_nodes = children(datalist0);
			option0 = claim_element(datalist0_nodes, "OPTION", { value: true });
			var option0_nodes = children(option0);
			option0_nodes.forEach(detach_dev);
			option1 = claim_element(datalist0_nodes, "OPTION", { value: true });
			var option1_nodes = children(option1);
			option1_nodes.forEach(detach_dev);
			option2 = claim_element(datalist0_nodes, "OPTION", { value: true });
			var option2_nodes = children(option2);
			option2_nodes.forEach(detach_dev);
			datalist0_nodes.forEach(detach_dev);
			li3_nodes.forEach(detach_dev);
			t7 = claim_space(ul0_nodes);
			li4 = claim_element(ul0_nodes, "LI", { class: true });
			var li4_nodes = children(li4);
			claim_component(button3.$$.fragment, li4_nodes);
			li4_nodes.forEach(detach_dev);
			ul0_nodes.forEach(detach_dev);
			section0_nodes.forEach(detach_dev);
			t8 = claim_space(section2_nodes);
			claim_component(progress.$$.fragment, section2_nodes);
			t9 = claim_space(section2_nodes);
			section1 = claim_element(section2_nodes, "SECTION", { class: true });
			var section1_nodes = children(section1);
			div1 = claim_element(section1_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			claim_component(avatar.$$.fragment, div1_nodes);
			t10 = claim_space(div1_nodes);
			span0 = claim_element(div1_nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);
			h3 = claim_element(span0_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t11 = claim_text(h3_nodes, "Tina Kandelaki");
			h3_nodes.forEach(detach_dev);
			t12 = claim_space(span0_nodes);
			p0 = claim_element(span0_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t13 = claim_text(p0_nodes, "ORG charity charitify");
			p0_nodes.forEach(detach_dev);
			span0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t14 = claim_space(section1_nodes);
			claim_component(rate.$$.fragment, section1_nodes);
			section1_nodes.forEach(detach_dev);
			t15 = claim_space(section2_nodes);
			br1 = claim_element(section2_nodes, "BR", {});
			t16 = claim_space(section2_nodes);
			h10 = claim_element(section2_nodes, "H1", { class: true });
			var h10_nodes = children(h10);
			t17 = claim_text(h10_nodes, "The main title");
			h10_nodes.forEach(detach_dev);
			t18 = claim_space(section2_nodes);
			br2 = claim_element(section2_nodes, "BR", {});
			t19 = claim_space(section2_nodes);
			p1 = claim_element(section2_nodes, "P", { class: true, style: true });
			var p1_nodes = children(p1);
			t20 = claim_text(p1_nodes, "A small description that describes the title above and just makes text longer.");
			p1_nodes.forEach(detach_dev);
			section2_nodes.forEach(detach_dev);
			t21 = claim_space(nodes);
			br3 = claim_element(nodes, "BR", {});
			t22 = claim_space(nodes);
			br4 = claim_element(nodes, "BR", {});
			t23 = claim_space(nodes);
			br5 = claim_element(nodes, "BR", {});
			t24 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			claim_component(divider0.$$.fragment, div2_nodes);
			t25 = claim_space(div2_nodes);
			h20 = claim_element(div2_nodes, "H2", { style: true });
			var h20_nodes = children(h20);
			t26 = claim_text(h20_nodes, "The nearest list:");
			h20_nodes.forEach(detach_dev);
			t27 = claim_space(div2_nodes);
			claim_component(divider1.$$.fragment, div2_nodes);
			t28 = claim_space(div2_nodes);
			br6 = claim_element(div2_nodes, "BR", {});
			t29 = claim_space(div2_nodes);
			ul1 = claim_element(div2_nodes, "UL", { class: true });
			var ul1_nodes = children(ul1);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(ul1_nodes);
			}

			ul1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t30 = claim_space(nodes);
			br7 = claim_element(nodes, "BR", {});
			t31 = claim_space(nodes);
			br8 = claim_element(nodes, "BR", {});
			t32 = claim_space(nodes);
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			claim_component(divider2.$$.fragment, div3_nodes);
			t33 = claim_space(div3_nodes);
			h21 = claim_element(div3_nodes, "H2", { style: true });
			var h21_nodes = children(h21);
			t34 = claim_text(h21_nodes, "The nearest list:");
			h21_nodes.forEach(detach_dev);
			t35 = claim_space(div3_nodes);
			claim_component(divider3.$$.fragment, div3_nodes);
			t36 = claim_space(div3_nodes);
			br9 = claim_element(div3_nodes, "BR", {});
			t37 = claim_space(div3_nodes);
			ul2 = claim_element(div3_nodes, "UL", { class: true });
			var ul2_nodes = children(ul2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul2_nodes);
			}

			ul2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			t38 = claim_space(nodes);
			br10 = claim_element(nodes, "BR", {});
			t39 = claim_space(nodes);
			br11 = claim_element(nodes, "BR", {});
			t40 = claim_space(nodes);
			br12 = claim_element(nodes, "BR", {});
			t41 = claim_space(nodes);
			claim_component(divider4.$$.fragment, nodes);
			t42 = claim_space(nodes);
			claim_component(form.$$.fragment, nodes);
			t43 = claim_space(nodes);
			h11 = claim_element(nodes, "H1", { class: true });
			var h11_nodes = children(h11);
			t44 = claim_text(h11_nodes, "Charitify - is the application for helping those in need.");
			h11_nodes.forEach(detach_dev);
			t45 = claim_space(nodes);
			br13 = claim_element(nodes, "BR", {});
			t46 = claim_space(nodes);
			br14 = claim_element(nodes, "BR", {});
			t47 = claim_space(nodes);
			h22 = claim_element(nodes, "H2", { class: true });
			var h22_nodes = children(h22);
			t48 = claim_text(h22_nodes, "Typography");
			h22_nodes.forEach(detach_dev);
			t49 = claim_space(nodes);
			br15 = claim_element(nodes, "BR", {});
			t50 = claim_space(nodes);
			br16 = claim_element(nodes, "BR", {});
			t51 = claim_space(nodes);
			p2 = claim_element(nodes, "P", {});
			var p2_nodes = children(p2);
			t52 = claim_text(p2_nodes, "Few paragraphs to text fonts");
			p2_nodes.forEach(detach_dev);
			t53 = claim_space(nodes);
			p3 = claim_element(nodes, "P", {});
			var p3_nodes = children(p3);
			t54 = claim_text(p3_nodes, "Декілька параграфів для тесту тексту");
			p3_nodes.forEach(detach_dev);
			t55 = claim_space(nodes);
			p4 = claim_element(nodes, "P", {});
			var p4_nodes = children(p4);
			t56 = claim_text(p4_nodes, "Несколько параграфов для теста текста");
			p4_nodes.forEach(detach_dev);
			t57 = claim_space(nodes);
			br17 = claim_element(nodes, "BR", {});
			t58 = claim_space(nodes);
			br18 = claim_element(nodes, "BR", {});
			t59 = claim_space(nodes);
			h23 = claim_element(nodes, "H2", { class: true });
			var h23_nodes = children(h23);
			t60 = claim_text(h23_nodes, "Interactive elements");
			h23_nodes.forEach(detach_dev);
			t61 = claim_space(nodes);
			ul3 = claim_element(nodes, "UL", {});
			var ul3_nodes = children(ul3);
			li5 = claim_element(ul3_nodes, "LI", {});
			var li5_nodes = children(li5);
			span1 = claim_element(li5_nodes, "SPAN", {});
			var span1_nodes = children(span1);
			claim_component(icon0.$$.fragment, span1_nodes);
			t62 = claim_space(span1_nodes);
			claim_component(icon1.$$.fragment, span1_nodes);
			t63 = claim_space(span1_nodes);
			claim_component(icon2.$$.fragment, span1_nodes);
			span1_nodes.forEach(detach_dev);
			li5_nodes.forEach(detach_dev);
			t64 = claim_space(ul3_nodes);
			li6 = claim_element(ul3_nodes, "LI", {});
			var li6_nodes = children(li6);
			span2 = claim_element(li6_nodes, "SPAN", {});
			var span2_nodes = children(span2);
			claim_component(icon3.$$.fragment, span2_nodes);
			t65 = claim_space(span2_nodes);
			claim_component(icon4.$$.fragment, span2_nodes);
			t66 = claim_space(span2_nodes);
			claim_component(icon5.$$.fragment, span2_nodes);
			span2_nodes.forEach(detach_dev);
			li6_nodes.forEach(detach_dev);
			t67 = claim_space(ul3_nodes);
			li7 = claim_element(ul3_nodes, "LI", {});
			var li7_nodes = children(li7);
			span3 = claim_element(li7_nodes, "SPAN", {});
			var span3_nodes = children(span3);
			claim_component(icon6.$$.fragment, span3_nodes);
			t68 = claim_space(span3_nodes);
			claim_component(icon7.$$.fragment, span3_nodes);
			t69 = claim_space(span3_nodes);
			claim_component(icon8.$$.fragment, span3_nodes);
			span3_nodes.forEach(detach_dev);
			li7_nodes.forEach(detach_dev);
			ul3_nodes.forEach(detach_dev);
			t70 = claim_space(nodes);
			br19 = claim_element(nodes, "BR", {});
			t71 = claim_space(nodes);
			br20 = claim_element(nodes, "BR", {});
			t72 = claim_space(nodes);
			section3 = claim_element(nodes, "SECTION", { style: true });
			var section3_nodes = children(section3);
			div4 = claim_element(section3_nodes, "DIV", {});
			var div4_nodes = children(div4);
			br21 = claim_element(div4_nodes, "BR", {});
			t73 = claim_text(div4_nodes, "\n        Buttons\n        ");
			br22 = claim_element(div4_nodes, "BR", {});
			t74 = claim_space(div4_nodes);
			br23 = claim_element(div4_nodes, "BR", {});
			t75 = claim_space(div4_nodes);
			claim_component(button4.$$.fragment, div4_nodes);
			t76 = claim_space(div4_nodes);
			br24 = claim_element(div4_nodes, "BR", {});
			t77 = claim_space(div4_nodes);
			br25 = claim_element(div4_nodes, "BR", {});
			t78 = claim_space(div4_nodes);
			claim_component(button5.$$.fragment, div4_nodes);
			t79 = claim_space(div4_nodes);
			br26 = claim_element(div4_nodes, "BR", {});
			t80 = claim_space(div4_nodes);
			br27 = claim_element(div4_nodes, "BR", {});
			t81 = claim_space(div4_nodes);
			claim_component(button6.$$.fragment, div4_nodes);
			t82 = claim_space(div4_nodes);
			br28 = claim_element(div4_nodes, "BR", {});
			t83 = claim_space(div4_nodes);
			br29 = claim_element(div4_nodes, "BR", {});
			t84 = claim_text(div4_nodes, "\n        With text\n        ");
			claim_component(button7.$$.fragment, div4_nodes);
			t85 = claim_text(div4_nodes, "\n        and behind.\n        ");
			br30 = claim_element(div4_nodes, "BR", {});
			t86 = claim_space(div4_nodes);
			br31 = claim_element(div4_nodes, "BR", {});
			t87 = claim_space(div4_nodes);
			claim_component(button8.$$.fragment, div4_nodes);
			t88 = claim_space(div4_nodes);
			br32 = claim_element(div4_nodes, "BR", {});
			t89 = claim_space(div4_nodes);
			br33 = claim_element(div4_nodes, "BR", {});
			t90 = claim_space(div4_nodes);
			claim_component(button9.$$.fragment, div4_nodes);
			t91 = claim_space(div4_nodes);
			br34 = claim_element(div4_nodes, "BR", {});
			t92 = claim_space(div4_nodes);
			br35 = claim_element(div4_nodes, "BR", {});
			div4_nodes.forEach(detach_dev);
			t93 = claim_space(section3_nodes);
			div5 = claim_element(section3_nodes, "DIV", {});
			var div5_nodes = children(div5);
			br36 = claim_element(div5_nodes, "BR", {});
			t94 = claim_text(div5_nodes, "\n        Links as buttons\n        ");
			br37 = claim_element(div5_nodes, "BR", {});
			t95 = claim_space(div5_nodes);
			br38 = claim_element(div5_nodes, "BR", {});
			t96 = claim_space(div5_nodes);
			claim_component(button10.$$.fragment, div5_nodes);
			t97 = claim_space(div5_nodes);
			br39 = claim_element(div5_nodes, "BR", {});
			t98 = claim_space(div5_nodes);
			br40 = claim_element(div5_nodes, "BR", {});
			t99 = claim_space(div5_nodes);
			claim_component(button11.$$.fragment, div5_nodes);
			t100 = claim_space(div5_nodes);
			br41 = claim_element(div5_nodes, "BR", {});
			t101 = claim_space(div5_nodes);
			br42 = claim_element(div5_nodes, "BR", {});
			t102 = claim_space(div5_nodes);
			claim_component(button12.$$.fragment, div5_nodes);
			t103 = claim_space(div5_nodes);
			br43 = claim_element(div5_nodes, "BR", {});
			t104 = claim_space(div5_nodes);
			br44 = claim_element(div5_nodes, "BR", {});
			t105 = claim_text(div5_nodes, "\n        With text\n        ");
			claim_component(button13.$$.fragment, div5_nodes);
			t106 = claim_text(div5_nodes, "\n        and behind.\n        ");
			br45 = claim_element(div5_nodes, "BR", {});
			t107 = claim_space(div5_nodes);
			br46 = claim_element(div5_nodes, "BR", {});
			t108 = claim_space(div5_nodes);
			claim_component(button14.$$.fragment, div5_nodes);
			t109 = claim_space(div5_nodes);
			br47 = claim_element(div5_nodes, "BR", {});
			t110 = claim_space(div5_nodes);
			br48 = claim_element(div5_nodes, "BR", {});
			t111 = claim_space(div5_nodes);
			claim_component(button15.$$.fragment, div5_nodes);
			t112 = claim_space(div5_nodes);
			br49 = claim_element(div5_nodes, "BR", {});
			t113 = claim_space(div5_nodes);
			br50 = claim_element(div5_nodes, "BR", {});
			div5_nodes.forEach(detach_dev);
			section3_nodes.forEach(detach_dev);
			t114 = claim_space(nodes);
			br51 = claim_element(nodes, "BR", {});
			t115 = claim_space(nodes);
			br52 = claim_element(nodes, "BR", {});
			t116 = claim_space(nodes);
			h24 = claim_element(nodes, "H2", { class: true });
			var h24_nodes = children(h24);
			t117 = claim_text(h24_nodes, "Input fields");
			h24_nodes.forEach(detach_dev);
			t118 = claim_space(nodes);
			br53 = claim_element(nodes, "BR", {});
			t119 = claim_space(nodes);
			br54 = claim_element(nodes, "BR", {});
			t120 = claim_space(nodes);
			section4 = claim_element(nodes, "SECTION", {});
			var section4_nodes = children(section4);
			claim_component(input1.$$.fragment, section4_nodes);
			t121 = claim_space(section4_nodes);
			br55 = claim_element(section4_nodes, "BR", {});
			t122 = claim_space(section4_nodes);
			br56 = claim_element(section4_nodes, "BR", {});
			t123 = claim_space(section4_nodes);
			claim_component(input2.$$.fragment, section4_nodes);
			t124 = claim_space(section4_nodes);
			br57 = claim_element(section4_nodes, "BR", {});
			t125 = claim_space(section4_nodes);
			br58 = claim_element(section4_nodes, "BR", {});
			t126 = claim_space(section4_nodes);
			claim_component(input3.$$.fragment, section4_nodes);
			t127 = claim_space(section4_nodes);
			datalist1 = claim_element(section4_nodes, "DATALIST", { id: true });
			var datalist1_nodes = children(datalist1);
			option3 = claim_element(datalist1_nodes, "OPTION", { value: true });
			var option3_nodes = children(option3);
			option3_nodes.forEach(detach_dev);
			option4 = claim_element(datalist1_nodes, "OPTION", { value: true });
			var option4_nodes = children(option4);
			option4_nodes.forEach(detach_dev);
			option5 = claim_element(datalist1_nodes, "OPTION", { value: true });
			var option5_nodes = children(option5);
			option5_nodes.forEach(detach_dev);
			datalist1_nodes.forEach(detach_dev);
			t128 = claim_space(section4_nodes);
			label = claim_element(section4_nodes, "LABEL", { for: true, class: true });
			var label_nodes = children(label);
			t129 = claim_text(label_nodes, "label");
			label_nodes.forEach(detach_dev);
			t130 = claim_space(section4_nodes);
			input4 = claim_element(section4_nodes, "INPUT", { id: true, type: true, value: true });
			t131 = claim_space(section4_nodes);
			br59 = claim_element(section4_nodes, "BR", {});
			t132 = claim_space(section4_nodes);
			br60 = claim_element(section4_nodes, "BR", {});
			t133 = claim_space(section4_nodes);
			a = claim_element(section4_nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t134 = claim_text(a_nodes, "Some link");
			a_nodes.forEach(detach_dev);
			t135 = claim_space(section4_nodes);
			br61 = claim_element(section4_nodes, "BR", {});
			t136 = claim_space(section4_nodes);
			br62 = claim_element(section4_nodes, "BR", {});
			t137 = claim_space(section4_nodes);
			button16 = claim_element(section4_nodes, "BUTTON", { type: true, class: true });
			var button16_nodes = children(button16);
			t138 = claim_text(button16_nodes, "Button example");
			button16_nodes.forEach(detach_dev);
			section4_nodes.forEach(detach_dev);
			t139 = claim_space(nodes);
			br63 = claim_element(nodes, "BR", {});
			t140 = claim_space(nodes);
			br64 = claim_element(nodes, "BR", {});
			t141 = claim_space(nodes);
			h25 = claim_element(nodes, "H2", { class: true });
			var h25_nodes = children(h25);
			t142 = claim_text(h25_nodes, "Images");
			h25_nodes.forEach(detach_dev);
			t143 = claim_space(nodes);
			br65 = claim_element(nodes, "BR", {});
			t144 = claim_space(nodes);
			br66 = claim_element(nodes, "BR", {});
			t145 = claim_space(nodes);
			claim_component(picture.$$.fragment, nodes);
			t146 = claim_space(nodes);
			br67 = claim_element(nodes, "BR", {});
			t147 = claim_space(nodes);
			br68 = claim_element(nodes, "BR", {});
			t148 = claim_space(nodes);
			h26 = claim_element(nodes, "H2", { class: true });
			var h26_nodes = children(h26);
			t149 = claim_text(h26_nodes, "Other");
			h26_nodes.forEach(detach_dev);
			t150 = claim_space(nodes);
			p5 = claim_element(nodes, "P", {});
			var p5_nodes = children(p5);
			strong = claim_element(p5_nodes, "STRONG", {});
			var strong_nodes = children(strong);
			t151 = claim_text(strong_nodes, "Try editing this file (src/routes/index.svelte) to test live reloading.");
			strong_nodes.forEach(detach_dev);
			p5_nodes.forEach(detach_dev);
			t152 = claim_space(nodes);
			p6 = claim_element(nodes, "P", { style: true });
			var p6_nodes = children(p6);
			t153 = claim_text(p6_nodes, "A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.");
			p6_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Charitify - is the application for helping those in need.";
			attr_dev(div0, "class", "top-pic svelte-1l1j0nq");
			add_location(div0, file, 134, 8, 3327);
			attr_dev(li0, "class", "svelte-1l1j0nq");
			add_location(li0, file, 155, 12, 4155);
			attr_dev(li1, "class", "svelte-1l1j0nq");
			add_location(li1, file, 158, 12, 4275);
			attr_dev(li2, "class", "svelte-1l1j0nq");
			add_location(li2, file, 161, 12, 4396);
			add_location(br0, file, 165, 16, 4539);
			option0.__value = "20";
			option0.value = option0.__value;
			add_location(option0, file, 176, 20, 4890);
			option1.__value = "500";
			option1.value = option1.__value;
			add_location(option1, file, 177, 20, 4930);
			option2.__value = "1000";
			option2.value = option2.__value;
			add_location(option2, file, 178, 20, 4971);
			attr_dev(datalist0, "id", "sum-suggestions");
			add_location(datalist0, file, 175, 16, 4838);
			attr_dev(li3, "class", "svelte-1l1j0nq");
			add_location(li3, file, 164, 12, 4518);
			attr_dev(li4, "class", "svelte-1l1j0nq");
			add_location(li4, file, 181, 12, 5051);
			attr_dev(ul0, "class", "options svelte-1l1j0nq");
			add_location(ul0, file, 154, 8, 4122);
			attr_dev(section0, "class", "top svelte-1l1j0nq");
			add_location(section0, file, 133, 4, 3297);
			attr_dev(h3, "class", "svelte-1l1j0nq");
			add_location(h3, file, 194, 16, 5410);
			attr_dev(p0, "class", "svelte-1l1j0nq");
			add_location(p0, file, 195, 16, 5450);
			attr_dev(span0, "class", "svelte-1l1j0nq");
			add_location(span0, file, 193, 12, 5387);
			attr_dev(div1, "class", "ava-section svelte-1l1j0nq");
			add_location(div1, file, 190, 8, 5271);
			attr_dev(section1, "class", "rate-section svelte-1l1j0nq");
			add_location(section1, file, 189, 4, 5232);
			add_location(br1, file, 202, 4, 5551);
			attr_dev(h10, "class", "svelte-1l1j0nq");
			add_location(h10, file, 204, 4, 5561);
			add_location(br2, file, 206, 4, 5590);
			attr_dev(p1, "class", "text-center");
			set_style(p1, "padding", "0 10vw");
			add_location(p1, file, 208, 4, 5600);
			attr_dev(section2, "class", "container");
			add_location(section2, file, 132, 0, 3265);
			add_location(br3, file, 213, 0, 5756);
			add_location(br4, file, 214, 0, 5761);
			add_location(br5, file, 215, 0, 5766);
			set_style(h20, "text-align", "right");
			add_location(h20, file, 219, 4, 5825);
			add_location(br6, file, 222, 4, 5908);
			attr_dev(ul1, "class", "cards svelte-1l1j0nq");
			add_location(ul1, file, 224, 4, 5918);
			attr_dev(div2, "class", "container");
			add_location(div2, file, 217, 0, 5772);
			add_location(br7, file, 233, 0, 6077);
			add_location(br8, file, 234, 0, 6082);
			set_style(h21, "text-align", "right");
			add_location(h21, file, 238, 4, 6141);
			add_location(br9, file, 241, 4, 6224);
			attr_dev(ul2, "class", "cards svelte-1l1j0nq");
			add_location(ul2, file, 243, 4, 6234);
			attr_dev(div3, "class", "container");
			add_location(div3, file, 236, 0, 6088);
			add_location(br10, file, 252, 0, 6393);
			add_location(br11, file, 253, 0, 6398);
			add_location(br12, file, 254, 0, 6403);
			attr_dev(h11, "class", "svelte-1l1j0nq");
			add_location(h11, file, 306, 0, 7220);
			add_location(br13, file, 308, 0, 7288);
			add_location(br14, file, 309, 0, 7293);
			attr_dev(h22, "class", "text-success");
			add_location(h22, file, 311, 0, 7299);
			add_location(br15, file, 313, 0, 7341);
			add_location(br16, file, 314, 0, 7346);
			add_location(p2, file, 316, 0, 7352);
			add_location(p3, file, 317, 0, 7388);
			add_location(p4, file, 318, 0, 7432);
			add_location(br17, file, 320, 0, 7478);
			add_location(br18, file, 321, 0, 7483);
			attr_dev(h23, "class", "text-warning");
			add_location(h23, file, 323, 0, 7489);
			add_location(span1, file, 327, 8, 7563);
			add_location(li5, file, 326, 4, 7550);
			add_location(span2, file, 334, 8, 7797);
			add_location(li6, file, 333, 4, 7784);
			add_location(span3, file, 341, 8, 7992);
			add_location(li7, file, 340, 4, 7979);
			add_location(ul3, file, 325, 0, 7541);
			add_location(br19, file, 349, 0, 8210);
			add_location(br20, file, 350, 0, 8215);
			add_location(br21, file, 354, 8, 8322);
			add_location(br22, file, 356, 8, 8351);
			add_location(br23, file, 357, 8, 8364);
			add_location(br24, file, 359, 8, 8440);
			add_location(br25, file, 360, 8, 8453);
			add_location(br26, file, 362, 8, 8542);
			add_location(br27, file, 363, 8, 8555);
			add_location(br28, file, 365, 8, 8661);
			add_location(br29, file, 366, 8, 8674);
			add_location(br30, file, 370, 8, 8801);
			add_location(br31, file, 371, 8, 8814);
			add_location(br32, file, 373, 8, 8921);
			add_location(br33, file, 374, 8, 8934);
			add_location(br34, file, 376, 8, 9040);
			add_location(br35, file, 377, 8, 9053);
			add_location(div4, file, 353, 4, 8308);
			add_location(br36, file, 381, 8, 9088);
			add_location(br37, file, 383, 8, 9126);
			add_location(br38, file, 384, 8, 9139);
			add_location(br39, file, 386, 8, 9224);
			add_location(br40, file, 387, 8, 9237);
			add_location(br41, file, 389, 8, 9335);
			add_location(br42, file, 390, 8, 9348);
			add_location(br43, file, 392, 8, 9446);
			add_location(br44, file, 393, 8, 9459);
			add_location(br45, file, 397, 8, 9595);
			add_location(br46, file, 398, 8, 9608);
			add_location(br47, file, 400, 8, 9724);
			add_location(br48, file, 401, 8, 9737);
			add_location(br49, file, 403, 8, 9852);
			add_location(br50, file, 404, 8, 9865);
			add_location(div5, file, 380, 4, 9074);
			set_style(section3, "text-align", "center");
			set_style(section3, "display", "flex");
			set_style(section3, "justify-content", "space-around");
			add_location(section3, file, 352, 0, 8221);
			add_location(br51, file, 408, 0, 9893);
			add_location(br52, file, 409, 0, 9898);
			attr_dev(h24, "class", "text-danger");
			add_location(h24, file, 411, 0, 9904);
			add_location(br53, file, 413, 0, 9947);
			add_location(br54, file, 414, 0, 9952);
			add_location(br55, file, 419, 4, 10017);
			add_location(br56, file, 420, 4, 10026);
			add_location(br57, file, 424, 4, 10109);
			add_location(br58, file, 425, 4, 10118);
			option3.__value = "1";
			option3.value = option3.__value;
			add_location(option3, file, 430, 8, 10207);
			option4.__value = "2";
			option4.value = option4.__value;
			add_location(option4, file, 431, 8, 10234);
			option5.__value = "3";
			option5.value = option5.__value;
			add_location(option5, file, 432, 8, 10261);
			attr_dev(datalist1, "id", "lis");
			add_location(datalist1, file, 429, 4, 10179);
			attr_dev(label, "for", "input");
			attr_dev(label, "class", "text-success");
			add_location(label, file, 435, 4, 10301);
			attr_dev(input4, "id", "input");
			attr_dev(input4, "type", "text");
			input4.value = "text";
			add_location(input4, file, 436, 4, 10359);
			add_location(br59, file, 438, 4, 10408);
			add_location(br60, file, 439, 4, 10417);
			attr_dev(a, "href", ".");
			attr_dev(a, "class", "text-warning");
			add_location(a, file, 441, 4, 10427);
			add_location(br61, file, 443, 4, 10479);
			add_location(br62, file, 444, 4, 10488);
			attr_dev(button16, "type", "button");
			attr_dev(button16, "class", "text-info");
			add_location(button16, file, 446, 4, 10498);
			add_location(section4, file, 416, 0, 9958);
			add_location(br63, file, 449, 0, 10574);
			add_location(br64, file, 450, 0, 10579);
			attr_dev(h25, "class", "text-info");
			add_location(h25, file, 452, 0, 10585);
			add_location(br65, file, 454, 0, 10620);
			add_location(br66, file, 455, 0, 10625);
			add_location(br67, file, 459, 0, 10697);
			add_location(br68, file, 460, 0, 10702);
			attr_dev(h26, "class", "text-success");
			add_location(h26, file, 462, 0, 10708);
			add_location(strong, file, 465, 4, 10753);
			add_location(p5, file, 464, 0, 10745);
			set_style(p6, "text-align", "justify");
			add_location(p6, file, 470, 0, 10862);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, section2, anchor);
			append_dev(section2, section0);
			append_dev(section0, div0);
			mount_component(swipe, div0, null);
			append_dev(section0, t1);
			append_dev(section0, ul0);
			append_dev(ul0, li0);
			mount_component(button0, li0, null);
			append_dev(ul0, t2);
			append_dev(ul0, li1);
			mount_component(button1, li1, null);
			append_dev(ul0, t3);
			append_dev(ul0, li2);
			mount_component(button2, li2, null);
			append_dev(ul0, t4);
			append_dev(ul0, li3);
			append_dev(li3, br0);
			append_dev(li3, t5);
			mount_component(input0, li3, null);
			append_dev(li3, t6);
			append_dev(li3, datalist0);
			append_dev(datalist0, option0);
			append_dev(datalist0, option1);
			append_dev(datalist0, option2);
			append_dev(ul0, t7);
			append_dev(ul0, li4);
			mount_component(button3, li4, null);
			append_dev(section2, t8);
			mount_component(progress, section2, null);
			append_dev(section2, t9);
			append_dev(section2, section1);
			append_dev(section1, div1);
			mount_component(avatar, div1, null);
			append_dev(div1, t10);
			append_dev(div1, span0);
			append_dev(span0, h3);
			append_dev(h3, t11);
			append_dev(span0, t12);
			append_dev(span0, p0);
			append_dev(p0, t13);
			append_dev(section1, t14);
			mount_component(rate, section1, null);
			append_dev(section2, t15);
			append_dev(section2, br1);
			append_dev(section2, t16);
			append_dev(section2, h10);
			append_dev(h10, t17);
			append_dev(section2, t18);
			append_dev(section2, br2);
			append_dev(section2, t19);
			append_dev(section2, p1);
			append_dev(p1, t20);
			insert_dev(target, t21, anchor);
			insert_dev(target, br3, anchor);
			insert_dev(target, t22, anchor);
			insert_dev(target, br4, anchor);
			insert_dev(target, t23, anchor);
			insert_dev(target, br5, anchor);
			insert_dev(target, t24, anchor);
			insert_dev(target, div2, anchor);
			mount_component(divider0, div2, null);
			append_dev(div2, t25);
			append_dev(div2, h20);
			append_dev(h20, t26);
			append_dev(div2, t27);
			mount_component(divider1, div2, null);
			append_dev(div2, t28);
			append_dev(div2, br6);
			append_dev(div2, t29);
			append_dev(div2, ul1);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(ul1, null);
			}

			insert_dev(target, t30, anchor);
			insert_dev(target, br7, anchor);
			insert_dev(target, t31, anchor);
			insert_dev(target, br8, anchor);
			insert_dev(target, t32, anchor);
			insert_dev(target, div3, anchor);
			mount_component(divider2, div3, null);
			append_dev(div3, t33);
			append_dev(div3, h21);
			append_dev(h21, t34);
			append_dev(div3, t35);
			mount_component(divider3, div3, null);
			append_dev(div3, t36);
			append_dev(div3, br9);
			append_dev(div3, t37);
			append_dev(div3, ul2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul2, null);
			}

			insert_dev(target, t38, anchor);
			insert_dev(target, br10, anchor);
			insert_dev(target, t39, anchor);
			insert_dev(target, br11, anchor);
			insert_dev(target, t40, anchor);
			insert_dev(target, br12, anchor);
			insert_dev(target, t41, anchor);
			mount_component(divider4, target, anchor);
			insert_dev(target, t42, anchor);
			mount_component(form, target, anchor);
			insert_dev(target, t43, anchor);
			insert_dev(target, h11, anchor);
			append_dev(h11, t44);
			insert_dev(target, t45, anchor);
			insert_dev(target, br13, anchor);
			insert_dev(target, t46, anchor);
			insert_dev(target, br14, anchor);
			insert_dev(target, t47, anchor);
			insert_dev(target, h22, anchor);
			append_dev(h22, t48);
			insert_dev(target, t49, anchor);
			insert_dev(target, br15, anchor);
			insert_dev(target, t50, anchor);
			insert_dev(target, br16, anchor);
			insert_dev(target, t51, anchor);
			insert_dev(target, p2, anchor);
			append_dev(p2, t52);
			insert_dev(target, t53, anchor);
			insert_dev(target, p3, anchor);
			append_dev(p3, t54);
			insert_dev(target, t55, anchor);
			insert_dev(target, p4, anchor);
			append_dev(p4, t56);
			insert_dev(target, t57, anchor);
			insert_dev(target, br17, anchor);
			insert_dev(target, t58, anchor);
			insert_dev(target, br18, anchor);
			insert_dev(target, t59, anchor);
			insert_dev(target, h23, anchor);
			append_dev(h23, t60);
			insert_dev(target, t61, anchor);
			insert_dev(target, ul3, anchor);
			append_dev(ul3, li5);
			append_dev(li5, span1);
			mount_component(icon0, span1, null);
			append_dev(span1, t62);
			mount_component(icon1, span1, null);
			append_dev(span1, t63);
			mount_component(icon2, span1, null);
			append_dev(ul3, t64);
			append_dev(ul3, li6);
			append_dev(li6, span2);
			mount_component(icon3, span2, null);
			append_dev(span2, t65);
			mount_component(icon4, span2, null);
			append_dev(span2, t66);
			mount_component(icon5, span2, null);
			append_dev(ul3, t67);
			append_dev(ul3, li7);
			append_dev(li7, span3);
			mount_component(icon6, span3, null);
			append_dev(span3, t68);
			mount_component(icon7, span3, null);
			append_dev(span3, t69);
			mount_component(icon8, span3, null);
			insert_dev(target, t70, anchor);
			insert_dev(target, br19, anchor);
			insert_dev(target, t71, anchor);
			insert_dev(target, br20, anchor);
			insert_dev(target, t72, anchor);
			insert_dev(target, section3, anchor);
			append_dev(section3, div4);
			append_dev(div4, br21);
			append_dev(div4, t73);
			append_dev(div4, br22);
			append_dev(div4, t74);
			append_dev(div4, br23);
			append_dev(div4, t75);
			mount_component(button4, div4, null);
			append_dev(div4, t76);
			append_dev(div4, br24);
			append_dev(div4, t77);
			append_dev(div4, br25);
			append_dev(div4, t78);
			mount_component(button5, div4, null);
			append_dev(div4, t79);
			append_dev(div4, br26);
			append_dev(div4, t80);
			append_dev(div4, br27);
			append_dev(div4, t81);
			mount_component(button6, div4, null);
			append_dev(div4, t82);
			append_dev(div4, br28);
			append_dev(div4, t83);
			append_dev(div4, br29);
			append_dev(div4, t84);
			mount_component(button7, div4, null);
			append_dev(div4, t85);
			append_dev(div4, br30);
			append_dev(div4, t86);
			append_dev(div4, br31);
			append_dev(div4, t87);
			mount_component(button8, div4, null);
			append_dev(div4, t88);
			append_dev(div4, br32);
			append_dev(div4, t89);
			append_dev(div4, br33);
			append_dev(div4, t90);
			mount_component(button9, div4, null);
			append_dev(div4, t91);
			append_dev(div4, br34);
			append_dev(div4, t92);
			append_dev(div4, br35);
			append_dev(section3, t93);
			append_dev(section3, div5);
			append_dev(div5, br36);
			append_dev(div5, t94);
			append_dev(div5, br37);
			append_dev(div5, t95);
			append_dev(div5, br38);
			append_dev(div5, t96);
			mount_component(button10, div5, null);
			append_dev(div5, t97);
			append_dev(div5, br39);
			append_dev(div5, t98);
			append_dev(div5, br40);
			append_dev(div5, t99);
			mount_component(button11, div5, null);
			append_dev(div5, t100);
			append_dev(div5, br41);
			append_dev(div5, t101);
			append_dev(div5, br42);
			append_dev(div5, t102);
			mount_component(button12, div5, null);
			append_dev(div5, t103);
			append_dev(div5, br43);
			append_dev(div5, t104);
			append_dev(div5, br44);
			append_dev(div5, t105);
			mount_component(button13, div5, null);
			append_dev(div5, t106);
			append_dev(div5, br45);
			append_dev(div5, t107);
			append_dev(div5, br46);
			append_dev(div5, t108);
			mount_component(button14, div5, null);
			append_dev(div5, t109);
			append_dev(div5, br47);
			append_dev(div5, t110);
			append_dev(div5, br48);
			append_dev(div5, t111);
			mount_component(button15, div5, null);
			append_dev(div5, t112);
			append_dev(div5, br49);
			append_dev(div5, t113);
			append_dev(div5, br50);
			insert_dev(target, t114, anchor);
			insert_dev(target, br51, anchor);
			insert_dev(target, t115, anchor);
			insert_dev(target, br52, anchor);
			insert_dev(target, t116, anchor);
			insert_dev(target, h24, anchor);
			append_dev(h24, t117);
			insert_dev(target, t118, anchor);
			insert_dev(target, br53, anchor);
			insert_dev(target, t119, anchor);
			insert_dev(target, br54, anchor);
			insert_dev(target, t120, anchor);
			insert_dev(target, section4, anchor);
			mount_component(input1, section4, null);
			append_dev(section4, t121);
			append_dev(section4, br55);
			append_dev(section4, t122);
			append_dev(section4, br56);
			append_dev(section4, t123);
			mount_component(input2, section4, null);
			append_dev(section4, t124);
			append_dev(section4, br57);
			append_dev(section4, t125);
			append_dev(section4, br58);
			append_dev(section4, t126);
			mount_component(input3, section4, null);
			append_dev(section4, t127);
			append_dev(section4, datalist1);
			append_dev(datalist1, option3);
			append_dev(datalist1, option4);
			append_dev(datalist1, option5);
			append_dev(section4, t128);
			append_dev(section4, label);
			append_dev(label, t129);
			append_dev(section4, t130);
			append_dev(section4, input4);
			append_dev(section4, t131);
			append_dev(section4, br59);
			append_dev(section4, t132);
			append_dev(section4, br60);
			append_dev(section4, t133);
			append_dev(section4, a);
			append_dev(a, t134);
			append_dev(section4, t135);
			append_dev(section4, br61);
			append_dev(section4, t136);
			append_dev(section4, br62);
			append_dev(section4, t137);
			append_dev(section4, button16);
			append_dev(button16, t138);
			insert_dev(target, t139, anchor);
			insert_dev(target, br63, anchor);
			insert_dev(target, t140, anchor);
			insert_dev(target, br64, anchor);
			insert_dev(target, t141, anchor);
			insert_dev(target, h25, anchor);
			append_dev(h25, t142);
			insert_dev(target, t143, anchor);
			insert_dev(target, br65, anchor);
			insert_dev(target, t144, anchor);
			insert_dev(target, br66, anchor);
			insert_dev(target, t145, anchor);
			mount_component(picture, target, anchor);
			insert_dev(target, t146, anchor);
			insert_dev(target, br67, anchor);
			insert_dev(target, t147, anchor);
			insert_dev(target, br68, anchor);
			insert_dev(target, t148, anchor);
			insert_dev(target, h26, anchor);
			append_dev(h26, t149);
			insert_dev(target, t150, anchor);
			insert_dev(target, p5, anchor);
			append_dev(p5, strong);
			append_dev(strong, t151);
			insert_dev(target, t152, anchor);
			insert_dev(target, p6, anchor);
			append_dev(p6, t153);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const swipe_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				swipe_changes.$$scope = { dirty, ctx };
			}

			swipe.$set(swipe_changes);
			const button0_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button0_changes.$$scope = { dirty, ctx };
			}

			button0.$set(button0_changes);
			const button1_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button1_changes.$$scope = { dirty, ctx };
			}

			button1.$set(button1_changes);
			const button2_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button2_changes.$$scope = { dirty, ctx };
			}

			button2.$set(button2_changes);
			const button3_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button3_changes.$$scope = { dirty, ctx };
			}

			button3.$set(button3_changes);

			if (dirty & /*cards*/ 1) {
				each_value_1 = /*cards*/ ctx[0];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
						transition_in(each_blocks_1[i], 1);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						transition_in(each_blocks_1[i], 1);
						each_blocks_1[i].m(ul1, null);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks_1.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (dirty & /*cards*/ 1) {
				each_value = /*cards*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(ul2, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out_1(i);
				}

				check_outros();
			}

			const form_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				form_changes.$$scope = { dirty, ctx };
			}

			form.$set(form_changes);
			const button4_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button4_changes.$$scope = { dirty, ctx };
			}

			button4.$set(button4_changes);
			const button5_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button5_changes.$$scope = { dirty, ctx };
			}

			button5.$set(button5_changes);
			const button6_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button6_changes.$$scope = { dirty, ctx };
			}

			button6.$set(button6_changes);
			const button7_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button7_changes.$$scope = { dirty, ctx };
			}

			button7.$set(button7_changes);
			const button8_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button8_changes.$$scope = { dirty, ctx };
			}

			button8.$set(button8_changes);
			const button9_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button9_changes.$$scope = { dirty, ctx };
			}

			button9.$set(button9_changes);
			const button10_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button10_changes.$$scope = { dirty, ctx };
			}

			button10.$set(button10_changes);
			const button11_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button11_changes.$$scope = { dirty, ctx };
			}

			button11.$set(button11_changes);
			const button12_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button12_changes.$$scope = { dirty, ctx };
			}

			button12.$set(button12_changes);
			const button13_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button13_changes.$$scope = { dirty, ctx };
			}

			button13.$set(button13_changes);
			const button14_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button14_changes.$$scope = { dirty, ctx };
			}

			button14.$set(button14_changes);
			const button15_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button15_changes.$$scope = { dirty, ctx };
			}

			button15.$set(button15_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(swipe.$$.fragment, local);
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			transition_in(button2.$$.fragment, local);
			transition_in(input0.$$.fragment, local);
			transition_in(button3.$$.fragment, local);
			transition_in(progress.$$.fragment, local);
			transition_in(avatar.$$.fragment, local);
			transition_in(rate.$$.fragment, local);
			transition_in(divider0.$$.fragment, local);
			transition_in(divider1.$$.fragment, local);

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks_1[i]);
			}

			transition_in(divider2.$$.fragment, local);
			transition_in(divider3.$$.fragment, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(divider4.$$.fragment, local);
			transition_in(form.$$.fragment, local);
			transition_in(icon0.$$.fragment, local);
			transition_in(icon1.$$.fragment, local);
			transition_in(icon2.$$.fragment, local);
			transition_in(icon3.$$.fragment, local);
			transition_in(icon4.$$.fragment, local);
			transition_in(icon5.$$.fragment, local);
			transition_in(icon6.$$.fragment, local);
			transition_in(icon7.$$.fragment, local);
			transition_in(icon8.$$.fragment, local);
			transition_in(button4.$$.fragment, local);
			transition_in(button5.$$.fragment, local);
			transition_in(button6.$$.fragment, local);
			transition_in(button7.$$.fragment, local);
			transition_in(button8.$$.fragment, local);
			transition_in(button9.$$.fragment, local);
			transition_in(button10.$$.fragment, local);
			transition_in(button11.$$.fragment, local);
			transition_in(button12.$$.fragment, local);
			transition_in(button13.$$.fragment, local);
			transition_in(button14.$$.fragment, local);
			transition_in(button15.$$.fragment, local);
			transition_in(input1.$$.fragment, local);
			transition_in(input2.$$.fragment, local);
			transition_in(input3.$$.fragment, local);
			transition_in(picture.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(swipe.$$.fragment, local);
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			transition_out(button2.$$.fragment, local);
			transition_out(input0.$$.fragment, local);
			transition_out(button3.$$.fragment, local);
			transition_out(progress.$$.fragment, local);
			transition_out(avatar.$$.fragment, local);
			transition_out(rate.$$.fragment, local);
			transition_out(divider0.$$.fragment, local);
			transition_out(divider1.$$.fragment, local);
			each_blocks_1 = each_blocks_1.filter(Boolean);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				transition_out(each_blocks_1[i]);
			}

			transition_out(divider2.$$.fragment, local);
			transition_out(divider3.$$.fragment, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(divider4.$$.fragment, local);
			transition_out(form.$$.fragment, local);
			transition_out(icon0.$$.fragment, local);
			transition_out(icon1.$$.fragment, local);
			transition_out(icon2.$$.fragment, local);
			transition_out(icon3.$$.fragment, local);
			transition_out(icon4.$$.fragment, local);
			transition_out(icon5.$$.fragment, local);
			transition_out(icon6.$$.fragment, local);
			transition_out(icon7.$$.fragment, local);
			transition_out(icon8.$$.fragment, local);
			transition_out(button4.$$.fragment, local);
			transition_out(button5.$$.fragment, local);
			transition_out(button6.$$.fragment, local);
			transition_out(button7.$$.fragment, local);
			transition_out(button8.$$.fragment, local);
			transition_out(button9.$$.fragment, local);
			transition_out(button10.$$.fragment, local);
			transition_out(button11.$$.fragment, local);
			transition_out(button12.$$.fragment, local);
			transition_out(button13.$$.fragment, local);
			transition_out(button14.$$.fragment, local);
			transition_out(button15.$$.fragment, local);
			transition_out(input1.$$.fragment, local);
			transition_out(input2.$$.fragment, local);
			transition_out(input3.$$.fragment, local);
			transition_out(picture.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(section2);
			destroy_component(swipe);
			destroy_component(button0);
			destroy_component(button1);
			destroy_component(button2);
			destroy_component(input0);
			destroy_component(button3);
			destroy_component(progress);
			destroy_component(avatar);
			destroy_component(rate);
			if (detaching) detach_dev(t21);
			if (detaching) detach_dev(br3);
			if (detaching) detach_dev(t22);
			if (detaching) detach_dev(br4);
			if (detaching) detach_dev(t23);
			if (detaching) detach_dev(br5);
			if (detaching) detach_dev(t24);
			if (detaching) detach_dev(div2);
			destroy_component(divider0);
			destroy_component(divider1);
			destroy_each(each_blocks_1, detaching);
			if (detaching) detach_dev(t30);
			if (detaching) detach_dev(br7);
			if (detaching) detach_dev(t31);
			if (detaching) detach_dev(br8);
			if (detaching) detach_dev(t32);
			if (detaching) detach_dev(div3);
			destroy_component(divider2);
			destroy_component(divider3);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t38);
			if (detaching) detach_dev(br10);
			if (detaching) detach_dev(t39);
			if (detaching) detach_dev(br11);
			if (detaching) detach_dev(t40);
			if (detaching) detach_dev(br12);
			if (detaching) detach_dev(t41);
			destroy_component(divider4, detaching);
			if (detaching) detach_dev(t42);
			destroy_component(form, detaching);
			if (detaching) detach_dev(t43);
			if (detaching) detach_dev(h11);
			if (detaching) detach_dev(t45);
			if (detaching) detach_dev(br13);
			if (detaching) detach_dev(t46);
			if (detaching) detach_dev(br14);
			if (detaching) detach_dev(t47);
			if (detaching) detach_dev(h22);
			if (detaching) detach_dev(t49);
			if (detaching) detach_dev(br15);
			if (detaching) detach_dev(t50);
			if (detaching) detach_dev(br16);
			if (detaching) detach_dev(t51);
			if (detaching) detach_dev(p2);
			if (detaching) detach_dev(t53);
			if (detaching) detach_dev(p3);
			if (detaching) detach_dev(t55);
			if (detaching) detach_dev(p4);
			if (detaching) detach_dev(t57);
			if (detaching) detach_dev(br17);
			if (detaching) detach_dev(t58);
			if (detaching) detach_dev(br18);
			if (detaching) detach_dev(t59);
			if (detaching) detach_dev(h23);
			if (detaching) detach_dev(t61);
			if (detaching) detach_dev(ul3);
			destroy_component(icon0);
			destroy_component(icon1);
			destroy_component(icon2);
			destroy_component(icon3);
			destroy_component(icon4);
			destroy_component(icon5);
			destroy_component(icon6);
			destroy_component(icon7);
			destroy_component(icon8);
			if (detaching) detach_dev(t70);
			if (detaching) detach_dev(br19);
			if (detaching) detach_dev(t71);
			if (detaching) detach_dev(br20);
			if (detaching) detach_dev(t72);
			if (detaching) detach_dev(section3);
			destroy_component(button4);
			destroy_component(button5);
			destroy_component(button6);
			destroy_component(button7);
			destroy_component(button8);
			destroy_component(button9);
			destroy_component(button10);
			destroy_component(button11);
			destroy_component(button12);
			destroy_component(button13);
			destroy_component(button14);
			destroy_component(button15);
			if (detaching) detach_dev(t114);
			if (detaching) detach_dev(br51);
			if (detaching) detach_dev(t115);
			if (detaching) detach_dev(br52);
			if (detaching) detach_dev(t116);
			if (detaching) detach_dev(h24);
			if (detaching) detach_dev(t118);
			if (detaching) detach_dev(br53);
			if (detaching) detach_dev(t119);
			if (detaching) detach_dev(br54);
			if (detaching) detach_dev(t120);
			if (detaching) detach_dev(section4);
			destroy_component(input1);
			destroy_component(input2);
			destroy_component(input3);
			if (detaching) detach_dev(t139);
			if (detaching) detach_dev(br63);
			if (detaching) detach_dev(t140);
			if (detaching) detach_dev(br64);
			if (detaching) detach_dev(t141);
			if (detaching) detach_dev(h25);
			if (detaching) detach_dev(t143);
			if (detaching) detach_dev(br65);
			if (detaching) detach_dev(t144);
			if (detaching) detach_dev(br66);
			if (detaching) detach_dev(t145);
			destroy_component(picture, detaching);
			if (detaching) detach_dev(t146);
			if (detaching) detach_dev(br67);
			if (detaching) detach_dev(t147);
			if (detaching) detach_dev(br68);
			if (detaching) detach_dev(t148);
			if (detaching) detach_dev(h26);
			if (detaching) detach_dev(t150);
			if (detaching) detach_dev(p5);
			if (detaching) detach_dev(t152);
			if (detaching) detach_dev(p6);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self) {
	const cards = [
		{
			src: "https://placeimg.com/300/300/people",
			title: "The main title and short description.",
			percent: 45,
			orgHead: "Tina Kandelaki",
			organization: "ORG charity of Charitify."
		},
		{
			src: "https://placeimg.com/300/300/arch",
			title: "Second bigger major card title line with a bit longer description.",
			percent: 65,
			orgHead: "Tina Kandelaki",
			organization: "ORG charity of Charitify."
		},
		{
			src: "https://placeimg.com/300/300/any",
			title: "The main title and short description.",
			percent: 5,
			orgHead: "Tinaramisimuss Kandelakinuskas",
			organization: "ORG charity of Charitify."
		},
		{
			src: "https://placeimg.com/300/300/nature",
			title: "The main title and short description.",
			percent: 95,
			orgHead: "Tina Kandelaki",
			organization: "ORG giant charity organization of big Charitify company."
		}
	];

	const click_handler = e => console.log(e);
	const click_handler_1 = e => console.log(e);
	const click_handler_2 = e => console.log(e);
	const click_handler_3 = e => console.log(e);
	const submit_handler = e => console.log(e);
	const click_handler_4 = e => console.log(e);
	const click_handler_5 = e => console.log(e);
	const click_handler_6 = e => console.log(e);
	const click_handler_7 = e => console.log(e);
	const click_handler_8 = e => console.log(e);
	const click_handler_9 = e => console.log(e);
	const click_handler_10 = e => console.log(e);
	const click_handler_11 = e => console.log(e);
	const click_handler_12 = e => console.log(e);
	const click_handler_13 = e => console.log(e);
	const click_handler_14 = e => console.log(e);
	const click_handler_15 = e => console.log(e);

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		
	};

	return [
		cards,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		submit_handler,
		click_handler_4,
		click_handler_5,
		click_handler_6,
		click_handler_7,
		click_handler_8,
		click_handler_9,
		click_handler_10,
		click_handler_11,
		click_handler_12,
		click_handler_13,
		click_handler_14,
		click_handler_15
	];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
