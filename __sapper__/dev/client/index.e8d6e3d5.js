import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, a as assign, o as element, p as create_component, q as space, c as claim_element, f as children, r as claim_component, t as claim_space, g as detach_dev, h as attr_dev, j as add_location, k as insert_dev, u as mount_component, l as append_dev, F as get_spread_update, Y as get_spread_object, v as transition_in, w as transition_out, y as destroy_component, N as text, O as claim_text, U as set_style, L as check_outros, R as destroy_each, K as group_outros, m as noop } from './index.54079636.js';
import { S as Swipe, B as Button, I as Input, P as Progress, A as Avatar, R as Rate, D as Divider, a as SwipeItem, C as CharityCard, b as Picture } from './index.766da286.js';

/* src/routes/index.svelte generated by Svelte v3.16.7 */

const file = "src/routes/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	return child_ctx;
}

// (143:16) <SwipeItem>
function create_default_slot_9(ctx) {
	let current;

	const picture = new Picture({
			props: {
				src: "https://placeimg.com/300/300/people",
				alt: "sample"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(picture.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(picture.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(picture, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(picture.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(picture.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(picture, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(143:16) <SwipeItem>",
		ctx
	});

	return block;
}

// (146:16) <SwipeItem>
function create_default_slot_8(ctx) {
	let current;

	const picture = new Picture({
			props: {
				src: "https://placeimg.com/300/300/any",
				alt: "sample"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(picture.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(picture.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(picture, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(picture.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(picture.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(picture, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(146:16) <SwipeItem>",
		ctx
	});

	return block;
}

// (149:16) <SwipeItem>
function create_default_slot_7(ctx) {
	let current;

	const picture = new Picture({
			props: {
				src: "https://placeimg.com/300/300/arch",
				alt: "sample"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(picture.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(picture.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(picture, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(picture.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(picture.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(picture, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(149:16) <SwipeItem>",
		ctx
	});

	return block;
}

// (152:16) <SwipeItem>
function create_default_slot_6(ctx) {
	let current;

	const picture = new Picture({
			props: {
				src: "https://placeimg.com/300/300/nature",
				alt: "sample"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(picture.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(picture.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(picture, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(picture.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(picture.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(picture, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(152:16) <SwipeItem>",
		ctx
	});

	return block;
}

// (155:16) <SwipeItem>
function create_default_slot_5(ctx) {
	let current;

	const picture = new Picture({
			props: {
				src: "https://placeimg.com/300/300/tech",
				alt: "sample"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(picture.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(picture.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(picture, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(picture.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(picture.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(picture, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(155:16) <SwipeItem>",
		ctx
	});

	return block;
}

// (142:12) <Swipe>
function create_default_slot_4(ctx) {
	let t0;
	let t1;
	let t2;
	let t3;
	let current;

	const swipeitem0 = new SwipeItem({
			props: {
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const swipeitem1 = new SwipeItem({
			props: {
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const swipeitem2 = new SwipeItem({
			props: {
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const swipeitem3 = new SwipeItem({
			props: {
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const swipeitem4 = new SwipeItem({
			props: {
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(swipeitem0.$$.fragment);
			t0 = space();
			create_component(swipeitem1.$$.fragment);
			t1 = space();
			create_component(swipeitem2.$$.fragment);
			t2 = space();
			create_component(swipeitem3.$$.fragment);
			t3 = space();
			create_component(swipeitem4.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(swipeitem0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(swipeitem1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(swipeitem2.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(swipeitem3.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(swipeitem4.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(swipeitem0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(swipeitem1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(swipeitem2, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(swipeitem3, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(swipeitem4, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const swipeitem0_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				swipeitem0_changes.$$scope = { dirty, ctx };
			}

			swipeitem0.$set(swipeitem0_changes);
			const swipeitem1_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				swipeitem1_changes.$$scope = { dirty, ctx };
			}

			swipeitem1.$set(swipeitem1_changes);
			const swipeitem2_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				swipeitem2_changes.$$scope = { dirty, ctx };
			}

			swipeitem2.$set(swipeitem2_changes);
			const swipeitem3_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				swipeitem3_changes.$$scope = { dirty, ctx };
			}

			swipeitem3.$set(swipeitem3_changes);
			const swipeitem4_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				swipeitem4_changes.$$scope = { dirty, ctx };
			}

			swipeitem4.$set(swipeitem4_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(swipeitem0.$$.fragment, local);
			transition_in(swipeitem1.$$.fragment, local);
			transition_in(swipeitem2.$$.fragment, local);
			transition_in(swipeitem3.$$.fragment, local);
			transition_in(swipeitem4.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(swipeitem0.$$.fragment, local);
			transition_out(swipeitem1.$$.fragment, local);
			transition_out(swipeitem2.$$.fragment, local);
			transition_out(swipeitem3.$$.fragment, local);
			transition_out(swipeitem4.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(swipeitem0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(swipeitem1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(swipeitem2, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(swipeitem3, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(swipeitem4, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(142:12) <Swipe>",
		ctx
	});

	return block;
}

// (163:16) <Button is="success" on:click="{e => console.log(e)}">
function create_default_slot_3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("test1");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "test1");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(163:16) <Button is=\\\"success\\\" on:click=\\\"{e => console.log(e)}\\\">",
		ctx
	});

	return block;
}

// (166:16) <Button is="success" on:click="{e => console.log(e)}">
function create_default_slot_2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("test12");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "test12");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(166:16) <Button is=\\\"success\\\" on:click=\\\"{e => console.log(e)}\\\">",
		ctx
	});

	return block;
}

// (169:16) <Button is="success" on:click="{e => console.log(e)}">
function create_default_slot_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("test123");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "test123");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(169:16) <Button is=\\\"success\\\" on:click=\\\"{e => console.log(e)}\\\">",
		ctx
	});

	return block;
}

// (189:16) <Button is="warning" on:click="{e => console.log(e)}">
function create_default_slot(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Submit");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Submit");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(189:16) <Button is=\\\"warning\\\" on:click=\\\"{e => console.log(e)}\\\">",
		ctx
	});

	return block;
}

// (232:8) {#each cards as card}
function create_each_block_1(ctx) {
	let li;
	let t;
	let current;
	const charitycard_spread_levels = [/*card*/ ctx[5]];
	let charitycard_props = {};

	for (let i = 0; i < charitycard_spread_levels.length; i += 1) {
		charitycard_props = assign(charitycard_props, charitycard_spread_levels[i]);
	}

	const charitycard = new CharityCard({ props: charitycard_props, $$inline: true });

	const block = {
		c: function create() {
			li = element("li");
			create_component(charitycard.$$.fragment);
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			claim_component(charitycard.$$.fragment, li_nodes);
			t = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(li, "class", "svelte-9urtg6");
			add_location(li, file, 232, 12, 6278);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			mount_component(charitycard, li, null);
			append_dev(li, t);
			current = true;
		},
		p: function update(ctx, dirty) {
			const charitycard_changes = (dirty & /*cards*/ 1)
			? get_spread_update(charitycard_spread_levels, [get_spread_object(/*card*/ ctx[5])])
			: {};

			charitycard.$set(charitycard_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(charitycard.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(charitycard.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			destroy_component(charitycard);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(232:8) {#each cards as card}",
		ctx
	});

	return block;
}

// (254:8) {#each cards as card}
function create_each_block(ctx) {
	let li;
	let t;
	let current;
	const charitycard_spread_levels = [/*card*/ ctx[5]];
	let charitycard_props = {};

	for (let i = 0; i < charitycard_spread_levels.length; i += 1) {
		charitycard_props = assign(charitycard_props, charitycard_spread_levels[i]);
	}

	const charitycard = new CharityCard({ props: charitycard_props, $$inline: true });

	const block = {
		c: function create() {
			li = element("li");
			create_component(charitycard.$$.fragment);
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			claim_component(charitycard.$$.fragment, li_nodes);
			t = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(li, "class", "svelte-9urtg6");
			add_location(li, file, 254, 12, 6608);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			mount_component(charitycard, li, null);
			append_dev(li, t);
			current = true;
		},
		p: function update(ctx, dirty) {
			const charitycard_changes = (dirty & /*cards*/ 1)
			? get_spread_update(charitycard_spread_levels, [get_spread_object(/*card*/ ctx[5])])
			: {};

			charitycard.$set(charitycard_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(charitycard.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(charitycard.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			destroy_component(charitycard);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(254:8) {#each cards as card}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let section2;
	let section0;
	let div0;
	let t1;
	let ul0;
	let li0;
	let t2;
	let li1;
	let t3;
	let li2;
	let t4;
	let li3;
	let br0;
	let t5;
	let t6;
	let datalist;
	let option0;
	let option1;
	let option2;
	let t7;
	let li4;
	let t8;
	let t9;
	let section1;
	let div1;
	let t10;
	let span;
	let h3;
	let t11;
	let t12;
	let p0;
	let t13;
	let t14;
	let t15;
	let br1;
	let t16;
	let h1;
	let t17;
	let t18;
	let br2;
	let t19;
	let p1;
	let t20;
	let t21;
	let br3;
	let t22;
	let br4;
	let t23;
	let br5;
	let t24;
	let div2;
	let t25;
	let h20;
	let t26;
	let t27;
	let t28;
	let br6;
	let t29;
	let ul1;
	let t30;
	let br7;
	let t31;
	let br8;
	let t32;
	let br9;
	let t33;
	let br10;
	let t34;
	let br11;
	let t35;
	let div3;
	let t36;
	let h21;
	let t37;
	let t38;
	let t39;
	let br12;
	let t40;
	let ul2;
	let t41;
	let br13;
	let t42;
	let br14;
	let t43;
	let br15;
	let current;

	const swipe = new Swipe({
			props: {
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const button0 = new Button({
			props: {
				is: "success",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button0.$on("click", /*click_handler*/ ctx[1]);

	const button1 = new Button({
			props: {
				is: "success",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button1.$on("click", /*click_handler_1*/ ctx[2]);

	const button2 = new Button({
			props: {
				is: "success",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button2.$on("click", /*click_handler_2*/ ctx[3]);

	const input = new Input({
			props: {
				type: "number",
				name: "num",
				list: "sum-suggestions",
				placeholder: "Num",
				autoselect: true,
				align: "right"
			},
			$$inline: true
		});

	const button3 = new Button({
			props: {
				is: "warning",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button3.$on("click", /*click_handler_3*/ ctx[4]);
	const progress = new Progress({ props: { value: "65" }, $$inline: true });

	const avatar = new Avatar({
			props: {
				src: "https://placeimg.com/300/300/people",
				alt: "avatar"
			},
			$$inline: true
		});

	const rate = new Rate({ $$inline: true });
	const divider0 = new Divider({ props: { size: "16" }, $$inline: true });
	const divider1 = new Divider({ props: { size: "20" }, $$inline: true });
	let each_value_1 = /*cards*/ ctx[0];
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks_1[i], 1, 1, () => {
		each_blocks_1[i] = null;
	});

	const divider2 = new Divider({ props: { size: "16" }, $$inline: true });
	const divider3 = new Divider({ props: { size: "20" }, $$inline: true });
	let each_value = /*cards*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out_1 = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			t0 = space();
			section2 = element("section");
			section0 = element("section");
			div0 = element("div");
			create_component(swipe.$$.fragment);
			t1 = space();
			ul0 = element("ul");
			li0 = element("li");
			create_component(button0.$$.fragment);
			t2 = space();
			li1 = element("li");
			create_component(button1.$$.fragment);
			t3 = space();
			li2 = element("li");
			create_component(button2.$$.fragment);
			t4 = space();
			li3 = element("li");
			br0 = element("br");
			t5 = space();
			create_component(input.$$.fragment);
			t6 = space();
			datalist = element("datalist");
			option0 = element("option");
			option1 = element("option");
			option2 = element("option");
			t7 = space();
			li4 = element("li");
			create_component(button3.$$.fragment);
			t8 = space();
			create_component(progress.$$.fragment);
			t9 = space();
			section1 = element("section");
			div1 = element("div");
			create_component(avatar.$$.fragment);
			t10 = space();
			span = element("span");
			h3 = element("h3");
			t11 = text("Tina Kandelaki");
			t12 = space();
			p0 = element("p");
			t13 = text("ORG charity charitify");
			t14 = space();
			create_component(rate.$$.fragment);
			t15 = space();
			br1 = element("br");
			t16 = space();
			h1 = element("h1");
			t17 = text("The main title");
			t18 = space();
			br2 = element("br");
			t19 = space();
			p1 = element("p");
			t20 = text("A small description that describes the title above and just makes text longer.");
			t21 = space();
			br3 = element("br");
			t22 = space();
			br4 = element("br");
			t23 = space();
			br5 = element("br");
			t24 = space();
			div2 = element("div");
			create_component(divider0.$$.fragment);
			t25 = space();
			h20 = element("h2");
			t26 = text("The nearest list:");
			t27 = space();
			create_component(divider1.$$.fragment);
			t28 = space();
			br6 = element("br");
			t29 = space();
			ul1 = element("ul");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t30 = space();
			br7 = element("br");
			t31 = space();
			br8 = element("br");
			t32 = space();
			br9 = element("br");
			t33 = space();
			br10 = element("br");
			t34 = space();
			br11 = element("br");
			t35 = space();
			div3 = element("div");
			create_component(divider2.$$.fragment);
			t36 = space();
			h21 = element("h2");
			t37 = text("The second list:");
			t38 = space();
			create_component(divider3.$$.fragment);
			t39 = space();
			br12 = element("br");
			t40 = space();
			ul2 = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t41 = space();
			br13 = element("br");
			t42 = space();
			br14 = element("br");
			t43 = space();
			br15 = element("br");
			this.h();
		},
		l: function claim(nodes) {
			t0 = claim_space(nodes);
			section2 = claim_element(nodes, "SECTION", { class: true });
			var section2_nodes = children(section2);
			section0 = claim_element(section2_nodes, "SECTION", { class: true });
			var section0_nodes = children(section0);
			div0 = claim_element(section0_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(swipe.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(section0_nodes);
			ul0 = claim_element(section0_nodes, "UL", { class: true });
			var ul0_nodes = children(ul0);
			li0 = claim_element(ul0_nodes, "LI", { class: true });
			var li0_nodes = children(li0);
			claim_component(button0.$$.fragment, li0_nodes);
			li0_nodes.forEach(detach_dev);
			t2 = claim_space(ul0_nodes);
			li1 = claim_element(ul0_nodes, "LI", { class: true });
			var li1_nodes = children(li1);
			claim_component(button1.$$.fragment, li1_nodes);
			li1_nodes.forEach(detach_dev);
			t3 = claim_space(ul0_nodes);
			li2 = claim_element(ul0_nodes, "LI", { class: true });
			var li2_nodes = children(li2);
			claim_component(button2.$$.fragment, li2_nodes);
			li2_nodes.forEach(detach_dev);
			t4 = claim_space(ul0_nodes);
			li3 = claim_element(ul0_nodes, "LI", { class: true });
			var li3_nodes = children(li3);
			br0 = claim_element(li3_nodes, "BR", {});
			t5 = claim_space(li3_nodes);
			claim_component(input.$$.fragment, li3_nodes);
			t6 = claim_space(li3_nodes);
			datalist = claim_element(li3_nodes, "DATALIST", { id: true });
			var datalist_nodes = children(datalist);
			option0 = claim_element(datalist_nodes, "OPTION", { value: true });
			var option0_nodes = children(option0);
			option0_nodes.forEach(detach_dev);
			option1 = claim_element(datalist_nodes, "OPTION", { value: true });
			var option1_nodes = children(option1);
			option1_nodes.forEach(detach_dev);
			option2 = claim_element(datalist_nodes, "OPTION", { value: true });
			var option2_nodes = children(option2);
			option2_nodes.forEach(detach_dev);
			datalist_nodes.forEach(detach_dev);
			li3_nodes.forEach(detach_dev);
			t7 = claim_space(ul0_nodes);
			li4 = claim_element(ul0_nodes, "LI", { class: true });
			var li4_nodes = children(li4);
			claim_component(button3.$$.fragment, li4_nodes);
			li4_nodes.forEach(detach_dev);
			ul0_nodes.forEach(detach_dev);
			section0_nodes.forEach(detach_dev);
			t8 = claim_space(section2_nodes);
			claim_component(progress.$$.fragment, section2_nodes);
			t9 = claim_space(section2_nodes);
			section1 = claim_element(section2_nodes, "SECTION", { class: true });
			var section1_nodes = children(section1);
			div1 = claim_element(section1_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			claim_component(avatar.$$.fragment, div1_nodes);
			t10 = claim_space(div1_nodes);
			span = claim_element(div1_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			h3 = claim_element(span_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t11 = claim_text(h3_nodes, "Tina Kandelaki");
			h3_nodes.forEach(detach_dev);
			t12 = claim_space(span_nodes);
			p0 = claim_element(span_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t13 = claim_text(p0_nodes, "ORG charity charitify");
			p0_nodes.forEach(detach_dev);
			span_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t14 = claim_space(section1_nodes);
			claim_component(rate.$$.fragment, section1_nodes);
			section1_nodes.forEach(detach_dev);
			t15 = claim_space(section2_nodes);
			br1 = claim_element(section2_nodes, "BR", {});
			t16 = claim_space(section2_nodes);
			h1 = claim_element(section2_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t17 = claim_text(h1_nodes, "The main title");
			h1_nodes.forEach(detach_dev);
			t18 = claim_space(section2_nodes);
			br2 = claim_element(section2_nodes, "BR", {});
			t19 = claim_space(section2_nodes);
			p1 = claim_element(section2_nodes, "P", { class: true, style: true });
			var p1_nodes = children(p1);
			t20 = claim_text(p1_nodes, "A small description that describes the title above and just makes text longer.");
			p1_nodes.forEach(detach_dev);
			section2_nodes.forEach(detach_dev);
			t21 = claim_space(nodes);
			br3 = claim_element(nodes, "BR", {});
			t22 = claim_space(nodes);
			br4 = claim_element(nodes, "BR", {});
			t23 = claim_space(nodes);
			br5 = claim_element(nodes, "BR", {});
			t24 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			claim_component(divider0.$$.fragment, div2_nodes);
			t25 = claim_space(div2_nodes);
			h20 = claim_element(div2_nodes, "H2", { style: true });
			var h20_nodes = children(h20);
			t26 = claim_text(h20_nodes, "The nearest list:");
			h20_nodes.forEach(detach_dev);
			t27 = claim_space(div2_nodes);
			claim_component(divider1.$$.fragment, div2_nodes);
			t28 = claim_space(div2_nodes);
			br6 = claim_element(div2_nodes, "BR", {});
			t29 = claim_space(div2_nodes);
			ul1 = claim_element(div2_nodes, "UL", { class: true });
			var ul1_nodes = children(ul1);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(ul1_nodes);
			}

			ul1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t30 = claim_space(nodes);
			br7 = claim_element(nodes, "BR", {});
			t31 = claim_space(nodes);
			br8 = claim_element(nodes, "BR", {});
			t32 = claim_space(nodes);
			br9 = claim_element(nodes, "BR", {});
			t33 = claim_space(nodes);
			br10 = claim_element(nodes, "BR", {});
			t34 = claim_space(nodes);
			br11 = claim_element(nodes, "BR", {});
			t35 = claim_space(nodes);
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			claim_component(divider2.$$.fragment, div3_nodes);
			t36 = claim_space(div3_nodes);
			h21 = claim_element(div3_nodes, "H2", { style: true });
			var h21_nodes = children(h21);
			t37 = claim_text(h21_nodes, "The second list:");
			h21_nodes.forEach(detach_dev);
			t38 = claim_space(div3_nodes);
			claim_component(divider3.$$.fragment, div3_nodes);
			t39 = claim_space(div3_nodes);
			br12 = claim_element(div3_nodes, "BR", {});
			t40 = claim_space(div3_nodes);
			ul2 = claim_element(div3_nodes, "UL", { class: true });
			var ul2_nodes = children(ul2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul2_nodes);
			}

			ul2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			t41 = claim_space(nodes);
			br13 = claim_element(nodes, "BR", {});
			t42 = claim_space(nodes);
			br14 = claim_element(nodes, "BR", {});
			t43 = claim_space(nodes);
			br15 = claim_element(nodes, "BR", {});
			this.h();
		},
		h: function hydrate() {
			document.title = "Charitify - is the application for helping those in need.";
			attr_dev(div0, "class", "top-pic svelte-9urtg6");
			add_location(div0, file, 140, 8, 3626);
			attr_dev(li0, "class", "svelte-9urtg6");
			add_location(li0, file, 161, 12, 4454);
			attr_dev(li1, "class", "svelte-9urtg6");
			add_location(li1, file, 164, 12, 4574);
			attr_dev(li2, "class", "svelte-9urtg6");
			add_location(li2, file, 167, 12, 4695);
			add_location(br0, file, 171, 16, 4838);
			option0.__value = "20";
			option0.value = option0.__value;
			add_location(option0, file, 182, 20, 5189);
			option1.__value = "500";
			option1.value = option1.__value;
			add_location(option1, file, 183, 20, 5229);
			option2.__value = "1000";
			option2.value = option2.__value;
			add_location(option2, file, 184, 20, 5270);
			attr_dev(datalist, "id", "sum-suggestions");
			add_location(datalist, file, 181, 16, 5137);
			attr_dev(li3, "class", "svelte-9urtg6");
			add_location(li3, file, 170, 12, 4817);
			attr_dev(li4, "class", "svelte-9urtg6");
			add_location(li4, file, 187, 12, 5350);
			attr_dev(ul0, "class", "options svelte-9urtg6");
			add_location(ul0, file, 160, 8, 4421);
			attr_dev(section0, "class", "top svelte-9urtg6");
			add_location(section0, file, 139, 4, 3596);
			attr_dev(h3, "class", "svelte-9urtg6");
			add_location(h3, file, 200, 16, 5709);
			attr_dev(p0, "class", "svelte-9urtg6");
			add_location(p0, file, 201, 16, 5749);
			attr_dev(span, "class", "svelte-9urtg6");
			add_location(span, file, 199, 12, 5686);
			attr_dev(div1, "class", "ava-section svelte-9urtg6");
			add_location(div1, file, 196, 8, 5570);
			attr_dev(section1, "class", "rate-section svelte-9urtg6");
			add_location(section1, file, 195, 4, 5531);
			add_location(br1, file, 208, 4, 5850);
			attr_dev(h1, "class", "svelte-9urtg6");
			add_location(h1, file, 210, 4, 5860);
			add_location(br2, file, 212, 4, 5889);
			attr_dev(p1, "class", "text-center");
			set_style(p1, "padding", "0 10vw");
			add_location(p1, file, 214, 4, 5899);
			attr_dev(section2, "class", "container");
			add_location(section2, file, 138, 0, 3564);
			add_location(br3, file, 219, 0, 6055);
			add_location(br4, file, 220, 0, 6060);
			add_location(br5, file, 221, 0, 6065);
			set_style(h20, "text-align", "right");
			add_location(h20, file, 225, 4, 6124);
			add_location(br6, file, 228, 4, 6207);
			attr_dev(ul1, "class", "cards svelte-9urtg6");
			add_location(ul1, file, 230, 4, 6217);
			attr_dev(div2, "class", "container");
			add_location(div2, file, 223, 0, 6071);
			add_location(br7, file, 239, 0, 6376);
			add_location(br8, file, 240, 0, 6381);
			add_location(br9, file, 241, 0, 6386);
			add_location(br10, file, 242, 0, 6391);
			add_location(br11, file, 243, 0, 6396);
			set_style(h21, "text-align", "right");
			add_location(h21, file, 247, 4, 6455);
			add_location(br12, file, 250, 4, 6537);
			attr_dev(ul2, "class", "cards svelte-9urtg6");
			add_location(ul2, file, 252, 4, 6547);
			attr_dev(div3, "class", "container");
			add_location(div3, file, 245, 0, 6402);
			add_location(br13, file, 261, 0, 6706);
			add_location(br14, file, 262, 0, 6711);
			add_location(br15, file, 263, 0, 6716);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, section2, anchor);
			append_dev(section2, section0);
			append_dev(section0, div0);
			mount_component(swipe, div0, null);
			append_dev(section0, t1);
			append_dev(section0, ul0);
			append_dev(ul0, li0);
			mount_component(button0, li0, null);
			append_dev(ul0, t2);
			append_dev(ul0, li1);
			mount_component(button1, li1, null);
			append_dev(ul0, t3);
			append_dev(ul0, li2);
			mount_component(button2, li2, null);
			append_dev(ul0, t4);
			append_dev(ul0, li3);
			append_dev(li3, br0);
			append_dev(li3, t5);
			mount_component(input, li3, null);
			append_dev(li3, t6);
			append_dev(li3, datalist);
			append_dev(datalist, option0);
			append_dev(datalist, option1);
			append_dev(datalist, option2);
			append_dev(ul0, t7);
			append_dev(ul0, li4);
			mount_component(button3, li4, null);
			append_dev(section2, t8);
			mount_component(progress, section2, null);
			append_dev(section2, t9);
			append_dev(section2, section1);
			append_dev(section1, div1);
			mount_component(avatar, div1, null);
			append_dev(div1, t10);
			append_dev(div1, span);
			append_dev(span, h3);
			append_dev(h3, t11);
			append_dev(span, t12);
			append_dev(span, p0);
			append_dev(p0, t13);
			append_dev(section1, t14);
			mount_component(rate, section1, null);
			append_dev(section2, t15);
			append_dev(section2, br1);
			append_dev(section2, t16);
			append_dev(section2, h1);
			append_dev(h1, t17);
			append_dev(section2, t18);
			append_dev(section2, br2);
			append_dev(section2, t19);
			append_dev(section2, p1);
			append_dev(p1, t20);
			insert_dev(target, t21, anchor);
			insert_dev(target, br3, anchor);
			insert_dev(target, t22, anchor);
			insert_dev(target, br4, anchor);
			insert_dev(target, t23, anchor);
			insert_dev(target, br5, anchor);
			insert_dev(target, t24, anchor);
			insert_dev(target, div2, anchor);
			mount_component(divider0, div2, null);
			append_dev(div2, t25);
			append_dev(div2, h20);
			append_dev(h20, t26);
			append_dev(div2, t27);
			mount_component(divider1, div2, null);
			append_dev(div2, t28);
			append_dev(div2, br6);
			append_dev(div2, t29);
			append_dev(div2, ul1);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(ul1, null);
			}

			insert_dev(target, t30, anchor);
			insert_dev(target, br7, anchor);
			insert_dev(target, t31, anchor);
			insert_dev(target, br8, anchor);
			insert_dev(target, t32, anchor);
			insert_dev(target, br9, anchor);
			insert_dev(target, t33, anchor);
			insert_dev(target, br10, anchor);
			insert_dev(target, t34, anchor);
			insert_dev(target, br11, anchor);
			insert_dev(target, t35, anchor);
			insert_dev(target, div3, anchor);
			mount_component(divider2, div3, null);
			append_dev(div3, t36);
			append_dev(div3, h21);
			append_dev(h21, t37);
			append_dev(div3, t38);
			mount_component(divider3, div3, null);
			append_dev(div3, t39);
			append_dev(div3, br12);
			append_dev(div3, t40);
			append_dev(div3, ul2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul2, null);
			}

			insert_dev(target, t41, anchor);
			insert_dev(target, br13, anchor);
			insert_dev(target, t42, anchor);
			insert_dev(target, br14, anchor);
			insert_dev(target, t43, anchor);
			insert_dev(target, br15, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const swipe_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				swipe_changes.$$scope = { dirty, ctx };
			}

			swipe.$set(swipe_changes);
			const button0_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				button0_changes.$$scope = { dirty, ctx };
			}

			button0.$set(button0_changes);
			const button1_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				button1_changes.$$scope = { dirty, ctx };
			}

			button1.$set(button1_changes);
			const button2_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				button2_changes.$$scope = { dirty, ctx };
			}

			button2.$set(button2_changes);
			const button3_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				button3_changes.$$scope = { dirty, ctx };
			}

			button3.$set(button3_changes);

			if (dirty & /*cards*/ 1) {
				each_value_1 = /*cards*/ ctx[0];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
						transition_in(each_blocks_1[i], 1);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						transition_in(each_blocks_1[i], 1);
						each_blocks_1[i].m(ul1, null);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks_1.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (dirty & /*cards*/ 1) {
				each_value = /*cards*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(ul2, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out_1(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(swipe.$$.fragment, local);
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			transition_in(button2.$$.fragment, local);
			transition_in(input.$$.fragment, local);
			transition_in(button3.$$.fragment, local);
			transition_in(progress.$$.fragment, local);
			transition_in(avatar.$$.fragment, local);
			transition_in(rate.$$.fragment, local);
			transition_in(divider0.$$.fragment, local);
			transition_in(divider1.$$.fragment, local);

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks_1[i]);
			}

			transition_in(divider2.$$.fragment, local);
			transition_in(divider3.$$.fragment, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(swipe.$$.fragment, local);
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			transition_out(button2.$$.fragment, local);
			transition_out(input.$$.fragment, local);
			transition_out(button3.$$.fragment, local);
			transition_out(progress.$$.fragment, local);
			transition_out(avatar.$$.fragment, local);
			transition_out(rate.$$.fragment, local);
			transition_out(divider0.$$.fragment, local);
			transition_out(divider1.$$.fragment, local);
			each_blocks_1 = each_blocks_1.filter(Boolean);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				transition_out(each_blocks_1[i]);
			}

			transition_out(divider2.$$.fragment, local);
			transition_out(divider3.$$.fragment, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(section2);
			destroy_component(swipe);
			destroy_component(button0);
			destroy_component(button1);
			destroy_component(button2);
			destroy_component(input);
			destroy_component(button3);
			destroy_component(progress);
			destroy_component(avatar);
			destroy_component(rate);
			if (detaching) detach_dev(t21);
			if (detaching) detach_dev(br3);
			if (detaching) detach_dev(t22);
			if (detaching) detach_dev(br4);
			if (detaching) detach_dev(t23);
			if (detaching) detach_dev(br5);
			if (detaching) detach_dev(t24);
			if (detaching) detach_dev(div2);
			destroy_component(divider0);
			destroy_component(divider1);
			destroy_each(each_blocks_1, detaching);
			if (detaching) detach_dev(t30);
			if (detaching) detach_dev(br7);
			if (detaching) detach_dev(t31);
			if (detaching) detach_dev(br8);
			if (detaching) detach_dev(t32);
			if (detaching) detach_dev(br9);
			if (detaching) detach_dev(t33);
			if (detaching) detach_dev(br10);
			if (detaching) detach_dev(t34);
			if (detaching) detach_dev(br11);
			if (detaching) detach_dev(t35);
			if (detaching) detach_dev(div3);
			destroy_component(divider2);
			destroy_component(divider3);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t41);
			if (detaching) detach_dev(br13);
			if (detaching) detach_dev(t42);
			if (detaching) detach_dev(br14);
			if (detaching) detach_dev(t43);
			if (detaching) detach_dev(br15);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self) {
	const cards = [
		{
			src: "https://placeimg.com/300/300/tech",
			title: "The main title and short description.",
			percent: 45,
			orgHead: "Tina Kandelaki",
			orgHeadSrc: "https://placeimg.com/300/300/people",
			organization: "ORG charity of Charitify."
		},
		{
			src: "https://placeimg.com/300/300/arch",
			title: "Second bigger major card title line with a bit longer description.",
			percent: 65,
			orgHead: "Tina Kandelaki",
			orgHeadSrc: "https://placeimg.com/300/300/people",
			organization: "ORG charity of Charitify."
		},
		{
			src: "https://placeimg.com/300/300/any",
			title: "The main title and short description.",
			percent: 5,
			orgHead: "Tinaramisimuss Kandelakinuskas",
			orgHeadSrc: "https://placeimg.com/300/300/people",
			organization: "ORG charity of Charitify."
		},
		{
			src: "https://placeimg.com/300/300/nature",
			title: "The main title and short description.",
			percent: 95,
			orgHead: "Tina Kandelaki",
			orgHeadSrc: "https://placeimg.com/300/300/people",
			organization: "ORG giant charity organization of big Charitify company."
		}
	];

	const click_handler = e => console.log(e);
	const click_handler_1 = e => console.log(e);
	const click_handler_2 = e => console.log(e);
	const click_handler_3 = e => console.log(e);

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		
	};

	return [cards, click_handler, click_handler_1, click_handler_2, click_handler_3];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZThkNmUzZDUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvaW5kZXguc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgU3dpcGUsIFN3aXBlSXRlbSB9IGZyb20gJy4uL3BsdWdpbnMnXG4gICAgaW1wb3J0IHtcbiAgICAgICAgQnV0dG9uLFxuICAgICAgICBQaWN0dXJlLFxuICAgICAgICBJbnB1dCxcbiAgICAgICAgUHJvZ3Jlc3MsXG4gICAgICAgIFByb2dyZXNzTmV4dCxcbiAgICAgICAgSWNvbixcbiAgICAgICAgRm9ybSxcbiAgICAgICAgUmF0ZSxcbiAgICAgICAgQXZhdGFyLFxuICAgICAgICBEaXZpZGVyLFxuICAgICAgICBDaGFyaXR5Q2FyZCxcbiAgICB9IGZyb20gJy4uL2NvbXBvbmVudHMnXG5cbiAgICBjb25zdCBjYXJkcyA9IFtcbiAgICAgICAge1xuICAgICAgICAgICAgc3JjOiAnaHR0cHM6Ly9wbGFjZWltZy5jb20vMzAwLzMwMC90ZWNoJyxcbiAgICAgICAgICAgIHRpdGxlOiAnVGhlIG1haW4gdGl0bGUgYW5kIHNob3J0IGRlc2NyaXB0aW9uLicsXG4gICAgICAgICAgICBwZXJjZW50OiA0NSxcbiAgICAgICAgICAgIG9yZ0hlYWQ6ICdUaW5hIEthbmRlbGFraScsXG4gICAgICAgICAgICBvcmdIZWFkU3JjOiAnaHR0cHM6Ly9wbGFjZWltZy5jb20vMzAwLzMwMC9wZW9wbGUnLFxuICAgICAgICAgICAgb3JnYW5pemF0aW9uOiAnT1JHIGNoYXJpdHkgb2YgQ2hhcml0aWZ5LicsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHNyYzogJ2h0dHBzOi8vcGxhY2VpbWcuY29tLzMwMC8zMDAvYXJjaCcsXG4gICAgICAgICAgICB0aXRsZTogJ1NlY29uZCBiaWdnZXIgbWFqb3IgY2FyZCB0aXRsZSBsaW5lIHdpdGggYSBiaXQgbG9uZ2VyIGRlc2NyaXB0aW9uLicsXG4gICAgICAgICAgICBwZXJjZW50OiA2NSxcbiAgICAgICAgICAgIG9yZ0hlYWQ6ICdUaW5hIEthbmRlbGFraScsXG4gICAgICAgICAgICBvcmdIZWFkU3JjOiAnaHR0cHM6Ly9wbGFjZWltZy5jb20vMzAwLzMwMC9wZW9wbGUnLFxuICAgICAgICAgICAgb3JnYW5pemF0aW9uOiAnT1JHIGNoYXJpdHkgb2YgQ2hhcml0aWZ5LicsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHNyYzogJ2h0dHBzOi8vcGxhY2VpbWcuY29tLzMwMC8zMDAvYW55JyxcbiAgICAgICAgICAgIHRpdGxlOiAnVGhlIG1haW4gdGl0bGUgYW5kIHNob3J0IGRlc2NyaXB0aW9uLicsXG4gICAgICAgICAgICBwZXJjZW50OiA1LFxuICAgICAgICAgICAgb3JnSGVhZDogJ1RpbmFyYW1pc2ltdXNzIEthbmRlbGFraW51c2thcycsXG4gICAgICAgICAgICBvcmdIZWFkU3JjOiAnaHR0cHM6Ly9wbGFjZWltZy5jb20vMzAwLzMwMC9wZW9wbGUnLFxuICAgICAgICAgICAgb3JnYW5pemF0aW9uOiAnT1JHIGNoYXJpdHkgb2YgQ2hhcml0aWZ5LicsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHNyYzogJ2h0dHBzOi8vcGxhY2VpbWcuY29tLzMwMC8zMDAvbmF0dXJlJyxcbiAgICAgICAgICAgIHRpdGxlOiAnVGhlIG1haW4gdGl0bGUgYW5kIHNob3J0IGRlc2NyaXB0aW9uLicsXG4gICAgICAgICAgICBwZXJjZW50OiA5NSxcbiAgICAgICAgICAgIG9yZ0hlYWQ6ICdUaW5hIEthbmRlbGFraScsXG4gICAgICAgICAgICBvcmdIZWFkU3JjOiAnaHR0cHM6Ly9wbGFjZWltZy5jb20vMzAwLzMwMC9wZW9wbGUnLFxuICAgICAgICAgICAgb3JnYW5pemF0aW9uOiAnT1JHIGdpYW50IGNoYXJpdHkgb3JnYW5pemF0aW9uIG9mIGJpZyBDaGFyaXRpZnkgY29tcGFueS4nLFxuICAgICAgICB9LFxuICAgIF1cbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4gICAgaDEge1xuICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgfVxuXG4gICAgLnRvcCB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IGNhbGModmFyKC0tc2NyZWVuLXBhZGRpbmcpICogMS41KTtcbiAgICAgICAgbWFyZ2luLXRvcDogdmFyKC0tc2NyZWVuLXBhZGRpbmcpO1xuICAgIH1cblxuICAgIC50b3AtcGljIHtcbiAgICAgICAgei1pbmRleDogMDtcbiAgICAgICAgZmxleC1ncm93OiAxO1xuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAycHg7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IHZhcigtLWJvcmRlci1yYWRpdXMpO1xuICAgICAgICBib3gtc2hhZG93OiB2YXIoLS1zaGFkb3ctcHJpbWFyeSk7XG4gICAgfVxuXG4gICAgLm9wdGlvbnMge1xuICAgICAgICBmbGV4OiAwO1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICBtYXJnaW46IGNhbGModmFyKC0tc2NyZWVuLXBhZGRpbmcpICogLTEgLyAyKSAwO1xuICAgICAgICBwYWRkaW5nOiAwIDAgMCB2YXIoLS1zY3JlZW4tcGFkZGluZyk7XG4gICAgfVxuXG4gICAgLm9wdGlvbnMgbGkge1xuICAgICAgICBmbGV4OiBub25lO1xuICAgICAgICBtYXJnaW46IGNhbGModmFyKC0tc2NyZWVuLXBhZGRpbmcpIC8gMikgMDtcbiAgICB9XG5cbiAgICAucmF0ZS1zZWN0aW9uIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGJhc2VsaW5lO1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICAgIHBhZGRpbmc6IGNhbGModmFyKC0tc2NyZWVuLXBhZGRpbmcpICogMS41KSAwO1xuICAgIH1cblxuICAgIC5hdmEtc2VjdGlvbiB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICB9XG5cbiAgICAuYXZhLXNlY3Rpb24gc3BhbiB7XG4gICAgICAgIGZvbnQtc2l6ZTogLjdyZW07XG4gICAgICAgIHBhZGRpbmc6IDAgdmFyKC0tc2NyZWVuLXBhZGRpbmcpO1xuICAgIH1cblxuICAgIC5hdmEtc2VjdGlvbiBzcGFuIHAge1xuICAgICAgICBmb250LXNpemU6IC42cmVtO1xuICAgIH1cblxuICAgIC5hdmEtc2VjdGlvbiBzcGFuIHAsXG4gICAgLmF2YS1zZWN0aW9uIHNwYW4gaDMge1xuICAgICAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAxLjQ7XG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICAgIH1cblxuICAgIC5jYXJkcyB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICBtYXJnaW46IGNhbGModmFyKC0tc2NyZWVuLXBhZGRpbmcpICogLTMpIGNhbGModmFyKC0tc2NyZWVuLXBhZGRpbmcpICogLTEpO1xuICAgIH1cblxuICAgIC5jYXJkcyBsaSB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZ3JvdzogMTtcbiAgICAgICAgbWF4LXdpZHRoOiA1MCU7XG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgIHBhZGRpbmc6IGNhbGModmFyKC0tc2NyZWVuLXBhZGRpbmcpICogMykgdmFyKC0tc2NyZWVuLXBhZGRpbmcpO1xuICAgIH1cbjwvc3R5bGU+XG5cbjxzdmVsdGU6aGVhZD5cbiAgICA8dGl0bGU+Q2hhcml0aWZ5IC0gaXMgdGhlIGFwcGxpY2F0aW9uIGZvciBoZWxwaW5nIHRob3NlIGluIG5lZWQuPC90aXRsZT5cbjwvc3ZlbHRlOmhlYWQ+XG5cbjxzZWN0aW9uIGNsYXNzPVwiY29udGFpbmVyXCI+XG4gICAgPHNlY3Rpb24gY2xhc3M9XCJ0b3BcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRvcC1waWNcIj5cbiAgICAgICAgICAgIDxTd2lwZT5cbiAgICAgICAgICAgICAgICA8U3dpcGVJdGVtPlxuICAgICAgICAgICAgICAgICAgICA8UGljdHVyZSBzcmM9XCJodHRwczovL3BsYWNlaW1nLmNvbS8zMDAvMzAwL3Blb3BsZVwiIGFsdD1cInNhbXBsZVwiLz5cbiAgICAgICAgICAgICAgICA8L1N3aXBlSXRlbT5cbiAgICAgICAgICAgICAgICA8U3dpcGVJdGVtPlxuICAgICAgICAgICAgICAgICAgICA8UGljdHVyZSBzcmM9XCJodHRwczovL3BsYWNlaW1nLmNvbS8zMDAvMzAwL2FueVwiIGFsdD1cInNhbXBsZVwiLz5cbiAgICAgICAgICAgICAgICA8L1N3aXBlSXRlbT5cbiAgICAgICAgICAgICAgICA8U3dpcGVJdGVtPlxuICAgICAgICAgICAgICAgICAgICA8UGljdHVyZSBzcmM9XCJodHRwczovL3BsYWNlaW1nLmNvbS8zMDAvMzAwL2FyY2hcIiBhbHQ9XCJzYW1wbGVcIi8+XG4gICAgICAgICAgICAgICAgPC9Td2lwZUl0ZW0+XG4gICAgICAgICAgICAgICAgPFN3aXBlSXRlbT5cbiAgICAgICAgICAgICAgICAgICAgPFBpY3R1cmUgc3JjPVwiaHR0cHM6Ly9wbGFjZWltZy5jb20vMzAwLzMwMC9uYXR1cmVcIiBhbHQ9XCJzYW1wbGVcIi8+XG4gICAgICAgICAgICAgICAgPC9Td2lwZUl0ZW0+XG4gICAgICAgICAgICAgICAgPFN3aXBlSXRlbT5cbiAgICAgICAgICAgICAgICAgICAgPFBpY3R1cmUgc3JjPVwiaHR0cHM6Ly9wbGFjZWltZy5jb20vMzAwLzMwMC90ZWNoXCIgYWx0PVwic2FtcGxlXCIvPlxuICAgICAgICAgICAgICAgIDwvU3dpcGVJdGVtPlxuICAgICAgICAgICAgPC9Td2lwZT5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPHVsIGNsYXNzPVwib3B0aW9uc1wiPlxuICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgIDxCdXR0b24gaXM9XCJzdWNjZXNzXCIgb246Y2xpY2s9XCJ7ZSA9PiBjb25zb2xlLmxvZyhlKX1cIj50ZXN0MTwvQnV0dG9uPlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICA8QnV0dG9uIGlzPVwic3VjY2Vzc1wiIG9uOmNsaWNrPVwie2UgPT4gY29uc29sZS5sb2coZSl9XCI+dGVzdDEyPC9CdXR0b24+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgIDxCdXR0b24gaXM9XCJzdWNjZXNzXCIgb246Y2xpY2s9XCJ7ZSA9PiBjb25zb2xlLmxvZyhlKX1cIj50ZXN0MTIzPC9CdXR0b24+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgIDxicj5cbiAgICAgICAgICAgICAgICA8SW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJudW1iZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cIm51bVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0PVwic3VtLXN1Z2dlc3Rpb25zXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiTnVtXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9zZWxlY3RcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsaWduPVwicmlnaHRcIlxuICAgICAgICAgICAgICAgIC8+XG5cbiAgICAgICAgICAgICAgICA8ZGF0YWxpc3QgaWQ9XCJzdW0tc3VnZ2VzdGlvbnNcIj5cbiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIjIwXCI+XG4gICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCI1MDBcIj5cbiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIjEwMDBcIj5cbiAgICAgICAgICAgICAgICA8L2RhdGFsaXN0PlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICA8QnV0dG9uIGlzPVwid2FybmluZ1wiIG9uOmNsaWNrPVwie2UgPT4gY29uc29sZS5sb2coZSl9XCI+U3VibWl0PC9CdXR0b24+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICA8L3VsPlxuICAgIDwvc2VjdGlvbj5cblxuICAgIDxQcm9ncmVzcyB2YWx1ZT1cIjY1XCI+PC9Qcm9ncmVzcz5cblxuICAgIDxzZWN0aW9uIGNsYXNzPVwicmF0ZS1zZWN0aW9uXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJhdmEtc2VjdGlvblwiPlxuICAgICAgICAgICAgPEF2YXRhciBzcmM9XCJodHRwczovL3BsYWNlaW1nLmNvbS8zMDAvMzAwL3Blb3BsZVwiIGFsdD1cImF2YXRhclwiLz5cblxuICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgICAgPGgzPlRpbmEgS2FuZGVsYWtpPC9oMz5cbiAgICAgICAgICAgICAgICA8cD5PUkcgY2hhcml0eSBjaGFyaXRpZnk8L3A+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxSYXRlLz5cbiAgICA8L3NlY3Rpb24+XG5cbiAgICA8YnI+XG5cbiAgICA8aDE+VGhlIG1haW4gdGl0bGU8L2gxPlxuXG4gICAgPGJyPlxuXG4gICAgPHAgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiIHN0eWxlPVwicGFkZGluZzogMCAxMHZ3XCI+XG4gICAgICAgIEEgc21hbGwgZGVzY3JpcHRpb24gdGhhdCBkZXNjcmliZXMgdGhlIHRpdGxlIGFib3ZlIGFuZCBqdXN0IG1ha2VzIHRleHQgbG9uZ2VyLlxuICAgIDwvcD5cbjwvc2VjdGlvbj5cblxuPGJyPlxuPGJyPlxuPGJyPlxuXG48ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+XG4gICAgPERpdmlkZXIgc2l6ZT1cIjE2XCIvPlxuICAgIDxoMiBzdHlsZT1cInRleHQtYWxpZ246IHJpZ2h0XCI+VGhlIG5lYXJlc3QgbGlzdDo8L2gyPlxuICAgIDxEaXZpZGVyIHNpemU9XCIyMFwiLz5cblxuICAgIDxicj5cblxuICAgIDx1bCBjbGFzcz1cImNhcmRzXCI+XG4gICAgICAgIHsjZWFjaCBjYXJkcyBhcyBjYXJkfVxuICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgIDxDaGFyaXR5Q2FyZCB7Li4uY2FyZH0vPlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgey9lYWNofVxuICAgIDwvdWw+XG48L2Rpdj5cblxuPGJyPlxuPGJyPlxuPGJyPlxuPGJyPlxuPGJyPlxuXG48ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+XG4gICAgPERpdmlkZXIgc2l6ZT1cIjE2XCIvPlxuICAgIDxoMiBzdHlsZT1cInRleHQtYWxpZ246IHJpZ2h0XCI+VGhlIHNlY29uZCBsaXN0OjwvaDI+XG4gICAgPERpdmlkZXIgc2l6ZT1cIjIwXCIvPlxuXG4gICAgPGJyPlxuXG4gICAgPHVsIGNsYXNzPVwiY2FyZHNcIj5cbiAgICAgICAgeyNlYWNoIGNhcmRzIGFzIGNhcmR9XG4gICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgPENoYXJpdHlDYXJkIHsuLi5jYXJkfS8+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICB7L2VhY2h9XG4gICAgPC91bD5cbjwvZGl2PlxuXG48YnI+XG48YnI+XG48YnI+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OEJBdU9lLEdBQUs7OztrQ0FBVixNQUFJOzs7Ozs7Ozs7OzRCQXNCQyxHQUFLOzs7Z0NBQVYsTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzZCQXRCQyxHQUFLOzs7aUNBQVYsTUFBSTs7Ozs7Ozs7Ozs7Ozs7OzswQkFBSixNQUFJOzs7Ozs7OzsyQkFzQkMsR0FBSzs7OytCQUFWLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7d0JBQUosTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29DQXRCSixNQUFJOzs7Ozs7O2tDQXNCSixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0E3T0osS0FBSzs7R0FFSCxHQUFHLEVBQUUsbUNBQW1DO0dBQ3hDLEtBQUssRUFBRSx1Q0FBdUM7R0FDOUMsT0FBTyxFQUFFLEVBQUU7R0FDWCxPQUFPLEVBQUUsZ0JBQWdCO0dBQ3pCLFVBQVUsRUFBRSxxQ0FBcUM7R0FDakQsWUFBWSxFQUFFLDJCQUEyQjs7O0dBR3pDLEdBQUcsRUFBRSxtQ0FBbUM7R0FDeEMsS0FBSyxFQUFFLG9FQUFvRTtHQUMzRSxPQUFPLEVBQUUsRUFBRTtHQUNYLE9BQU8sRUFBRSxnQkFBZ0I7R0FDekIsVUFBVSxFQUFFLHFDQUFxQztHQUNqRCxZQUFZLEVBQUUsMkJBQTJCOzs7R0FHekMsR0FBRyxFQUFFLGtDQUFrQztHQUN2QyxLQUFLLEVBQUUsdUNBQXVDO0dBQzlDLE9BQU8sRUFBRSxDQUFDO0dBQ1YsT0FBTyxFQUFFLGdDQUFnQztHQUN6QyxVQUFVLEVBQUUscUNBQXFDO0dBQ2pELFlBQVksRUFBRSwyQkFBMkI7OztHQUd6QyxHQUFHLEVBQUUscUNBQXFDO0dBQzFDLEtBQUssRUFBRSx1Q0FBdUM7R0FDOUMsT0FBTyxFQUFFLEVBQUU7R0FDWCxPQUFPLEVBQUUsZ0JBQWdCO0dBQ3pCLFVBQVUsRUFBRSxxQ0FBcUM7R0FDakQsWUFBWSxFQUFFLDBEQUEwRDs7Ozt1QkFtSHBDLENBQUMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7eUJBR2xCLENBQUMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7eUJBR2xCLENBQUMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7eUJBb0JsQixDQUFDLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
