import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, a as assign, q as element, z as create_component, A as space, c as claim_element, f as children, B as claim_component, C as claim_space, g as detach_dev, h as attr_dev, j as add_location, k as insert_dev, D as mount_component, l as append_dev, J as get_spread_update, Z as get_spread_object, w as transition_in, y as transition_out, E as destroy_component, T as text, U as claim_text, V as set_style, M as check_outros, Q as destroy_each, L as group_outros, m as noop } from './index.50c5fe52.js';
import { S as Swipe, B as Button, I as Input, P as Progress, a as ProgressNext, A as Avatar, R as Rate, D as Divider, F as Form, b as Icon, c as Picture, d as SwipeItem, C as CharityCard } from './index.513225d5.js';

/* src/routes/index.svelte generated by Svelte v3.16.7 */

const file = "src/routes/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[18] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[18] = list[i];
	return child_ctx;
}

// (137:16) <SwipeItem>
function create_default_slot_23(ctx) {
	let current;

	const picture = new Picture({
			props: {
				src: "https://placeimg.com/300/300/people",
				alt: "sample"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(picture.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(picture.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(picture, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(picture.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(picture.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(picture, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_23.name,
		type: "slot",
		source: "(137:16) <SwipeItem>",
		ctx
	});

	return block;
}

// (140:16) <SwipeItem>
function create_default_slot_22(ctx) {
	let current;

	const picture = new Picture({
			props: {
				src: "https://placeimg.com/300/300/any",
				alt: "sample"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(picture.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(picture.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(picture, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(picture.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(picture.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(picture, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_22.name,
		type: "slot",
		source: "(140:16) <SwipeItem>",
		ctx
	});

	return block;
}

// (143:16) <SwipeItem>
function create_default_slot_21(ctx) {
	let current;

	const picture = new Picture({
			props: {
				src: "https://placeimg.com/300/300/arch",
				alt: "sample"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(picture.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(picture.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(picture, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(picture.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(picture.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(picture, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_21.name,
		type: "slot",
		source: "(143:16) <SwipeItem>",
		ctx
	});

	return block;
}

// (146:16) <SwipeItem>
function create_default_slot_20(ctx) {
	let current;

	const picture = new Picture({
			props: {
				src: "https://placeimg.com/300/300/nature",
				alt: "sample"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(picture.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(picture.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(picture, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(picture.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(picture.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(picture, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_20.name,
		type: "slot",
		source: "(146:16) <SwipeItem>",
		ctx
	});

	return block;
}

// (149:16) <SwipeItem>
function create_default_slot_19(ctx) {
	let current;

	const picture = new Picture({
			props: {
				src: "https://placeimg.com/300/300/tech",
				alt: "sample"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(picture.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(picture.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(picture, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(picture.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(picture.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(picture, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_19.name,
		type: "slot",
		source: "(149:16) <SwipeItem>",
		ctx
	});

	return block;
}

// (136:12) <Swipe>
function create_default_slot_18(ctx) {
	let t0;
	let t1;
	let t2;
	let t3;
	let current;

	const swipeitem0 = new SwipeItem({
			props: {
				$$slots: { default: [create_default_slot_23] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const swipeitem1 = new SwipeItem({
			props: {
				$$slots: { default: [create_default_slot_22] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const swipeitem2 = new SwipeItem({
			props: {
				$$slots: { default: [create_default_slot_21] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const swipeitem3 = new SwipeItem({
			props: {
				$$slots: { default: [create_default_slot_20] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const swipeitem4 = new SwipeItem({
			props: {
				$$slots: { default: [create_default_slot_19] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(swipeitem0.$$.fragment);
			t0 = space();
			create_component(swipeitem1.$$.fragment);
			t1 = space();
			create_component(swipeitem2.$$.fragment);
			t2 = space();
			create_component(swipeitem3.$$.fragment);
			t3 = space();
			create_component(swipeitem4.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(swipeitem0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(swipeitem1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(swipeitem2.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(swipeitem3.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(swipeitem4.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(swipeitem0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(swipeitem1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(swipeitem2, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(swipeitem3, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(swipeitem4, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const swipeitem0_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				swipeitem0_changes.$$scope = { dirty, ctx };
			}

			swipeitem0.$set(swipeitem0_changes);
			const swipeitem1_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				swipeitem1_changes.$$scope = { dirty, ctx };
			}

			swipeitem1.$set(swipeitem1_changes);
			const swipeitem2_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				swipeitem2_changes.$$scope = { dirty, ctx };
			}

			swipeitem2.$set(swipeitem2_changes);
			const swipeitem3_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				swipeitem3_changes.$$scope = { dirty, ctx };
			}

			swipeitem3.$set(swipeitem3_changes);
			const swipeitem4_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				swipeitem4_changes.$$scope = { dirty, ctx };
			}

			swipeitem4.$set(swipeitem4_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(swipeitem0.$$.fragment, local);
			transition_in(swipeitem1.$$.fragment, local);
			transition_in(swipeitem2.$$.fragment, local);
			transition_in(swipeitem3.$$.fragment, local);
			transition_in(swipeitem4.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(swipeitem0.$$.fragment, local);
			transition_out(swipeitem1.$$.fragment, local);
			transition_out(swipeitem2.$$.fragment, local);
			transition_out(swipeitem3.$$.fragment, local);
			transition_out(swipeitem4.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(swipeitem0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(swipeitem1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(swipeitem2, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(swipeitem3, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(swipeitem4, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_18.name,
		type: "slot",
		source: "(136:12) <Swipe>",
		ctx
	});

	return block;
}

// (157:16) <Button is="success" on:click="{e => console.log(e)}">
function create_default_slot_17(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("test1");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "test1");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_17.name,
		type: "slot",
		source: "(157:16) <Button is=\\\"success\\\" on:click=\\\"{e => console.log(e)}\\\">",
		ctx
	});

	return block;
}

// (160:16) <Button is="success" on:click="{e => console.log(e)}">
function create_default_slot_16(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("test12");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "test12");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_16.name,
		type: "slot",
		source: "(160:16) <Button is=\\\"success\\\" on:click=\\\"{e => console.log(e)}\\\">",
		ctx
	});

	return block;
}

// (163:16) <Button is="success" on:click="{e => console.log(e)}">
function create_default_slot_15(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("test123");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "test123");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_15.name,
		type: "slot",
		source: "(163:16) <Button is=\\\"success\\\" on:click=\\\"{e => console.log(e)}\\\">",
		ctx
	});

	return block;
}

// (183:16) <Button is="warning" on:click="{e => console.log(e)}">
function create_default_slot_14(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Submit");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Submit");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_14.name,
		type: "slot",
		source: "(183:16) <Button is=\\\"warning\\\" on:click=\\\"{e => console.log(e)}\\\">",
		ctx
	});

	return block;
}

// (228:8) {#each cards as card}
function create_each_block_1(ctx) {
	let li;
	let t;
	let current;
	const charitycard_spread_levels = [/*card*/ ctx[18]];
	let charitycard_props = {};

	for (let i = 0; i < charitycard_spread_levels.length; i += 1) {
		charitycard_props = assign(charitycard_props, charitycard_spread_levels[i]);
	}

	const charitycard = new CharityCard({ props: charitycard_props, $$inline: true });

	const block = {
		c: function create() {
			li = element("li");
			create_component(charitycard.$$.fragment);
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			claim_component(charitycard.$$.fragment, li_nodes);
			t = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(li, "class", "svelte-1l1j0nq");
			add_location(li, file, 228, 12, 6033);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			mount_component(charitycard, li, null);
			append_dev(li, t);
			current = true;
		},
		p: function update(ctx, dirty) {
			const charitycard_changes = (dirty & /*cards*/ 1)
			? get_spread_update(charitycard_spread_levels, [get_spread_object(/*card*/ ctx[18])])
			: {};

			charitycard.$set(charitycard_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(charitycard.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(charitycard.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			destroy_component(charitycard);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(228:8) {#each cards as card}",
		ctx
	});

	return block;
}

// (247:8) {#each cards as card}
function create_each_block(ctx) {
	let li;
	let t;
	let current;
	const charitycard_spread_levels = [/*card*/ ctx[18]];
	let charitycard_props = {};

	for (let i = 0; i < charitycard_spread_levels.length; i += 1) {
		charitycard_props = assign(charitycard_props, charitycard_spread_levels[i]);
	}

	const charitycard = new CharityCard({ props: charitycard_props, $$inline: true });

	const block = {
		c: function create() {
			li = element("li");
			create_component(charitycard.$$.fragment);
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			claim_component(charitycard.$$.fragment, li_nodes);
			t = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(li, "class", "svelte-1l1j0nq");
			add_location(li, file, 247, 12, 6349);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			mount_component(charitycard, li, null);
			append_dev(li, t);
			current = true;
		},
		p: function update(ctx, dirty) {
			const charitycard_changes = (dirty & /*cards*/ 1)
			? get_spread_update(charitycard_spread_levels, [get_spread_object(/*card*/ ctx[18])])
			: {};

			charitycard.$set(charitycard_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(charitycard.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(charitycard.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			destroy_component(charitycard);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(247:8) {#each cards as card}",
		ctx
	});

	return block;
}

// (306:4) <Button is="success" type="submit">
function create_default_slot_13(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Submit");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Submit");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_13.name,
		type: "slot",
		source: "(306:4) <Button is=\\\"success\\\" type=\\\"submit\\\">",
		ctx
	});

	return block;
}

// (262:0) <Form on:submit="{(e) => console.log(e)}" name="main-form">
function create_default_slot_12(ctx) {
	let br0;
	let t0;
	let br1;
	let t1;
	let t2;
	let br2;
	let t3;
	let br3;
	let t4;
	let t5;
	let br4;
	let t6;
	let br5;
	let t7;
	let t8;
	let br6;
	let t9;
	let br7;
	let t10;
	let t11;
	let br8;
	let t12;
	let br9;
	let t13;
	let t14;
	let br10;
	let t15;
	let br11;
	let t16;
	let t17;
	let br12;
	let t18;
	let br13;
	let t19;
	let t20;
	let br14;
	let t21;
	let br15;
	let t22;
	let t23;
	let br16;
	let t24;
	let br17;
	let t25;
	let current;

	const input0 = new Input({
			props: {
				name: "test1",
				type: "number",
				list: "sum-suggestions"
			},
			$$inline: true
		});

	const input1 = new Input({
			props: {
				name: "test2",
				type: "text",
				list: "sum-suggestions"
			},
			$$inline: true
		});

	const input2 = new Input({
			props: {
				name: "test3",
				type: "email",
				list: "sum-suggestions"
			},
			$$inline: true
		});

	const input3 = new Input({
			props: {
				name: "test4",
				type: "url",
				list: "sum-suggestions"
			},
			$$inline: true
		});

	const input4 = new Input({
			props: {
				name: "test5",
				type: "search",
				list: "sum-suggestions"
			},
			$$inline: true
		});

	const input5 = new Input({
			props: {
				name: "test6",
				type: "date",
				list: "sum-suggestions"
			},
			$$inline: true
		});

	const input6 = new Input({
			props: {
				name: "test7",
				type: "password",
				list: "sum-suggestions"
			},
			$$inline: true
		});

	const input7 = new Input({
			props: {
				name: "test8",
				type: "tel",
				list: "sum-suggestions"
			},
			$$inline: true
		});

	const button = new Button({
			props: {
				is: "success",
				type: "submit",
				$$slots: { default: [create_default_slot_13] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			br0 = element("br");
			t0 = space();
			br1 = element("br");
			t1 = space();
			create_component(input0.$$.fragment);
			t2 = space();
			br2 = element("br");
			t3 = space();
			br3 = element("br");
			t4 = space();
			create_component(input1.$$.fragment);
			t5 = space();
			br4 = element("br");
			t6 = space();
			br5 = element("br");
			t7 = space();
			create_component(input2.$$.fragment);
			t8 = space();
			br6 = element("br");
			t9 = space();
			br7 = element("br");
			t10 = space();
			create_component(input3.$$.fragment);
			t11 = space();
			br8 = element("br");
			t12 = space();
			br9 = element("br");
			t13 = space();
			create_component(input4.$$.fragment);
			t14 = space();
			br10 = element("br");
			t15 = space();
			br11 = element("br");
			t16 = space();
			create_component(input5.$$.fragment);
			t17 = space();
			br12 = element("br");
			t18 = space();
			br13 = element("br");
			t19 = space();
			create_component(input6.$$.fragment);
			t20 = space();
			br14 = element("br");
			t21 = space();
			br15 = element("br");
			t22 = space();
			create_component(input7.$$.fragment);
			t23 = space();
			br16 = element("br");
			t24 = space();
			br17 = element("br");
			t25 = space();
			create_component(button.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			br0 = claim_element(nodes, "BR", {});
			t0 = claim_space(nodes);
			br1 = claim_element(nodes, "BR", {});
			t1 = claim_space(nodes);
			claim_component(input0.$$.fragment, nodes);
			t2 = claim_space(nodes);
			br2 = claim_element(nodes, "BR", {});
			t3 = claim_space(nodes);
			br3 = claim_element(nodes, "BR", {});
			t4 = claim_space(nodes);
			claim_component(input1.$$.fragment, nodes);
			t5 = claim_space(nodes);
			br4 = claim_element(nodes, "BR", {});
			t6 = claim_space(nodes);
			br5 = claim_element(nodes, "BR", {});
			t7 = claim_space(nodes);
			claim_component(input2.$$.fragment, nodes);
			t8 = claim_space(nodes);
			br6 = claim_element(nodes, "BR", {});
			t9 = claim_space(nodes);
			br7 = claim_element(nodes, "BR", {});
			t10 = claim_space(nodes);
			claim_component(input3.$$.fragment, nodes);
			t11 = claim_space(nodes);
			br8 = claim_element(nodes, "BR", {});
			t12 = claim_space(nodes);
			br9 = claim_element(nodes, "BR", {});
			t13 = claim_space(nodes);
			claim_component(input4.$$.fragment, nodes);
			t14 = claim_space(nodes);
			br10 = claim_element(nodes, "BR", {});
			t15 = claim_space(nodes);
			br11 = claim_element(nodes, "BR", {});
			t16 = claim_space(nodes);
			claim_component(input5.$$.fragment, nodes);
			t17 = claim_space(nodes);
			br12 = claim_element(nodes, "BR", {});
			t18 = claim_space(nodes);
			br13 = claim_element(nodes, "BR", {});
			t19 = claim_space(nodes);
			claim_component(input6.$$.fragment, nodes);
			t20 = claim_space(nodes);
			br14 = claim_element(nodes, "BR", {});
			t21 = claim_space(nodes);
			br15 = claim_element(nodes, "BR", {});
			t22 = claim_space(nodes);
			claim_component(input7.$$.fragment, nodes);
			t23 = claim_space(nodes);
			br16 = claim_element(nodes, "BR", {});
			t24 = claim_space(nodes);
			br17 = claim_element(nodes, "BR", {});
			t25 = claim_space(nodes);
			claim_component(button.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			add_location(br0, file, 262, 4, 6540);
			add_location(br1, file, 263, 4, 6549);
			add_location(br2, file, 267, 4, 6623);
			add_location(br3, file, 268, 4, 6632);
			add_location(br4, file, 272, 4, 6704);
			add_location(br5, file, 273, 4, 6713);
			add_location(br6, file, 277, 4, 6786);
			add_location(br7, file, 278, 4, 6795);
			add_location(br8, file, 282, 4, 6866);
			add_location(br9, file, 283, 4, 6875);
			add_location(br10, file, 287, 4, 6949);
			add_location(br11, file, 288, 4, 6958);
			add_location(br12, file, 292, 4, 7030);
			add_location(br13, file, 293, 4, 7039);
			add_location(br14, file, 297, 4, 7115);
			add_location(br15, file, 298, 4, 7124);
			add_location(br16, file, 302, 4, 7195);
			add_location(br17, file, 303, 4, 7204);
		},
		m: function mount(target, anchor) {
			insert_dev(target, br0, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, br1, anchor);
			insert_dev(target, t1, anchor);
			mount_component(input0, target, anchor);
			insert_dev(target, t2, anchor);
			insert_dev(target, br2, anchor);
			insert_dev(target, t3, anchor);
			insert_dev(target, br3, anchor);
			insert_dev(target, t4, anchor);
			mount_component(input1, target, anchor);
			insert_dev(target, t5, anchor);
			insert_dev(target, br4, anchor);
			insert_dev(target, t6, anchor);
			insert_dev(target, br5, anchor);
			insert_dev(target, t7, anchor);
			mount_component(input2, target, anchor);
			insert_dev(target, t8, anchor);
			insert_dev(target, br6, anchor);
			insert_dev(target, t9, anchor);
			insert_dev(target, br7, anchor);
			insert_dev(target, t10, anchor);
			mount_component(input3, target, anchor);
			insert_dev(target, t11, anchor);
			insert_dev(target, br8, anchor);
			insert_dev(target, t12, anchor);
			insert_dev(target, br9, anchor);
			insert_dev(target, t13, anchor);
			mount_component(input4, target, anchor);
			insert_dev(target, t14, anchor);
			insert_dev(target, br10, anchor);
			insert_dev(target, t15, anchor);
			insert_dev(target, br11, anchor);
			insert_dev(target, t16, anchor);
			mount_component(input5, target, anchor);
			insert_dev(target, t17, anchor);
			insert_dev(target, br12, anchor);
			insert_dev(target, t18, anchor);
			insert_dev(target, br13, anchor);
			insert_dev(target, t19, anchor);
			mount_component(input6, target, anchor);
			insert_dev(target, t20, anchor);
			insert_dev(target, br14, anchor);
			insert_dev(target, t21, anchor);
			insert_dev(target, br15, anchor);
			insert_dev(target, t22, anchor);
			mount_component(input7, target, anchor);
			insert_dev(target, t23, anchor);
			insert_dev(target, br16, anchor);
			insert_dev(target, t24, anchor);
			insert_dev(target, br17, anchor);
			insert_dev(target, t25, anchor);
			mount_component(button, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(input0.$$.fragment, local);
			transition_in(input1.$$.fragment, local);
			transition_in(input2.$$.fragment, local);
			transition_in(input3.$$.fragment, local);
			transition_in(input4.$$.fragment, local);
			transition_in(input5.$$.fragment, local);
			transition_in(input6.$$.fragment, local);
			transition_in(input7.$$.fragment, local);
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(input0.$$.fragment, local);
			transition_out(input1.$$.fragment, local);
			transition_out(input2.$$.fragment, local);
			transition_out(input3.$$.fragment, local);
			transition_out(input4.$$.fragment, local);
			transition_out(input5.$$.fragment, local);
			transition_out(input6.$$.fragment, local);
			transition_out(input7.$$.fragment, local);
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(br0);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(br1);
			if (detaching) detach_dev(t1);
			destroy_component(input0, detaching);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(br2);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(br3);
			if (detaching) detach_dev(t4);
			destroy_component(input1, detaching);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(br4);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(br5);
			if (detaching) detach_dev(t7);
			destroy_component(input2, detaching);
			if (detaching) detach_dev(t8);
			if (detaching) detach_dev(br6);
			if (detaching) detach_dev(t9);
			if (detaching) detach_dev(br7);
			if (detaching) detach_dev(t10);
			destroy_component(input3, detaching);
			if (detaching) detach_dev(t11);
			if (detaching) detach_dev(br8);
			if (detaching) detach_dev(t12);
			if (detaching) detach_dev(br9);
			if (detaching) detach_dev(t13);
			destroy_component(input4, detaching);
			if (detaching) detach_dev(t14);
			if (detaching) detach_dev(br10);
			if (detaching) detach_dev(t15);
			if (detaching) detach_dev(br11);
			if (detaching) detach_dev(t16);
			destroy_component(input5, detaching);
			if (detaching) detach_dev(t17);
			if (detaching) detach_dev(br12);
			if (detaching) detach_dev(t18);
			if (detaching) detach_dev(br13);
			if (detaching) detach_dev(t19);
			destroy_component(input6, detaching);
			if (detaching) detach_dev(t20);
			if (detaching) detach_dev(br14);
			if (detaching) detach_dev(t21);
			if (detaching) detach_dev(br15);
			if (detaching) detach_dev(t22);
			destroy_component(input7, detaching);
			if (detaching) detach_dev(t23);
			if (detaching) detach_dev(br16);
			if (detaching) detach_dev(t24);
			if (detaching) detach_dev(br17);
			if (detaching) detach_dev(t25);
			destroy_component(button, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_12.name,
		type: "slot",
		source: "(262:0) <Form on:submit=\\\"{(e) => console.log(e)}\\\" name=\\\"main-form\\\">",
		ctx
	});

	return block;
}

// (361:8) <Button on:click="{e => console.log(e)}">
function create_default_slot_11(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("test");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "test");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11.name,
		type: "slot",
		source: "(361:8) <Button on:click=\\\"{e => console.log(e)}\\\">",
		ctx
	});

	return block;
}

// (364:8) <Button is="success" on:click="{e => console.log(e)}">
function create_default_slot_10(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("test");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "test");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10.name,
		type: "slot",
		source: "(364:8) <Button is=\\\"success\\\" on:click=\\\"{e => console.log(e)}\\\">",
		ctx
	});

	return block;
}

// (367:8) <Button is="success" on:click="{e => console.log(e)}" ariaLabel="text">
function create_default_slot_9(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("test");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "test");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(367:8) <Button is=\\\"success\\\" on:click=\\\"{e => console.log(e)}\\\" ariaLabel=\\\"text\\\">",
		ctx
	});

	return block;
}

// (371:8) <Button is="success" on:click="{e => console.log(e)}">
function create_default_slot_8(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("test");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "test");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(371:8) <Button is=\\\"success\\\" on:click=\\\"{e => console.log(e)}\\\">",
		ctx
	});

	return block;
}

// (375:8) <Button is="warning" on:click="{e => console.log(e)}">
function create_default_slot_7(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Some example of Button");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Some example of Button");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(375:8) <Button is=\\\"warning\\\" on:click=\\\"{e => console.log(e)}\\\">",
		ctx
	});

	return block;
}

// (378:8) <Button is="danger" on:click="{e => console.log(e)}">
function create_default_slot_6(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Some example of Button");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Some example of Button");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(378:8) <Button is=\\\"danger\\\" on:click=\\\"{e => console.log(e)}\\\">",
		ctx
	});

	return block;
}

// (388:8) <Button on:click="{e => console.log(e)}" href="#">
function create_default_slot_5(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("test");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "test");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(388:8) <Button on:click=\\\"{e => console.log(e)}\\\" href=\\\"#\\\">",
		ctx
	});

	return block;
}

// (391:8) <Button is="success" on:click="{e => console.log(e)}" href="#">
function create_default_slot_4(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("test");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "test");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(391:8) <Button is=\\\"success\\\" on:click=\\\"{e => console.log(e)}\\\" href=\\\"#\\\">",
		ctx
	});

	return block;
}

// (394:8) <Button is="success" on:click="{e => console.log(e)}" href="#">
function create_default_slot_3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("test");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "test");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(394:8) <Button is=\\\"success\\\" on:click=\\\"{e => console.log(e)}\\\" href=\\\"#\\\">",
		ctx
	});

	return block;
}

// (398:8) <Button is="success" on:click="{e => console.log(e)}" href="#">
function create_default_slot_2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("test");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "test");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(398:8) <Button is=\\\"success\\\" on:click=\\\"{e => console.log(e)}\\\" href=\\\"#\\\">",
		ctx
	});

	return block;
}

// (402:8) <Button is="warning" on:click="{e => console.log(e)}" href="#">
function create_default_slot_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Some example of Button");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Some example of Button");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(402:8) <Button is=\\\"warning\\\" on:click=\\\"{e => console.log(e)}\\\" href=\\\"#\\\">",
		ctx
	});

	return block;
}

// (405:8) <Button is="danger" on:click="{e => console.log(e)}" href="#">
function create_default_slot(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Some example of Button");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Some example of Button");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(405:8) <Button is=\\\"danger\\\" on:click=\\\"{e => console.log(e)}\\\" href=\\\"#\\\">",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let section2;
	let section0;
	let div0;
	let t1;
	let ul0;
	let li0;
	let t2;
	let li1;
	let t3;
	let li2;
	let t4;
	let li3;
	let br0;
	let t5;
	let t6;
	let datalist0;
	let option0;
	let option1;
	let option2;
	let t7;
	let li4;
	let t8;
	let t9;
	let br1;
	let t10;
	let t11;
	let section1;
	let div1;
	let t12;
	let span0;
	let h3;
	let t13;
	let t14;
	let p0;
	let t15;
	let t16;
	let t17;
	let br2;
	let t18;
	let h10;
	let t19;
	let t20;
	let br3;
	let t21;
	let p1;
	let t22;
	let t23;
	let br4;
	let t24;
	let br5;
	let t25;
	let br6;
	let t26;
	let div2;
	let t27;
	let h20;
	let t28;
	let t29;
	let t30;
	let br7;
	let t31;
	let ul1;
	let t32;
	let br8;
	let t33;
	let br9;
	let t34;
	let div3;
	let t35;
	let h21;
	let t36;
	let t37;
	let t38;
	let br10;
	let t39;
	let ul2;
	let t40;
	let br11;
	let t41;
	let br12;
	let t42;
	let br13;
	let t43;
	let t44;
	let t45;
	let h11;
	let t46;
	let t47;
	let br14;
	let t48;
	let br15;
	let t49;
	let h22;
	let t50;
	let t51;
	let br16;
	let t52;
	let br17;
	let t53;
	let p2;
	let t54;
	let t55;
	let p3;
	let t56;
	let t57;
	let p4;
	let t58;
	let t59;
	let br18;
	let t60;
	let br19;
	let t61;
	let h23;
	let t62;
	let t63;
	let ul3;
	let li5;
	let span1;
	let t64;
	let t65;
	let t66;
	let li6;
	let span2;
	let t67;
	let t68;
	let t69;
	let li7;
	let span3;
	let t70;
	let t71;
	let t72;
	let br20;
	let t73;
	let br21;
	let t74;
	let section3;
	let div4;
	let br22;
	let t75;
	let br23;
	let t76;
	let br24;
	let t77;
	let t78;
	let br25;
	let t79;
	let br26;
	let t80;
	let t81;
	let br27;
	let t82;
	let br28;
	let t83;
	let t84;
	let br29;
	let t85;
	let br30;
	let t86;
	let t87;
	let br31;
	let t88;
	let br32;
	let t89;
	let t90;
	let br33;
	let t91;
	let br34;
	let t92;
	let t93;
	let br35;
	let t94;
	let br36;
	let t95;
	let div5;
	let br37;
	let t96;
	let br38;
	let t97;
	let br39;
	let t98;
	let t99;
	let br40;
	let t100;
	let br41;
	let t101;
	let t102;
	let br42;
	let t103;
	let br43;
	let t104;
	let t105;
	let br44;
	let t106;
	let br45;
	let t107;
	let t108;
	let br46;
	let t109;
	let br47;
	let t110;
	let t111;
	let br48;
	let t112;
	let br49;
	let t113;
	let t114;
	let br50;
	let t115;
	let br51;
	let t116;
	let br52;
	let t117;
	let br53;
	let t118;
	let h24;
	let t119;
	let t120;
	let br54;
	let t121;
	let br55;
	let t122;
	let section4;
	let t123;
	let br56;
	let t124;
	let br57;
	let t125;
	let t126;
	let br58;
	let t127;
	let br59;
	let t128;
	let t129;
	let datalist1;
	let option3;
	let option4;
	let option5;
	let t130;
	let label;
	let t131;
	let t132;
	let input4;
	let t133;
	let br60;
	let t134;
	let br61;
	let t135;
	let a;
	let t136;
	let t137;
	let br62;
	let t138;
	let br63;
	let t139;
	let button16;
	let t140;
	let t141;
	let br64;
	let t142;
	let br65;
	let t143;
	let h25;
	let t144;
	let t145;
	let br66;
	let t146;
	let br67;
	let t147;
	let t148;
	let br68;
	let t149;
	let br69;
	let t150;
	let h26;
	let t151;
	let t152;
	let p5;
	let strong;
	let t153;
	let t154;
	let p6;
	let t155;
	let current;

	const swipe = new Swipe({
			props: {
				$$slots: { default: [create_default_slot_18] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const button0 = new Button({
			props: {
				is: "success",
				$$slots: { default: [create_default_slot_17] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button0.$on("click", /*click_handler*/ ctx[1]);

	const button1 = new Button({
			props: {
				is: "success",
				$$slots: { default: [create_default_slot_16] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button1.$on("click", /*click_handler_1*/ ctx[2]);

	const button2 = new Button({
			props: {
				is: "success",
				$$slots: { default: [create_default_slot_15] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button2.$on("click", /*click_handler_2*/ ctx[3]);

	const input0 = new Input({
			props: {
				type: "number",
				name: "num",
				list: "sum-suggestions",
				placeholder: "Num",
				autoselect: true,
				align: "right"
			},
			$$inline: true
		});

	const button3 = new Button({
			props: {
				is: "warning",
				$$slots: { default: [create_default_slot_14] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button3.$on("click", /*click_handler_3*/ ctx[4]);
	const progress = new Progress({ props: { value: "65" }, $$inline: true });
	const progressnext = new ProgressNext({ props: { value: "75" }, $$inline: true });

	const avatar = new Avatar({
			props: {
				src: "https://placeimg.com/300/300/people",
				alt: "avatar"
			},
			$$inline: true
		});

	const rate = new Rate({ $$inline: true });
	const divider0 = new Divider({ props: { size: "16" }, $$inline: true });
	const divider1 = new Divider({ props: { size: "20" }, $$inline: true });
	let each_value_1 = /*cards*/ ctx[0];
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks_1[i], 1, 1, () => {
		each_blocks_1[i] = null;
	});

	const divider2 = new Divider({ props: { size: "16" }, $$inline: true });
	const divider3 = new Divider({ props: { size: "20" }, $$inline: true });
	let each_value = /*cards*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out_1 = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const divider4 = new Divider({ $$inline: true });

	const form = new Form({
			props: {
				name: "main-form",
				$$slots: { default: [create_default_slot_12] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	form.$on("submit", /*submit_handler*/ ctx[5]);

	const icon0 = new Icon({
			props: { size: "small", type: "heart-filled" },
			$$inline: true
		});

	const icon1 = new Icon({
			props: {
				size: "small",
				type: "heart-filled",
				is: "warning"
			},
			$$inline: true
		});

	const icon2 = new Icon({
			props: {
				size: "small",
				type: "heart-filled",
				is: "danger"
			},
			$$inline: true
		});

	const icon3 = new Icon({
			props: { type: "heart-filled" },
			$$inline: true
		});

	const icon4 = new Icon({
			props: { type: "heart-filled", is: "warning" },
			$$inline: true
		});

	const icon5 = new Icon({
			props: { type: "heart-filled", is: "danger" },
			$$inline: true
		});

	const icon6 = new Icon({
			props: { size: "big", type: "heart-filled" },
			$$inline: true
		});

	const icon7 = new Icon({
			props: {
				size: "big",
				type: "heart-filled",
				is: "warning"
			},
			$$inline: true
		});

	const icon8 = new Icon({
			props: {
				size: "big",
				type: "heart-filled",
				is: "danger"
			},
			$$inline: true
		});

	const button4 = new Button({
			props: {
				$$slots: { default: [create_default_slot_11] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button4.$on("click", /*click_handler_4*/ ctx[6]);

	const button5 = new Button({
			props: {
				is: "success",
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button5.$on("click", /*click_handler_5*/ ctx[7]);

	const button6 = new Button({
			props: {
				is: "success",
				ariaLabel: "text",
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button6.$on("click", /*click_handler_6*/ ctx[8]);

	const button7 = new Button({
			props: {
				is: "success",
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button7.$on("click", /*click_handler_7*/ ctx[9]);

	const button8 = new Button({
			props: {
				is: "warning",
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button8.$on("click", /*click_handler_8*/ ctx[10]);

	const button9 = new Button({
			props: {
				is: "danger",
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button9.$on("click", /*click_handler_9*/ ctx[11]);

	const button10 = new Button({
			props: {
				href: "#",
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button10.$on("click", /*click_handler_10*/ ctx[12]);

	const button11 = new Button({
			props: {
				is: "success",
				href: "#",
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button11.$on("click", /*click_handler_11*/ ctx[13]);

	const button12 = new Button({
			props: {
				is: "success",
				href: "#",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button12.$on("click", /*click_handler_12*/ ctx[14]);

	const button13 = new Button({
			props: {
				is: "success",
				href: "#",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button13.$on("click", /*click_handler_13*/ ctx[15]);

	const button14 = new Button({
			props: {
				is: "warning",
				href: "#",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button14.$on("click", /*click_handler_14*/ ctx[16]);

	const button15 = new Button({
			props: {
				is: "danger",
				href: "#",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button15.$on("click", /*click_handler_15*/ ctx[17]);

	const input1 = new Input({
			props: { rows: 2, name: "tex", list: "lis" },
			$$inline: true
		});

	const input2 = new Input({
			props: {
				name: "tex1",
				list: "lis",
				placeholder: "Some placeholder text"
			},
			$$inline: true
		});

	const input3 = new Input({
			props: {
				type: "number",
				name: "tex2",
				list: "lis"
			},
			$$inline: true
		});

	const picture = new Picture({
			props: {
				src: "https://placeimg.com/1000/1000/any",
				alt: "sample"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			section2 = element("section");
			section0 = element("section");
			div0 = element("div");
			create_component(swipe.$$.fragment);
			t1 = space();
			ul0 = element("ul");
			li0 = element("li");
			create_component(button0.$$.fragment);
			t2 = space();
			li1 = element("li");
			create_component(button1.$$.fragment);
			t3 = space();
			li2 = element("li");
			create_component(button2.$$.fragment);
			t4 = space();
			li3 = element("li");
			br0 = element("br");
			t5 = space();
			create_component(input0.$$.fragment);
			t6 = space();
			datalist0 = element("datalist");
			option0 = element("option");
			option1 = element("option");
			option2 = element("option");
			t7 = space();
			li4 = element("li");
			create_component(button3.$$.fragment);
			t8 = space();
			create_component(progress.$$.fragment);
			t9 = space();
			br1 = element("br");
			t10 = space();
			create_component(progressnext.$$.fragment);
			t11 = space();
			section1 = element("section");
			div1 = element("div");
			create_component(avatar.$$.fragment);
			t12 = space();
			span0 = element("span");
			h3 = element("h3");
			t13 = text("Tina Kandelaki");
			t14 = space();
			p0 = element("p");
			t15 = text("ORG charity charitify");
			t16 = space();
			create_component(rate.$$.fragment);
			t17 = space();
			br2 = element("br");
			t18 = space();
			h10 = element("h1");
			t19 = text("The main title");
			t20 = space();
			br3 = element("br");
			t21 = space();
			p1 = element("p");
			t22 = text("A small description that describes the title above and just makes text longer.");
			t23 = space();
			br4 = element("br");
			t24 = space();
			br5 = element("br");
			t25 = space();
			br6 = element("br");
			t26 = space();
			div2 = element("div");
			create_component(divider0.$$.fragment);
			t27 = space();
			h20 = element("h2");
			t28 = text("The nearest list:");
			t29 = space();
			create_component(divider1.$$.fragment);
			t30 = space();
			br7 = element("br");
			t31 = space();
			ul1 = element("ul");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t32 = space();
			br8 = element("br");
			t33 = space();
			br9 = element("br");
			t34 = space();
			div3 = element("div");
			create_component(divider2.$$.fragment);
			t35 = space();
			h21 = element("h2");
			t36 = text("The nearest list:");
			t37 = space();
			create_component(divider3.$$.fragment);
			t38 = space();
			br10 = element("br");
			t39 = space();
			ul2 = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t40 = space();
			br11 = element("br");
			t41 = space();
			br12 = element("br");
			t42 = space();
			br13 = element("br");
			t43 = space();
			create_component(divider4.$$.fragment);
			t44 = space();
			create_component(form.$$.fragment);
			t45 = space();
			h11 = element("h1");
			t46 = text("Charitify - is the application for helping those in need.");
			t47 = space();
			br14 = element("br");
			t48 = space();
			br15 = element("br");
			t49 = space();
			h22 = element("h2");
			t50 = text("Typography");
			t51 = space();
			br16 = element("br");
			t52 = space();
			br17 = element("br");
			t53 = space();
			p2 = element("p");
			t54 = text("Few paragraphs to text fonts");
			t55 = space();
			p3 = element("p");
			t56 = text("Декілька параграфів для тесту тексту");
			t57 = space();
			p4 = element("p");
			t58 = text("Несколько параграфов для теста текста");
			t59 = space();
			br18 = element("br");
			t60 = space();
			br19 = element("br");
			t61 = space();
			h23 = element("h2");
			t62 = text("Interactive elements");
			t63 = space();
			ul3 = element("ul");
			li5 = element("li");
			span1 = element("span");
			create_component(icon0.$$.fragment);
			t64 = space();
			create_component(icon1.$$.fragment);
			t65 = space();
			create_component(icon2.$$.fragment);
			t66 = space();
			li6 = element("li");
			span2 = element("span");
			create_component(icon3.$$.fragment);
			t67 = space();
			create_component(icon4.$$.fragment);
			t68 = space();
			create_component(icon5.$$.fragment);
			t69 = space();
			li7 = element("li");
			span3 = element("span");
			create_component(icon6.$$.fragment);
			t70 = space();
			create_component(icon7.$$.fragment);
			t71 = space();
			create_component(icon8.$$.fragment);
			t72 = space();
			br20 = element("br");
			t73 = space();
			br21 = element("br");
			t74 = space();
			section3 = element("section");
			div4 = element("div");
			br22 = element("br");
			t75 = text("\n        Buttons\n        ");
			br23 = element("br");
			t76 = space();
			br24 = element("br");
			t77 = space();
			create_component(button4.$$.fragment);
			t78 = space();
			br25 = element("br");
			t79 = space();
			br26 = element("br");
			t80 = space();
			create_component(button5.$$.fragment);
			t81 = space();
			br27 = element("br");
			t82 = space();
			br28 = element("br");
			t83 = space();
			create_component(button6.$$.fragment);
			t84 = space();
			br29 = element("br");
			t85 = space();
			br30 = element("br");
			t86 = text("\n        With text\n        ");
			create_component(button7.$$.fragment);
			t87 = text("\n        and behind.\n        ");
			br31 = element("br");
			t88 = space();
			br32 = element("br");
			t89 = space();
			create_component(button8.$$.fragment);
			t90 = space();
			br33 = element("br");
			t91 = space();
			br34 = element("br");
			t92 = space();
			create_component(button9.$$.fragment);
			t93 = space();
			br35 = element("br");
			t94 = space();
			br36 = element("br");
			t95 = space();
			div5 = element("div");
			br37 = element("br");
			t96 = text("\n        Links as buttons\n        ");
			br38 = element("br");
			t97 = space();
			br39 = element("br");
			t98 = space();
			create_component(button10.$$.fragment);
			t99 = space();
			br40 = element("br");
			t100 = space();
			br41 = element("br");
			t101 = space();
			create_component(button11.$$.fragment);
			t102 = space();
			br42 = element("br");
			t103 = space();
			br43 = element("br");
			t104 = space();
			create_component(button12.$$.fragment);
			t105 = space();
			br44 = element("br");
			t106 = space();
			br45 = element("br");
			t107 = text("\n        With text\n        ");
			create_component(button13.$$.fragment);
			t108 = text("\n        and behind.\n        ");
			br46 = element("br");
			t109 = space();
			br47 = element("br");
			t110 = space();
			create_component(button14.$$.fragment);
			t111 = space();
			br48 = element("br");
			t112 = space();
			br49 = element("br");
			t113 = space();
			create_component(button15.$$.fragment);
			t114 = space();
			br50 = element("br");
			t115 = space();
			br51 = element("br");
			t116 = space();
			br52 = element("br");
			t117 = space();
			br53 = element("br");
			t118 = space();
			h24 = element("h2");
			t119 = text("Input fields");
			t120 = space();
			br54 = element("br");
			t121 = space();
			br55 = element("br");
			t122 = space();
			section4 = element("section");
			create_component(input1.$$.fragment);
			t123 = space();
			br56 = element("br");
			t124 = space();
			br57 = element("br");
			t125 = space();
			create_component(input2.$$.fragment);
			t126 = space();
			br58 = element("br");
			t127 = space();
			br59 = element("br");
			t128 = space();
			create_component(input3.$$.fragment);
			t129 = space();
			datalist1 = element("datalist");
			option3 = element("option");
			option4 = element("option");
			option5 = element("option");
			t130 = space();
			label = element("label");
			t131 = text("label");
			t132 = space();
			input4 = element("input");
			t133 = space();
			br60 = element("br");
			t134 = space();
			br61 = element("br");
			t135 = space();
			a = element("a");
			t136 = text("Some link");
			t137 = space();
			br62 = element("br");
			t138 = space();
			br63 = element("br");
			t139 = space();
			button16 = element("button");
			t140 = text("Button example");
			t141 = space();
			br64 = element("br");
			t142 = space();
			br65 = element("br");
			t143 = space();
			h25 = element("h2");
			t144 = text("Images");
			t145 = space();
			br66 = element("br");
			t146 = space();
			br67 = element("br");
			t147 = space();
			create_component(picture.$$.fragment);
			t148 = space();
			br68 = element("br");
			t149 = space();
			br69 = element("br");
			t150 = space();
			h26 = element("h2");
			t151 = text("Other");
			t152 = space();
			p5 = element("p");
			strong = element("strong");
			t153 = text("Try editing this file (src/routes/index.svelte) to test live reloading.");
			t154 = space();
			p6 = element("p");
			t155 = text("A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.");
			this.h();
		},
		l: function claim(nodes) {
			t0 = claim_space(nodes);
			section2 = claim_element(nodes, "SECTION", { class: true });
			var section2_nodes = children(section2);
			section0 = claim_element(section2_nodes, "SECTION", { class: true });
			var section0_nodes = children(section0);
			div0 = claim_element(section0_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(swipe.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(section0_nodes);
			ul0 = claim_element(section0_nodes, "UL", { class: true });
			var ul0_nodes = children(ul0);
			li0 = claim_element(ul0_nodes, "LI", { class: true });
			var li0_nodes = children(li0);
			claim_component(button0.$$.fragment, li0_nodes);
			li0_nodes.forEach(detach_dev);
			t2 = claim_space(ul0_nodes);
			li1 = claim_element(ul0_nodes, "LI", { class: true });
			var li1_nodes = children(li1);
			claim_component(button1.$$.fragment, li1_nodes);
			li1_nodes.forEach(detach_dev);
			t3 = claim_space(ul0_nodes);
			li2 = claim_element(ul0_nodes, "LI", { class: true });
			var li2_nodes = children(li2);
			claim_component(button2.$$.fragment, li2_nodes);
			li2_nodes.forEach(detach_dev);
			t4 = claim_space(ul0_nodes);
			li3 = claim_element(ul0_nodes, "LI", { class: true });
			var li3_nodes = children(li3);
			br0 = claim_element(li3_nodes, "BR", {});
			t5 = claim_space(li3_nodes);
			claim_component(input0.$$.fragment, li3_nodes);
			t6 = claim_space(li3_nodes);
			datalist0 = claim_element(li3_nodes, "DATALIST", { id: true });
			var datalist0_nodes = children(datalist0);
			option0 = claim_element(datalist0_nodes, "OPTION", { value: true });
			var option0_nodes = children(option0);
			option0_nodes.forEach(detach_dev);
			option1 = claim_element(datalist0_nodes, "OPTION", { value: true });
			var option1_nodes = children(option1);
			option1_nodes.forEach(detach_dev);
			option2 = claim_element(datalist0_nodes, "OPTION", { value: true });
			var option2_nodes = children(option2);
			option2_nodes.forEach(detach_dev);
			datalist0_nodes.forEach(detach_dev);
			li3_nodes.forEach(detach_dev);
			t7 = claim_space(ul0_nodes);
			li4 = claim_element(ul0_nodes, "LI", { class: true });
			var li4_nodes = children(li4);
			claim_component(button3.$$.fragment, li4_nodes);
			li4_nodes.forEach(detach_dev);
			ul0_nodes.forEach(detach_dev);
			section0_nodes.forEach(detach_dev);
			t8 = claim_space(section2_nodes);
			claim_component(progress.$$.fragment, section2_nodes);
			t9 = claim_space(section2_nodes);
			br1 = claim_element(section2_nodes, "BR", {});
			t10 = claim_space(section2_nodes);
			claim_component(progressnext.$$.fragment, section2_nodes);
			t11 = claim_space(section2_nodes);
			section1 = claim_element(section2_nodes, "SECTION", { class: true });
			var section1_nodes = children(section1);
			div1 = claim_element(section1_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			claim_component(avatar.$$.fragment, div1_nodes);
			t12 = claim_space(div1_nodes);
			span0 = claim_element(div1_nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);
			h3 = claim_element(span0_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t13 = claim_text(h3_nodes, "Tina Kandelaki");
			h3_nodes.forEach(detach_dev);
			t14 = claim_space(span0_nodes);
			p0 = claim_element(span0_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t15 = claim_text(p0_nodes, "ORG charity charitify");
			p0_nodes.forEach(detach_dev);
			span0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t16 = claim_space(section1_nodes);
			claim_component(rate.$$.fragment, section1_nodes);
			section1_nodes.forEach(detach_dev);
			t17 = claim_space(section2_nodes);
			br2 = claim_element(section2_nodes, "BR", {});
			t18 = claim_space(section2_nodes);
			h10 = claim_element(section2_nodes, "H1", { class: true });
			var h10_nodes = children(h10);
			t19 = claim_text(h10_nodes, "The main title");
			h10_nodes.forEach(detach_dev);
			t20 = claim_space(section2_nodes);
			br3 = claim_element(section2_nodes, "BR", {});
			t21 = claim_space(section2_nodes);
			p1 = claim_element(section2_nodes, "P", { class: true, style: true });
			var p1_nodes = children(p1);
			t22 = claim_text(p1_nodes, "A small description that describes the title above and just makes text longer.");
			p1_nodes.forEach(detach_dev);
			section2_nodes.forEach(detach_dev);
			t23 = claim_space(nodes);
			br4 = claim_element(nodes, "BR", {});
			t24 = claim_space(nodes);
			br5 = claim_element(nodes, "BR", {});
			t25 = claim_space(nodes);
			br6 = claim_element(nodes, "BR", {});
			t26 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			claim_component(divider0.$$.fragment, div2_nodes);
			t27 = claim_space(div2_nodes);
			h20 = claim_element(div2_nodes, "H2", { style: true });
			var h20_nodes = children(h20);
			t28 = claim_text(h20_nodes, "The nearest list:");
			h20_nodes.forEach(detach_dev);
			t29 = claim_space(div2_nodes);
			claim_component(divider1.$$.fragment, div2_nodes);
			t30 = claim_space(div2_nodes);
			br7 = claim_element(div2_nodes, "BR", {});
			t31 = claim_space(div2_nodes);
			ul1 = claim_element(div2_nodes, "UL", { class: true });
			var ul1_nodes = children(ul1);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(ul1_nodes);
			}

			ul1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t32 = claim_space(nodes);
			br8 = claim_element(nodes, "BR", {});
			t33 = claim_space(nodes);
			br9 = claim_element(nodes, "BR", {});
			t34 = claim_space(nodes);
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			claim_component(divider2.$$.fragment, div3_nodes);
			t35 = claim_space(div3_nodes);
			h21 = claim_element(div3_nodes, "H2", { style: true });
			var h21_nodes = children(h21);
			t36 = claim_text(h21_nodes, "The nearest list:");
			h21_nodes.forEach(detach_dev);
			t37 = claim_space(div3_nodes);
			claim_component(divider3.$$.fragment, div3_nodes);
			t38 = claim_space(div3_nodes);
			br10 = claim_element(div3_nodes, "BR", {});
			t39 = claim_space(div3_nodes);
			ul2 = claim_element(div3_nodes, "UL", { class: true });
			var ul2_nodes = children(ul2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul2_nodes);
			}

			ul2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			t40 = claim_space(nodes);
			br11 = claim_element(nodes, "BR", {});
			t41 = claim_space(nodes);
			br12 = claim_element(nodes, "BR", {});
			t42 = claim_space(nodes);
			br13 = claim_element(nodes, "BR", {});
			t43 = claim_space(nodes);
			claim_component(divider4.$$.fragment, nodes);
			t44 = claim_space(nodes);
			claim_component(form.$$.fragment, nodes);
			t45 = claim_space(nodes);
			h11 = claim_element(nodes, "H1", { class: true });
			var h11_nodes = children(h11);
			t46 = claim_text(h11_nodes, "Charitify - is the application for helping those in need.");
			h11_nodes.forEach(detach_dev);
			t47 = claim_space(nodes);
			br14 = claim_element(nodes, "BR", {});
			t48 = claim_space(nodes);
			br15 = claim_element(nodes, "BR", {});
			t49 = claim_space(nodes);
			h22 = claim_element(nodes, "H2", { class: true });
			var h22_nodes = children(h22);
			t50 = claim_text(h22_nodes, "Typography");
			h22_nodes.forEach(detach_dev);
			t51 = claim_space(nodes);
			br16 = claim_element(nodes, "BR", {});
			t52 = claim_space(nodes);
			br17 = claim_element(nodes, "BR", {});
			t53 = claim_space(nodes);
			p2 = claim_element(nodes, "P", {});
			var p2_nodes = children(p2);
			t54 = claim_text(p2_nodes, "Few paragraphs to text fonts");
			p2_nodes.forEach(detach_dev);
			t55 = claim_space(nodes);
			p3 = claim_element(nodes, "P", {});
			var p3_nodes = children(p3);
			t56 = claim_text(p3_nodes, "Декілька параграфів для тесту тексту");
			p3_nodes.forEach(detach_dev);
			t57 = claim_space(nodes);
			p4 = claim_element(nodes, "P", {});
			var p4_nodes = children(p4);
			t58 = claim_text(p4_nodes, "Несколько параграфов для теста текста");
			p4_nodes.forEach(detach_dev);
			t59 = claim_space(nodes);
			br18 = claim_element(nodes, "BR", {});
			t60 = claim_space(nodes);
			br19 = claim_element(nodes, "BR", {});
			t61 = claim_space(nodes);
			h23 = claim_element(nodes, "H2", { class: true });
			var h23_nodes = children(h23);
			t62 = claim_text(h23_nodes, "Interactive elements");
			h23_nodes.forEach(detach_dev);
			t63 = claim_space(nodes);
			ul3 = claim_element(nodes, "UL", {});
			var ul3_nodes = children(ul3);
			li5 = claim_element(ul3_nodes, "LI", {});
			var li5_nodes = children(li5);
			span1 = claim_element(li5_nodes, "SPAN", {});
			var span1_nodes = children(span1);
			claim_component(icon0.$$.fragment, span1_nodes);
			t64 = claim_space(span1_nodes);
			claim_component(icon1.$$.fragment, span1_nodes);
			t65 = claim_space(span1_nodes);
			claim_component(icon2.$$.fragment, span1_nodes);
			span1_nodes.forEach(detach_dev);
			li5_nodes.forEach(detach_dev);
			t66 = claim_space(ul3_nodes);
			li6 = claim_element(ul3_nodes, "LI", {});
			var li6_nodes = children(li6);
			span2 = claim_element(li6_nodes, "SPAN", {});
			var span2_nodes = children(span2);
			claim_component(icon3.$$.fragment, span2_nodes);
			t67 = claim_space(span2_nodes);
			claim_component(icon4.$$.fragment, span2_nodes);
			t68 = claim_space(span2_nodes);
			claim_component(icon5.$$.fragment, span2_nodes);
			span2_nodes.forEach(detach_dev);
			li6_nodes.forEach(detach_dev);
			t69 = claim_space(ul3_nodes);
			li7 = claim_element(ul3_nodes, "LI", {});
			var li7_nodes = children(li7);
			span3 = claim_element(li7_nodes, "SPAN", {});
			var span3_nodes = children(span3);
			claim_component(icon6.$$.fragment, span3_nodes);
			t70 = claim_space(span3_nodes);
			claim_component(icon7.$$.fragment, span3_nodes);
			t71 = claim_space(span3_nodes);
			claim_component(icon8.$$.fragment, span3_nodes);
			span3_nodes.forEach(detach_dev);
			li7_nodes.forEach(detach_dev);
			ul3_nodes.forEach(detach_dev);
			t72 = claim_space(nodes);
			br20 = claim_element(nodes, "BR", {});
			t73 = claim_space(nodes);
			br21 = claim_element(nodes, "BR", {});
			t74 = claim_space(nodes);
			section3 = claim_element(nodes, "SECTION", { style: true });
			var section3_nodes = children(section3);
			div4 = claim_element(section3_nodes, "DIV", {});
			var div4_nodes = children(div4);
			br22 = claim_element(div4_nodes, "BR", {});
			t75 = claim_text(div4_nodes, "\n        Buttons\n        ");
			br23 = claim_element(div4_nodes, "BR", {});
			t76 = claim_space(div4_nodes);
			br24 = claim_element(div4_nodes, "BR", {});
			t77 = claim_space(div4_nodes);
			claim_component(button4.$$.fragment, div4_nodes);
			t78 = claim_space(div4_nodes);
			br25 = claim_element(div4_nodes, "BR", {});
			t79 = claim_space(div4_nodes);
			br26 = claim_element(div4_nodes, "BR", {});
			t80 = claim_space(div4_nodes);
			claim_component(button5.$$.fragment, div4_nodes);
			t81 = claim_space(div4_nodes);
			br27 = claim_element(div4_nodes, "BR", {});
			t82 = claim_space(div4_nodes);
			br28 = claim_element(div4_nodes, "BR", {});
			t83 = claim_space(div4_nodes);
			claim_component(button6.$$.fragment, div4_nodes);
			t84 = claim_space(div4_nodes);
			br29 = claim_element(div4_nodes, "BR", {});
			t85 = claim_space(div4_nodes);
			br30 = claim_element(div4_nodes, "BR", {});
			t86 = claim_text(div4_nodes, "\n        With text\n        ");
			claim_component(button7.$$.fragment, div4_nodes);
			t87 = claim_text(div4_nodes, "\n        and behind.\n        ");
			br31 = claim_element(div4_nodes, "BR", {});
			t88 = claim_space(div4_nodes);
			br32 = claim_element(div4_nodes, "BR", {});
			t89 = claim_space(div4_nodes);
			claim_component(button8.$$.fragment, div4_nodes);
			t90 = claim_space(div4_nodes);
			br33 = claim_element(div4_nodes, "BR", {});
			t91 = claim_space(div4_nodes);
			br34 = claim_element(div4_nodes, "BR", {});
			t92 = claim_space(div4_nodes);
			claim_component(button9.$$.fragment, div4_nodes);
			t93 = claim_space(div4_nodes);
			br35 = claim_element(div4_nodes, "BR", {});
			t94 = claim_space(div4_nodes);
			br36 = claim_element(div4_nodes, "BR", {});
			div4_nodes.forEach(detach_dev);
			t95 = claim_space(section3_nodes);
			div5 = claim_element(section3_nodes, "DIV", {});
			var div5_nodes = children(div5);
			br37 = claim_element(div5_nodes, "BR", {});
			t96 = claim_text(div5_nodes, "\n        Links as buttons\n        ");
			br38 = claim_element(div5_nodes, "BR", {});
			t97 = claim_space(div5_nodes);
			br39 = claim_element(div5_nodes, "BR", {});
			t98 = claim_space(div5_nodes);
			claim_component(button10.$$.fragment, div5_nodes);
			t99 = claim_space(div5_nodes);
			br40 = claim_element(div5_nodes, "BR", {});
			t100 = claim_space(div5_nodes);
			br41 = claim_element(div5_nodes, "BR", {});
			t101 = claim_space(div5_nodes);
			claim_component(button11.$$.fragment, div5_nodes);
			t102 = claim_space(div5_nodes);
			br42 = claim_element(div5_nodes, "BR", {});
			t103 = claim_space(div5_nodes);
			br43 = claim_element(div5_nodes, "BR", {});
			t104 = claim_space(div5_nodes);
			claim_component(button12.$$.fragment, div5_nodes);
			t105 = claim_space(div5_nodes);
			br44 = claim_element(div5_nodes, "BR", {});
			t106 = claim_space(div5_nodes);
			br45 = claim_element(div5_nodes, "BR", {});
			t107 = claim_text(div5_nodes, "\n        With text\n        ");
			claim_component(button13.$$.fragment, div5_nodes);
			t108 = claim_text(div5_nodes, "\n        and behind.\n        ");
			br46 = claim_element(div5_nodes, "BR", {});
			t109 = claim_space(div5_nodes);
			br47 = claim_element(div5_nodes, "BR", {});
			t110 = claim_space(div5_nodes);
			claim_component(button14.$$.fragment, div5_nodes);
			t111 = claim_space(div5_nodes);
			br48 = claim_element(div5_nodes, "BR", {});
			t112 = claim_space(div5_nodes);
			br49 = claim_element(div5_nodes, "BR", {});
			t113 = claim_space(div5_nodes);
			claim_component(button15.$$.fragment, div5_nodes);
			t114 = claim_space(div5_nodes);
			br50 = claim_element(div5_nodes, "BR", {});
			t115 = claim_space(div5_nodes);
			br51 = claim_element(div5_nodes, "BR", {});
			div5_nodes.forEach(detach_dev);
			section3_nodes.forEach(detach_dev);
			t116 = claim_space(nodes);
			br52 = claim_element(nodes, "BR", {});
			t117 = claim_space(nodes);
			br53 = claim_element(nodes, "BR", {});
			t118 = claim_space(nodes);
			h24 = claim_element(nodes, "H2", { class: true });
			var h24_nodes = children(h24);
			t119 = claim_text(h24_nodes, "Input fields");
			h24_nodes.forEach(detach_dev);
			t120 = claim_space(nodes);
			br54 = claim_element(nodes, "BR", {});
			t121 = claim_space(nodes);
			br55 = claim_element(nodes, "BR", {});
			t122 = claim_space(nodes);
			section4 = claim_element(nodes, "SECTION", {});
			var section4_nodes = children(section4);
			claim_component(input1.$$.fragment, section4_nodes);
			t123 = claim_space(section4_nodes);
			br56 = claim_element(section4_nodes, "BR", {});
			t124 = claim_space(section4_nodes);
			br57 = claim_element(section4_nodes, "BR", {});
			t125 = claim_space(section4_nodes);
			claim_component(input2.$$.fragment, section4_nodes);
			t126 = claim_space(section4_nodes);
			br58 = claim_element(section4_nodes, "BR", {});
			t127 = claim_space(section4_nodes);
			br59 = claim_element(section4_nodes, "BR", {});
			t128 = claim_space(section4_nodes);
			claim_component(input3.$$.fragment, section4_nodes);
			t129 = claim_space(section4_nodes);
			datalist1 = claim_element(section4_nodes, "DATALIST", { id: true });
			var datalist1_nodes = children(datalist1);
			option3 = claim_element(datalist1_nodes, "OPTION", { value: true });
			var option3_nodes = children(option3);
			option3_nodes.forEach(detach_dev);
			option4 = claim_element(datalist1_nodes, "OPTION", { value: true });
			var option4_nodes = children(option4);
			option4_nodes.forEach(detach_dev);
			option5 = claim_element(datalist1_nodes, "OPTION", { value: true });
			var option5_nodes = children(option5);
			option5_nodes.forEach(detach_dev);
			datalist1_nodes.forEach(detach_dev);
			t130 = claim_space(section4_nodes);
			label = claim_element(section4_nodes, "LABEL", { for: true, class: true });
			var label_nodes = children(label);
			t131 = claim_text(label_nodes, "label");
			label_nodes.forEach(detach_dev);
			t132 = claim_space(section4_nodes);
			input4 = claim_element(section4_nodes, "INPUT", { id: true, type: true, value: true });
			t133 = claim_space(section4_nodes);
			br60 = claim_element(section4_nodes, "BR", {});
			t134 = claim_space(section4_nodes);
			br61 = claim_element(section4_nodes, "BR", {});
			t135 = claim_space(section4_nodes);
			a = claim_element(section4_nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t136 = claim_text(a_nodes, "Some link");
			a_nodes.forEach(detach_dev);
			t137 = claim_space(section4_nodes);
			br62 = claim_element(section4_nodes, "BR", {});
			t138 = claim_space(section4_nodes);
			br63 = claim_element(section4_nodes, "BR", {});
			t139 = claim_space(section4_nodes);
			button16 = claim_element(section4_nodes, "BUTTON", { type: true, class: true });
			var button16_nodes = children(button16);
			t140 = claim_text(button16_nodes, "Button example");
			button16_nodes.forEach(detach_dev);
			section4_nodes.forEach(detach_dev);
			t141 = claim_space(nodes);
			br64 = claim_element(nodes, "BR", {});
			t142 = claim_space(nodes);
			br65 = claim_element(nodes, "BR", {});
			t143 = claim_space(nodes);
			h25 = claim_element(nodes, "H2", { class: true });
			var h25_nodes = children(h25);
			t144 = claim_text(h25_nodes, "Images");
			h25_nodes.forEach(detach_dev);
			t145 = claim_space(nodes);
			br66 = claim_element(nodes, "BR", {});
			t146 = claim_space(nodes);
			br67 = claim_element(nodes, "BR", {});
			t147 = claim_space(nodes);
			claim_component(picture.$$.fragment, nodes);
			t148 = claim_space(nodes);
			br68 = claim_element(nodes, "BR", {});
			t149 = claim_space(nodes);
			br69 = claim_element(nodes, "BR", {});
			t150 = claim_space(nodes);
			h26 = claim_element(nodes, "H2", { class: true });
			var h26_nodes = children(h26);
			t151 = claim_text(h26_nodes, "Other");
			h26_nodes.forEach(detach_dev);
			t152 = claim_space(nodes);
			p5 = claim_element(nodes, "P", {});
			var p5_nodes = children(p5);
			strong = claim_element(p5_nodes, "STRONG", {});
			var strong_nodes = children(strong);
			t153 = claim_text(strong_nodes, "Try editing this file (src/routes/index.svelte) to test live reloading.");
			strong_nodes.forEach(detach_dev);
			p5_nodes.forEach(detach_dev);
			t154 = claim_space(nodes);
			p6 = claim_element(nodes, "P", { style: true });
			var p6_nodes = children(p6);
			t155 = claim_text(p6_nodes, "A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.\n    A lot of English text. A lot of English text. A lot of English text. A lot of English text.");
			p6_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Charitify - is the application for helping those in need.";
			attr_dev(div0, "class", "top-pic svelte-1l1j0nq");
			add_location(div0, file, 134, 8, 3327);
			attr_dev(li0, "class", "svelte-1l1j0nq");
			add_location(li0, file, 155, 12, 4155);
			attr_dev(li1, "class", "svelte-1l1j0nq");
			add_location(li1, file, 158, 12, 4275);
			attr_dev(li2, "class", "svelte-1l1j0nq");
			add_location(li2, file, 161, 12, 4396);
			add_location(br0, file, 165, 16, 4539);
			option0.__value = "20";
			option0.value = option0.__value;
			add_location(option0, file, 176, 20, 4890);
			option1.__value = "500";
			option1.value = option1.__value;
			add_location(option1, file, 177, 20, 4930);
			option2.__value = "1000";
			option2.value = option2.__value;
			add_location(option2, file, 178, 20, 4971);
			attr_dev(datalist0, "id", "sum-suggestions");
			add_location(datalist0, file, 175, 16, 4838);
			attr_dev(li3, "class", "svelte-1l1j0nq");
			add_location(li3, file, 164, 12, 4518);
			attr_dev(li4, "class", "svelte-1l1j0nq");
			add_location(li4, file, 181, 12, 5051);
			attr_dev(ul0, "class", "options svelte-1l1j0nq");
			add_location(ul0, file, 154, 8, 4122);
			attr_dev(section0, "class", "top svelte-1l1j0nq");
			add_location(section0, file, 133, 4, 3297);
			add_location(br1, file, 188, 4, 5231);
			attr_dev(h3, "class", "svelte-1l1j0nq");
			add_location(h3, file, 196, 16, 5464);
			attr_dev(p0, "class", "svelte-1l1j0nq");
			add_location(p0, file, 197, 16, 5504);
			attr_dev(span0, "class", "svelte-1l1j0nq");
			add_location(span0, file, 195, 12, 5441);
			attr_dev(div1, "class", "ava-section svelte-1l1j0nq");
			add_location(div1, file, 192, 8, 5325);
			attr_dev(section1, "class", "rate-section svelte-1l1j0nq");
			add_location(section1, file, 191, 4, 5286);
			add_location(br2, file, 204, 4, 5605);
			attr_dev(h10, "class", "svelte-1l1j0nq");
			add_location(h10, file, 206, 4, 5615);
			add_location(br3, file, 208, 4, 5644);
			attr_dev(p1, "class", "text-center");
			set_style(p1, "padding", "0 10vw");
			add_location(p1, file, 210, 4, 5654);
			attr_dev(section2, "class", "container");
			add_location(section2, file, 132, 0, 3265);
			add_location(br4, file, 215, 0, 5810);
			add_location(br5, file, 216, 0, 5815);
			add_location(br6, file, 217, 0, 5820);
			set_style(h20, "text-align", "right");
			add_location(h20, file, 221, 4, 5879);
			add_location(br7, file, 224, 4, 5962);
			attr_dev(ul1, "class", "cards svelte-1l1j0nq");
			add_location(ul1, file, 226, 4, 5972);
			attr_dev(div2, "class", "container");
			add_location(div2, file, 219, 0, 5826);
			add_location(br8, file, 235, 0, 6131);
			add_location(br9, file, 236, 0, 6136);
			set_style(h21, "text-align", "right");
			add_location(h21, file, 240, 4, 6195);
			add_location(br10, file, 243, 4, 6278);
			attr_dev(ul2, "class", "cards svelte-1l1j0nq");
			add_location(ul2, file, 245, 4, 6288);
			attr_dev(div3, "class", "container");
			add_location(div3, file, 238, 0, 6142);
			add_location(br11, file, 254, 0, 6447);
			add_location(br12, file, 255, 0, 6452);
			add_location(br13, file, 256, 0, 6457);
			attr_dev(h11, "class", "svelte-1l1j0nq");
			add_location(h11, file, 308, 0, 7274);
			add_location(br14, file, 310, 0, 7342);
			add_location(br15, file, 311, 0, 7347);
			attr_dev(h22, "class", "text-success");
			add_location(h22, file, 313, 0, 7353);
			add_location(br16, file, 315, 0, 7395);
			add_location(br17, file, 316, 0, 7400);
			add_location(p2, file, 318, 0, 7406);
			add_location(p3, file, 319, 0, 7442);
			add_location(p4, file, 320, 0, 7486);
			add_location(br18, file, 322, 0, 7532);
			add_location(br19, file, 323, 0, 7537);
			attr_dev(h23, "class", "text-warning");
			add_location(h23, file, 325, 0, 7543);
			add_location(span1, file, 329, 8, 7617);
			add_location(li5, file, 328, 4, 7604);
			add_location(span2, file, 336, 8, 7851);
			add_location(li6, file, 335, 4, 7838);
			add_location(span3, file, 343, 8, 8046);
			add_location(li7, file, 342, 4, 8033);
			add_location(ul3, file, 327, 0, 7595);
			add_location(br20, file, 351, 0, 8264);
			add_location(br21, file, 352, 0, 8269);
			add_location(br22, file, 356, 8, 8376);
			add_location(br23, file, 358, 8, 8405);
			add_location(br24, file, 359, 8, 8418);
			add_location(br25, file, 361, 8, 8494);
			add_location(br26, file, 362, 8, 8507);
			add_location(br27, file, 364, 8, 8596);
			add_location(br28, file, 365, 8, 8609);
			add_location(br29, file, 367, 8, 8715);
			add_location(br30, file, 368, 8, 8728);
			add_location(br31, file, 372, 8, 8855);
			add_location(br32, file, 373, 8, 8868);
			add_location(br33, file, 375, 8, 8975);
			add_location(br34, file, 376, 8, 8988);
			add_location(br35, file, 378, 8, 9094);
			add_location(br36, file, 379, 8, 9107);
			add_location(div4, file, 355, 4, 8362);
			add_location(br37, file, 383, 8, 9142);
			add_location(br38, file, 385, 8, 9180);
			add_location(br39, file, 386, 8, 9193);
			add_location(br40, file, 388, 8, 9278);
			add_location(br41, file, 389, 8, 9291);
			add_location(br42, file, 391, 8, 9389);
			add_location(br43, file, 392, 8, 9402);
			add_location(br44, file, 394, 8, 9500);
			add_location(br45, file, 395, 8, 9513);
			add_location(br46, file, 399, 8, 9649);
			add_location(br47, file, 400, 8, 9662);
			add_location(br48, file, 402, 8, 9778);
			add_location(br49, file, 403, 8, 9791);
			add_location(br50, file, 405, 8, 9906);
			add_location(br51, file, 406, 8, 9919);
			add_location(div5, file, 382, 4, 9128);
			set_style(section3, "text-align", "center");
			set_style(section3, "display", "flex");
			set_style(section3, "justify-content", "space-around");
			add_location(section3, file, 354, 0, 8275);
			add_location(br52, file, 410, 0, 9947);
			add_location(br53, file, 411, 0, 9952);
			attr_dev(h24, "class", "text-danger");
			add_location(h24, file, 413, 0, 9958);
			add_location(br54, file, 415, 0, 10001);
			add_location(br55, file, 416, 0, 10006);
			add_location(br56, file, 421, 4, 10071);
			add_location(br57, file, 422, 4, 10080);
			add_location(br58, file, 426, 4, 10163);
			add_location(br59, file, 427, 4, 10172);
			option3.__value = "1";
			option3.value = option3.__value;
			add_location(option3, file, 432, 8, 10261);
			option4.__value = "2";
			option4.value = option4.__value;
			add_location(option4, file, 433, 8, 10288);
			option5.__value = "3";
			option5.value = option5.__value;
			add_location(option5, file, 434, 8, 10315);
			attr_dev(datalist1, "id", "lis");
			add_location(datalist1, file, 431, 4, 10233);
			attr_dev(label, "for", "input");
			attr_dev(label, "class", "text-success");
			add_location(label, file, 437, 4, 10355);
			attr_dev(input4, "id", "input");
			attr_dev(input4, "type", "text");
			input4.value = "text";
			add_location(input4, file, 438, 4, 10413);
			add_location(br60, file, 440, 4, 10462);
			add_location(br61, file, 441, 4, 10471);
			attr_dev(a, "href", ".");
			attr_dev(a, "class", "text-warning");
			add_location(a, file, 443, 4, 10481);
			add_location(br62, file, 445, 4, 10533);
			add_location(br63, file, 446, 4, 10542);
			attr_dev(button16, "type", "button");
			attr_dev(button16, "class", "text-info");
			add_location(button16, file, 448, 4, 10552);
			add_location(section4, file, 418, 0, 10012);
			add_location(br64, file, 451, 0, 10628);
			add_location(br65, file, 452, 0, 10633);
			attr_dev(h25, "class", "text-info");
			add_location(h25, file, 454, 0, 10639);
			add_location(br66, file, 456, 0, 10674);
			add_location(br67, file, 457, 0, 10679);
			add_location(br68, file, 461, 0, 10751);
			add_location(br69, file, 462, 0, 10756);
			attr_dev(h26, "class", "text-success");
			add_location(h26, file, 464, 0, 10762);
			add_location(strong, file, 467, 4, 10807);
			add_location(p5, file, 466, 0, 10799);
			set_style(p6, "text-align", "justify");
			add_location(p6, file, 472, 0, 10916);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, section2, anchor);
			append_dev(section2, section0);
			append_dev(section0, div0);
			mount_component(swipe, div0, null);
			append_dev(section0, t1);
			append_dev(section0, ul0);
			append_dev(ul0, li0);
			mount_component(button0, li0, null);
			append_dev(ul0, t2);
			append_dev(ul0, li1);
			mount_component(button1, li1, null);
			append_dev(ul0, t3);
			append_dev(ul0, li2);
			mount_component(button2, li2, null);
			append_dev(ul0, t4);
			append_dev(ul0, li3);
			append_dev(li3, br0);
			append_dev(li3, t5);
			mount_component(input0, li3, null);
			append_dev(li3, t6);
			append_dev(li3, datalist0);
			append_dev(datalist0, option0);
			append_dev(datalist0, option1);
			append_dev(datalist0, option2);
			append_dev(ul0, t7);
			append_dev(ul0, li4);
			mount_component(button3, li4, null);
			append_dev(section2, t8);
			mount_component(progress, section2, null);
			append_dev(section2, t9);
			append_dev(section2, br1);
			append_dev(section2, t10);
			mount_component(progressnext, section2, null);
			append_dev(section2, t11);
			append_dev(section2, section1);
			append_dev(section1, div1);
			mount_component(avatar, div1, null);
			append_dev(div1, t12);
			append_dev(div1, span0);
			append_dev(span0, h3);
			append_dev(h3, t13);
			append_dev(span0, t14);
			append_dev(span0, p0);
			append_dev(p0, t15);
			append_dev(section1, t16);
			mount_component(rate, section1, null);
			append_dev(section2, t17);
			append_dev(section2, br2);
			append_dev(section2, t18);
			append_dev(section2, h10);
			append_dev(h10, t19);
			append_dev(section2, t20);
			append_dev(section2, br3);
			append_dev(section2, t21);
			append_dev(section2, p1);
			append_dev(p1, t22);
			insert_dev(target, t23, anchor);
			insert_dev(target, br4, anchor);
			insert_dev(target, t24, anchor);
			insert_dev(target, br5, anchor);
			insert_dev(target, t25, anchor);
			insert_dev(target, br6, anchor);
			insert_dev(target, t26, anchor);
			insert_dev(target, div2, anchor);
			mount_component(divider0, div2, null);
			append_dev(div2, t27);
			append_dev(div2, h20);
			append_dev(h20, t28);
			append_dev(div2, t29);
			mount_component(divider1, div2, null);
			append_dev(div2, t30);
			append_dev(div2, br7);
			append_dev(div2, t31);
			append_dev(div2, ul1);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(ul1, null);
			}

			insert_dev(target, t32, anchor);
			insert_dev(target, br8, anchor);
			insert_dev(target, t33, anchor);
			insert_dev(target, br9, anchor);
			insert_dev(target, t34, anchor);
			insert_dev(target, div3, anchor);
			mount_component(divider2, div3, null);
			append_dev(div3, t35);
			append_dev(div3, h21);
			append_dev(h21, t36);
			append_dev(div3, t37);
			mount_component(divider3, div3, null);
			append_dev(div3, t38);
			append_dev(div3, br10);
			append_dev(div3, t39);
			append_dev(div3, ul2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul2, null);
			}

			insert_dev(target, t40, anchor);
			insert_dev(target, br11, anchor);
			insert_dev(target, t41, anchor);
			insert_dev(target, br12, anchor);
			insert_dev(target, t42, anchor);
			insert_dev(target, br13, anchor);
			insert_dev(target, t43, anchor);
			mount_component(divider4, target, anchor);
			insert_dev(target, t44, anchor);
			mount_component(form, target, anchor);
			insert_dev(target, t45, anchor);
			insert_dev(target, h11, anchor);
			append_dev(h11, t46);
			insert_dev(target, t47, anchor);
			insert_dev(target, br14, anchor);
			insert_dev(target, t48, anchor);
			insert_dev(target, br15, anchor);
			insert_dev(target, t49, anchor);
			insert_dev(target, h22, anchor);
			append_dev(h22, t50);
			insert_dev(target, t51, anchor);
			insert_dev(target, br16, anchor);
			insert_dev(target, t52, anchor);
			insert_dev(target, br17, anchor);
			insert_dev(target, t53, anchor);
			insert_dev(target, p2, anchor);
			append_dev(p2, t54);
			insert_dev(target, t55, anchor);
			insert_dev(target, p3, anchor);
			append_dev(p3, t56);
			insert_dev(target, t57, anchor);
			insert_dev(target, p4, anchor);
			append_dev(p4, t58);
			insert_dev(target, t59, anchor);
			insert_dev(target, br18, anchor);
			insert_dev(target, t60, anchor);
			insert_dev(target, br19, anchor);
			insert_dev(target, t61, anchor);
			insert_dev(target, h23, anchor);
			append_dev(h23, t62);
			insert_dev(target, t63, anchor);
			insert_dev(target, ul3, anchor);
			append_dev(ul3, li5);
			append_dev(li5, span1);
			mount_component(icon0, span1, null);
			append_dev(span1, t64);
			mount_component(icon1, span1, null);
			append_dev(span1, t65);
			mount_component(icon2, span1, null);
			append_dev(ul3, t66);
			append_dev(ul3, li6);
			append_dev(li6, span2);
			mount_component(icon3, span2, null);
			append_dev(span2, t67);
			mount_component(icon4, span2, null);
			append_dev(span2, t68);
			mount_component(icon5, span2, null);
			append_dev(ul3, t69);
			append_dev(ul3, li7);
			append_dev(li7, span3);
			mount_component(icon6, span3, null);
			append_dev(span3, t70);
			mount_component(icon7, span3, null);
			append_dev(span3, t71);
			mount_component(icon8, span3, null);
			insert_dev(target, t72, anchor);
			insert_dev(target, br20, anchor);
			insert_dev(target, t73, anchor);
			insert_dev(target, br21, anchor);
			insert_dev(target, t74, anchor);
			insert_dev(target, section3, anchor);
			append_dev(section3, div4);
			append_dev(div4, br22);
			append_dev(div4, t75);
			append_dev(div4, br23);
			append_dev(div4, t76);
			append_dev(div4, br24);
			append_dev(div4, t77);
			mount_component(button4, div4, null);
			append_dev(div4, t78);
			append_dev(div4, br25);
			append_dev(div4, t79);
			append_dev(div4, br26);
			append_dev(div4, t80);
			mount_component(button5, div4, null);
			append_dev(div4, t81);
			append_dev(div4, br27);
			append_dev(div4, t82);
			append_dev(div4, br28);
			append_dev(div4, t83);
			mount_component(button6, div4, null);
			append_dev(div4, t84);
			append_dev(div4, br29);
			append_dev(div4, t85);
			append_dev(div4, br30);
			append_dev(div4, t86);
			mount_component(button7, div4, null);
			append_dev(div4, t87);
			append_dev(div4, br31);
			append_dev(div4, t88);
			append_dev(div4, br32);
			append_dev(div4, t89);
			mount_component(button8, div4, null);
			append_dev(div4, t90);
			append_dev(div4, br33);
			append_dev(div4, t91);
			append_dev(div4, br34);
			append_dev(div4, t92);
			mount_component(button9, div4, null);
			append_dev(div4, t93);
			append_dev(div4, br35);
			append_dev(div4, t94);
			append_dev(div4, br36);
			append_dev(section3, t95);
			append_dev(section3, div5);
			append_dev(div5, br37);
			append_dev(div5, t96);
			append_dev(div5, br38);
			append_dev(div5, t97);
			append_dev(div5, br39);
			append_dev(div5, t98);
			mount_component(button10, div5, null);
			append_dev(div5, t99);
			append_dev(div5, br40);
			append_dev(div5, t100);
			append_dev(div5, br41);
			append_dev(div5, t101);
			mount_component(button11, div5, null);
			append_dev(div5, t102);
			append_dev(div5, br42);
			append_dev(div5, t103);
			append_dev(div5, br43);
			append_dev(div5, t104);
			mount_component(button12, div5, null);
			append_dev(div5, t105);
			append_dev(div5, br44);
			append_dev(div5, t106);
			append_dev(div5, br45);
			append_dev(div5, t107);
			mount_component(button13, div5, null);
			append_dev(div5, t108);
			append_dev(div5, br46);
			append_dev(div5, t109);
			append_dev(div5, br47);
			append_dev(div5, t110);
			mount_component(button14, div5, null);
			append_dev(div5, t111);
			append_dev(div5, br48);
			append_dev(div5, t112);
			append_dev(div5, br49);
			append_dev(div5, t113);
			mount_component(button15, div5, null);
			append_dev(div5, t114);
			append_dev(div5, br50);
			append_dev(div5, t115);
			append_dev(div5, br51);
			insert_dev(target, t116, anchor);
			insert_dev(target, br52, anchor);
			insert_dev(target, t117, anchor);
			insert_dev(target, br53, anchor);
			insert_dev(target, t118, anchor);
			insert_dev(target, h24, anchor);
			append_dev(h24, t119);
			insert_dev(target, t120, anchor);
			insert_dev(target, br54, anchor);
			insert_dev(target, t121, anchor);
			insert_dev(target, br55, anchor);
			insert_dev(target, t122, anchor);
			insert_dev(target, section4, anchor);
			mount_component(input1, section4, null);
			append_dev(section4, t123);
			append_dev(section4, br56);
			append_dev(section4, t124);
			append_dev(section4, br57);
			append_dev(section4, t125);
			mount_component(input2, section4, null);
			append_dev(section4, t126);
			append_dev(section4, br58);
			append_dev(section4, t127);
			append_dev(section4, br59);
			append_dev(section4, t128);
			mount_component(input3, section4, null);
			append_dev(section4, t129);
			append_dev(section4, datalist1);
			append_dev(datalist1, option3);
			append_dev(datalist1, option4);
			append_dev(datalist1, option5);
			append_dev(section4, t130);
			append_dev(section4, label);
			append_dev(label, t131);
			append_dev(section4, t132);
			append_dev(section4, input4);
			append_dev(section4, t133);
			append_dev(section4, br60);
			append_dev(section4, t134);
			append_dev(section4, br61);
			append_dev(section4, t135);
			append_dev(section4, a);
			append_dev(a, t136);
			append_dev(section4, t137);
			append_dev(section4, br62);
			append_dev(section4, t138);
			append_dev(section4, br63);
			append_dev(section4, t139);
			append_dev(section4, button16);
			append_dev(button16, t140);
			insert_dev(target, t141, anchor);
			insert_dev(target, br64, anchor);
			insert_dev(target, t142, anchor);
			insert_dev(target, br65, anchor);
			insert_dev(target, t143, anchor);
			insert_dev(target, h25, anchor);
			append_dev(h25, t144);
			insert_dev(target, t145, anchor);
			insert_dev(target, br66, anchor);
			insert_dev(target, t146, anchor);
			insert_dev(target, br67, anchor);
			insert_dev(target, t147, anchor);
			mount_component(picture, target, anchor);
			insert_dev(target, t148, anchor);
			insert_dev(target, br68, anchor);
			insert_dev(target, t149, anchor);
			insert_dev(target, br69, anchor);
			insert_dev(target, t150, anchor);
			insert_dev(target, h26, anchor);
			append_dev(h26, t151);
			insert_dev(target, t152, anchor);
			insert_dev(target, p5, anchor);
			append_dev(p5, strong);
			append_dev(strong, t153);
			insert_dev(target, t154, anchor);
			insert_dev(target, p6, anchor);
			append_dev(p6, t155);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const swipe_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				swipe_changes.$$scope = { dirty, ctx };
			}

			swipe.$set(swipe_changes);
			const button0_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button0_changes.$$scope = { dirty, ctx };
			}

			button0.$set(button0_changes);
			const button1_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button1_changes.$$scope = { dirty, ctx };
			}

			button1.$set(button1_changes);
			const button2_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button2_changes.$$scope = { dirty, ctx };
			}

			button2.$set(button2_changes);
			const button3_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button3_changes.$$scope = { dirty, ctx };
			}

			button3.$set(button3_changes);

			if (dirty & /*cards*/ 1) {
				each_value_1 = /*cards*/ ctx[0];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
						transition_in(each_blocks_1[i], 1);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						transition_in(each_blocks_1[i], 1);
						each_blocks_1[i].m(ul1, null);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks_1.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (dirty & /*cards*/ 1) {
				each_value = /*cards*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(ul2, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out_1(i);
				}

				check_outros();
			}

			const form_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				form_changes.$$scope = { dirty, ctx };
			}

			form.$set(form_changes);
			const button4_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button4_changes.$$scope = { dirty, ctx };
			}

			button4.$set(button4_changes);
			const button5_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button5_changes.$$scope = { dirty, ctx };
			}

			button5.$set(button5_changes);
			const button6_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button6_changes.$$scope = { dirty, ctx };
			}

			button6.$set(button6_changes);
			const button7_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button7_changes.$$scope = { dirty, ctx };
			}

			button7.$set(button7_changes);
			const button8_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button8_changes.$$scope = { dirty, ctx };
			}

			button8.$set(button8_changes);
			const button9_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button9_changes.$$scope = { dirty, ctx };
			}

			button9.$set(button9_changes);
			const button10_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button10_changes.$$scope = { dirty, ctx };
			}

			button10.$set(button10_changes);
			const button11_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button11_changes.$$scope = { dirty, ctx };
			}

			button11.$set(button11_changes);
			const button12_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button12_changes.$$scope = { dirty, ctx };
			}

			button12.$set(button12_changes);
			const button13_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button13_changes.$$scope = { dirty, ctx };
			}

			button13.$set(button13_changes);
			const button14_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button14_changes.$$scope = { dirty, ctx };
			}

			button14.$set(button14_changes);
			const button15_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button15_changes.$$scope = { dirty, ctx };
			}

			button15.$set(button15_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(swipe.$$.fragment, local);
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			transition_in(button2.$$.fragment, local);
			transition_in(input0.$$.fragment, local);
			transition_in(button3.$$.fragment, local);
			transition_in(progress.$$.fragment, local);
			transition_in(progressnext.$$.fragment, local);
			transition_in(avatar.$$.fragment, local);
			transition_in(rate.$$.fragment, local);
			transition_in(divider0.$$.fragment, local);
			transition_in(divider1.$$.fragment, local);

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks_1[i]);
			}

			transition_in(divider2.$$.fragment, local);
			transition_in(divider3.$$.fragment, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(divider4.$$.fragment, local);
			transition_in(form.$$.fragment, local);
			transition_in(icon0.$$.fragment, local);
			transition_in(icon1.$$.fragment, local);
			transition_in(icon2.$$.fragment, local);
			transition_in(icon3.$$.fragment, local);
			transition_in(icon4.$$.fragment, local);
			transition_in(icon5.$$.fragment, local);
			transition_in(icon6.$$.fragment, local);
			transition_in(icon7.$$.fragment, local);
			transition_in(icon8.$$.fragment, local);
			transition_in(button4.$$.fragment, local);
			transition_in(button5.$$.fragment, local);
			transition_in(button6.$$.fragment, local);
			transition_in(button7.$$.fragment, local);
			transition_in(button8.$$.fragment, local);
			transition_in(button9.$$.fragment, local);
			transition_in(button10.$$.fragment, local);
			transition_in(button11.$$.fragment, local);
			transition_in(button12.$$.fragment, local);
			transition_in(button13.$$.fragment, local);
			transition_in(button14.$$.fragment, local);
			transition_in(button15.$$.fragment, local);
			transition_in(input1.$$.fragment, local);
			transition_in(input2.$$.fragment, local);
			transition_in(input3.$$.fragment, local);
			transition_in(picture.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(swipe.$$.fragment, local);
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			transition_out(button2.$$.fragment, local);
			transition_out(input0.$$.fragment, local);
			transition_out(button3.$$.fragment, local);
			transition_out(progress.$$.fragment, local);
			transition_out(progressnext.$$.fragment, local);
			transition_out(avatar.$$.fragment, local);
			transition_out(rate.$$.fragment, local);
			transition_out(divider0.$$.fragment, local);
			transition_out(divider1.$$.fragment, local);
			each_blocks_1 = each_blocks_1.filter(Boolean);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				transition_out(each_blocks_1[i]);
			}

			transition_out(divider2.$$.fragment, local);
			transition_out(divider3.$$.fragment, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(divider4.$$.fragment, local);
			transition_out(form.$$.fragment, local);
			transition_out(icon0.$$.fragment, local);
			transition_out(icon1.$$.fragment, local);
			transition_out(icon2.$$.fragment, local);
			transition_out(icon3.$$.fragment, local);
			transition_out(icon4.$$.fragment, local);
			transition_out(icon5.$$.fragment, local);
			transition_out(icon6.$$.fragment, local);
			transition_out(icon7.$$.fragment, local);
			transition_out(icon8.$$.fragment, local);
			transition_out(button4.$$.fragment, local);
			transition_out(button5.$$.fragment, local);
			transition_out(button6.$$.fragment, local);
			transition_out(button7.$$.fragment, local);
			transition_out(button8.$$.fragment, local);
			transition_out(button9.$$.fragment, local);
			transition_out(button10.$$.fragment, local);
			transition_out(button11.$$.fragment, local);
			transition_out(button12.$$.fragment, local);
			transition_out(button13.$$.fragment, local);
			transition_out(button14.$$.fragment, local);
			transition_out(button15.$$.fragment, local);
			transition_out(input1.$$.fragment, local);
			transition_out(input2.$$.fragment, local);
			transition_out(input3.$$.fragment, local);
			transition_out(picture.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(section2);
			destroy_component(swipe);
			destroy_component(button0);
			destroy_component(button1);
			destroy_component(button2);
			destroy_component(input0);
			destroy_component(button3);
			destroy_component(progress);
			destroy_component(progressnext);
			destroy_component(avatar);
			destroy_component(rate);
			if (detaching) detach_dev(t23);
			if (detaching) detach_dev(br4);
			if (detaching) detach_dev(t24);
			if (detaching) detach_dev(br5);
			if (detaching) detach_dev(t25);
			if (detaching) detach_dev(br6);
			if (detaching) detach_dev(t26);
			if (detaching) detach_dev(div2);
			destroy_component(divider0);
			destroy_component(divider1);
			destroy_each(each_blocks_1, detaching);
			if (detaching) detach_dev(t32);
			if (detaching) detach_dev(br8);
			if (detaching) detach_dev(t33);
			if (detaching) detach_dev(br9);
			if (detaching) detach_dev(t34);
			if (detaching) detach_dev(div3);
			destroy_component(divider2);
			destroy_component(divider3);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t40);
			if (detaching) detach_dev(br11);
			if (detaching) detach_dev(t41);
			if (detaching) detach_dev(br12);
			if (detaching) detach_dev(t42);
			if (detaching) detach_dev(br13);
			if (detaching) detach_dev(t43);
			destroy_component(divider4, detaching);
			if (detaching) detach_dev(t44);
			destroy_component(form, detaching);
			if (detaching) detach_dev(t45);
			if (detaching) detach_dev(h11);
			if (detaching) detach_dev(t47);
			if (detaching) detach_dev(br14);
			if (detaching) detach_dev(t48);
			if (detaching) detach_dev(br15);
			if (detaching) detach_dev(t49);
			if (detaching) detach_dev(h22);
			if (detaching) detach_dev(t51);
			if (detaching) detach_dev(br16);
			if (detaching) detach_dev(t52);
			if (detaching) detach_dev(br17);
			if (detaching) detach_dev(t53);
			if (detaching) detach_dev(p2);
			if (detaching) detach_dev(t55);
			if (detaching) detach_dev(p3);
			if (detaching) detach_dev(t57);
			if (detaching) detach_dev(p4);
			if (detaching) detach_dev(t59);
			if (detaching) detach_dev(br18);
			if (detaching) detach_dev(t60);
			if (detaching) detach_dev(br19);
			if (detaching) detach_dev(t61);
			if (detaching) detach_dev(h23);
			if (detaching) detach_dev(t63);
			if (detaching) detach_dev(ul3);
			destroy_component(icon0);
			destroy_component(icon1);
			destroy_component(icon2);
			destroy_component(icon3);
			destroy_component(icon4);
			destroy_component(icon5);
			destroy_component(icon6);
			destroy_component(icon7);
			destroy_component(icon8);
			if (detaching) detach_dev(t72);
			if (detaching) detach_dev(br20);
			if (detaching) detach_dev(t73);
			if (detaching) detach_dev(br21);
			if (detaching) detach_dev(t74);
			if (detaching) detach_dev(section3);
			destroy_component(button4);
			destroy_component(button5);
			destroy_component(button6);
			destroy_component(button7);
			destroy_component(button8);
			destroy_component(button9);
			destroy_component(button10);
			destroy_component(button11);
			destroy_component(button12);
			destroy_component(button13);
			destroy_component(button14);
			destroy_component(button15);
			if (detaching) detach_dev(t116);
			if (detaching) detach_dev(br52);
			if (detaching) detach_dev(t117);
			if (detaching) detach_dev(br53);
			if (detaching) detach_dev(t118);
			if (detaching) detach_dev(h24);
			if (detaching) detach_dev(t120);
			if (detaching) detach_dev(br54);
			if (detaching) detach_dev(t121);
			if (detaching) detach_dev(br55);
			if (detaching) detach_dev(t122);
			if (detaching) detach_dev(section4);
			destroy_component(input1);
			destroy_component(input2);
			destroy_component(input3);
			if (detaching) detach_dev(t141);
			if (detaching) detach_dev(br64);
			if (detaching) detach_dev(t142);
			if (detaching) detach_dev(br65);
			if (detaching) detach_dev(t143);
			if (detaching) detach_dev(h25);
			if (detaching) detach_dev(t145);
			if (detaching) detach_dev(br66);
			if (detaching) detach_dev(t146);
			if (detaching) detach_dev(br67);
			if (detaching) detach_dev(t147);
			destroy_component(picture, detaching);
			if (detaching) detach_dev(t148);
			if (detaching) detach_dev(br68);
			if (detaching) detach_dev(t149);
			if (detaching) detach_dev(br69);
			if (detaching) detach_dev(t150);
			if (detaching) detach_dev(h26);
			if (detaching) detach_dev(t152);
			if (detaching) detach_dev(p5);
			if (detaching) detach_dev(t154);
			if (detaching) detach_dev(p6);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self) {
	const cards = [
		{
			src: "https://placeimg.com/300/300/people",
			title: "The main title and short description.",
			percent: 45,
			orgHead: "Tina Kandelaki",
			organization: "ORG charity of Charitify."
		},
		{
			src: "https://placeimg.com/300/300/arch",
			title: "Second bigger major card title line with a bit longer description.",
			percent: 65,
			orgHead: "Tina Kandelaki",
			organization: "ORG charity of Charitify."
		},
		{
			src: "https://placeimg.com/300/300/any",
			title: "The main title and short description.",
			percent: 5,
			orgHead: "Tinaramisimuss Kandelakinuskas",
			organization: "ORG charity of Charitify."
		},
		{
			src: "https://placeimg.com/300/300/nature",
			title: "The main title and short description.",
			percent: 95,
			orgHead: "Tina Kandelaki",
			organization: "ORG giant charity organization of big Charitify company."
		}
	];

	const click_handler = e => console.log(e);
	const click_handler_1 = e => console.log(e);
	const click_handler_2 = e => console.log(e);
	const click_handler_3 = e => console.log(e);
	const submit_handler = e => console.log(e);
	const click_handler_4 = e => console.log(e);
	const click_handler_5 = e => console.log(e);
	const click_handler_6 = e => console.log(e);
	const click_handler_7 = e => console.log(e);
	const click_handler_8 = e => console.log(e);
	const click_handler_9 = e => console.log(e);
	const click_handler_10 = e => console.log(e);
	const click_handler_11 = e => console.log(e);
	const click_handler_12 = e => console.log(e);
	const click_handler_13 = e => console.log(e);
	const click_handler_14 = e => console.log(e);
	const click_handler_15 = e => console.log(e);

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		
	};

	return [
		cards,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		submit_handler,
		click_handler_4,
		click_handler_5,
		click_handler_6,
		click_handler_7,
		click_handler_8,
		click_handler_9,
		click_handler_10,
		click_handler_11,
		click_handler_12,
		click_handler_13,
		click_handler_14,
		click_handler_15
	];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYzA0ZmUxNzEuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvaW5kZXguc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgU3dpcGUsIFN3aXBlSXRlbSB9IGZyb20gJy4uL3BsdWdpbnMnXG4gICAgaW1wb3J0IHtcbiAgICAgICAgQnV0dG9uLFxuICAgICAgICBQaWN0dXJlLFxuICAgICAgICBJbnB1dCxcbiAgICAgICAgUHJvZ3Jlc3MsXG4gICAgICAgIFByb2dyZXNzTmV4dCxcbiAgICAgICAgSWNvbixcbiAgICAgICAgRm9ybSxcbiAgICAgICAgUmF0ZSxcbiAgICAgICAgQXZhdGFyLFxuICAgICAgICBEaXZpZGVyLFxuICAgICAgICBDaGFyaXR5Q2FyZCxcbiAgICB9IGZyb20gJy4uL2NvbXBvbmVudHMnXG5cbiAgICBjb25zdCBjYXJkcyA9IFtcbiAgICAgICAge1xuICAgICAgICAgICAgc3JjOiAnaHR0cHM6Ly9wbGFjZWltZy5jb20vMzAwLzMwMC9wZW9wbGUnLFxuICAgICAgICAgICAgdGl0bGU6ICdUaGUgbWFpbiB0aXRsZSBhbmQgc2hvcnQgZGVzY3JpcHRpb24uJyxcbiAgICAgICAgICAgIHBlcmNlbnQ6IDQ1LFxuICAgICAgICAgICAgb3JnSGVhZDogJ1RpbmEgS2FuZGVsYWtpJyxcbiAgICAgICAgICAgIG9yZ2FuaXphdGlvbjogJ09SRyBjaGFyaXR5IG9mIENoYXJpdGlmeS4nLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBzcmM6ICdodHRwczovL3BsYWNlaW1nLmNvbS8zMDAvMzAwL2FyY2gnLFxuICAgICAgICAgICAgdGl0bGU6ICdTZWNvbmQgYmlnZ2VyIG1ham9yIGNhcmQgdGl0bGUgbGluZSB3aXRoIGEgYml0IGxvbmdlciBkZXNjcmlwdGlvbi4nLFxuICAgICAgICAgICAgcGVyY2VudDogNjUsXG4gICAgICAgICAgICBvcmdIZWFkOiAnVGluYSBLYW5kZWxha2knLFxuICAgICAgICAgICAgb3JnYW5pemF0aW9uOiAnT1JHIGNoYXJpdHkgb2YgQ2hhcml0aWZ5LicsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHNyYzogJ2h0dHBzOi8vcGxhY2VpbWcuY29tLzMwMC8zMDAvYW55JyxcbiAgICAgICAgICAgIHRpdGxlOiAnVGhlIG1haW4gdGl0bGUgYW5kIHNob3J0IGRlc2NyaXB0aW9uLicsXG4gICAgICAgICAgICBwZXJjZW50OiA1LFxuICAgICAgICAgICAgb3JnSGVhZDogJ1RpbmFyYW1pc2ltdXNzIEthbmRlbGFraW51c2thcycsXG4gICAgICAgICAgICBvcmdhbml6YXRpb246ICdPUkcgY2hhcml0eSBvZiBDaGFyaXRpZnkuJyxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgc3JjOiAnaHR0cHM6Ly9wbGFjZWltZy5jb20vMzAwLzMwMC9uYXR1cmUnLFxuICAgICAgICAgICAgdGl0bGU6ICdUaGUgbWFpbiB0aXRsZSBhbmQgc2hvcnQgZGVzY3JpcHRpb24uJyxcbiAgICAgICAgICAgIHBlcmNlbnQ6IDk1LFxuICAgICAgICAgICAgb3JnSGVhZDogJ1RpbmEgS2FuZGVsYWtpJyxcbiAgICAgICAgICAgIG9yZ2FuaXphdGlvbjogJ09SRyBnaWFudCBjaGFyaXR5IG9yZ2FuaXphdGlvbiBvZiBiaWcgQ2hhcml0aWZ5IGNvbXBhbnkuJyxcbiAgICAgICAgfSxcbiAgICBdXG48L3NjcmlwdD5cblxuPHN0eWxlPlxuICAgIGgxIHtcbiAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIH1cblxuICAgIC50b3Age1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBtYXJnaW4tYm90dG9tOiBjYWxjKHZhcigtLXNjcmVlbi1wYWRkaW5nKSAqIDEuNSk7XG4gICAgICAgIG1hcmdpbi10b3A6IHZhcigtLXNjcmVlbi1wYWRkaW5nKTtcbiAgICB9XG5cbiAgICAudG9wLXBpYyB7XG4gICAgICAgIHotaW5kZXg6IDA7XG4gICAgICAgIGZsZXgtZ3JvdzogMTtcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMnB4O1xuICAgICAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1ib3JkZXItcmFkaXVzKTtcbiAgICAgICAgYm94LXNoYWRvdzogdmFyKC0tc2hhZG93LXByaW1hcnkpO1xuICAgIH1cblxuICAgIC5vcHRpb25zIHtcbiAgICAgICAgZmxleDogMDtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgbWFyZ2luOiBjYWxjKHZhcigtLXNjcmVlbi1wYWRkaW5nKSAqIC0xIC8gMikgMDtcbiAgICAgICAgcGFkZGluZzogMCAwIDAgdmFyKC0tc2NyZWVuLXBhZGRpbmcpO1xuICAgIH1cblxuICAgIC5vcHRpb25zIGxpIHtcbiAgICAgICAgZmxleDogbm9uZTtcbiAgICAgICAgbWFyZ2luOiBjYWxjKHZhcigtLXNjcmVlbi1wYWRkaW5nKSAvIDIpIDA7XG4gICAgfVxuXG4gICAgLnJhdGUtc2VjdGlvbiB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBiYXNlbGluZTtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICBwYWRkaW5nOiBjYWxjKHZhcigtLXNjcmVlbi1wYWRkaW5nKSAqIDEuNSkgMDtcbiAgICB9XG5cbiAgICAuYXZhLXNlY3Rpb24ge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgfVxuXG4gICAgLmF2YS1zZWN0aW9uIHNwYW4ge1xuICAgICAgICBmb250LXNpemU6IC43cmVtO1xuICAgICAgICBwYWRkaW5nOiAwIHZhcigtLXNjcmVlbi1wYWRkaW5nKTtcbiAgICB9XG5cbiAgICAuYXZhLXNlY3Rpb24gc3BhbiBwIHtcbiAgICAgICAgZm9udC1zaXplOiAuNnJlbTtcbiAgICB9XG5cbiAgICAuYXZhLXNlY3Rpb24gc3BhbiBwLFxuICAgIC5hdmEtc2VjdGlvbiBzcGFuIGgzIHtcbiAgICAgICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgICAgICBsaW5lLWhlaWdodDogMS40O1xuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgICB9XG5cbiAgICAuY2FyZHMge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LXdyYXA6IHdyYXA7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgbWFyZ2luOiBjYWxjKHZhcigtLXNjcmVlbi1wYWRkaW5nKSAqIC0zKSBjYWxjKHZhcigtLXNjcmVlbi1wYWRkaW5nKSAqIC0xKTtcbiAgICB9XG5cbiAgICAuY2FyZHMgbGkge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4OiAwIDAgNTAlO1xuICAgICAgICBwYWRkaW5nOiBjYWxjKHZhcigtLXNjcmVlbi1wYWRkaW5nKSAqIDMpIHZhcigtLXNjcmVlbi1wYWRkaW5nKTtcbiAgICB9XG48L3N0eWxlPlxuXG48c3ZlbHRlOmhlYWQ+XG4gICAgPHRpdGxlPkNoYXJpdGlmeSAtIGlzIHRoZSBhcHBsaWNhdGlvbiBmb3IgaGVscGluZyB0aG9zZSBpbiBuZWVkLjwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuXG48c2VjdGlvbiBjbGFzcz1cImNvbnRhaW5lclwiPlxuICAgIDxzZWN0aW9uIGNsYXNzPVwidG9wXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0b3AtcGljXCI+XG4gICAgICAgICAgICA8U3dpcGU+XG4gICAgICAgICAgICAgICAgPFN3aXBlSXRlbT5cbiAgICAgICAgICAgICAgICAgICAgPFBpY3R1cmUgc3JjPVwiaHR0cHM6Ly9wbGFjZWltZy5jb20vMzAwLzMwMC9wZW9wbGVcIiBhbHQ9XCJzYW1wbGVcIi8+XG4gICAgICAgICAgICAgICAgPC9Td2lwZUl0ZW0+XG4gICAgICAgICAgICAgICAgPFN3aXBlSXRlbT5cbiAgICAgICAgICAgICAgICAgICAgPFBpY3R1cmUgc3JjPVwiaHR0cHM6Ly9wbGFjZWltZy5jb20vMzAwLzMwMC9hbnlcIiBhbHQ9XCJzYW1wbGVcIi8+XG4gICAgICAgICAgICAgICAgPC9Td2lwZUl0ZW0+XG4gICAgICAgICAgICAgICAgPFN3aXBlSXRlbT5cbiAgICAgICAgICAgICAgICAgICAgPFBpY3R1cmUgc3JjPVwiaHR0cHM6Ly9wbGFjZWltZy5jb20vMzAwLzMwMC9hcmNoXCIgYWx0PVwic2FtcGxlXCIvPlxuICAgICAgICAgICAgICAgIDwvU3dpcGVJdGVtPlxuICAgICAgICAgICAgICAgIDxTd2lwZUl0ZW0+XG4gICAgICAgICAgICAgICAgICAgIDxQaWN0dXJlIHNyYz1cImh0dHBzOi8vcGxhY2VpbWcuY29tLzMwMC8zMDAvbmF0dXJlXCIgYWx0PVwic2FtcGxlXCIvPlxuICAgICAgICAgICAgICAgIDwvU3dpcGVJdGVtPlxuICAgICAgICAgICAgICAgIDxTd2lwZUl0ZW0+XG4gICAgICAgICAgICAgICAgICAgIDxQaWN0dXJlIHNyYz1cImh0dHBzOi8vcGxhY2VpbWcuY29tLzMwMC8zMDAvdGVjaFwiIGFsdD1cInNhbXBsZVwiLz5cbiAgICAgICAgICAgICAgICA8L1N3aXBlSXRlbT5cbiAgICAgICAgICAgIDwvU3dpcGU+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDx1bCBjbGFzcz1cIm9wdGlvbnNcIj5cbiAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICA8QnV0dG9uIGlzPVwic3VjY2Vzc1wiIG9uOmNsaWNrPVwie2UgPT4gY29uc29sZS5sb2coZSl9XCI+dGVzdDE8L0J1dHRvbj5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgPEJ1dHRvbiBpcz1cInN1Y2Nlc3NcIiBvbjpjbGljaz1cIntlID0+IGNvbnNvbGUubG9nKGUpfVwiPnRlc3QxMjwvQnV0dG9uPlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICA8QnV0dG9uIGlzPVwic3VjY2Vzc1wiIG9uOmNsaWNrPVwie2UgPT4gY29uc29sZS5sb2coZSl9XCI+dGVzdDEyMzwvQnV0dG9uPlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICA8YnI+XG4gICAgICAgICAgICAgICAgPElucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwibnVtYmVyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJudW1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdD1cInN1bS1zdWdnZXN0aW9uc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIk51bVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRvc2VsZWN0XG4gICAgICAgICAgICAgICAgICAgICAgICBhbGlnbj1cInJpZ2h0XCJcbiAgICAgICAgICAgICAgICAvPlxuXG4gICAgICAgICAgICAgICAgPGRhdGFsaXN0IGlkPVwic3VtLXN1Z2dlc3Rpb25zXCI+XG4gICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIyMFwiPlxuICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiNTAwXCI+XG4gICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIxMDAwXCI+XG4gICAgICAgICAgICAgICAgPC9kYXRhbGlzdD5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgPEJ1dHRvbiBpcz1cIndhcm5pbmdcIiBvbjpjbGljaz1cIntlID0+IGNvbnNvbGUubG9nKGUpfVwiPlN1Ym1pdDwvQnV0dG9uPlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgPC91bD5cbiAgICA8L3NlY3Rpb24+XG5cbiAgICA8UHJvZ3Jlc3MgdmFsdWU9XCI2NVwiPjwvUHJvZ3Jlc3M+XG4gICAgPGJyPlxuICAgIDxQcm9ncmVzc05leHQgdmFsdWU9XCI3NVwiPjwvUHJvZ3Jlc3NOZXh0PlxuXG4gICAgPHNlY3Rpb24gY2xhc3M9XCJyYXRlLXNlY3Rpb25cIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImF2YS1zZWN0aW9uXCI+XG4gICAgICAgICAgICA8QXZhdGFyIHNyYz1cImh0dHBzOi8vcGxhY2VpbWcuY29tLzMwMC8zMDAvcGVvcGxlXCIgYWx0PVwiYXZhdGFyXCIvPlxuXG4gICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgICA8aDM+VGluYSBLYW5kZWxha2k8L2gzPlxuICAgICAgICAgICAgICAgIDxwPk9SRyBjaGFyaXR5IGNoYXJpdGlmeTwvcD5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPFJhdGUvPlxuICAgIDwvc2VjdGlvbj5cblxuICAgIDxicj5cblxuICAgIDxoMT5UaGUgbWFpbiB0aXRsZTwvaDE+XG5cbiAgICA8YnI+XG5cbiAgICA8cCBjbGFzcz1cInRleHQtY2VudGVyXCIgc3R5bGU9XCJwYWRkaW5nOiAwIDEwdndcIj5cbiAgICAgICAgQSBzbWFsbCBkZXNjcmlwdGlvbiB0aGF0IGRlc2NyaWJlcyB0aGUgdGl0bGUgYWJvdmUgYW5kIGp1c3QgbWFrZXMgdGV4dCBsb25nZXIuXG4gICAgPC9wPlxuPC9zZWN0aW9uPlxuXG48YnI+XG48YnI+XG48YnI+XG5cbjxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cbiAgICA8RGl2aWRlciBzaXplPVwiMTZcIi8+XG4gICAgPGgyIHN0eWxlPVwidGV4dC1hbGlnbjogcmlnaHRcIj5UaGUgbmVhcmVzdCBsaXN0OjwvaDI+XG4gICAgPERpdmlkZXIgc2l6ZT1cIjIwXCIvPlxuXG4gICAgPGJyPlxuXG4gICAgPHVsIGNsYXNzPVwiY2FyZHNcIj5cbiAgICAgICAgeyNlYWNoIGNhcmRzIGFzIGNhcmR9XG4gICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgPENoYXJpdHlDYXJkIHsuLi5jYXJkfS8+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICB7L2VhY2h9XG4gICAgPC91bD5cbjwvZGl2PlxuXG48YnI+XG48YnI+XG5cbjxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cbiAgICA8RGl2aWRlciBzaXplPVwiMTZcIi8+XG4gICAgPGgyIHN0eWxlPVwidGV4dC1hbGlnbjogcmlnaHRcIj5UaGUgbmVhcmVzdCBsaXN0OjwvaDI+XG4gICAgPERpdmlkZXIgc2l6ZT1cIjIwXCIvPlxuXG4gICAgPGJyPlxuXG4gICAgPHVsIGNsYXNzPVwiY2FyZHNcIj5cbiAgICAgICAgeyNlYWNoIGNhcmRzIGFzIGNhcmR9XG4gICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgPENoYXJpdHlDYXJkIHsuLi5jYXJkfS8+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICB7L2VhY2h9XG4gICAgPC91bD5cbjwvZGl2PlxuXG48YnI+XG48YnI+XG48YnI+XG5cbjxEaXZpZGVyLz5cblxuXG48Rm9ybSBvbjpzdWJtaXQ9XCJ7KGUpID0+IGNvbnNvbGUubG9nKGUpfVwiIG5hbWU9XCJtYWluLWZvcm1cIj5cbiAgICA8YnI+XG4gICAgPGJyPlxuXG4gICAgPElucHV0IG5hbWU9XCJ0ZXN0MVwiIHR5cGU9XCJudW1iZXJcIiBsaXN0PVwic3VtLXN1Z2dlc3Rpb25zXCIvPlxuXG4gICAgPGJyPlxuICAgIDxicj5cblxuICAgIDxJbnB1dCBuYW1lPVwidGVzdDJcIiB0eXBlPVwidGV4dFwiIGxpc3Q9XCJzdW0tc3VnZ2VzdGlvbnNcIi8+XG5cbiAgICA8YnI+XG4gICAgPGJyPlxuXG4gICAgPElucHV0IG5hbWU9XCJ0ZXN0M1wiIHR5cGU9XCJlbWFpbFwiIGxpc3Q9XCJzdW0tc3VnZ2VzdGlvbnNcIi8+XG5cbiAgICA8YnI+XG4gICAgPGJyPlxuXG4gICAgPElucHV0IG5hbWU9XCJ0ZXN0NFwiIHR5cGU9XCJ1cmxcIiBsaXN0PVwic3VtLXN1Z2dlc3Rpb25zXCIvPlxuXG4gICAgPGJyPlxuICAgIDxicj5cblxuICAgIDxJbnB1dCBuYW1lPVwidGVzdDVcIiB0eXBlPVwic2VhcmNoXCIgbGlzdD1cInN1bS1zdWdnZXN0aW9uc1wiLz5cblxuICAgIDxicj5cbiAgICA8YnI+XG5cbiAgICA8SW5wdXQgbmFtZT1cInRlc3Q2XCIgdHlwZT1cImRhdGVcIiBsaXN0PVwic3VtLXN1Z2dlc3Rpb25zXCIvPlxuXG4gICAgPGJyPlxuICAgIDxicj5cblxuICAgIDxJbnB1dCBuYW1lPVwidGVzdDdcIiB0eXBlPVwicGFzc3dvcmRcIiBsaXN0PVwic3VtLXN1Z2dlc3Rpb25zXCIvPlxuXG4gICAgPGJyPlxuICAgIDxicj5cblxuICAgIDxJbnB1dCBuYW1lPVwidGVzdDhcIiB0eXBlPVwidGVsXCIgbGlzdD1cInN1bS1zdWdnZXN0aW9uc1wiLz5cblxuICAgIDxicj5cbiAgICA8YnI+XG5cbiAgICA8QnV0dG9uIGlzPVwic3VjY2Vzc1wiIHR5cGU9XCJzdWJtaXRcIj5TdWJtaXQ8L0J1dHRvbj5cbjwvRm9ybT5cblxuPGgxPkNoYXJpdGlmeSAtIGlzIHRoZSBhcHBsaWNhdGlvbiBmb3IgaGVscGluZyB0aG9zZSBpbiBuZWVkLjwvaDE+XG5cbjxicj5cbjxicj5cblxuPGgyIGNsYXNzPVwidGV4dC1zdWNjZXNzXCI+VHlwb2dyYXBoeTwvaDI+XG5cbjxicj5cbjxicj5cblxuPHA+RmV3IHBhcmFncmFwaHMgdG8gdGV4dCBmb250czwvcD5cbjxwPtCU0LXQutGW0LvRjNC60LAg0L/QsNGA0LDQs9GA0LDRhNGW0LIg0LTQu9GPINGC0LXRgdGC0YMg0YLQtdC60YHRgtGDPC9wPlxuPHA+0J3QtdGB0LrQvtC70YzQutC+INC/0LDRgNCw0LPRgNCw0YTQvtCyINC00LvRjyDRgtC10YHRgtCwINGC0LXQutGB0YLQsDwvcD5cblxuPGJyPlxuPGJyPlxuXG48aDIgY2xhc3M9XCJ0ZXh0LXdhcm5pbmdcIj5JbnRlcmFjdGl2ZSBlbGVtZW50czwvaDI+XG5cbjx1bD5cbiAgICA8bGk+XG4gICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgPEljb24gc2l6ZT1cInNtYWxsXCIgdHlwZT1cImhlYXJ0LWZpbGxlZFwiLz5cbiAgICAgICAgICAgIDxJY29uIHNpemU9XCJzbWFsbFwiIHR5cGU9XCJoZWFydC1maWxsZWRcIiBpcz1cIndhcm5pbmdcIi8+XG4gICAgICAgICAgICA8SWNvbiBzaXplPVwic21hbGxcIiB0eXBlPVwiaGVhcnQtZmlsbGVkXCIgaXM9XCJkYW5nZXJcIi8+XG4gICAgICAgIDwvc3Bhbj5cbiAgICA8L2xpPlxuICAgIDxsaT5cbiAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICA8SWNvbiB0eXBlPVwiaGVhcnQtZmlsbGVkXCIvPlxuICAgICAgICAgICAgPEljb24gdHlwZT1cImhlYXJ0LWZpbGxlZFwiIGlzPVwid2FybmluZ1wiLz5cbiAgICAgICAgICAgIDxJY29uIHR5cGU9XCJoZWFydC1maWxsZWRcIiBpcz1cImRhbmdlclwiLz5cbiAgICAgICAgPC9zcGFuPlxuICAgIDwvbGk+XG4gICAgPGxpPlxuICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgIDxJY29uIHNpemU9XCJiaWdcIiB0eXBlPVwiaGVhcnQtZmlsbGVkXCIvPlxuICAgICAgICAgICAgPEljb24gc2l6ZT1cImJpZ1wiIHR5cGU9XCJoZWFydC1maWxsZWRcIiBpcz1cIndhcm5pbmdcIi8+XG4gICAgICAgICAgICA8SWNvbiBzaXplPVwiYmlnXCIgdHlwZT1cImhlYXJ0LWZpbGxlZFwiIGlzPVwiZGFuZ2VyXCIvPlxuICAgICAgICA8L3NwYW4+XG4gICAgPC9saT5cbjwvdWw+XG5cbjxicj5cbjxicj5cblxuPHNlY3Rpb24gc3R5bGU9XCJ0ZXh0LWFsaWduOiBjZW50ZXI7IGRpc3BsYXk6IGZsZXg7IGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kXCI+XG4gICAgPGRpdj5cbiAgICAgICAgPGJyPlxuICAgICAgICBCdXR0b25zXG4gICAgICAgIDxicj5cbiAgICAgICAgPGJyPlxuICAgICAgICA8QnV0dG9uIG9uOmNsaWNrPVwie2UgPT4gY29uc29sZS5sb2coZSl9XCI+dGVzdDwvQnV0dG9uPlxuICAgICAgICA8YnI+XG4gICAgICAgIDxicj5cbiAgICAgICAgPEJ1dHRvbiBpcz1cInN1Y2Nlc3NcIiBvbjpjbGljaz1cIntlID0+IGNvbnNvbGUubG9nKGUpfVwiPnRlc3Q8L0J1dHRvbj5cbiAgICAgICAgPGJyPlxuICAgICAgICA8YnI+XG4gICAgICAgIDxCdXR0b24gaXM9XCJzdWNjZXNzXCIgb246Y2xpY2s9XCJ7ZSA9PiBjb25zb2xlLmxvZyhlKX1cIiBhcmlhTGFiZWw9XCJ0ZXh0XCI+dGVzdDwvQnV0dG9uPlxuICAgICAgICA8YnI+XG4gICAgICAgIDxicj5cbiAgICAgICAgV2l0aCB0ZXh0XG4gICAgICAgIDxCdXR0b24gaXM9XCJzdWNjZXNzXCIgb246Y2xpY2s9XCJ7ZSA9PiBjb25zb2xlLmxvZyhlKX1cIj50ZXN0PC9CdXR0b24+XG4gICAgICAgIGFuZCBiZWhpbmQuXG4gICAgICAgIDxicj5cbiAgICAgICAgPGJyPlxuICAgICAgICA8QnV0dG9uIGlzPVwid2FybmluZ1wiIG9uOmNsaWNrPVwie2UgPT4gY29uc29sZS5sb2coZSl9XCI+U29tZSBleGFtcGxlIG9mIEJ1dHRvbjwvQnV0dG9uPlxuICAgICAgICA8YnI+XG4gICAgICAgIDxicj5cbiAgICAgICAgPEJ1dHRvbiBpcz1cImRhbmdlclwiIG9uOmNsaWNrPVwie2UgPT4gY29uc29sZS5sb2coZSl9XCI+U29tZSBleGFtcGxlIG9mIEJ1dHRvbjwvQnV0dG9uPlxuICAgICAgICA8YnI+XG4gICAgICAgIDxicj5cbiAgICA8L2Rpdj5cblxuICAgIDxkaXY+XG4gICAgICAgIDxicj5cbiAgICAgICAgTGlua3MgYXMgYnV0dG9uc1xuICAgICAgICA8YnI+XG4gICAgICAgIDxicj5cbiAgICAgICAgPEJ1dHRvbiBvbjpjbGljaz1cIntlID0+IGNvbnNvbGUubG9nKGUpfVwiIGhyZWY9XCIjXCI+dGVzdDwvQnV0dG9uPlxuICAgICAgICA8YnI+XG4gICAgICAgIDxicj5cbiAgICAgICAgPEJ1dHRvbiBpcz1cInN1Y2Nlc3NcIiBvbjpjbGljaz1cIntlID0+IGNvbnNvbGUubG9nKGUpfVwiIGhyZWY9XCIjXCI+dGVzdDwvQnV0dG9uPlxuICAgICAgICA8YnI+XG4gICAgICAgIDxicj5cbiAgICAgICAgPEJ1dHRvbiBpcz1cInN1Y2Nlc3NcIiBvbjpjbGljaz1cIntlID0+IGNvbnNvbGUubG9nKGUpfVwiIGhyZWY9XCIjXCI+dGVzdDwvQnV0dG9uPlxuICAgICAgICA8YnI+XG4gICAgICAgIDxicj5cbiAgICAgICAgV2l0aCB0ZXh0XG4gICAgICAgIDxCdXR0b24gaXM9XCJzdWNjZXNzXCIgb246Y2xpY2s9XCJ7ZSA9PiBjb25zb2xlLmxvZyhlKX1cIiBocmVmPVwiI1wiPnRlc3Q8L0J1dHRvbj5cbiAgICAgICAgYW5kIGJlaGluZC5cbiAgICAgICAgPGJyPlxuICAgICAgICA8YnI+XG4gICAgICAgIDxCdXR0b24gaXM9XCJ3YXJuaW5nXCIgb246Y2xpY2s9XCJ7ZSA9PiBjb25zb2xlLmxvZyhlKX1cIiBocmVmPVwiI1wiPlNvbWUgZXhhbXBsZSBvZiBCdXR0b248L0J1dHRvbj5cbiAgICAgICAgPGJyPlxuICAgICAgICA8YnI+XG4gICAgICAgIDxCdXR0b24gaXM9XCJkYW5nZXJcIiBvbjpjbGljaz1cIntlID0+IGNvbnNvbGUubG9nKGUpfVwiIGhyZWY9XCIjXCI+U29tZSBleGFtcGxlIG9mIEJ1dHRvbjwvQnV0dG9uPlxuICAgICAgICA8YnI+XG4gICAgICAgIDxicj5cbiAgICA8L2Rpdj5cbjwvc2VjdGlvbj5cblxuPGJyPlxuPGJyPlxuXG48aDIgY2xhc3M9XCJ0ZXh0LWRhbmdlclwiPklucHV0IGZpZWxkczwvaDI+XG5cbjxicj5cbjxicj5cblxuPHNlY3Rpb24+XG4gICAgPElucHV0IHJvd3M9ezJ9IG5hbWU9XCJ0ZXhcIiBsaXN0PVwibGlzXCIvPlxuXG4gICAgPGJyPlxuICAgIDxicj5cblxuICAgIDxJbnB1dCBuYW1lPVwidGV4MVwiIGxpc3Q9XCJsaXNcIiBwbGFjZWhvbGRlcj1cIlNvbWUgcGxhY2Vob2xkZXIgdGV4dFwiLz5cblxuICAgIDxicj5cbiAgICA8YnI+XG5cbiAgICA8SW5wdXQgdHlwZT1cIm51bWJlclwiIG5hbWU9XCJ0ZXgyXCIgbGlzdD1cImxpc1wiLz5cblxuICAgIDxkYXRhbGlzdCBpZD1cImxpc1wiPlxuICAgICAgICA8b3B0aW9uIHZhbHVlPVwiMVwiPlxuICAgICAgICA8b3B0aW9uIHZhbHVlPVwiMlwiPlxuICAgICAgICA8b3B0aW9uIHZhbHVlPVwiM1wiPlxuICAgIDwvZGF0YWxpc3Q+XG5cbiAgICA8bGFiZWwgZm9yPVwiaW5wdXRcIiBjbGFzcz1cInRleHQtc3VjY2Vzc1wiPmxhYmVsPC9sYWJlbD5cbiAgICA8aW5wdXQgaWQ9XCJpbnB1dFwiIHR5cGU9XCJ0ZXh0XCIgdmFsdWU9XCJ0ZXh0XCI+XG5cbiAgICA8YnI+XG4gICAgPGJyPlxuXG4gICAgPGEgaHJlZj1cIi5cIiBjbGFzcz1cInRleHQtd2FybmluZ1wiPlNvbWUgbGluazwvYT5cblxuICAgIDxicj5cbiAgICA8YnI+XG5cbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInRleHQtaW5mb1wiPkJ1dHRvbiBleGFtcGxlPC9idXR0b24+XG48L3NlY3Rpb24+XG5cbjxicj5cbjxicj5cblxuPGgyIGNsYXNzPVwidGV4dC1pbmZvXCI+SW1hZ2VzPC9oMj5cblxuPGJyPlxuPGJyPlxuXG48UGljdHVyZSBzcmM9XCJodHRwczovL3BsYWNlaW1nLmNvbS8xMDAwLzEwMDAvYW55XCIgYWx0PVwic2FtcGxlXCIvPlxuXG48YnI+XG48YnI+XG5cbjxoMiBjbGFzcz1cInRleHQtc3VjY2Vzc1wiPk90aGVyPC9oMj5cblxuPHA+XG4gICAgPHN0cm9uZz5cbiAgICAgICAgVHJ5IGVkaXRpbmcgdGhpcyBmaWxlIChzcmMvcm91dGVzL2luZGV4LnN2ZWx0ZSkgdG8gdGVzdCBsaXZlIHJlbG9hZGluZy5cbiAgICA8L3N0cm9uZz5cbjwvcD5cblxuPHAgc3R5bGU9XCJ0ZXh0LWFsaWduOiBqdXN0aWZ5XCI+XG4gICAgQSBsb3Qgb2YgRW5nbGlzaCB0ZXh0LiBBIGxvdCBvZiBFbmdsaXNoIHRleHQuIEEgbG90IG9mIEVuZ2xpc2ggdGV4dC4gQSBsb3Qgb2YgRW5nbGlzaCB0ZXh0LlxuICAgIEEgbG90IG9mIEVuZ2xpc2ggdGV4dC4gQSBsb3Qgb2YgRW5nbGlzaCB0ZXh0LiBBIGxvdCBvZiBFbmdsaXNoIHRleHQuIEEgbG90IG9mIEVuZ2xpc2ggdGV4dC5cbiAgICBBIGxvdCBvZiBFbmdsaXNoIHRleHQuIEEgbG90IG9mIEVuZ2xpc2ggdGV4dC4gQSBsb3Qgb2YgRW5nbGlzaCB0ZXh0LiBBIGxvdCBvZiBFbmdsaXNoIHRleHQuXG4gICAgQSBsb3Qgb2YgRW5nbGlzaCB0ZXh0LiBBIGxvdCBvZiBFbmdsaXNoIHRleHQuIEEgbG90IG9mIEVuZ2xpc2ggdGV4dC4gQSBsb3Qgb2YgRW5nbGlzaCB0ZXh0LlxuICAgIEEgbG90IG9mIEVuZ2xpc2ggdGV4dC4gQSBsb3Qgb2YgRW5nbGlzaCB0ZXh0LiBBIGxvdCBvZiBFbmdsaXNoIHRleHQuIEEgbG90IG9mIEVuZ2xpc2ggdGV4dC5cblxuICAgIEEgbG90IG9mIEVuZ2xpc2ggdGV4dC4gQSBsb3Qgb2YgRW5nbGlzaCB0ZXh0LiBBIGxvdCBvZiBFbmdsaXNoIHRleHQuIEEgbG90IG9mIEVuZ2xpc2ggdGV4dC5cbiAgICBBIGxvdCBvZiBFbmdsaXNoIHRleHQuIEEgbG90IG9mIEVuZ2xpc2ggdGV4dC4gQSBsb3Qgb2YgRW5nbGlzaCB0ZXh0LiBBIGxvdCBvZiBFbmdsaXNoIHRleHQuXG4gICAgQSBsb3Qgb2YgRW5nbGlzaCB0ZXh0LiBBIGxvdCBvZiBFbmdsaXNoIHRleHQuIEEgbG90IG9mIEVuZ2xpc2ggdGV4dC4gQSBsb3Qgb2YgRW5nbGlzaCB0ZXh0LlxuICAgIEEgbG90IG9mIEVuZ2xpc2ggdGV4dC4gQSBsb3Qgb2YgRW5nbGlzaCB0ZXh0LiBBIGxvdCBvZiBFbmdsaXNoIHRleHQuIEEgbG90IG9mIEVuZ2xpc2ggdGV4dC5cbiAgICBBIGxvdCBvZiBFbmdsaXNoIHRleHQuIEEgbG90IG9mIEVuZ2xpc2ggdGV4dC4gQSBsb3Qgb2YgRW5nbGlzaCB0ZXh0LiBBIGxvdCBvZiBFbmdsaXNoIHRleHQuXG5cbiAgICBBIGxvdCBvZiBFbmdsaXNoIHRleHQuIEEgbG90IG9mIEVuZ2xpc2ggdGV4dC4gQSBsb3Qgb2YgRW5nbGlzaCB0ZXh0LiBBIGxvdCBvZiBFbmdsaXNoIHRleHQuXG4gICAgQSBsb3Qgb2YgRW5nbGlzaCB0ZXh0LiBBIGxvdCBvZiBFbmdsaXNoIHRleHQuIEEgbG90IG9mIEVuZ2xpc2ggdGV4dC4gQSBsb3Qgb2YgRW5nbGlzaCB0ZXh0LlxuICAgIEEgbG90IG9mIEVuZ2xpc2ggdGV4dC4gQSBsb3Qgb2YgRW5nbGlzaCB0ZXh0LiBBIGxvdCBvZiBFbmdsaXNoIHRleHQuIEEgbG90IG9mIEVuZ2xpc2ggdGV4dC5cbiAgICBBIGxvdCBvZiBFbmdsaXNoIHRleHQuIEEgbG90IG9mIEVuZ2xpc2ggdGV4dC4gQSBsb3Qgb2YgRW5nbGlzaCB0ZXh0LiBBIGxvdCBvZiBFbmdsaXNoIHRleHQuXG4gICAgQSBsb3Qgb2YgRW5nbGlzaCB0ZXh0LiBBIGxvdCBvZiBFbmdsaXNoIHRleHQuIEEgbG90IG9mIEVuZ2xpc2ggdGV4dC4gQSBsb3Qgb2YgRW5nbGlzaCB0ZXh0LlxuXG4gICAgQSBsb3Qgb2YgRW5nbGlzaCB0ZXh0LiBBIGxvdCBvZiBFbmdsaXNoIHRleHQuIEEgbG90IG9mIEVuZ2xpc2ggdGV4dC4gQSBsb3Qgb2YgRW5nbGlzaCB0ZXh0LlxuICAgIEEgbG90IG9mIEVuZ2xpc2ggdGV4dC4gQSBsb3Qgb2YgRW5nbGlzaCB0ZXh0LiBBIGxvdCBvZiBFbmdsaXNoIHRleHQuIEEgbG90IG9mIEVuZ2xpc2ggdGV4dC5cbiAgICBBIGxvdCBvZiBFbmdsaXNoIHRleHQuIEEgbG90IG9mIEVuZ2xpc2ggdGV4dC4gQSBsb3Qgb2YgRW5nbGlzaCB0ZXh0LiBBIGxvdCBvZiBFbmdsaXNoIHRleHQuXG4gICAgQSBsb3Qgb2YgRW5nbGlzaCB0ZXh0LiBBIGxvdCBvZiBFbmdsaXNoIHRleHQuIEEgbG90IG9mIEVuZ2xpc2ggdGV4dC4gQSBsb3Qgb2YgRW5nbGlzaCB0ZXh0LlxuICAgIEEgbG90IG9mIEVuZ2xpc2ggdGV4dC4gQSBsb3Qgb2YgRW5nbGlzaCB0ZXh0LiBBIGxvdCBvZiBFbmdsaXNoIHRleHQuIEEgbG90IG9mIEVuZ2xpc2ggdGV4dC5cblxuICAgIEEgbG90IG9mIEVuZ2xpc2ggdGV4dC4gQSBsb3Qgb2YgRW5nbGlzaCB0ZXh0LiBBIGxvdCBvZiBFbmdsaXNoIHRleHQuIEEgbG90IG9mIEVuZ2xpc2ggdGV4dC5cbiAgICBBIGxvdCBvZiBFbmdsaXNoIHRleHQuIEEgbG90IG9mIEVuZ2xpc2ggdGV4dC4gQSBsb3Qgb2YgRW5nbGlzaCB0ZXh0LiBBIGxvdCBvZiBFbmdsaXNoIHRleHQuXG4gICAgQSBsb3Qgb2YgRW5nbGlzaCB0ZXh0LiBBIGxvdCBvZiBFbmdsaXNoIHRleHQuIEEgbG90IG9mIEVuZ2xpc2ggdGV4dC4gQSBsb3Qgb2YgRW5nbGlzaCB0ZXh0LlxuICAgIEEgbG90IG9mIEVuZ2xpc2ggdGV4dC4gQSBsb3Qgb2YgRW5nbGlzaCB0ZXh0LiBBIGxvdCBvZiBFbmdsaXNoIHRleHQuIEEgbG90IG9mIEVuZ2xpc2ggdGV4dC5cbiAgICBBIGxvdCBvZiBFbmdsaXNoIHRleHQuIEEgbG90IG9mIEVuZ2xpc2ggdGV4dC4gQSBsb3Qgb2YgRW5nbGlzaCB0ZXh0LiBBIGxvdCBvZiBFbmdsaXNoIHRleHQuXG48L3A+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzhCQW1PZSxHQUFLOzs7a0NBQVYsTUFBSTs7Ozs7Ozs7Ozs0QkFtQkMsR0FBSzs7O2dDQUFWLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7a0JBNktHLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NkJBaE1ILEdBQUs7OztpQ0FBVixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7OzBCQUFKLE1BQUk7Ozs7Ozs7OzJCQW1CQyxHQUFLOzs7K0JBQVYsTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozt3QkFBSixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0NBbkJKLE1BQUk7Ozs7Ozs7a0NBbUJKLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQXRPSixLQUFLOztHQUVILEdBQUcsRUFBRSxxQ0FBcUM7R0FDMUMsS0FBSyxFQUFFLHVDQUF1QztHQUM5QyxPQUFPLEVBQUUsRUFBRTtHQUNYLE9BQU8sRUFBRSxnQkFBZ0I7R0FDekIsWUFBWSxFQUFFLDJCQUEyQjs7O0dBR3pDLEdBQUcsRUFBRSxtQ0FBbUM7R0FDeEMsS0FBSyxFQUFFLG9FQUFvRTtHQUMzRSxPQUFPLEVBQUUsRUFBRTtHQUNYLE9BQU8sRUFBRSxnQkFBZ0I7R0FDekIsWUFBWSxFQUFFLDJCQUEyQjs7O0dBR3pDLEdBQUcsRUFBRSxrQ0FBa0M7R0FDdkMsS0FBSyxFQUFFLHVDQUF1QztHQUM5QyxPQUFPLEVBQUUsQ0FBQztHQUNWLE9BQU8sRUFBRSxnQ0FBZ0M7R0FDekMsWUFBWSxFQUFFLDJCQUEyQjs7O0dBR3pDLEdBQUcsRUFBRSxxQ0FBcUM7R0FDMUMsS0FBSyxFQUFFLHVDQUF1QztHQUM5QyxPQUFPLEVBQUUsRUFBRTtHQUNYLE9BQU8sRUFBRSxnQkFBZ0I7R0FDekIsWUFBWSxFQUFFLDBEQUEwRDs7Ozt1QkFpSHBDLENBQUMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7eUJBR2xCLENBQUMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7eUJBR2xCLENBQUMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7eUJBb0JsQixDQUFDLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO3dCQStFL0MsQ0FBQyxJQUFLLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQzt5QkFtR1gsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQzt5QkFHTCxDQUFDLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO3lCQUdsQixDQUFDLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO3lCQUlsQixDQUFDLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO3lCQUlsQixDQUFDLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO3lCQUduQixDQUFDLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDOzBCQVU5QixDQUFDLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDOzBCQUdMLENBQUMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7MEJBR2xCLENBQUMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7MEJBSWxCLENBQUMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7MEJBSWxCLENBQUMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7MEJBR25CLENBQUMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
