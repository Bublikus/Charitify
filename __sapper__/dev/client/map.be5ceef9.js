import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, V as onMount, X as onDestroy, m as create_slot, u as get_slot_context, v as get_slot_changes, w as transition_in, x as transition_out, p as space, e as element, r as claim_space, c as claim_element, b as children, f as detach_dev, g as attr_dev, h as add_location, k as insert_dev, J as check_outros, Y as binding_callbacks, z as globals, I as group_outros } from './index.272f3989.js';

/* src/routes/map.svelte generated by Svelte v3.16.7 */

const { document: document_1 } = globals;
const file = "src/routes/map.svelte";

// (69:4) {#if map}
function create_if_block(ctx) {
	let current;
	const default_slot_template = /*$$slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		l: function claim(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot && default_slot.p && dirty & /*$$scope*/ 16) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[4], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null));
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(69:4) {#if map}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t;
	let section;
	let current;
	let if_block = /*map*/ ctx[0] && create_if_block(ctx);

	const block = {
		c: function create() {
			t = space();
			section = element("section");
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			t = claim_space(nodes);
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			if (if_block) if_block.l(section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document_1.title = "Charitify - Map of organizations.";
			attr_dev(section, "class", "svelte-1tw6as9");
			add_location(section, file, 67, 0, 1600);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			insert_dev(target, section, anchor);
			if (if_block) if_block.m(section, null);
			/*section_binding*/ ctx[6](section);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*map*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(section, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(section);
			if (if_block) if_block.d();
			/*section_binding*/ ctx[6](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let map;
	let container;

	function renderMap() {
		$$invalidate(0, map = new mapboxgl.Map({
				container,
				style: "mapbox://styles/mapbox/streets-v11"
			}));

		for (let i = 0; i < 50; i += 1) {
			const lng = Math.random() * 360 - 180;
			const lat = Math.random() * 180 - 90;
			new mapboxgl.Marker().setLngLat([lng, lat]).addTo(map);
		}

		return map;
	}

	function createMap() {
		const scriptTag = document.createElement("script");
		scriptTag.type = "text/javascript";
		scriptTag.src = "https://api.mapbox.com/mapbox-gl-js/v1.7.0/mapbox-gl.js";
		const link = document.createElement("link");
		link.rel = "stylesheet";
		link.href = "https://api.mapbox.com/mapbox-gl-js/v1.7.0/mapbox-gl.css";

		scriptTag.onload = () => {
			const token = "pk.eyJ1IjoiYnVibGlrIiwiYSI6ImNrNXpxdzgxbTAwNnczbGxweG0wcTV3cjAifQ.rt1peLjCQHZUkrM4AWz5Mw";
			mapboxgl.accessToken = token;
			link.onload = () => renderMap();
			document.head.appendChild(link);
		};

		document.body.appendChild(scriptTag);
	}

	onMount(() => {
		if ("mapboxgl" in window) {
			renderMap();
		} else {
			createMap();
		}
	});

	onDestroy(() => {
		map && map.remove();
	});

	let { $$slots = {}, $$scope } = $$props;

	function section_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			$$invalidate(1, container = $$value);
		});
	}

	$$self.$set = $$props => {
		if ("$$scope" in $$props) $$invalidate(4, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("map" in $$props) $$invalidate(0, map = $$props.map);
		if ("container" in $$props) $$invalidate(1, container = $$props.container);
	};

	return [map, container, renderMap, createMap, $$scope, $$slots, section_binding];
}

class Map extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Map",
			options,
			id: create_fragment.name
		});
	}
}

export default Map;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLmJlNWNlZWY5LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcm91dGVzL21hcC5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHN2ZWx0ZTpoZWFkPlxuICAgIDx0aXRsZT5DaGFyaXRpZnkgLSBNYXAgb2Ygb3JnYW5pemF0aW9ucy48L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cblxuPHN0eWxlPlxuICAgIHNlY3Rpb24ge1xuICAgICAgICBmbGV4LWdyb3c6IDE7XG4gICAgfVxuPC9zdHlsZT5cblxuPHNjcmlwdD5cbiAgICBpbXBvcnQgeyBvbk1vdW50LCBvbkRlc3Ryb3kgfSBmcm9tICdzdmVsdGUnXG5cbiAgICBsZXQgbWFwXG4gICAgbGV0IGNvbnRhaW5lclxuXG4gICAgZnVuY3Rpb24gcmVuZGVyTWFwKCkge1xuICAgICAgICBtYXAgPSBuZXcgbWFwYm94Z2wuTWFwKHtcbiAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgIHN0eWxlOiAnbWFwYm94Oi8vc3R5bGVzL21hcGJveC9zdHJlZXRzLXYxMScsXG4gICAgICAgIH0pXG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA1MDsgaSArPSAxKSB7XG4gICAgICAgICAgICBjb25zdCBsbmcgPSBNYXRoLnJhbmRvbSgpICogMzYwIC0gMTgwXG4gICAgICAgICAgICBjb25zdCBsYXQgPSBNYXRoLnJhbmRvbSgpICogMTgwIC0gOTBcblxuICAgICAgICAgICAgbmV3IG1hcGJveGdsLk1hcmtlcigpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRMbmdMYXQoW2xuZywgbGF0XSlcbiAgICAgICAgICAgICAgICAgICAgLmFkZFRvKG1hcClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWFwXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlTWFwKCkge1xuICAgICAgICBjb25zdCBzY3JpcHRUYWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKVxuICAgICAgICBzY3JpcHRUYWcudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnXG4gICAgICAgIHNjcmlwdFRhZy5zcmMgPSAnaHR0cHM6Ly9hcGkubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvdjEuNy4wL21hcGJveC1nbC5qcydcblxuICAgICAgICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpXG4gICAgICAgIGxpbmsucmVsID0gJ3N0eWxlc2hlZXQnXG4gICAgICAgIGxpbmsuaHJlZiA9ICdodHRwczovL2FwaS5tYXBib3guY29tL21hcGJveC1nbC1qcy92MS43LjAvbWFwYm94LWdsLmNzcydcblxuICAgICAgICBzY3JpcHRUYWcub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdG9rZW4gPSAncGsuZXlKMUlqb2lZblZpYkdscklpd2lZU0k2SW1Ock5YcHhkemd4YlRBd05uY3piR3h3ZUcwd2NUVjNjakFpZlEucnQxcGVMakNRSFpVa3JNNEFXejVNdydcbiAgICAgICAgICAgIG1hcGJveGdsLmFjY2Vzc1Rva2VuID0gdG9rZW5cblxuICAgICAgICAgICAgbGluay5vbmxvYWQgPSAoKSA9PiByZW5kZXJNYXAoKVxuXG4gICAgICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGxpbmspXG4gICAgICAgIH1cblxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdFRhZylcbiAgICB9XG5cbiAgICBvbk1vdW50KCgpID0+IHtcbiAgICAgICAgaWYgKCdtYXBib3hnbCcgaW4gd2luZG93KSB7XG4gICAgICAgICAgICByZW5kZXJNYXAoKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3JlYXRlTWFwKClcbiAgICAgICAgfVxuICAgIH0pXG5cbiAgICBvbkRlc3Ryb3koKCkgPT4ge1xuICAgICAgICBtYXAgJiYgbWFwLnJlbW92ZSgpXG4gICAgfSlcbjwvc2NyaXB0PlxuXG48c2VjdGlvbiBiaW5kOnRoaXM9e2NvbnRhaW5lcn0+XG4gICAgeyNpZiBtYXB9XG4gICAgICAgIDxzbG90Pjwvc2xvdD5cbiAgICB7L2lmfVxuPC9zZWN0aW9uPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBR1EsR0FBRztLQUNILFNBQVM7O1VBRUosU0FBUztrQkFDZCxHQUFHLE9BQU8sUUFBUSxDQUFDLEdBQUc7SUFDbEIsU0FBUztJQUNULEtBQUssRUFBRSxvQ0FBb0M7OztXQUd0QyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUM7U0FDcEIsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLEtBQUssR0FBRyxHQUFHLEdBQUc7U0FDL0IsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLEtBQUssR0FBRyxHQUFHLEVBQUU7T0FFaEMsUUFBUSxDQUFDLE1BQU0sR0FDVixTQUFTLEVBQUUsR0FBRyxFQUFFLEdBQUcsR0FDbkIsS0FBSyxDQUFDLEdBQUc7OztTQUVmLEdBQUc7OztVQUdMLFNBQVM7UUFDUixTQUFTLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRO0VBQ2pELFNBQVMsQ0FBQyxJQUFJLEdBQUcsaUJBQWlCO0VBQ2xDLFNBQVMsQ0FBQyxHQUFHLEdBQUcseURBQXlEO1FBRW5FLElBQUksR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU07RUFDMUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxZQUFZO0VBQ3ZCLElBQUksQ0FBQyxJQUFJLEdBQUcsMERBQTBEOztFQUV0RSxTQUFTLENBQUMsTUFBTTtTQUNOLEtBQUssR0FBRywwRkFBMEY7R0FDeEcsUUFBUSxDQUFDLFdBQVcsR0FBRyxLQUFLO0dBRTVCLElBQUksQ0FBQyxNQUFNLFNBQVMsU0FBUztHQUU3QixRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJOzs7RUFHbEMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUzs7O0NBR3ZDLE9BQU87TUFDQyxVQUFVLElBQUksTUFBTTtHQUNwQixTQUFTOztHQUVULFNBQVM7Ozs7Q0FJakIsU0FBUztFQUNMLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
