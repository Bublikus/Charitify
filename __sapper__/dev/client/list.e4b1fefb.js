import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, B as assign, e as element, G as create_component, r as space, c as claim_element, a as children, H as claim_component, u as claim_space, f as detach_dev, h as attr_dev, g as add_location, j as insert_dev, I as mount_component, k as append_dev, P as get_spread_update, Y as get_spread_object, x as transition_in, y as transition_out, J as destroy_component, t as text, b as claim_text, V as set_style, R as check_outros, p as destroy_each, Q as group_outros } from './index.1e1e7223.js';
import { C as Carousel, D as DonatingGroup, P as Progress, A as AvatarAndName, R as Rate, T as TitleSubTitle, a as Divider, b as CharityCard } from './index.8b19345e.js';

/* src/routes/list.svelte generated by Svelte v3.16.7 */
const file = "src/routes/list.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	return child_ctx;
}

// (150:8) {#each cards as card}
function create_each_block_1(ctx) {
	let li;
	let t;
	let current;
	const charitycard_spread_levels = [/*card*/ ctx[2]];
	let charitycard_props = {};

	for (let i = 0; i < charitycard_spread_levels.length; i += 1) {
		charitycard_props = assign(charitycard_props, charitycard_spread_levels[i]);
	}

	const charitycard = new CharityCard({ props: charitycard_props, $$inline: true });

	const block = {
		c: function create() {
			li = element("li");
			create_component(charitycard.$$.fragment);
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			claim_component(charitycard.$$.fragment, li_nodes);
			t = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(li, "class", "svelte-8mvppp");
			add_location(li, file, 150, 12, 3981);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			mount_component(charitycard, li, null);
			append_dev(li, t);
			current = true;
		},
		p: function update(ctx, dirty) {
			const charitycard_changes = (dirty & /*cards*/ 1)
			? get_spread_update(charitycard_spread_levels, [get_spread_object(/*card*/ ctx[2])])
			: {};

			charitycard.$set(charitycard_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(charitycard.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(charitycard.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			destroy_component(charitycard);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(150:8) {#each cards as card}",
		ctx
	});

	return block;
}

// (172:8) {#each cards as card}
function create_each_block(ctx) {
	let li;
	let t;
	let current;
	const charitycard_spread_levels = [/*card*/ ctx[2]];
	let charitycard_props = {};

	for (let i = 0; i < charitycard_spread_levels.length; i += 1) {
		charitycard_props = assign(charitycard_props, charitycard_spread_levels[i]);
	}

	const charitycard = new CharityCard({ props: charitycard_props, $$inline: true });

	const block = {
		c: function create() {
			li = element("li");
			create_component(charitycard.$$.fragment);
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			claim_component(charitycard.$$.fragment, li_nodes);
			t = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(li, "class", "svelte-8mvppp");
			add_location(li, file, 172, 12, 4311);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			mount_component(charitycard, li, null);
			append_dev(li, t);
			current = true;
		},
		p: function update(ctx, dirty) {
			const charitycard_changes = (dirty & /*cards*/ 1)
			? get_spread_update(charitycard_spread_levels, [get_spread_object(/*card*/ ctx[2])])
			: {};

			charitycard.$set(charitycard_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(charitycard.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(charitycard.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			destroy_component(charitycard);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(172:8) {#each cards as card}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let h1;
	let t1;
	let span0;
	let t2;
	let t3;
	let h20;
	let t4;
	let span1;
	let t5;
	let t6;
	let h3;
	let t7;
	let span2;
	let t8;
	let t9;
	let h4;
	let t10;
	let span3;
	let t11;
	let t12;
	let h5;
	let t13;
	let span4;
	let t14;
	let t15;
	let h6;
	let t16;
	let span5;
	let t17;
	let t18;
	let section2;
	let section0;
	let div0;
	let t19;
	let t20;
	let t21;
	let section1;
	let t22;
	let t23;
	let br0;
	let t24;
	let br1;
	let t25;
	let t26;
	let br2;
	let t27;
	let br3;
	let t28;
	let br4;
	let t29;
	let div1;
	let t30;
	let h21;
	let t31;
	let t32;
	let t33;
	let br5;
	let t34;
	let ul0;
	let t35;
	let br6;
	let t36;
	let br7;
	let t37;
	let br8;
	let t38;
	let br9;
	let t39;
	let br10;
	let t40;
	let div2;
	let t41;
	let h22;
	let t42;
	let t43;
	let t44;
	let br11;
	let t45;
	let ul1;
	let t46;
	let br12;
	let t47;
	let br13;
	let t48;
	let br14;
	let t49;
	let br15;
	let current;

	const carousel = new Carousel({
			props: { images: /*images*/ ctx[1] },
			$$inline: true
		});

	const donatinggroup = new DonatingGroup({ $$inline: true });

	const progress = new Progress({
			props: { value: "65", size: "big" },
			$$inline: true
		});

	const avatarandname = new AvatarAndName({
			props: {
				src: "https://placeimg.com/300/300/people",
				title: "Tina Kandelaki",
				subTitle: "ORG charity charitify"
			},
			$$inline: true
		});

	const rate = new Rate({ $$inline: true });
	const titlesubtitle = new TitleSubTitle({ $$inline: true });
	const divider0 = new Divider({ props: { size: "16" }, $$inline: true });
	const divider1 = new Divider({ props: { size: "20" }, $$inline: true });
	let each_value_1 = /*cards*/ ctx[0];
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks_1[i], 1, 1, () => {
		each_blocks_1[i] = null;
	});

	const divider2 = new Divider({ props: { size: "16" }, $$inline: true });
	const divider3 = new Divider({ props: { size: "20" }, $$inline: true });
	let each_value = /*cards*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out_1 = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text("Main title 1");
			span0 = element("span");
			t2 = text("with text");
			t3 = space();
			h20 = element("h2");
			t4 = text("Main title 2");
			span1 = element("span");
			t5 = text("with text");
			t6 = space();
			h3 = element("h3");
			t7 = text("Main title 3");
			span2 = element("span");
			t8 = text("with text");
			t9 = space();
			h4 = element("h4");
			t10 = text("Main title 4");
			span3 = element("span");
			t11 = text("with text");
			t12 = space();
			h5 = element("h5");
			t13 = text("Main title 5");
			span4 = element("span");
			t14 = text("with text");
			t15 = space();
			h6 = element("h6");
			t16 = text("Main title 6");
			span5 = element("span");
			t17 = text("with text");
			t18 = space();
			section2 = element("section");
			section0 = element("section");
			div0 = element("div");
			create_component(carousel.$$.fragment);
			t19 = space();
			create_component(donatinggroup.$$.fragment);
			t20 = space();
			create_component(progress.$$.fragment);
			t21 = space();
			section1 = element("section");
			create_component(avatarandname.$$.fragment);
			t22 = space();
			create_component(rate.$$.fragment);
			t23 = space();
			br0 = element("br");
			t24 = space();
			br1 = element("br");
			t25 = space();
			create_component(titlesubtitle.$$.fragment);
			t26 = space();
			br2 = element("br");
			t27 = space();
			br3 = element("br");
			t28 = space();
			br4 = element("br");
			t29 = space();
			div1 = element("div");
			create_component(divider0.$$.fragment);
			t30 = space();
			h21 = element("h2");
			t31 = text("The nearest list:");
			t32 = space();
			create_component(divider1.$$.fragment);
			t33 = space();
			br5 = element("br");
			t34 = space();
			ul0 = element("ul");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t35 = space();
			br6 = element("br");
			t36 = space();
			br7 = element("br");
			t37 = space();
			br8 = element("br");
			t38 = space();
			br9 = element("br");
			t39 = space();
			br10 = element("br");
			t40 = space();
			div2 = element("div");
			create_component(divider2.$$.fragment);
			t41 = space();
			h22 = element("h2");
			t42 = text("The second list:");
			t43 = space();
			create_component(divider3.$$.fragment);
			t44 = space();
			br11 = element("br");
			t45 = space();
			ul1 = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t46 = space();
			br12 = element("br");
			t47 = space();
			br13 = element("br");
			t48 = space();
			br14 = element("br");
			t49 = space();
			br15 = element("br");
			this.h();
		},
		l: function claim(nodes) {
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Main title 1");
			h1_nodes.forEach(detach_dev);
			span0 = claim_element(nodes, "SPAN", {});
			var span0_nodes = children(span0);
			t2 = claim_text(span0_nodes, "with text");
			span0_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			h20 = claim_element(nodes, "H2", {});
			var h20_nodes = children(h20);
			t4 = claim_text(h20_nodes, "Main title 2");
			h20_nodes.forEach(detach_dev);
			span1 = claim_element(nodes, "SPAN", {});
			var span1_nodes = children(span1);
			t5 = claim_text(span1_nodes, "with text");
			span1_nodes.forEach(detach_dev);
			t6 = claim_space(nodes);
			h3 = claim_element(nodes, "H3", {});
			var h3_nodes = children(h3);
			t7 = claim_text(h3_nodes, "Main title 3");
			h3_nodes.forEach(detach_dev);
			span2 = claim_element(nodes, "SPAN", {});
			var span2_nodes = children(span2);
			t8 = claim_text(span2_nodes, "with text");
			span2_nodes.forEach(detach_dev);
			t9 = claim_space(nodes);
			h4 = claim_element(nodes, "H4", {});
			var h4_nodes = children(h4);
			t10 = claim_text(h4_nodes, "Main title 4");
			h4_nodes.forEach(detach_dev);
			span3 = claim_element(nodes, "SPAN", {});
			var span3_nodes = children(span3);
			t11 = claim_text(span3_nodes, "with text");
			span3_nodes.forEach(detach_dev);
			t12 = claim_space(nodes);
			h5 = claim_element(nodes, "H5", {});
			var h5_nodes = children(h5);
			t13 = claim_text(h5_nodes, "Main title 5");
			h5_nodes.forEach(detach_dev);
			span4 = claim_element(nodes, "SPAN", {});
			var span4_nodes = children(span4);
			t14 = claim_text(span4_nodes, "with text");
			span4_nodes.forEach(detach_dev);
			t15 = claim_space(nodes);
			h6 = claim_element(nodes, "H6", {});
			var h6_nodes = children(h6);
			t16 = claim_text(h6_nodes, "Main title 6");
			h6_nodes.forEach(detach_dev);
			span5 = claim_element(nodes, "SPAN", {});
			var span5_nodes = children(span5);
			t17 = claim_text(span5_nodes, "with text");
			span5_nodes.forEach(detach_dev);
			t18 = claim_space(nodes);
			section2 = claim_element(nodes, "SECTION", { class: true });
			var section2_nodes = children(section2);
			section0 = claim_element(section2_nodes, "SECTION", { class: true });
			var section0_nodes = children(section0);
			div0 = claim_element(section0_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(carousel.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t19 = claim_space(section0_nodes);
			claim_component(donatinggroup.$$.fragment, section0_nodes);
			section0_nodes.forEach(detach_dev);
			t20 = claim_space(section2_nodes);
			claim_component(progress.$$.fragment, section2_nodes);
			t21 = claim_space(section2_nodes);
			section1 = claim_element(section2_nodes, "SECTION", { class: true });
			var section1_nodes = children(section1);
			claim_component(avatarandname.$$.fragment, section1_nodes);
			t22 = claim_space(section1_nodes);
			claim_component(rate.$$.fragment, section1_nodes);
			section1_nodes.forEach(detach_dev);
			t23 = claim_space(section2_nodes);
			br0 = claim_element(section2_nodes, "BR", {});
			t24 = claim_space(section2_nodes);
			br1 = claim_element(section2_nodes, "BR", {});
			t25 = claim_space(section2_nodes);
			claim_component(titlesubtitle.$$.fragment, section2_nodes);
			section2_nodes.forEach(detach_dev);
			t26 = claim_space(nodes);
			br2 = claim_element(nodes, "BR", {});
			t27 = claim_space(nodes);
			br3 = claim_element(nodes, "BR", {});
			t28 = claim_space(nodes);
			br4 = claim_element(nodes, "BR", {});
			t29 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			claim_component(divider0.$$.fragment, div1_nodes);
			t30 = claim_space(div1_nodes);
			h21 = claim_element(div1_nodes, "H2", { style: true });
			var h21_nodes = children(h21);
			t31 = claim_text(h21_nodes, "The nearest list:");
			h21_nodes.forEach(detach_dev);
			t32 = claim_space(div1_nodes);
			claim_component(divider1.$$.fragment, div1_nodes);
			t33 = claim_space(div1_nodes);
			br5 = claim_element(div1_nodes, "BR", {});
			t34 = claim_space(div1_nodes);
			ul0 = claim_element(div1_nodes, "UL", { class: true });
			var ul0_nodes = children(ul0);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(ul0_nodes);
			}

			ul0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t35 = claim_space(nodes);
			br6 = claim_element(nodes, "BR", {});
			t36 = claim_space(nodes);
			br7 = claim_element(nodes, "BR", {});
			t37 = claim_space(nodes);
			br8 = claim_element(nodes, "BR", {});
			t38 = claim_space(nodes);
			br9 = claim_element(nodes, "BR", {});
			t39 = claim_space(nodes);
			br10 = claim_element(nodes, "BR", {});
			t40 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			claim_component(divider2.$$.fragment, div2_nodes);
			t41 = claim_space(div2_nodes);
			h22 = claim_element(div2_nodes, "H2", { style: true });
			var h22_nodes = children(h22);
			t42 = claim_text(h22_nodes, "The second list:");
			h22_nodes.forEach(detach_dev);
			t43 = claim_space(div2_nodes);
			claim_component(divider3.$$.fragment, div2_nodes);
			t44 = claim_space(div2_nodes);
			br11 = claim_element(div2_nodes, "BR", {});
			t45 = claim_space(div2_nodes);
			ul1 = claim_element(div2_nodes, "UL", { class: true });
			var ul1_nodes = children(ul1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul1_nodes);
			}

			ul1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t46 = claim_space(nodes);
			br12 = claim_element(nodes, "BR", {});
			t47 = claim_space(nodes);
			br13 = claim_element(nodes, "BR", {});
			t48 = claim_space(nodes);
			br14 = claim_element(nodes, "BR", {});
			t49 = claim_space(nodes);
			br15 = claim_element(nodes, "BR", {});
			this.h();
		},
		h: function hydrate() {
			document.title = "Charitify - is the application for helping those in need.";
			add_location(h1, file, 102, 0, 2967);
			add_location(span0, file, 102, 21, 2988);
			add_location(h20, file, 103, 0, 3011);
			add_location(span1, file, 103, 21, 3032);
			add_location(h3, file, 104, 0, 3055);
			add_location(span2, file, 104, 21, 3076);
			add_location(h4, file, 105, 0, 3099);
			add_location(span3, file, 105, 21, 3120);
			add_location(h5, file, 106, 0, 3143);
			add_location(span4, file, 106, 21, 3164);
			add_location(h6, file, 107, 0, 3187);
			add_location(span5, file, 107, 21, 3208);
			attr_dev(div0, "class", "pics-wrap svelte-8mvppp");
			add_location(div0, file, 112, 8, 3295);
			attr_dev(section0, "class", "top svelte-8mvppp");
			add_location(section0, file, 110, 4, 3264);
			attr_dev(section1, "class", "rate-section svelte-8mvppp");
			add_location(section1, file, 121, 4, 3462);
			add_location(br0, file, 131, 4, 3710);
			add_location(br1, file, 132, 4, 3719);
			attr_dev(section2, "class", "container");
			add_location(section2, file, 109, 0, 3232);
			add_location(br2, file, 137, 0, 3758);
			add_location(br3, file, 138, 0, 3763);
			add_location(br4, file, 139, 0, 3768);
			set_style(h21, "text-align", "right");
			add_location(h21, file, 143, 4, 3827);
			add_location(br5, file, 146, 4, 3910);
			attr_dev(ul0, "class", "cards svelte-8mvppp");
			add_location(ul0, file, 148, 4, 3920);
			attr_dev(div1, "class", "container");
			add_location(div1, file, 141, 0, 3774);
			add_location(br6, file, 157, 0, 4079);
			add_location(br7, file, 158, 0, 4084);
			add_location(br8, file, 159, 0, 4089);
			add_location(br9, file, 160, 0, 4094);
			add_location(br10, file, 161, 0, 4099);
			set_style(h22, "text-align", "right");
			add_location(h22, file, 165, 4, 4158);
			add_location(br11, file, 168, 4, 4240);
			attr_dev(ul1, "class", "cards svelte-8mvppp");
			add_location(ul1, file, 170, 4, 4250);
			attr_dev(div2, "class", "container");
			add_location(div2, file, 163, 0, 4105);
			add_location(br12, file, 179, 0, 4409);
			add_location(br13, file, 180, 0, 4414);
			add_location(br14, file, 181, 0, 4419);
			add_location(br15, file, 182, 0, 4424);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, span0, anchor);
			append_dev(span0, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, h20, anchor);
			append_dev(h20, t4);
			insert_dev(target, span1, anchor);
			append_dev(span1, t5);
			insert_dev(target, t6, anchor);
			insert_dev(target, h3, anchor);
			append_dev(h3, t7);
			insert_dev(target, span2, anchor);
			append_dev(span2, t8);
			insert_dev(target, t9, anchor);
			insert_dev(target, h4, anchor);
			append_dev(h4, t10);
			insert_dev(target, span3, anchor);
			append_dev(span3, t11);
			insert_dev(target, t12, anchor);
			insert_dev(target, h5, anchor);
			append_dev(h5, t13);
			insert_dev(target, span4, anchor);
			append_dev(span4, t14);
			insert_dev(target, t15, anchor);
			insert_dev(target, h6, anchor);
			append_dev(h6, t16);
			insert_dev(target, span5, anchor);
			append_dev(span5, t17);
			insert_dev(target, t18, anchor);
			insert_dev(target, section2, anchor);
			append_dev(section2, section0);
			append_dev(section0, div0);
			mount_component(carousel, div0, null);
			append_dev(section0, t19);
			mount_component(donatinggroup, section0, null);
			append_dev(section2, t20);
			mount_component(progress, section2, null);
			append_dev(section2, t21);
			append_dev(section2, section1);
			mount_component(avatarandname, section1, null);
			append_dev(section1, t22);
			mount_component(rate, section1, null);
			append_dev(section2, t23);
			append_dev(section2, br0);
			append_dev(section2, t24);
			append_dev(section2, br1);
			append_dev(section2, t25);
			mount_component(titlesubtitle, section2, null);
			insert_dev(target, t26, anchor);
			insert_dev(target, br2, anchor);
			insert_dev(target, t27, anchor);
			insert_dev(target, br3, anchor);
			insert_dev(target, t28, anchor);
			insert_dev(target, br4, anchor);
			insert_dev(target, t29, anchor);
			insert_dev(target, div1, anchor);
			mount_component(divider0, div1, null);
			append_dev(div1, t30);
			append_dev(div1, h21);
			append_dev(h21, t31);
			append_dev(div1, t32);
			mount_component(divider1, div1, null);
			append_dev(div1, t33);
			append_dev(div1, br5);
			append_dev(div1, t34);
			append_dev(div1, ul0);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(ul0, null);
			}

			insert_dev(target, t35, anchor);
			insert_dev(target, br6, anchor);
			insert_dev(target, t36, anchor);
			insert_dev(target, br7, anchor);
			insert_dev(target, t37, anchor);
			insert_dev(target, br8, anchor);
			insert_dev(target, t38, anchor);
			insert_dev(target, br9, anchor);
			insert_dev(target, t39, anchor);
			insert_dev(target, br10, anchor);
			insert_dev(target, t40, anchor);
			insert_dev(target, div2, anchor);
			mount_component(divider2, div2, null);
			append_dev(div2, t41);
			append_dev(div2, h22);
			append_dev(h22, t42);
			append_dev(div2, t43);
			mount_component(divider3, div2, null);
			append_dev(div2, t44);
			append_dev(div2, br11);
			append_dev(div2, t45);
			append_dev(div2, ul1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul1, null);
			}

			insert_dev(target, t46, anchor);
			insert_dev(target, br12, anchor);
			insert_dev(target, t47, anchor);
			insert_dev(target, br13, anchor);
			insert_dev(target, t48, anchor);
			insert_dev(target, br14, anchor);
			insert_dev(target, t49, anchor);
			insert_dev(target, br15, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*cards*/ 1) {
				each_value_1 = /*cards*/ ctx[0];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
						transition_in(each_blocks_1[i], 1);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						transition_in(each_blocks_1[i], 1);
						each_blocks_1[i].m(ul0, null);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks_1.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (dirty & /*cards*/ 1) {
				each_value = /*cards*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(ul1, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out_1(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(carousel.$$.fragment, local);
			transition_in(donatinggroup.$$.fragment, local);
			transition_in(progress.$$.fragment, local);
			transition_in(avatarandname.$$.fragment, local);
			transition_in(rate.$$.fragment, local);
			transition_in(titlesubtitle.$$.fragment, local);
			transition_in(divider0.$$.fragment, local);
			transition_in(divider1.$$.fragment, local);

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks_1[i]);
			}

			transition_in(divider2.$$.fragment, local);
			transition_in(divider3.$$.fragment, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(carousel.$$.fragment, local);
			transition_out(donatinggroup.$$.fragment, local);
			transition_out(progress.$$.fragment, local);
			transition_out(avatarandname.$$.fragment, local);
			transition_out(rate.$$.fragment, local);
			transition_out(titlesubtitle.$$.fragment, local);
			transition_out(divider0.$$.fragment, local);
			transition_out(divider1.$$.fragment, local);
			each_blocks_1 = each_blocks_1.filter(Boolean);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				transition_out(each_blocks_1[i]);
			}

			transition_out(divider2.$$.fragment, local);
			transition_out(divider3.$$.fragment, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(span0);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(h20);
			if (detaching) detach_dev(span1);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(h3);
			if (detaching) detach_dev(span2);
			if (detaching) detach_dev(t9);
			if (detaching) detach_dev(h4);
			if (detaching) detach_dev(span3);
			if (detaching) detach_dev(t12);
			if (detaching) detach_dev(h5);
			if (detaching) detach_dev(span4);
			if (detaching) detach_dev(t15);
			if (detaching) detach_dev(h6);
			if (detaching) detach_dev(span5);
			if (detaching) detach_dev(t18);
			if (detaching) detach_dev(section2);
			destroy_component(carousel);
			destroy_component(donatinggroup);
			destroy_component(progress);
			destroy_component(avatarandname);
			destroy_component(rate);
			destroy_component(titlesubtitle);
			if (detaching) detach_dev(t26);
			if (detaching) detach_dev(br2);
			if (detaching) detach_dev(t27);
			if (detaching) detach_dev(br3);
			if (detaching) detach_dev(t28);
			if (detaching) detach_dev(br4);
			if (detaching) detach_dev(t29);
			if (detaching) detach_dev(div1);
			destroy_component(divider0);
			destroy_component(divider1);
			destroy_each(each_blocks_1, detaching);
			if (detaching) detach_dev(t35);
			if (detaching) detach_dev(br6);
			if (detaching) detach_dev(t36);
			if (detaching) detach_dev(br7);
			if (detaching) detach_dev(t37);
			if (detaching) detach_dev(br8);
			if (detaching) detach_dev(t38);
			if (detaching) detach_dev(br9);
			if (detaching) detach_dev(t39);
			if (detaching) detach_dev(br10);
			if (detaching) detach_dev(t40);
			if (detaching) detach_dev(div2);
			destroy_component(divider2);
			destroy_component(divider3);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t46);
			if (detaching) detach_dev(br12);
			if (detaching) detach_dev(t47);
			if (detaching) detach_dev(br13);
			if (detaching) detach_dev(t48);
			if (detaching) detach_dev(br14);
			if (detaching) detach_dev(t49);
			if (detaching) detach_dev(br15);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self) {
	const cards = [
		{
			src: "https://placeimg.com/300/300/tech",
			title: "The main title and short description.",
			percent: 45,
			orgHead: "Tina Kandelaki",
			orgHeadSrc: "https://placeimg.com/300/300/people",
			organization: "ORG charity of Charitify."
		},
		{
			src: "https://placeimg.com/300/300/arch",
			title: "Second bigger major card title line with a bit longer description.",
			percent: 65,
			orgHead: "Tina Kandelaki",
			orgHeadSrc: "https://placeimg.com/300/300/people",
			organization: "ORG charity of Charitify."
		},
		{
			src: "https://placeimg.com/300/300/any",
			title: "The main title and short description.",
			percent: 5,
			orgHead: "Tinaramisimuss Kandelakinuskas",
			orgHeadSrc: "https://placeimg.com/300/300/people",
			organization: "ORG charity of Charitify."
		},
		{
			src: "https://placeimg.com/300/300/nature",
			title: "The main title and short description.",
			percent: 95,
			orgHead: "Tina Kandelaki",
			orgHeadSrc: "https://placeimg.com/300/300/people",
			organization: "ORG giant charity organization of big Charitify company."
		}
	];

	const images = cards.map(card => ({
		src: [card.src, card.src, card.src],
		alt: card.title
	}));

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		
	};

	return [cards, images];
}

class List extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "List",
			options,
			id: create_fragment.name
		});
	}
}

export default List;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
