import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, V as onMount, m as create_slot, u as get_slot_context, v as get_slot_changes, w as transition_in, x as transition_out, p as space, e as element, r as claim_space, c as claim_element, b as children, f as detach_dev, g as attr_dev, h as add_location, k as insert_dev, J as check_outros, X as binding_callbacks, z as globals, I as group_outros } from './index.5da15d85.js';

/* src/routes/map.svelte generated by Svelte v3.16.7 */

const { document: document_1 } = globals;
const file = "src/routes/map.svelte";

// (65:4) {#if map}
function create_if_block(ctx) {
	let current;
	const default_slot_template = /*$$slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		l: function claim(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot && default_slot.p && dirty & /*$$scope*/ 4) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[2], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null));
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(65:4) {#if map}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t;
	let section;
	let current;
	let if_block = /*map*/ ctx[0] && create_if_block(ctx);

	const block = {
		c: function create() {
			t = space();
			section = element("section");
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			t = claim_space(nodes);
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			if (if_block) if_block.l(section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document_1.title = "Charitify - Map of organizations.";
			attr_dev(section, "class", "svelte-1tw6as9");
			add_location(section, file, 63, 0, 1768);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			insert_dev(target, section, anchor);
			if (if_block) if_block.m(section, null);
			/*section_binding*/ ctx[4](section);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*map*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(section, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(section);
			if (if_block) if_block.d();
			/*section_binding*/ ctx[4](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let map;
	let container;

	onMount(async () => {
		const scriptTag = document.createElement("script");
		scriptTag.type = "text/javascript";
		scriptTag.src = "https://api.mapbox.com/mapbox-gl-js/v1.7.0/mapbox-gl.js";
		const link = document.createElement("link");
		link.rel = "stylesheet";
		link.href = "https://api.mapbox.com/mapbox-gl-js/v1.7.0/mapbox-gl.css";

		scriptTag.onload = () => {
			const token = "pk.eyJ1IjoiYnVibGlrIiwiYSI6ImNrNXpxdzgxbTAwNnczbGxweG0wcTV3cjAifQ.rt1peLjCQHZUkrM4AWz5Mw";
			mapboxgl.accessToken = token;

			link.onload = () => {
				$$invalidate(0, map = new mapboxgl.Map({
						container,
						style: "mapbox://styles/mapbox/streets-v11"
					}));

				for (let i = 0; i < 100; i += 1) {
					const lng = Math.random() * 360 - 180;
					const lat = Math.random() * 180 - 90;
					new mapboxgl.Marker().setLngLat([lng, lat]).addTo(map);
				}
			};

			document.head.appendChild(link);
		};

		document.body.appendChild(scriptTag);

		return () => {
			map.remove();
			link.parentNode.removeChild(link);
			scriptTag.parentNode.removeChild(scriptTag);
		};
	});

	let { $$slots = {}, $$scope } = $$props;

	function section_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			$$invalidate(1, container = $$value);
		});
	}

	$$self.$set = $$props => {
		if ("$$scope" in $$props) $$invalidate(2, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("map" in $$props) $$invalidate(0, map = $$props.map);
		if ("container" in $$props) $$invalidate(1, container = $$props.container);
	};

	return [map, container, $$scope, $$slots, section_binding];
}

class Map extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Map",
			options,
			id: create_fragment.name
		});
	}
}

export default Map;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLmVjN2JjNzQ3LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcm91dGVzL21hcC5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHN2ZWx0ZTpoZWFkPlxuICAgIDx0aXRsZT5DaGFyaXRpZnkgLSBNYXAgb2Ygb3JnYW5pemF0aW9ucy48L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cblxuPHN0eWxlPlxuICAgIHNlY3Rpb24ge1xuICAgICAgICBmbGV4LWdyb3c6IDE7XG4gICAgfVxuPC9zdHlsZT5cblxuPHNjcmlwdD5cbiAgICBpbXBvcnQgeyBvbk1vdW50IH0gZnJvbSAnc3ZlbHRlJ1xuXG4gICAgbGV0IG1hcFxuICAgIGxldCBjb250YWluZXJcblxuICAgIC8vIFNlZSBleGFtcGxlOiBodHRwczovL2dpdGh1Yi5jb20vY2NkLWFkYy1kZXYvc2FwcGVyLW1hcGJveC90cmVlL21hc3Rlci9zcmMvY29tcG9uZW50cy9tYXBcblxuICAgIG9uTW91bnQoYXN5bmMgKCkgPT4ge1xuICAgICAgICAvLyBjb25zdCB7IGRlZmF1bHQ6IG1hcGJveGdsIH0gPSBhd2FpdCBpbXBvcnQoJ21hcGJveC1nbCcpXG5cbiAgICAgICAgY29uc3Qgc2NyaXB0VGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JylcbiAgICAgICAgc2NyaXB0VGFnLnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0J1xuICAgICAgICBzY3JpcHRUYWcuc3JjID0gJ2h0dHBzOi8vYXBpLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL3YxLjcuMC9tYXBib3gtZ2wuanMnXG5cbiAgICAgICAgY29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcbiAgICAgICAgbGluay5yZWwgPSAnc3R5bGVzaGVldCc7XG4gICAgICAgIGxpbmsuaHJlZiA9ICdodHRwczovL2FwaS5tYXBib3guY29tL21hcGJveC1nbC1qcy92MS43LjAvbWFwYm94LWdsLmNzcyc7XG5cbiAgICAgICAgc2NyaXB0VGFnLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRva2VuID0gJ3BrLmV5SjFJam9pWW5WaWJHbHJJaXdpWVNJNkltTnJOWHB4ZHpneGJUQXdObmN6Ykd4d2VHMHdjVFYzY2pBaWZRLnJ0MXBlTGpDUUhaVWtyTTRBV3o1TXcnXG5cbiAgICAgICAgICAgIG1hcGJveGdsLmFjY2Vzc1Rva2VuID0gdG9rZW5cblxuICAgICAgICAgICAgbGluay5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbWFwID0gbmV3IG1hcGJveGdsLk1hcCh7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6ICdtYXBib3g6Ly9zdHlsZXMvbWFwYm94L3N0cmVldHMtdjExJyxcbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDA7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsbmcgPSBNYXRoLnJhbmRvbSgpICogMzYwIC0gMTgwXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhdCA9IE1hdGgucmFuZG9tKCkgKiAxODAgLSA5MFxuXG4gICAgICAgICAgICAgICAgICAgIG5ldyBtYXBib3hnbC5NYXJrZXIoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRMbmdMYXQoW2xuZywgbGF0XSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkVG8obWFwKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChsaW5rKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0VGFnKTtcblxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgbWFwLnJlbW92ZSgpO1xuICAgICAgICAgICAgbGluay5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGxpbmspO1xuICAgICAgICAgICAgc2NyaXB0VGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0VGFnKTtcbiAgICAgICAgfTtcbiAgICB9KVxuPC9zY3JpcHQ+XG5cbjxzZWN0aW9uIGJpbmQ6dGhpcz17Y29udGFpbmVyfT5cbiAgICB7I2lmIG1hcH1cbiAgICAgICAgPHNsb3Q+PC9zbG90PlxuICAgIHsvaWZ9XG48L3NlY3Rpb24+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FHUSxHQUFHO0tBQ0gsU0FBUzs7Q0FJYixPQUFPO1FBR0csU0FBUyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUTtFQUNqRCxTQUFTLENBQUMsSUFBSSxHQUFHLGlCQUFpQjtFQUNsQyxTQUFTLENBQUMsR0FBRyxHQUFHLHlEQUF5RDtRQUVuRSxJQUFJLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNO0VBQzFDLElBQUksQ0FBQyxHQUFHLEdBQUcsWUFBWTtFQUN2QixJQUFJLENBQUMsSUFBSSxHQUFHLDBEQUEwRDs7RUFFdEUsU0FBUyxDQUFDLE1BQU07U0FDTixLQUFLLEdBQUcsMEZBQTBGO0dBRXhHLFFBQVEsQ0FBQyxXQUFXLEdBQUcsS0FBSzs7R0FFNUIsSUFBSSxDQUFDLE1BQU07b0JBQ1AsR0FBRyxPQUFPLFFBQVEsQ0FBQyxHQUFHO01BQ2xCLFNBQVM7TUFDVCxLQUFLLEVBQUUsb0NBQW9DOzs7YUFHdEMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDO1dBQ3JCLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxLQUFLLEdBQUcsR0FBRyxHQUFHO1dBQy9CLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxLQUFLLEdBQUcsR0FBRyxFQUFFO1NBRWhDLFFBQVEsQ0FBQyxNQUFNLEdBQ1YsU0FBUyxFQUFFLEdBQUcsRUFBRSxHQUFHLEdBQ25CLEtBQUssQ0FBQyxHQUFHOzs7O0dBSTFCLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUk7OztFQUdsQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTOzs7R0FHL0IsR0FBRyxDQUFDLE1BQU07R0FDVixJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxJQUFJO0dBQ2hDLFNBQVMsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLFNBQVM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
