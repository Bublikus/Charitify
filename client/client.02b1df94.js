function noop() { }
const identity = x => x;
function assign(tar, src) {
    // @ts-ignore
    for (const k in src)
        tar[k] = src[k];
    return tar;
}
function add_location(element, file, line, column, char) {
    element.__svelte_meta = {
        loc: { file, line, column, char }
    };
}
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function validate_store(store, name) {
    if (store != null && typeof store.subscribe !== 'function') {
        throw new Error(`'${name}' is not a store with a 'subscribe' method`);
    }
}
function subscribe(store, ...callbacks) {
    if (store == null) {
        return noop;
    }
    const unsub = store.subscribe(...callbacks);
    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function get_store_value(store) {
    let value;
    subscribe(store, _ => value = _)();
    return value;
}
function component_subscribe(component, store, callback) {
    component.$$.on_destroy.push(subscribe(store, callback));
}
function create_slot(definition, ctx, $$scope, fn) {
    if (definition) {
        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
        return definition[0](slot_ctx);
    }
}
function get_slot_context(definition, ctx, $$scope, fn) {
    return definition[1] && fn
        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
        : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
    if (definition[2] && fn) {
        const lets = definition[2](fn(dirty));
        if ($$scope.dirty === undefined) {
            return lets;
        }
        if (typeof lets === 'object') {
            const merged = [];
            const len = Math.max($$scope.dirty.length, lets.length);
            for (let i = 0; i < len; i += 1) {
                merged[i] = $$scope.dirty[i] | lets[i];
            }
            return merged;
        }
        return $$scope.dirty | lets;
    }
    return $$scope.dirty;
}
function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
    if (slot_changes) {
        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
        slot.p(slot_context, slot_changes);
    }
}
function exclude_internal_props(props) {
    const result = {};
    for (const k in props)
        if (k[0] !== '$')
            result[k] = props[k];
    return result;
}
function null_to_empty(value) {
    return value == null ? '' : value;
}
const has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);
function action_destroyer(action_result) {
    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
}

const is_client = typeof window !== 'undefined';
let now = is_client
    ? () => window.performance.now()
    : () => Date.now();
let raf = is_client ? cb => requestAnimationFrame(cb) : noop;

const tasks = new Set();
function run_tasks(now) {
    tasks.forEach(task => {
        if (!task.c(now)) {
            tasks.delete(task);
            task.f();
        }
    });
    if (tasks.size !== 0)
        raf(run_tasks);
}
/**
 * Creates a new task that runs on each raf frame
 * until it returns a falsy value or is aborted
 */
function loop(callback) {
    let task;
    if (tasks.size === 0)
        raf(run_tasks);
    return {
        promise: new Promise(fulfill => {
            tasks.add(task = { c: callback, f: fulfill });
        }),
        abort() {
            tasks.delete(task);
        }
    };
}

function append(target, node) {
    target.appendChild(node);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
    for (let i = 0; i < iterations.length; i += 1) {
        if (iterations[i])
            iterations[i].d(detaching);
    }
}
function element(name) {
    return document.createElement(name);
}
function object_without_properties(obj, exclude) {
    const target = {};
    for (const k in obj) {
        if (has_prop(obj, k)
            // @ts-ignore
            && exclude.indexOf(k) === -1) {
            // @ts-ignore
            target[k] = obj[k];
        }
    }
    return target;
}
function svg_element(name) {
    return document.createElementNS('http://www.w3.org/2000/svg', name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function empty() {
    return text('');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function prevent_default(fn) {
    return function (event) {
        event.preventDefault();
        // @ts-ignore
        return fn.call(this, event);
    };
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function set_attributes(node, attributes) {
    // @ts-ignore
    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);
    for (const key in attributes) {
        if (attributes[key] == null) {
            node.removeAttribute(key);
        }
        else if (key === 'style') {
            node.style.cssText = attributes[key];
        }
        else if (key === '__value') {
            node.value = node[key] = attributes[key];
        }
        else if (descriptors[key] && descriptors[key].set) {
            node[key] = attributes[key];
        }
        else {
            attr(node, key, attributes[key]);
        }
    }
}
function children(element) {
    return Array.from(element.childNodes);
}
function claim_element(nodes, name, attributes, svg) {
    for (let i = 0; i < nodes.length; i += 1) {
        const node = nodes[i];
        if (node.nodeName === name) {
            let j = 0;
            const remove = [];
            while (j < node.attributes.length) {
                const attribute = node.attributes[j++];
                if (!attributes[attribute.name]) {
                    remove.push(attribute.name);
                }
            }
            for (let k = 0; k < remove.length; k++) {
                node.removeAttribute(remove[k]);
            }
            return nodes.splice(i, 1)[0];
        }
    }
    return svg ? svg_element(name) : element(name);
}
function claim_text(nodes, data) {
    for (let i = 0; i < nodes.length; i += 1) {
        const node = nodes[i];
        if (node.nodeType === 3) {
            node.data = '' + data;
            return nodes.splice(i, 1)[0];
        }
    }
    return text(data);
}
function claim_space(nodes) {
    return claim_text(nodes, ' ');
}
function set_input_value(input, value) {
    input.value = value == null ? '' : value;
}
function set_style(node, key, value, important) {
    node.style.setProperty(key, value, important ? 'important' : '');
}
function select_option(select, value) {
    for (let i = 0; i < select.options.length; i += 1) {
        const option = select.options[i];
        if (option.__value === value) {
            option.selected = true;
            return;
        }
    }
}
function select_value(select) {
    const selected_option = select.querySelector(':checked') || select.options[0];
    return selected_option && selected_option.__value;
}
function toggle_class(element, name, toggle) {
    element.classList[toggle ? 'add' : 'remove'](name);
}
function custom_event(type, detail) {
    const e = document.createEvent('CustomEvent');
    e.initCustomEvent(type, false, false, detail);
    return e;
}
function query_selector_all(selector, parent = document.body) {
    return Array.from(parent.querySelectorAll(selector));
}

const active_docs = new Set();
let active = 0;
// https://github.com/darkskyapp/string-hash/blob/master/index.js
function hash(str) {
    let hash = 5381;
    let i = str.length;
    while (i--)
        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
    return hash >>> 0;
}
function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
    const step = 16.666 / duration;
    let keyframes = '{\n';
    for (let p = 0; p <= 1; p += step) {
        const t = a + (b - a) * ease(p);
        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
    }
    const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
    const name = `__svelte_${hash(rule)}_${uid}`;
    const doc = node.ownerDocument;
    active_docs.add(doc);
    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);
    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});
    if (!current_rules[name]) {
        current_rules[name] = true;
        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
    }
    const animation = node.style.animation || '';
    node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;
    active += 1;
    return name;
}
function delete_rule(node, name) {
    const previous = (node.style.animation || '').split(', ');
    const next = previous.filter(name
        ? anim => anim.indexOf(name) < 0 // remove specific animation
        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
    );
    const deleted = previous.length - next.length;
    if (deleted) {
        node.style.animation = next.join(', ');
        active -= deleted;
        if (!active)
            clear_rules();
    }
}
function clear_rules() {
    raf(() => {
        if (active)
            return;
        active_docs.forEach(doc => {
            const stylesheet = doc.__svelte_stylesheet;
            let i = stylesheet.cssRules.length;
            while (i--)
                stylesheet.deleteRule(i);
            doc.__svelte_rules = {};
        });
        active_docs.clear();
    });
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error(`Function called outside component initialization`);
    return current_component;
}
function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
}
function afterUpdate(fn) {
    get_current_component().$$.after_update.push(fn);
}
function onDestroy(fn) {
    get_current_component().$$.on_destroy.push(fn);
}
function createEventDispatcher() {
    const component = get_current_component();
    return (type, detail) => {
        const callbacks = component.$$.callbacks[type];
        if (callbacks) {
            // TODO are there situations where events could be dispatched
            // in a server (non-DOM) environment?
            const event = custom_event(type, detail);
            callbacks.slice().forEach(fn => {
                fn.call(component, event);
            });
        }
    };
}
function setContext(key, context) {
    get_current_component().$$.context.set(key, context);
}
function getContext(key) {
    return get_current_component().$$.context.get(key);
}
// TODO figure out if we still want to support
// shorthand events, or if we want to implement
// a real bubbling mechanism
function bubble(component, event) {
    const callbacks = component.$$.callbacks[event.type];
    if (callbacks) {
        callbacks.slice().forEach(fn => fn(event));
    }
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function tick() {
    schedule_update();
    return resolved_promise;
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
function add_flush_callback(fn) {
    flush_callbacks.push(fn);
}
let flushing = false;
const seen_callbacks = new Set();
function flush() {
    if (flushing)
        return;
    flushing = true;
    do {
        // first, call beforeUpdate functions
        // and update components
        for (let i = 0; i < dirty_components.length; i += 1) {
            const component = dirty_components[i];
            set_current_component(component);
            update(component.$$);
        }
        dirty_components.length = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    flushing = false;
    seen_callbacks.clear();
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}

let promise;
function wait() {
    if (!promise) {
        promise = Promise.resolve();
        promise.then(() => {
            promise = null;
        });
    }
    return promise;
}
function dispatch(node, direction, kind) {
    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
}
const outroing = new Set();
let outros;
function group_outros() {
    outros = {
        r: 0,
        c: [],
        p: outros // parent group
    };
}
function check_outros() {
    if (!outros.r) {
        run_all(outros.c);
    }
    outros = outros.p;
}
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
}
const null_transition = { duration: 0 };
function create_in_transition(node, fn, params) {
    let config = fn(node, params);
    let running = false;
    let animation_name;
    let task;
    let uid = 0;
    function cleanup() {
        if (animation_name)
            delete_rule(node, animation_name);
    }
    function go() {
        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
        if (css)
            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
        tick(0, 1);
        const start_time = now() + delay;
        const end_time = start_time + duration;
        if (task)
            task.abort();
        running = true;
        add_render_callback(() => dispatch(node, true, 'start'));
        task = loop(now => {
            if (running) {
                if (now >= end_time) {
                    tick(1, 0);
                    dispatch(node, true, 'end');
                    cleanup();
                    return running = false;
                }
                if (now >= start_time) {
                    const t = easing((now - start_time) / duration);
                    tick(t, 1 - t);
                }
            }
            return running;
        });
    }
    let started = false;
    return {
        start() {
            if (started)
                return;
            delete_rule(node);
            if (is_function(config)) {
                config = config();
                wait().then(go);
            }
            else {
                go();
            }
        },
        invalidate() {
            started = false;
        },
        end() {
            if (running) {
                cleanup();
                running = false;
            }
        }
    };
}

const globals = (typeof window !== 'undefined'
    ? window
    : typeof globalThis !== 'undefined'
        ? globalThis
        : global);

function get_spread_update(levels, updates) {
    const update = {};
    const to_null_out = {};
    const accounted_for = { $$scope: 1 };
    let i = levels.length;
    while (i--) {
        const o = levels[i];
        const n = updates[i];
        if (n) {
            for (const key in o) {
                if (!(key in n))
                    to_null_out[key] = 1;
            }
            for (const key in n) {
                if (!accounted_for[key]) {
                    update[key] = n[key];
                    accounted_for[key] = 1;
                }
            }
            levels[i] = n;
        }
        else {
            for (const key in o) {
                accounted_for[key] = 1;
            }
        }
    }
    for (const key in to_null_out) {
        if (!(key in update))
            update[key] = undefined;
    }
    return update;
}
function get_spread_object(spread_props) {
    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
}

function bind(component, name, callback) {
    const index = component.$$.props[name];
    if (index !== undefined) {
        component.$$.bound[index] = callback;
        callback(component.$$.ctx[index]);
    }
}
function create_component(block) {
    block && block.c();
}
function claim_component(block, parent_nodes) {
    block && block.l(parent_nodes);
}
function mount_component(component, target, anchor) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    // onMount happens before the initial afterUpdate
    add_render_callback(() => {
        const new_on_destroy = on_mount.map(run).filter(is_function);
        if (on_destroy) {
            on_destroy.push(...new_on_destroy);
        }
        else {
            // Edge case - component was destroyed immediately,
            // most likely as a result of a binding initialising
            run_all(new_on_destroy);
        }
        component.$$.on_mount = [];
    });
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const prop_values = options.props || {};
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : []),
        // everything else
        callbacks: blank_object(),
        dirty
    };
    let ready = false;
    $$.ctx = instance
        ? instance(component, prop_values, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if ($$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor);
        flush();
    }
    set_current_component(parent_component);
}
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set() {
        // overridden by instance, if it has props
    }
}

function dispatch_dev(type, detail) {
    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.24.0' }, detail)));
}
function append_dev(target, node) {
    dispatch_dev("SvelteDOMInsert", { target, node });
    append(target, node);
}
function insert_dev(target, node, anchor) {
    dispatch_dev("SvelteDOMInsert", { target, node, anchor });
    insert(target, node, anchor);
}
function detach_dev(node) {
    dispatch_dev("SvelteDOMRemove", { node });
    detach(node);
}
function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
    const modifiers = options === true ? ["capture"] : options ? Array.from(Object.keys(options)) : [];
    if (has_prevent_default)
        modifiers.push('preventDefault');
    if (has_stop_propagation)
        modifiers.push('stopPropagation');
    dispatch_dev("SvelteDOMAddEventListener", { node, event, handler, modifiers });
    const dispose = listen(node, event, handler, options);
    return () => {
        dispatch_dev("SvelteDOMRemoveEventListener", { node, event, handler, modifiers });
        dispose();
    };
}
function attr_dev(node, attribute, value) {
    attr(node, attribute, value);
    if (value == null)
        dispatch_dev("SvelteDOMRemoveAttribute", { node, attribute });
    else
        dispatch_dev("SvelteDOMSetAttribute", { node, attribute, value });
}
function prop_dev(node, property, value) {
    node[property] = value;
    dispatch_dev("SvelteDOMSetProperty", { node, property, value });
}
function set_data_dev(text, data) {
    data = '' + data;
    if (text.wholeText === data)
        return;
    dispatch_dev("SvelteDOMSetData", { node: text, data });
    text.data = data;
}
function validate_each_argument(arg) {
    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
        let msg = '{#each} only iterates over array-like objects.';
        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
            msg += ' You can use a spread to convert this iterable into an array.';
        }
        throw new Error(msg);
    }
}
function validate_slots(name, slot, keys) {
    for (const slot_key of Object.keys(slot)) {
        if (!~keys.indexOf(slot_key)) {
            console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
        }
    }
}
class SvelteComponentDev extends SvelteComponent {
    constructor(options) {
        if (!options || (!options.target && !options.$$inline)) {
            throw new Error(`'target' is a required option`);
        }
        super();
    }
    $destroy() {
        super.$destroy();
        this.$destroy = () => {
            console.warn(`Component was already destroyed`); // eslint-disable-line no-console
        };
    }
    $capture_state() { }
    $inject_state() { }
}

const subscriber_queue = [];
/**
 * Create a `Writable` store that allows both updating and reading by subscription.
 * @param {*=}value initial value
 * @param {StartStopNotifier=}start start and stop notifications for subscriptions
 */
function writable(value, start = noop) {
    let stop;
    const subscribers = [];
    function set(new_value) {
        if (safe_not_equal(value, new_value)) {
            value = new_value;
            if (stop) { // store is ready
                const run_queue = !subscriber_queue.length;
                for (let i = 0; i < subscribers.length; i += 1) {
                    const s = subscribers[i];
                    s[1]();
                    subscriber_queue.push(s, value);
                }
                if (run_queue) {
                    for (let i = 0; i < subscriber_queue.length; i += 2) {
                        subscriber_queue[i][0](subscriber_queue[i + 1]);
                    }
                    subscriber_queue.length = 0;
                }
            }
        }
    }
    function update(fn) {
        set(fn(value));
    }
    function subscribe(run, invalidate = noop) {
        const subscriber = [run, invalidate];
        subscribers.push(subscriber);
        if (subscribers.length === 1) {
            stop = start(set) || noop;
        }
        run(value);
        return () => {
            const index = subscribers.indexOf(subscriber);
            if (index !== -1) {
                subscribers.splice(index, 1);
            }
            if (subscribers.length === 0) {
                stop();
                stop = null;
            }
        };
    }
    return { set, update, subscribe };
}

const CONTEXT_KEY = {};

const preload = () => ({});

/* src/components/Br.svelte generated by Svelte v3.24.0 */

const file = "src/components/Br.svelte";

function add_css() {
	var style = element("style");
	style.id = "svelte-1wzhmg3-style";
	style.textContent = "br{display:block;height:0;content:\"\\00a0\";-webkit-box-sizing:content-box;box-sizing:content-box}br.tiny{margin-top:calc(1em * 0.29)}br.small{margin-top:calc(1em * 0.57)}br.medium,br{margin-top:calc(1em * 1.14)}br.big{margin-top:calc(1em * 2.28)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnIuc3ZlbHRlIiwic291cmNlcyI6WyJCci5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgZXhwb3J0IGxldCBzaXplID0gJzFlbSc7XG5cbiAgJDogZm9yYW10dGVkU2l6ZSA9IE51bWJlci5pc0Zpbml0ZSgrc2l6ZSkgPyBgJHtzaXplfXB4YCA6IHR5cGVvZiBzaXplID09PSAnc3RyaW5nJyA/IHNpemUgOiBudWxsXG48L3NjcmlwdD5cblxuPGRpdiBjbGFzcz1cIm92ZXJmbG93LWhpZGRlblwiPlxuICA8YnIgc3R5bGU9e2BtYXJnaW4tdG9wOiAke2ZvcmFtdHRlZFNpemV9YH0gY2xhc3M9eyQkcHJvcHMuY2xhc3N9Lz5cbjwvZGl2PlxuXG48c3R5bGU+XG46Z2xvYmFsKGJyKSB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBoZWlnaHQ6IDA7XG4gIGNvbnRlbnQ6IFwiXFwwMGEwXCI7XG4gIC13ZWJraXQtYm94LXNpemluZzogY29udGVudC1ib3g7XG4gICAgICAgICAgYm94LXNpemluZzogY29udGVudC1ib3g7XG59XG5cbjpnbG9iYWwoYnIudGlueSkge1xuICBtYXJnaW4tdG9wOiBjYWxjKDFlbSAqIDAuMjkpOyAvKiA0cHggKi9cbn1cblxuOmdsb2JhbChici5zbWFsbCkge1xuICBtYXJnaW4tdG9wOiBjYWxjKDFlbSAqIDAuNTcpOyAvKiA4cHggKi9cbn1cblxuOmdsb2JhbChici5tZWRpdW0pLFxuOmdsb2JhbChicikge1xuICBtYXJnaW4tdG9wOiBjYWxjKDFlbSAqIDEuMTQpOyAvKiAxNnB4ICovXG59XG5cbjpnbG9iYWwoYnIuYmlnKSB7XG4gIG1hcmdpbi10b3A6IGNhbGMoMWVtICogMi4yOCk7IC8qIDMycHggKi9cbn08L3N0eWxlPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVdRLEVBQUUsQUFBRSxDQUFDLEFBQ1gsT0FBTyxDQUFFLEtBQUssQ0FDZCxNQUFNLENBQUUsQ0FBQyxDQUNULE9BQU8sQ0FBRSxPQUFPLENBQ2hCLGtCQUFrQixDQUFFLFdBQVcsQ0FDdkIsVUFBVSxDQUFFLFdBQVcsQUFDakMsQ0FBQyxBQUVPLE9BQU8sQUFBRSxDQUFDLEFBQ2hCLFVBQVUsQ0FBRSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEFBQzlCLENBQUMsQUFFTyxRQUFRLEFBQUUsQ0FBQyxBQUNqQixVQUFVLENBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxBQUM5QixDQUFDLEFBRU8sU0FBUyxBQUFDLENBQ1YsRUFBRSxBQUFFLENBQUMsQUFDWCxVQUFVLENBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxBQUM5QixDQUFDLEFBRU8sTUFBTSxBQUFFLENBQUMsQUFDZixVQUFVLENBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxBQUM5QixDQUFDIn0= */";
	append_dev(document.head, style);
}

function create_fragment(ctx) {
	let div;
	let br;
	let br_style_value;
	let br_class_value;

	const block = {
		c: function create() {
			div = element("div");
			br = element("br");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			br = claim_element(div_nodes, "BR", { style: true, class: true });
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(br, "style", br_style_value = `margin-top: ${/*foramttedSize*/ ctx[0]}`);
			attr_dev(br, "class", br_class_value = /*$$props*/ ctx[1].class);
			add_location(br, file, 7, 2, 179);
			attr_dev(div, "class", "overflow-hidden");
			add_location(div, file, 6, 0, 147);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, br);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*foramttedSize*/ 1 && br_style_value !== (br_style_value = `margin-top: ${/*foramttedSize*/ ctx[0]}`)) {
				attr_dev(br, "style", br_style_value);
			}

			if (dirty & /*$$props*/ 2 && br_class_value !== (br_class_value = /*$$props*/ ctx[1].class)) {
				attr_dev(br, "class", br_class_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { size = "1em" } = $$props;
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Br", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("size" in $$new_props) $$invalidate(2, size = $$new_props.size);
	};

	$$self.$capture_state = () => ({ size, foramttedSize });

	$$self.$inject_state = $$new_props => {
		$$invalidate(1, $$props = assign(assign({}, $$props), $$new_props));
		if ("size" in $$props) $$invalidate(2, size = $$new_props.size);
		if ("foramttedSize" in $$props) $$invalidate(0, foramttedSize = $$new_props.foramttedSize);
	};

	let foramttedSize;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*size*/ 4) {
			 $$invalidate(0, foramttedSize = Number.isFinite(+size)
			? `${size}px`
			: typeof size === "string" ? size : null);
		}
	};

	$$props = exclude_internal_props($$props);
	return [foramttedSize, $$props, size];
}

class Br extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-1wzhmg3-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, { size: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Br",
			options,
			id: create_fragment.name
		});
	}

	get size() {
		throw new Error("<Br>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Br>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Built-in value references. */
var Symbol$1 = root.Symbol;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

/** Used for built-in method references. */
var objectProto$1 = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString$1 = objectProto$1.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString$1.call(value);
}

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag$1 && symToStringTag$1 in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto$1 = Function.prototype,
    objectProto$2 = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString$1 = funcProto$1.toString;

/** Used to check objects for own properties. */
var hasOwnProperty$1 = objectProto$2.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString$1.call(hasOwnProperty$1).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto$3 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$2 = objectProto$3.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty$2.call(data, key) ? data[key] : undefined;
}

/** Used for built-in method references. */
var objectProto$4 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$3 = objectProto$4.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty$3.call(data, key);
}

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
  return this;
}

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/* Built-in method references that are verified to be native. */
var Map$1 = getNative(root, 'Map');

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map$1 || ListCache),
    'string': new Hash
  };
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

/** Used as references for various `Number` constants. */
var INFINITY$1 = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;
}

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

/** Used for built-in method references. */
var objectProto$5 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$4 = objectProto$5.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty$4.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

/**
 * The base implementation of `_.set`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize path creation.
 * @returns {Object} Returns `object`.
 */
function baseSet(object, path, value, customizer) {
  if (!isObject(object)) {
    return object;
  }
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      lastIndex = length - 1,
      nested = object;

  while (nested != null && ++index < length) {
    var key = toKey(path[index]),
        newValue = value;

    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : undefined;
      if (newValue === undefined) {
        newValue = isObject(objValue)
          ? objValue
          : (isIndex(path[index + 1]) ? [] : {});
      }
    }
    assignValue(nested, key, newValue);
    nested = nested[key];
  }
  return object;
}

/**
 * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
 * it's created. Arrays are created for missing index properties while objects
 * are created for all other missing properties. Use `_.setWith` to customize
 * `path` creation.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.set(object, 'a[0].b.c', 4);
 * console.log(object.a[0].b.c);
 * // => 4
 *
 * _.set(object, ['x', '0', 'y', 'z'], 5);
 * console.log(object.x[0].y.z);
 * // => 5
 */
function set(object, path, value) {
  return object == null ? object : baseSet(object, path, value);
}

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map$1 || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED$2);
  return this;
}

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

/** Built-in value references. */
var Uint8Array$1 = root.Uint8Array;

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$1 = 1,
    COMPARE_UNORDERED_FLAG$1 = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag$1 = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto$1 = Symbol$1 ? Symbol$1.prototype : undefined,
    symbolValueOf = symbolProto$1 ? symbolProto$1.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array$1(object), new Uint8Array$1(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$1;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG$1;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag$1:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

/** Used for built-in method references. */
var objectProto$6 = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto$6.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

/** Used for built-in method references. */
var objectProto$7 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$5 = objectProto$7.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable$1 = objectProto$7.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty$5.call(value, 'callee') &&
    !propertyIsEnumerable$1.call(value, 'callee');
};

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer$1 = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer$1 ? Buffer$1.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER$1 = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
}

/** `Object#toString` result references. */
var argsTag$1 = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag$1 = '[object Boolean]',
    dateTag$1 = '[object Date]',
    errorTag$1 = '[object Error]',
    funcTag$1 = '[object Function]',
    mapTag$1 = '[object Map]',
    numberTag$1 = '[object Number]',
    objectTag = '[object Object]',
    regexpTag$1 = '[object RegExp]',
    setTag$1 = '[object Set]',
    stringTag$1 = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag$1 = '[object ArrayBuffer]',
    dataViewTag$1 = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag$1] = typedArrayTags[boolTag$1] =
typedArrayTags[dataViewTag$1] = typedArrayTags[dateTag$1] =
typedArrayTags[errorTag$1] = typedArrayTags[funcTag$1] =
typedArrayTags[mapTag$1] = typedArrayTags[numberTag$1] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag$1] =
typedArrayTags[setTag$1] = typedArrayTags[stringTag$1] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/** Detect free variable `exports`. */
var freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports$1 && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule$1 && freeModule$1.require && freeModule$1.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

/** Used for built-in method references. */
var objectProto$8 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$6 = objectProto$8.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty$6.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

/** Used for built-in method references. */
var objectProto$9 = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$9;

  return value === proto;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

/** Used for built-in method references. */
var objectProto$a = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$7 = objectProto$a.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty$7.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$2 = 1;

/** Used for built-in method references. */
var objectProto$b = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$8 = objectProto$b.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$2,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty$8.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

/* Built-in method references that are verified to be native. */
var DataView$1 = getNative(root, 'DataView');

/* Built-in method references that are verified to be native. */
var Promise$1 = getNative(root, 'Promise');

/* Built-in method references that are verified to be native. */
var Set$1 = getNative(root, 'Set');

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

/** `Object#toString` result references. */
var mapTag$2 = '[object Map]',
    objectTag$1 = '[object Object]',
    promiseTag = '[object Promise]',
    setTag$2 = '[object Set]',
    weakMapTag$1 = '[object WeakMap]';

var dataViewTag$2 = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView$1),
    mapCtorString = toSource(Map$1),
    promiseCtorString = toSource(Promise$1),
    setCtorString = toSource(Set$1),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView$1 && getTag(new DataView$1(new ArrayBuffer(1))) != dataViewTag$2) ||
    (Map$1 && getTag(new Map$1) != mapTag$2) ||
    (Promise$1 && getTag(Promise$1.resolve()) != promiseTag) ||
    (Set$1 && getTag(new Set$1) != setTag$2) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag$1)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag$1 ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag$2;
        case mapCtorString: return mapTag$2;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag$2;
        case weakMapCtorString: return weakMapTag$1;
      }
    }
    return result;
  };
}

var getTag$1 = getTag;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$3 = 1;

/** `Object#toString` result references. */
var argsTag$2 = '[object Arguments]',
    arrayTag$1 = '[object Array]',
    objectTag$2 = '[object Object]';

/** Used for built-in method references. */
var objectProto$c = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$9 = objectProto$c.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag$1 : getTag$1(object),
      othTag = othIsArr ? arrayTag$1 : getTag$1(other);

  objTag = objTag == argsTag$2 ? objectTag$2 : objTag;
  othTag = othTag == argsTag$2 ? objectTag$2 : othTag;

  var objIsObj = objTag == objectTag$2,
      othIsObj = othTag == objectTag$2,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG$3)) {
    var objIsWrapped = objIsObj && hasOwnProperty$9.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty$9.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$4 = 1,
    COMPARE_UNORDERED_FLAG$2 = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$4 | COMPARE_UNORDERED_FLAG$2, customizer, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray(object) || isArguments(object));
}

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$5 = 1,
    COMPARE_UNORDERED_FLAG$3 = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$5 | COMPARE_UNORDERED_FLAG$3);
  };
}

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity$1(value) {
  return value;
}

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity$1;
  }
  if (typeof value == 'object') {
    return isArray(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function baseMap(collection, iteratee) {
  var index = -1,
      result = isArrayLike(collection) ? Array(collection.length) : [];

  baseEach(collection, function(value, key, collection) {
    result[++index] = iteratee(value, key, collection);
  });
  return result;
}

/**
 * Creates an array of values by running each element in `collection` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
 *
 * The guarded methods are:
 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * _.map([4, 8], square);
 * // => [16, 64]
 *
 * _.map({ 'a': 4, 'b': 8 }, square);
 * // => [16, 64] (iteration order is not guaranteed)
 *
 * var users = [
 *   { 'user': 'barney' },
 *   { 'user': 'fred' }
 * ];
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, 'user');
 * // => ['barney', 'fred']
 */
function map(collection, iteratee) {
  var func = isArray(collection) ? arrayMap : baseMap;
  return func(collection, baseIteratee(iteratee));
}

/**
 * Creates a `_.find` or `_.findLast` function.
 *
 * @private
 * @param {Function} findIndexFunc The function to find the collection index.
 * @returns {Function} Returns the new find function.
 */
function createFind(findIndexFunc) {
  return function(collection, predicate, fromIndex) {
    var iterable = Object(collection);
    if (!isArrayLike(collection)) {
      var iteratee = baseIteratee(predicate);
      collection = keys(collection);
      predicate = function(key) { return iteratee(iterable[key], key, iterable); };
    }
    var index = findIndexFunc(collection, predicate, fromIndex);
    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
  };
}

/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

/** Used as references for various `Number` constants. */
var INFINITY$2 = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY$2 || value === -INFINITY$2) {
    var sign = (value < 0 ? -1 : 1);
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;

  return result === result ? (remainder ? result - remainder : result) : 0;
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * This method is like `_.find` except that it returns the index of the first
 * element `predicate` returns truthy for instead of the element itself.
 *
 * @static
 * @memberOf _
 * @since 1.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=0] The index to search from.
 * @returns {number} Returns the index of the found element, else `-1`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'active': false },
 *   { 'user': 'fred',    'active': false },
 *   { 'user': 'pebbles', 'active': true }
 * ];
 *
 * _.findIndex(users, function(o) { return o.user == 'barney'; });
 * // => 0
 *
 * // The `_.matches` iteratee shorthand.
 * _.findIndex(users, { 'user': 'fred', 'active': false });
 * // => 1
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.findIndex(users, ['active', false]);
 * // => 0
 *
 * // The `_.property` iteratee shorthand.
 * _.findIndex(users, 'active');
 * // => 2
 */
function findIndex(array, predicate, fromIndex) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return -1;
  }
  var index = fromIndex == null ? 0 : toInteger(fromIndex);
  if (index < 0) {
    index = nativeMax(length + index, 0);
  }
  return baseFindIndex(array, baseIteratee(predicate), index);
}

/**
 * Iterates over elements of `collection`, returning the first element
 * `predicate` returns truthy for. The predicate is invoked with three
 * arguments: (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=0] The index to search from.
 * @returns {*} Returns the matched element, else `undefined`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'age': 36, 'active': true },
 *   { 'user': 'fred',    'age': 40, 'active': false },
 *   { 'user': 'pebbles', 'age': 1,  'active': true }
 * ];
 *
 * _.find(users, function(o) { return o.age < 40; });
 * // => object for 'barney'
 *
 * // The `_.matches` iteratee shorthand.
 * _.find(users, { 'age': 1, 'active': true });
 * // => object for 'pebbles'
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.find(users, ['active', false]);
 * // => object for 'fred'
 *
 * // The `_.property` iteratee shorthand.
 * _.find(users, 'active');
 * // => object for 'barney'
 */
var find = createFind(findIndex);

/** `Object#toString` result references. */
var mapTag$3 = '[object Map]',
    setTag$3 = '[object Set]';

/** Used for built-in method references. */
var objectProto$d = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$a = objectProto$d.hasOwnProperty;

/**
 * Checks if `value` is an empty object, collection, map, or set.
 *
 * Objects are considered empty if they have no own enumerable string keyed
 * properties.
 *
 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
 * jQuery-like collections are considered empty if they have a `length` of `0`.
 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */
function isEmpty(value) {
  if (value == null) {
    return true;
  }
  if (isArrayLike(value) &&
      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
        isBuffer(value) || isTypedArray(value) || isArguments(value))) {
    return !value.length;
  }
  var tag = getTag$1(value);
  if (tag == mapTag$3 || tag == setTag$3) {
    return !value.size;
  }
  if (isPrototype(value)) {
    return !baseKeys(value).length;
  }
  for (var key in value) {
    if (hasOwnProperty$a.call(value, key)) {
      return false;
    }
  }
  return true;
}

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

/** Used for built-in method references. */
var objectProto$e = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$b = objectProto$e.hasOwnProperty;

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty$b.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn$1(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssignIn(object, source) {
  return object && copyObject(source, keysIn$1(source), object);
}

/** Detect free variable `exports`. */
var freeExports$2 = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule$2 = freeExports$2 && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports$2 = freeModule$2 && freeModule$2.exports === freeExports$2;

/** Built-in value references. */
var Buffer$2 = moduleExports$2 ? root.Buffer : undefined,
    allocUnsafe = Buffer$2 ? Buffer$2.allocUnsafe : undefined;

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  buffer.copy(result);
  return result;
}

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return copyObject(source, getSymbols(source), object);
}

/** Built-in value references. */
var getPrototype = overArg(Object.getPrototypeOf, Object);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols$1 = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbolsIn = !nativeGetSymbols$1 ? stubArray : function(object) {
  var result = [];
  while (object) {
    arrayPush(result, getSymbols(object));
    object = getPrototype(object);
  }
  return result;
};

/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbolsIn(source, object) {
  return copyObject(source, getSymbolsIn(source), object);
}

/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeysIn(object) {
  return baseGetAllKeys(object, keysIn$1, getSymbolsIn);
}

/** Used for built-in method references. */
var objectProto$f = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$c = objectProto$f.hasOwnProperty;

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = new array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty$c.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));
  return result;
}

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

/** Used to convert symbols to primitives and strings. */
var symbolProto$2 = Symbol$1 ? Symbol$1.prototype : undefined,
    symbolValueOf$1 = symbolProto$2 ? symbolProto$2.valueOf : undefined;

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
}

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

/** `Object#toString` result references. */
var boolTag$2 = '[object Boolean]',
    dateTag$2 = '[object Date]',
    mapTag$4 = '[object Map]',
    numberTag$2 = '[object Number]',
    regexpTag$2 = '[object RegExp]',
    setTag$4 = '[object Set]',
    stringTag$2 = '[object String]',
    symbolTag$2 = '[object Symbol]';

var arrayBufferTag$2 = '[object ArrayBuffer]',
    dataViewTag$3 = '[object DataView]',
    float32Tag$1 = '[object Float32Array]',
    float64Tag$1 = '[object Float64Array]',
    int8Tag$1 = '[object Int8Array]',
    int16Tag$1 = '[object Int16Array]',
    int32Tag$1 = '[object Int32Array]',
    uint8Tag$1 = '[object Uint8Array]',
    uint8ClampedTag$1 = '[object Uint8ClampedArray]',
    uint16Tag$1 = '[object Uint16Array]',
    uint32Tag$1 = '[object Uint32Array]';

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag$2:
      return cloneArrayBuffer(object);

    case boolTag$2:
    case dateTag$2:
      return new Ctor(+object);

    case dataViewTag$3:
      return cloneDataView(object, isDeep);

    case float32Tag$1: case float64Tag$1:
    case int8Tag$1: case int16Tag$1: case int32Tag$1:
    case uint8Tag$1: case uint8ClampedTag$1: case uint16Tag$1: case uint32Tag$1:
      return cloneTypedArray(object, isDeep);

    case mapTag$4:
      return new Ctor;

    case numberTag$2:
    case stringTag$2:
      return new Ctor(object);

    case regexpTag$2:
      return cloneRegExp(object);

    case setTag$4:
      return new Ctor;

    case symbolTag$2:
      return cloneSymbol(object);
  }
}

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(proto) {
    if (!isObject(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate(getPrototype(object))
    : {};
}

/** `Object#toString` result references. */
var mapTag$5 = '[object Map]';

/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */
function baseIsMap(value) {
  return isObjectLike(value) && getTag$1(value) == mapTag$5;
}

/* Node.js helper references. */
var nodeIsMap = nodeUtil && nodeUtil.isMap;

/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */
var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

/** `Object#toString` result references. */
var setTag$5 = '[object Set]';

/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */
function baseIsSet(value) {
  return isObjectLike(value) && getTag$1(value) == setTag$5;
}

/* Node.js helper references. */
var nodeIsSet = nodeUtil && nodeUtil.isSet;

/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */
var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;

/** `Object#toString` result references. */
var argsTag$3 = '[object Arguments]',
    arrayTag$2 = '[object Array]',
    boolTag$3 = '[object Boolean]',
    dateTag$3 = '[object Date]',
    errorTag$2 = '[object Error]',
    funcTag$2 = '[object Function]',
    genTag$1 = '[object GeneratorFunction]',
    mapTag$6 = '[object Map]',
    numberTag$3 = '[object Number]',
    objectTag$3 = '[object Object]',
    regexpTag$3 = '[object RegExp]',
    setTag$6 = '[object Set]',
    stringTag$3 = '[object String]',
    symbolTag$3 = '[object Symbol]',
    weakMapTag$2 = '[object WeakMap]';

var arrayBufferTag$3 = '[object ArrayBuffer]',
    dataViewTag$4 = '[object DataView]',
    float32Tag$2 = '[object Float32Array]',
    float64Tag$2 = '[object Float64Array]',
    int8Tag$2 = '[object Int8Array]',
    int16Tag$2 = '[object Int16Array]',
    int32Tag$2 = '[object Int32Array]',
    uint8Tag$2 = '[object Uint8Array]',
    uint8ClampedTag$2 = '[object Uint8ClampedArray]',
    uint16Tag$2 = '[object Uint16Array]',
    uint32Tag$2 = '[object Uint32Array]';

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag$3] = cloneableTags[arrayTag$2] =
cloneableTags[arrayBufferTag$3] = cloneableTags[dataViewTag$4] =
cloneableTags[boolTag$3] = cloneableTags[dateTag$3] =
cloneableTags[float32Tag$2] = cloneableTags[float64Tag$2] =
cloneableTags[int8Tag$2] = cloneableTags[int16Tag$2] =
cloneableTags[int32Tag$2] = cloneableTags[mapTag$6] =
cloneableTags[numberTag$3] = cloneableTags[objectTag$3] =
cloneableTags[regexpTag$3] = cloneableTags[setTag$6] =
cloneableTags[stringTag$3] = cloneableTags[symbolTag$3] =
cloneableTags[uint8Tag$2] = cloneableTags[uint8ClampedTag$2] =
cloneableTags[uint16Tag$2] = cloneableTags[uint32Tag$2] = true;
cloneableTags[errorTag$2] = cloneableTags[funcTag$2] =
cloneableTags[weakMapTag$2] = false;

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG,
      isFlat = bitmask & CLONE_FLAT_FLAG,
      isFull = bitmask & CLONE_SYMBOLS_FLAG;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject(value)) {
    return value;
  }
  var isArr = isArray(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag$1(value),
        isFunc = tag == funcTag$2 || tag == genTag$1;

    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag$3 || tag == argsTag$3 || (isFunc && !object)) {
      result = (isFlat || isFunc) ? {} : initCloneObject(value);
      if (!isDeep) {
        return isFlat
          ? copySymbolsIn(value, baseAssignIn(result, value))
          : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  if (isSet(value)) {
    value.forEach(function(subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
  } else if (isMap(value)) {
    value.forEach(function(subValue, key) {
      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
  }

  var keysFunc = isFull
    ? (isFlat ? getAllKeysIn : getAllKeys)
    : (isFlat ? keysIn : keys);

  var props = isArr ? undefined : keysFunc(value);
  arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG$1 = 1,
    CLONE_SYMBOLS_FLAG$1 = 4;

/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */
function cloneDeep(value) {
  return baseClone(value, CLONE_DEEP_FLAG$1 | CLONE_SYMBOLS_FLAG$1);
}



var _ = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get: get,
    set: set,
    map: map,
    find: find,
    isEmpty: isEmpty,
    cloneDeep: cloneDeep
});

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

// Older browsers don't support event options, feature detect it.

// Adopted and modified solution from Bohdan Didukh (2017)
// https://stackoverflow.com/questions/41594997/ios-10-safari-prevent-scrolling-behind-a-fixed-overlay-and-maintain-scroll-posi

var hasPassiveEvents = false;
if (typeof window !== 'undefined') {
  var passiveTestOptions = {
    get passive() {
      hasPassiveEvents = true;
      return undefined;
    }
  };
  window.addEventListener('testPassive', null, passiveTestOptions);
  window.removeEventListener('testPassive', null, passiveTestOptions);
}

var isIosDevice = typeof window !== 'undefined' && window.navigator && window.navigator.platform && (/iP(ad|hone|od)/.test(window.navigator.platform) || window.navigator.platform === 'MacIntel' && window.navigator.maxTouchPoints > 1);


var locks = [];
var documentListenerAdded = false;
var initialClientY = -1;
var previousBodyOverflowSetting = void 0;
var previousBodyPaddingRight = void 0;

// returns true if `el` should be allowed to receive touchmove events.
var allowTouchMove = function allowTouchMove(el) {
  return locks.some(function (lock) {
    if (lock.options.allowTouchMove && lock.options.allowTouchMove(el)) {
      return true;
    }

    return false;
  });
};

var preventDefault = function preventDefault(rawEvent) {
  var e = rawEvent || window.event;

  // For the case whereby consumers adds a touchmove event listener to document.
  // Recall that we do document.addEventListener('touchmove', preventDefault, { passive: false })
  // in disableBodyScroll - so if we provide this opportunity to allowTouchMove, then
  // the touchmove event on document will break.
  if (allowTouchMove(e.target)) {
    return true;
  }

  // Do not prevent if the event has more than one touch (usually meaning this is a multi touch gesture like pinch to zoom).
  if (e.touches.length > 1) return true;

  if (e.preventDefault) e.preventDefault();

  return false;
};

var setOverflowHidden = function setOverflowHidden(options) {
  // Setting overflow on body/documentElement synchronously in Desktop Safari slows down
  // the responsiveness for some reason. Setting within a setTimeout fixes this.
  setTimeout(function () {
    // If previousBodyPaddingRight is already set, don't set it again.
    if (previousBodyPaddingRight === undefined) {
      var _reserveScrollBarGap = !!options && options.reserveScrollBarGap === true;
      var scrollBarGap = window.innerWidth - document.documentElement.clientWidth;

      if (_reserveScrollBarGap && scrollBarGap > 0) {
        previousBodyPaddingRight = document.body.style.paddingRight;
        document.body.style.paddingRight = scrollBarGap + 'px';
      }
    }

    // If previousBodyOverflowSetting is already set, don't set it again.
    if (previousBodyOverflowSetting === undefined) {
      previousBodyOverflowSetting = document.body.style.overflow;
      document.body.style.overflow = 'hidden';
    }
  });
};

var restoreOverflowSetting = function restoreOverflowSetting() {
  // Setting overflow on body/documentElement synchronously in Desktop Safari slows down
  // the responsiveness for some reason. Setting within a setTimeout fixes this.
  setTimeout(function () {
    if (previousBodyPaddingRight !== undefined) {
      document.body.style.paddingRight = previousBodyPaddingRight;

      // Restore previousBodyPaddingRight to undefined so setOverflowHidden knows it
      // can be set again.
      previousBodyPaddingRight = undefined;
    }

    if (previousBodyOverflowSetting !== undefined) {
      document.body.style.overflow = previousBodyOverflowSetting;

      // Restore previousBodyOverflowSetting to undefined
      // so setOverflowHidden knows it can be set again.
      previousBodyOverflowSetting = undefined;
    }
  });
};

// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight#Problems_and_solutions
var isTargetElementTotallyScrolled = function isTargetElementTotallyScrolled(targetElement) {
  return targetElement ? targetElement.scrollHeight - targetElement.scrollTop <= targetElement.clientHeight : false;
};

var handleScroll = function handleScroll(event, targetElement) {
  var clientY = event.targetTouches[0].clientY - initialClientY;

  if (allowTouchMove(event.target)) {
    return false;
  }

  if (targetElement && targetElement.scrollTop === 0 && clientY > 0) {
    // element is at the top of its scroll.
    return preventDefault(event);
  }

  if (isTargetElementTotallyScrolled(targetElement) && clientY < 0) {
    // element is at the bottom of its scroll.
    return preventDefault(event);
  }

  event.stopPropagation();
  return true;
};

var disableBodyScroll = function disableBodyScroll(targetElement, options) {
  if (isIosDevice) {
    // targetElement must be provided, and disableBodyScroll must not have been
    // called on this targetElement before.
    if (!targetElement) {
      // eslint-disable-next-line no-console
      console.error('disableBodyScroll unsuccessful - targetElement must be provided when calling disableBodyScroll on IOS devices.');
      return;
    }

    if (targetElement && !locks.some(function (lock) {
      return lock.targetElement === targetElement;
    })) {
      var lock = {
        targetElement: targetElement,
        options: options || {}
      };

      locks = [].concat(_toConsumableArray(locks), [lock]);

      targetElement.ontouchstart = function (event) {
        if (event.targetTouches.length === 1) {
          // detect single touch.
          initialClientY = event.targetTouches[0].clientY;
        }
      };
      targetElement.ontouchmove = function (event) {
        if (event.targetTouches.length === 1) {
          // detect single touch.
          handleScroll(event, targetElement);
        }
      };

      if (!documentListenerAdded) {
        document.addEventListener('touchmove', preventDefault, hasPassiveEvents ? { passive: false } : undefined);
        documentListenerAdded = true;
      }
    }
  } else {
    setOverflowHidden(options);
    var _lock = {
      targetElement: targetElement,
      options: options || {}
    };

    locks = [].concat(_toConsumableArray(locks), [_lock]);
  }
};

var enableBodyScroll = function enableBodyScroll(targetElement) {
  if (isIosDevice) {
    if (!targetElement) {
      // eslint-disable-next-line no-console
      console.error('enableBodyScroll unsuccessful - targetElement must be provided when calling enableBodyScroll on IOS devices.');
      return;
    }

    targetElement.ontouchstart = null;
    targetElement.ontouchmove = null;

    locks = locks.filter(function (lock) {
      return lock.targetElement !== targetElement;
    });

    if (documentListenerAdded && locks.length === 0) {
      document.removeEventListener('touchmove', preventDefault, hasPassiveEvents ? { passive: false } : undefined);

      documentListenerAdded = false;
    }
  } else {
    locks = locks.filter(function (lock) {
      return lock.targetElement !== targetElement;
    });
    if (!locks.length) {
      restoreOverflowSetting();
    }
  }
};

const DURATION = 500;
let scroll;
let scrollCheckInterval;
function preventInertialScroll(e) {
    if (e && e.touches.length !== 1) return

    function scrollTo(top) {
        // document.documentElement.scrollTop = scroll
        window.scrollTo({
            top,
            left: 0,
            behavior: 'smooth'
        });
    }

    function recursive() {
        if (document.documentElement.scrollTop !== scroll) {
            scrollTo(scroll);
            requestAnimationFrame(recursive);
        } else {
            const time = performance.now();
            function stopScroll() {
                if (performance.now() - time < DURATION) {
                    scrollTo(scroll);
                    requestAnimationFrame(stopScroll);
                }
            }
            stopScroll();
        }
    }
    recursive();
}

/**
 * 
 * @attr body-scroll-lock-ignore - to ignor lock.
 * 
 * @param {HTMLElement} container
 * @param {{
 *  extraLock?: boolean (false)
 * }} config
 */
function disableScroll(container, config = {}) {
    if (typeof window !== 'undefined') {
        document.body.classList.add('body-scroll-lock');

        if (config.extraLock) {
            scroll = document.documentElement.scrollTop;
            document.documentElement.ontouchstart = () => scroll = document.documentElement.scrollTop;
            document.documentElement.ontouchmove = preventInertialScroll;
            document.documentElement.ontouchend = preventInertialScroll;
            scrollCheckInterval = setInterval(() => {
                if (document.documentElement.scrollTop !== scroll) {
                    preventInertialScroll();
                }
            }, DURATION);
        }
    }

    disableBodyScroll(container, {
        allowTouchMove: el => {
            while (el && el !== document.body) {
                if (el.getAttribute('body-scroll-lock-ignore') !== null) {
                    return true;
                }
                el = el.parentNode;
            }
        },
    });
}

function enableScroll(container, config = {}) {
    if (typeof window !== 'undefined') {
        document.body.classList.remove('body-scroll-lock');

        if (config.extraLock) {
            document.documentElement.ontouchstart = null;
            document.documentElement.ontouchmove = null;
            document.documentElement.ontouchend = null;
            clearInterval(scrollCheckInterval);
        }
    }

    enableBodyScroll(container);
}

var bodyScroll = /*#__PURE__*/Object.freeze({
    __proto__: null,
    disableScroll: disableScroll,
    enableScroll: enableScroll
});

function uuidv4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        let r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });
}

async function delay (ms, isError) {
  return new Promise((res, rej) => setTimeout(isError ? rej : res, ms))
}

/**
 *
 * @function safeGet
 *
 * @description Safe getting of an any value of a nested objects.
 *
 * @param expressionFn {function} - The function with an expression which returns result of the safe getting.
 * @param defaultValue {any} - The default value when result is undefined.
 * @param isDefaultTyped {boolean} - Wheter is the result from an expression must be the same type as the default value.
 *
 * @examples
 * // Some data.
 * const very = {
 *  nested: {
 *   object: [{
 *     with: {
 *       arrays: 'stuff'
 *     }
 *   }]
 *  }
 * }
 *
 * // Getting.
 * 1. safeGet(() => very.nested.object[0].with.arrays);
 * 2. safeGet(() => very.nested.object[0].with.arrays, { default: 'value' });
 * 3. safeGet(() => very.nested.object[0].with.arrays, { default: 'value' }, true);
 *
 * // Return.
 * 1. 'stuff'
 * 2. 'stuff'
 * 3. { default: 'value' }
 */
function safeGet(expressionFn, defaultValue, isDefaultTyped = false) {
  // Check whether a and b have the same type. (util)
  function isSameType(a, b) {
    const rules = [
      (a, b) => typeof a === typeof b,
      (a, b) => (+a === a) === (+b === b),              // whether one is NaN
      (a, b) => (a === null) === (b === null),          // null is object type too
      (a, b) => Array.isArray(a) === Array.isArray(b),  // array is object type too
    ];
    return !rules.some(ruleFn => !ruleFn(a, b))
  }
  // Core of safe getting. Executing a function. Default values.
  function get(expressionFn, defaultValue, isDefaultTyped) {
    try {
      const result = expressionFn.call(this);
      if (isDefaultTyped) {
        return isSameType(result, defaultValue) ? result : defaultValue
      } else {
        return result === undefined ? defaultValue : result
      }
    } catch (e) {
      return defaultValue
    }
  }
  // Safe getting of the expressionFn.
  if (typeof expressionFn === 'function') {
    return get(expressionFn, defaultValue, isDefaultTyped)
  } else {
    console.warn('You need to use a function as the first argument.');
  }
  return defaultValue
}

function waitUntil(fn, { timeout = 5000, interval = 500 } = {}) {
  let timer = null;
  let intervalTimer = null;
  return new Promise(function (res, rej) {
    timer = setTimeout(rej, timeout, new Error('Error: Timeout'));
    intervalTimer = setInterval(async () => {
      try {
        const result = await fn();
        clearTimeout(timer);
        clearInterval(intervalTimer);
        res(result);
      } catch (_e) {}
    }, interval);
  })
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var classnames = createCommonjsModule(function (module) {
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg) && arg.length) {
				var inner = classNames.apply(null, arg);
				if (inner) {
					classes.push(inner);
				}
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if ( module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else {
		window.classNames = classNames;
	}
}());
});

function toCSSString(styles = {}) {
  return Object.entries(styles)
    .filter(([_propName, propValue]) => propValue !== undefined && propValue !== null)
    .reduce((styleString, [propName, propValue]) => {
      propName = propName.replace(/[A-Z]/g, match => `-${match.toLowerCase()}`);
      return `${styleString}${propName}:${propValue};`
    }, '')
}

function getScrollPercent(container, child) {
    const p = container;
    const c = child;
    const st = 'scrollTop';
    const sl = 'scrollLeft';
    const sh = 'scrollHeight';
    const sw = 'scrollWidth';
    return {
        x:  (p[sl] || c[sl]) / (((p[sw] || c[sw]) - p.clientWidth) || 1) * 100,
        y:  (p[st] || c[st]) / (((p[sh] || c[sh]) - p.clientHeight) || 1) * 100,
        p,
        c,
        st,
        sl,
        sh,
        sw,
    }
}

function formatTextToBullets(text) {
    const lines = typeof text === 'string' ? text.split(/[\n\r]/gm) : [];
    const plainTextLines = lines.map(line => line.replace(/^(•\s+)/g, ''));
    const filteredLines = plainTextLines.filter(line => line !== '•');
    const formattedLines = filteredLines.map(line => `• ${line}`);
    return formattedLines.join('\n')
}

function disableDoubleTapZoom(elements) {
    [].concat(elements || []).forEach((el) => {
        let lastTouchEnd = 0;
		el.addEventListener('touchend', function(event) {
			const now = (new Date()).getTime();
			if (now - lastTouchEnd <= 300) {
				event.preventDefault();
			}
			lastTouchEnd = now;
		}, false);
    });
}

function stopPropagationInRanges(el, ranges = { x: [0, 100], y: [0, 100] }, onChange) {
    el.ontouchstart = controllScroll;
    el.ontouchmove = controllScroll;
    el.ontouchend = controllScroll;
    
    function controllScroll(e) {
        const params = getScrollPercent(el, el.children[0]);
        if (
            params.x >= ranges.x[0] && params.x <= ranges.x[1] &&
            params.y >= ranges.y[0] && params.y <= ranges.y[1]
        ) {
            e.stopPropagation();
        }
        if (typeof onChange === 'function') {
            return onChange({ ...params, e })
        }
    }
}

var setup = {
  BACKEND_URL: 'mock', // '/Charitify/', // charitify-application.page.link/?link=https://charitify-application.firebaseio.com&apn=package_name

  MAPBOX_KEY: 'mapbox',
};

/* node_modules/svelte-icons/components/IconBase.svelte generated by Svelte v3.24.0 */

const file$1 = "node_modules/svelte-icons/components/IconBase.svelte";

function add_css$1() {
	var style = element("style");
	style.id = "svelte-vfq7n1-style";
	style.textContent = "svg.svelte-vfq7n1{stroke:currentColor;fill:currentColor;stroke-width:0;width:100%;height:auto;max-height:100%}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSWNvbkJhc2Uuc3ZlbHRlIiwic291cmNlcyI6WyJJY29uQmFzZS5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgZXhwb3J0IGxldCB0aXRsZSA9IG51bGw7XG4gIGV4cG9ydCBsZXQgdmlld0JveDtcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG5zdmcge1xuICBzdHJva2U6IGN1cnJlbnRDb2xvcjtcbiAgZmlsbDogY3VycmVudENvbG9yO1xuICBzdHJva2Utd2lkdGg6IDA7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IGF1dG87XG4gIG1heC1oZWlnaHQ6IDEwMCU7XG59PC9zdHlsZT5cblxuPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIge3ZpZXdCb3h9PlxuICB7I2lmIHRpdGxlfVxuICAgIDx0aXRsZT57dGl0bGV9PC90aXRsZT5cbiAgey9pZn1cbiAgPHNsb3QgLz5cbjwvc3ZnPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU1BLEdBQUcsY0FBQyxDQUFDLEFBQ0gsTUFBTSxDQUFFLFlBQVksQ0FDcEIsSUFBSSxDQUFFLFlBQVksQ0FDbEIsWUFBWSxDQUFFLENBQUMsQ0FDZixLQUFLLENBQUUsSUFBSSxDQUNYLE1BQU0sQ0FBRSxJQUFJLENBQ1osVUFBVSxDQUFFLElBQUksQUFDbEIsQ0FBQyJ9 */";
	append_dev(document.head, style);
}

// (17:2) {#if title}
function create_if_block(ctx) {
	let title_1;
	let t;

	const block = {
		c: function create() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[0]);
			this.h();
		},
		l: function claim(nodes) {
			title_1 = claim_element(nodes, "title", {}, 1);
			var title_1_nodes = children(title_1);
			t = claim_text(title_1_nodes, /*title*/ ctx[0]);
			title_1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(title_1, file$1, 17, 4, 279);
		},
		m: function mount(target, anchor) {
			insert_dev(target, title_1, anchor);
			append_dev(title_1, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 1) set_data_dev(t, /*title*/ ctx[0]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(title_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(17:2) {#if title}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let svg;
	let if_block_anchor;
	let current;
	let if_block = /*title*/ ctx[0] && create_if_block(ctx);
	const default_slot_template = /*$$slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			if_block_anchor = empty();
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			svg = claim_element(nodes, "svg", { xmlns: true, viewBox: true, class: true }, 1);
			var svg_nodes = children(svg);
			if (if_block) if_block.l(svg_nodes);
			if_block_anchor = empty();
			if (default_slot) default_slot.l(svg_nodes);
			svg_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", /*viewBox*/ ctx[1]);
			attr_dev(svg, "class", "svelte-vfq7n1");
			add_location(svg, file$1, 15, 0, 210);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append_dev(svg, if_block_anchor);

			if (default_slot) {
				default_slot.m(svg, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*title*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(svg, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 4) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[2], dirty, null, null);
				}
			}

			if (!current || dirty & /*viewBox*/ 2) {
				attr_dev(svg, "viewBox", /*viewBox*/ ctx[1]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { title = null } = $$props;
	let { viewBox } = $$props;
	const writable_props = ["title", "viewBox"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<IconBase> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("IconBase", $$slots, ['default']);

	$$self.$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("viewBox" in $$props) $$invalidate(1, viewBox = $$props.viewBox);
		if ("$$scope" in $$props) $$invalidate(2, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({ title, viewBox });

	$$self.$inject_state = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("viewBox" in $$props) $$invalidate(1, viewBox = $$props.viewBox);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [title, viewBox, $$scope, $$slots];
}

class IconBase extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-vfq7n1-style")) add_css$1();
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { title: 0, viewBox: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "IconBase",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*viewBox*/ ctx[1] === undefined && !("viewBox" in props)) {
			console.warn("<IconBase> was created without expected prop 'viewBox'");
		}
	}

	get title() {
		throw new Error("<IconBase>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<IconBase>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get viewBox() {
		throw new Error("<IconBase>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set viewBox(value) {
		throw new Error("<IconBase>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/svelte-icons/fa/FaAt.svelte generated by Svelte v3.24.0 */
const file$2 = "node_modules/svelte-icons/fa/FaAt.svelte";

// (4:8) <IconBase viewBox="0 0 512 512" {...$$props}>
function create_default_slot(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M256 8C118.941 8 8 118.919 8 256c0 137.059 110.919 248 248 248 48.154 0 95.342-14.14 135.408-40.223 12.005-7.815 14.625-24.288 5.552-35.372l-10.177-12.433c-7.671-9.371-21.179-11.667-31.373-5.129C325.92 429.757 291.314 440 256 440c-101.458 0-184-82.542-184-184S154.542 72 256 72c100.139 0 184 57.619 184 160 0 38.786-21.093 79.742-58.17 83.693-17.349-.454-16.91-12.857-13.476-30.024l23.433-121.11C394.653 149.75 383.308 136 368.225 136h-44.981a13.518 13.518 0 0 0-13.432 11.993l-.01.092c-14.697-17.901-40.448-21.775-59.971-21.775-74.58 0-137.831 62.234-137.831 151.46 0 65.303 36.785 105.87 96 105.87 26.984 0 57.369-15.637 74.991-38.333 9.522 34.104 40.613 34.103 70.71 34.103C462.609 379.41 504 307.798 504 232 504 95.653 394.023 8 256 8zm-21.68 304.43c-22.249 0-36.07-15.623-36.07-40.771 0-44.993 30.779-72.729 58.63-72.729 22.292 0 35.601 15.241 35.601 40.77 0 45.061-33.875 72.73-58.161 72.73z");
			add_location(path, file$2, 4, 10, 153);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 512 512\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 512 512" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("FaAt", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class FaAt extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FaAt",
			options,
			id: create_fragment$2.name
		});
	}
}

/* node_modules/svelte-icons/fa/FaMoon.svelte generated by Svelte v3.24.0 */
const file$3 = "node_modules/svelte-icons/fa/FaMoon.svelte";

// (4:8) <IconBase viewBox="0 0 512 512" {...$$props}>
function create_default_slot$1(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M283.211 512c78.962 0 151.079-35.925 198.857-94.792 7.068-8.708-.639-21.43-11.562-19.35-124.203 23.654-238.262-71.576-238.262-196.954 0-72.222 38.662-138.635 101.498-174.394 9.686-5.512 7.25-20.197-3.756-22.23A258.156 258.156 0 0 0 283.211 0c-141.309 0-256 114.511-256 256 0 141.309 114.511 256 256 256z");
			add_location(path, file$3, 4, 10, 153);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 512 512\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 512 512" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot$1] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("FaMoon", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class FaMoon extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FaMoon",
			options,
			id: create_fragment$3.name
		});
	}
}

/* node_modules/svelte-icons/md/MdLink.svelte generated by Svelte v3.24.0 */
const file$4 = "node_modules/svelte-icons/md/MdLink.svelte";

// (4:8) <IconBase viewBox="0 0 24 24" {...$$props}>
function create_default_slot$2(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z");
			add_location(path, file$4, 4, 10, 151);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$2.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 24 24\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment$4(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 24 24" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot$2] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("MdLink", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class MdLink extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "MdLink",
			options,
			id: create_fragment$4.name
		});
	}
}

/* node_modules/svelte-icons/gi/GiMale.svelte generated by Svelte v3.24.0 */
const file$5 = "node_modules/svelte-icons/gi/GiMale.svelte";

// (4:8) <IconBase viewBox="0 0 512 512" {...$$props}>
function create_default_slot$3(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M292.563 65.656v40h85.156l-81.658 82.656-12.937 13.125c-9.054-6.765-18.936-12.412-29.406-16.75-16.478-6.825-34.23-10.343-52.064-10.343-17.835 0-35.553 3.52-52.03 10.344-16.48 6.824-31.514 16.858-44.126 29.468-12.613 12.612-22.643 27.647-29.47 44.125-6.825 16.48-10.373 34.228-10.374 52.064 0 17.836 3.52 35.553 10.344 52.03 6.825 16.48 16.888 31.514 29.5 44.126 12.612 12.612 27.647 22.643 44.125 29.47 16.478 6.824 34.195 10.374 52.03 10.374 17.837 0 35.586-3.55 52.064-10.375 16.477-6.827 31.512-16.857 44.124-29.47 12.61-12.612 22.644-27.647 29.47-44.125 6.823-16.478 10.343-34.196 10.342-52.03 0-17.836-3.518-35.587-10.344-52.064-4.183-10.098-9.583-19.646-16.03-28.436l13.218-13.406 81.844-82.875v85.875h40V65.656H292.562zm-90.907 148.688c12.533 0 25.17 2.516 36.75 7.312 11.58 4.797 22.263 11.95 31.125 20.813 8.863 8.86 16.017 19.545 20.814 31.124 4.796 11.58 7.312 24.217 7.312 36.75 0 12.533-2.517 25.14-7.312 36.72-4.796 11.577-11.92 22.292-20.78 31.155-8.864 8.862-19.578 16.014-31.158 20.81-11.58 4.798-24.216 7.313-36.75 7.314-12.533 0-25.14-2.516-36.72-7.313-11.578-4.795-22.292-11.95-31.155-20.81-8.86-8.864-16.015-19.578-20.81-31.158-4.798-11.58-7.314-24.185-7.314-36.718 0-12.534 2.516-25.17 7.313-36.75l.093-.22c4.796-11.494 11.91-22.13 20.718-30.937 8.808-8.805 19.444-15.892 30.94-20.687l.218-.094c11.58-4.795 24.185-7.313 36.718-7.312z");
			add_location(path, file$5, 4, 10, 153);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$3.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 512 512\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment$5(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 512 512" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot$3] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$5.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$5($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("GiMale", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class GiMale extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$5, create_fragment$5, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "GiMale",
			options,
			id: create_fragment$5.name
		});
	}
}

/* node_modules/svelte-icons/md/MdEdit.svelte generated by Svelte v3.24.0 */
const file$6 = "node_modules/svelte-icons/md/MdEdit.svelte";

// (4:8) <IconBase viewBox="0 0 24 24" {...$$props}>
function create_default_slot$4(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z");
			add_location(path, file$6, 4, 10, 151);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$4.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 24 24\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment$6(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 24 24" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot$4] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$6.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$6($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("MdEdit", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class MdEdit extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$6, create_fragment$6, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "MdEdit",
			options,
			id: create_fragment$6.name
		});
	}
}

/* node_modules/svelte-icons/fa/FaHeart.svelte generated by Svelte v3.24.0 */
const file$7 = "node_modules/svelte-icons/fa/FaHeart.svelte";

// (4:8) <IconBase viewBox="0 0 512 512" {...$$props}>
function create_default_slot$5(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M462.3 62.6C407.5 15.9 326 24.3 275.7 76.2L256 96.5l-19.7-20.3C186.1 24.3 104.5 15.9 49.7 62.6c-62.8 53.6-66.1 149.8-9.9 207.9l193.5 199.8c12.5 12.9 32.8 12.9 45.3 0l193.5-199.8c56.3-58.1 53-154.3-9.8-207.9z");
			add_location(path, file$7, 4, 10, 153);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$5.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 512 512\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment$7(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 512 512" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot$5] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$7.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$7($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("FaHeart", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class FaHeart extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$7, create_fragment$7, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FaHeart",
			options,
			id: create_fragment$7.name
		});
	}
}

/* node_modules/svelte-icons/fa/FaViber.svelte generated by Svelte v3.24.0 */
const file$8 = "node_modules/svelte-icons/fa/FaViber.svelte";

// (4:8) <IconBase viewBox="0 0 512 512" {...$$props}>
function create_default_slot$6(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M444 49.9C431.3 38.2 379.9.9 265.3.4c0 0-135.1-8.1-200.9 52.3C27.8 89.3 14.9 143 13.5 209.5c-1.4 66.5-3.1 191.1 117 224.9h.1l-.1 51.6s-.8 20.9 13 25.1c16.6 5.2 26.4-10.7 42.3-27.8 8.7-9.4 20.7-23.2 29.8-33.7 82.2 6.9 145.3-8.9 152.5-11.2 16.6-5.4 110.5-17.4 125.7-142 15.8-128.6-7.6-209.8-49.8-246.5zM457.9 287c-12.9 104-89 110.6-103 115.1-6 1.9-61.5 15.7-131.2 11.2 0 0-52 62.7-68.2 79-5.3 5.3-11.1 4.8-11-5.7 0-6.9.4-85.7.4-85.7-.1 0-.1 0 0 0-101.8-28.2-95.8-134.3-94.7-189.8 1.1-55.5 11.6-101 42.6-131.6 55.7-50.5 170.4-43 170.4-43 96.9.4 143.3 29.6 154.1 39.4 35.7 30.6 53.9 103.8 40.6 211.1zm-139-80.8c.4 8.6-12.5 9.2-12.9.6-1.1-22-11.4-32.7-32.6-33.9-8.6-.5-7.8-13.4.7-12.9 27.9 1.5 43.4 17.5 44.8 46.2zm20.3 11.3c1-42.4-25.5-75.6-75.8-79.3-8.5-.6-7.6-13.5.9-12.9 58 4.2 88.9 44.1 87.8 92.5-.1 8.6-13.1 8.2-12.9-.3zm47 13.4c.1 8.6-12.9 8.7-12.9.1-.6-81.5-54.9-125.9-120.8-126.4-8.5-.1-8.5-12.9 0-12.9 73.7.5 133 51.4 133.7 139.2zM374.9 329v.2c-10.8 19-31 40-51.8 33.3l-.2-.3c-21.1-5.9-70.8-31.5-102.2-56.5-16.2-12.8-31-27.9-42.4-42.4-10.3-12.9-20.7-28.2-30.8-46.6-21.3-38.5-26-55.7-26-55.7-6.7-20.8 14.2-41 33.3-51.8h.2c9.2-4.8 18-3.2 23.9 3.9 0 0 12.4 14.8 17.7 22.1 5 6.8 11.7 17.7 15.2 23.8 6.1 10.9 2.3 22-3.7 26.6l-12 9.6c-6.1 4.9-5.3 14-5.3 14s17.8 67.3 84.3 84.3c0 0 9.1.8 14-5.3l9.6-12c4.6-6 15.7-9.8 26.6-3.7 14.7 8.3 33.4 21.2 45.8 32.9 7 5.7 8.6 14.4 3.8 23.6z");
			add_location(path, file$8, 4, 10, 153);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$6.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 512 512\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment$8(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 512 512" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot$6] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$8.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$8($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("FaViber", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class FaViber extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$8, create_fragment$8, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FaViber",
			options,
			id: create_fragment$8.name
		});
	}
}

/* node_modules/svelte-icons/fa/FaShare.svelte generated by Svelte v3.24.0 */
const file$9 = "node_modules/svelte-icons/fa/FaShare.svelte";

// (4:8) <IconBase viewBox="0 0 512 512" {...$$props}>
function create_default_slot$7(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M503.691 189.836L327.687 37.851C312.281 24.546 288 35.347 288 56.015v80.053C127.371 137.907 0 170.1 0 322.326c0 61.441 39.581 122.309 83.333 154.132 13.653 9.931 33.111-2.533 28.077-18.631C66.066 312.814 132.917 274.316 288 272.085V360c0 20.7 24.3 31.453 39.687 18.164l176.004-152c11.071-9.562 11.086-26.753 0-36.328z");
			add_location(path, file$9, 4, 10, 153);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$7.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 512 512\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment$9(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 512 512" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot$7] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$9.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$9($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("FaShare", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class FaShare extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$9, create_fragment$9, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FaShare",
			options,
			id: create_fragment$9.name
		});
	}
}

/* node_modules/svelte-icons/md/MdCheck.svelte generated by Svelte v3.24.0 */
const file$a = "node_modules/svelte-icons/md/MdCheck.svelte";

// (4:8) <IconBase viewBox="0 0 24 24" {...$$props}>
function create_default_slot$8(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z");
			add_location(path, file$a, 4, 10, 151);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$8.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 24 24\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment$a(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 24 24" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot$8] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$a.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$a($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("MdCheck", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class MdCheck extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$a, create_fragment$a, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "MdCheck",
			options,
			id: create_fragment$a.name
		});
	}
}

/* node_modules/svelte-icons/gi/GiFemale.svelte generated by Svelte v3.24.0 */
const file$b = "node_modules/svelte-icons/gi/GiFemale.svelte";

// (4:8) <IconBase viewBox="0 0 512 512" {...$$props}>
function create_default_slot$9(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M256 25.438c-17.84 0-35.582 3.547-52.063 10.375-16.48 6.827-31.512 16.853-44.125 29.468-12.612 12.617-22.645 27.675-29.468 44.157C123.52 125.92 119.994 143.66 120 161.5c.005 17.832 3.547 35.558 10.375 52.03 6.828 16.474 16.858 31.488 29.47 44.095 12.61 12.607 27.65 22.646 44.124 29.47l.218.092c10.032 4.135 20.52 7.02 31.218 8.657l.125 18.906.314 49.188H165.97v40h70.124l.375 62.875.124 20 40-.25-.125-20-.376-62.625h69.937v-40h-70.186l-.313-49.438-.124-18.47c11.188-1.61 22.154-4.6 32.625-8.936 16.476-6.823 31.515-16.862 44.126-29.47 12.61-12.606 22.64-27.62 29.47-44.093 6.827-16.472 10.37-34.198 10.374-52.03.005-17.84-3.52-35.58-10.344-52.063-6.823-16.482-16.856-31.54-29.47-44.156-12.61-12.614-27.643-22.64-44.123-29.468-16.48-6.827-34.224-10.374-52.063-10.374zm0 40c12.536 0 25.17 2.514 36.75 7.312 11.58 4.798 22.294 11.947 31.156 20.813 8.863 8.865 15.987 19.573 20.78 31.156 4.796 11.58 7.318 24.213 7.314 36.75-.004 12.53-2.515 25.173-7.313 36.75-4.797 11.575-11.95 22.264-20.812 31.124-8.862 8.86-19.58 16.018-31.156 20.812-11.58 4.795-24.19 7.28-36.72 7.28-12.53.002-25.14-2.485-36.72-7.28-11.576-4.794-22.293-11.953-31.155-20.812-8.862-8.86-16.015-19.55-20.813-31.125-4.797-11.577-7.308-24.22-7.312-36.75-.004-12.537 2.518-25.17 7.313-36.75 4.794-11.584 11.918-22.292 20.78-31.157 8.863-8.866 19.576-16.015 31.157-20.813 11.58-4.798 24.214-7.313 36.75-7.313z");
			add_location(path, file$b, 4, 10, 153);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$9.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 512 512\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment$b(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 512 512" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot$9] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$b.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$b($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("GiFemale", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class GiFemale extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$b, create_fragment$b, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "GiFemale",
			options,
			id: create_fragment$b.name
		});
	}
}

/* node_modules/svelte-icons/io/IoMdSend.svelte generated by Svelte v3.24.0 */
const file$c = "node_modules/svelte-icons/io/IoMdSend.svelte";

// (4:8) <IconBase viewBox="0 0 512 512" {...$$props}>
function create_default_slot$a(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M48 448l416-192L48 64v149.333L346 256 48 298.667z");
			add_location(path, file$c, 4, 10, 153);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$a.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 512 512\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment$c(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 512 512" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot$a] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$c.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$c($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("IoMdSend", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class IoMdSend extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$c, create_fragment$c, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "IoMdSend",
			options,
			id: create_fragment$c.name
		});
	}
}

/* node_modules/svelte-icons/go/GoSearch.svelte generated by Svelte v3.24.0 */
const file$d = "node_modules/svelte-icons/go/GoSearch.svelte";

// (4:8) <IconBase viewBox="0 0 16 16" {...$$props}>
function create_default_slot$b(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M15.7 13.3l-3.81-3.83A5.93 5.93 0 0 0 13 6c0-3.31-2.69-6-6-6S1 2.69 1 6s2.69 6 6 6c1.3 0 2.48-.41 3.47-1.11l3.83 3.81c.19.2.45.3.7.3.25 0 .52-.09.7-.3a.996.996 0 0 0 0-1.41v.01zM7 10.7c-2.59 0-4.7-2.11-4.7-4.7 0-2.59 2.11-4.7 4.7-4.7 2.59 0 4.7 2.11 4.7 4.7 0 2.59-2.11 4.7-4.7 4.7z");
			add_location(path, file$d, 4, 10, 151);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$b.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 16 16\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment$d(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 16 16" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot$b] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$d.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$d($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("GoSearch", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class GoSearch extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$d, create_fragment$d, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "GoSearch",
			options,
			id: create_fragment$d.name
		});
	}
}

/* node_modules/svelte-icons/io/IoMdClose.svelte generated by Svelte v3.24.0 */
const file$e = "node_modules/svelte-icons/io/IoMdClose.svelte";

// (4:8) <IconBase viewBox="0 0 512 512" {...$$props}>
function create_default_slot$c(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M405 136.798L375.202 107 256 226.202 136.798 107 107 136.798 226.202 256 107 375.202 136.798 405 256 285.798 375.202 405 405 375.202 285.798 256z");
			add_location(path, file$e, 4, 10, 153);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$c.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 512 512\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment$e(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 512 512" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot$c] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$e.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$e($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("IoMdClose", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class IoMdClose extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$e, create_fragment$e, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "IoMdClose",
			options,
			id: create_fragment$e.name
		});
	}
}

/* node_modules/svelte-icons/fa/FaPhoneAlt.svelte generated by Svelte v3.24.0 */
const file$f = "node_modules/svelte-icons/fa/FaPhoneAlt.svelte";

// (4:8) <IconBase viewBox="0 0 512 512" {...$$props}>
function create_default_slot$d(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M497.39 361.8l-112-48a24 24 0 0 0-28 6.9l-49.6 60.6A370.66 370.66 0 0 1 130.6 204.11l60.6-49.6a23.94 23.94 0 0 0 6.9-28l-48-112A24.16 24.16 0 0 0 122.6.61l-104 24A24 24 0 0 0 0 48c0 256.5 207.9 464 464 464a24 24 0 0 0 23.4-18.6l24-104a24.29 24.29 0 0 0-14.01-27.6z");
			add_location(path, file$f, 4, 10, 153);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$d.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 512 512\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment$f(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 512 512" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot$d] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$f.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$f($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("FaPhoneAlt", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class FaPhoneAlt extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$f, create_fragment$f, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FaPhoneAlt",
			options,
			id: create_fragment$f.name
		});
	}
}

/* node_modules/svelte-icons/fa/FaFacebookF.svelte generated by Svelte v3.24.0 */
const file$g = "node_modules/svelte-icons/fa/FaFacebookF.svelte";

// (4:8) <IconBase viewBox="0 0 320 512" {...$$props}>
function create_default_slot$e(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M279.14 288l14.22-92.66h-88.91v-60.13c0-25.35 12.42-50.06 52.24-50.06h40.42V6.26S260.43 0 225.36 0c-73.22 0-121.08 44.38-121.08 124.72v70.62H22.89V288h81.39v224h100.17V288z");
			add_location(path, file$g, 4, 10, 153);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$e.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 320 512\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment$g(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 320 512" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot$e] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$g.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$g($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("FaFacebookF", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class FaFacebookF extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$g, create_fragment$g, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FaFacebookF",
			options,
			id: create_fragment$g.name
		});
	}
}

/* node_modules/svelte-icons/fa/FaRegSquare.svelte generated by Svelte v3.24.0 */
const file$h = "node_modules/svelte-icons/fa/FaRegSquare.svelte";

// (4:8) <IconBase viewBox="0 0 448 512" {...$$props}>
function create_default_slot$f(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zm-6 400H54c-3.3 0-6-2.7-6-6V86c0-3.3 2.7-6 6-6h340c3.3 0 6 2.7 6 6v340c0 3.3-2.7 6-6 6z");
			add_location(path, file$h, 4, 10, 153);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$f.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 448 512\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment$h(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 448 512" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot$f] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$h.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$h($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("FaRegSquare", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class FaRegSquare extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$h, create_fragment$h, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FaRegSquare",
			options,
			id: create_fragment$h.name
		});
	}
}

/* node_modules/svelte-icons/ti/TiStarburst.svelte generated by Svelte v3.24.0 */
const file$i = "node_modules/svelte-icons/ti/TiStarburst.svelte";

// (4:8) <IconBase viewBox="0 0 24 24" {...$$props}>
function create_default_slot$g(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M19.064 10.109l1.179-2.387c.074-.149.068-.327-.015-.471-.083-.145-.234-.238-.401-.249l-2.656-.172-.172-2.656c-.011-.167-.104-.317-.249-.401-.145-.084-.322-.09-.472-.015l-2.385 1.18-1.477-2.215c-.186-.278-.646-.278-.832 0l-1.477 2.215-2.385-1.18c-.151-.075-.327-.069-.472.015-.145.083-.238.234-.249.401l-.171 2.656-2.657.171c-.167.011-.318.104-.401.249-.084.145-.089.322-.015.472l1.179 2.386-2.214 1.477c-.139.093-.223.249-.223.416s.083.323.223.416l2.215 1.477-1.18 2.386c-.074.15-.068.327.015.472.083.144.234.238.401.248l2.656.171.171 2.657c.011.167.104.317.249.401.144.083.32.088.472.015l2.386-1.179 1.477 2.214c.093.139.249.223.416.223s.323-.083.416-.223l1.477-2.214 2.386 1.179c.15.073.327.068.472-.015s.238-.234.249-.401l.171-2.656 2.656-.172c.167-.011.317-.104.401-.249.083-.145.089-.322.015-.472l-1.179-2.385 2.214-1.478c.139-.093.223-.249.223-.416s-.083-.323-.223-.416l-2.214-1.475z");
			add_location(path, file$i, 4, 10, 151);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$g.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 24 24\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment$i(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 24 24" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot$g] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$i.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$i($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("TiStarburst", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class TiStarburst extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$i, create_fragment$i, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "TiStarburst",
			options,
			id: create_fragment$i.name
		});
	}
}

/* node_modules/svelte-icons/fa/FaDollarSign.svelte generated by Svelte v3.24.0 */
const file$j = "node_modules/svelte-icons/fa/FaDollarSign.svelte";

// (4:8) <IconBase viewBox="0 0 288 512" {...$$props}>
function create_default_slot$h(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M209.2 233.4l-108-31.6C88.7 198.2 80 186.5 80 173.5c0-16.3 13.2-29.5 29.5-29.5h66.3c12.2 0 24.2 3.7 34.2 10.5 6.1 4.1 14.3 3.1 19.5-2l34.8-34c7.1-6.9 6.1-18.4-1.8-24.5C238 74.8 207.4 64.1 176 64V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v48h-2.5C45.8 64-5.4 118.7.5 183.6c4.2 46.1 39.4 83.6 83.8 96.6l102.5 30c12.5 3.7 21.2 15.3 21.2 28.3 0 16.3-13.2 29.5-29.5 29.5h-66.3C100 368 88 364.3 78 357.5c-6.1-4.1-14.3-3.1-19.5 2l-34.8 34c-7.1 6.9-6.1 18.4 1.8 24.5 24.5 19.2 55.1 29.9 86.5 30v48c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16v-48.2c46.6-.9 90.3-28.6 105.7-72.7 21.5-61.6-14.6-124.8-72.5-141.7z");
			add_location(path, file$j, 4, 10, 153);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$h.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 288 512\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment$j(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 288 512" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot$h] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$j.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$j($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("FaDollarSign", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class FaDollarSign extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$j, create_fragment$j, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FaDollarSign",
			options,
			id: create_fragment$j.name
		});
	}
}

/* node_modules/svelte-icons/fa/FaCalendarAlt.svelte generated by Svelte v3.24.0 */
const file$k = "node_modules/svelte-icons/fa/FaCalendarAlt.svelte";

// (4:8) <IconBase viewBox="0 0 448 512" {...$$props}>
function create_default_slot$i(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M0 464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V192H0v272zm320-196c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zm0 128c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zM192 268c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zm0 128c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zM64 268c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H76c-6.6 0-12-5.4-12-12v-40zm0 128c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H76c-6.6 0-12-5.4-12-12v-40zM400 64h-48V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v48H160V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v48H48C21.5 64 0 85.5 0 112v48h448v-48c0-26.5-21.5-48-48-48z");
			add_location(path, file$k, 4, 10, 153);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$i.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 448 512\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment$k(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 448 512" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot$i] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$k.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$k($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("FaCalendarAlt", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class FaCalendarAlt extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$k, create_fragment$k, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FaCalendarAlt",
			options,
			id: create_fragment$k.name
		});
	}
}

/* node_modules/svelte-icons/fa/FaCheckSquare.svelte generated by Svelte v3.24.0 */
const file$l = "node_modules/svelte-icons/fa/FaCheckSquare.svelte";

// (4:8) <IconBase viewBox="0 0 448 512" {...$$props}>
function create_default_slot$j(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M400 480H48c-26.51 0-48-21.49-48-48V80c0-26.51 21.49-48 48-48h352c26.51 0 48 21.49 48 48v352c0 26.51-21.49 48-48 48zm-204.686-98.059l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.248-16.379-6.249-22.628 0L184 302.745l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.25 16.379 6.25 22.628.001z");
			add_location(path, file$l, 4, 10, 153);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$j.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 448 512\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment$l(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 448 512" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot$j] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$l.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$l($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("FaCheckSquare", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class FaCheckSquare extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$l, create_fragment$l, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FaCheckSquare",
			options,
			id: create_fragment$l.name
		});
	}
}

/* node_modules/svelte-icons/md/MdCloudUpload.svelte generated by Svelte v3.24.0 */
const file$m = "node_modules/svelte-icons/md/MdCloudUpload.svelte";

// (4:8) <IconBase viewBox="0 0 24 24" {...$$props}>
function create_default_slot$k(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM14 13v4h-4v-4H7l5-5 5 5h-3z");
			add_location(path, file$m, 4, 10, 151);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$k.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 24 24\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment$m(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 24 24" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot$k] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$m.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$m($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("MdCloudUpload", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class MdCloudUpload extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$m, create_fragment$m, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "MdCloudUpload",
			options,
			id: create_fragment$m.name
		});
	}
}

/* node_modules/svelte-icons/md/MdRemoveRedEye.svelte generated by Svelte v3.24.0 */
const file$n = "node_modules/svelte-icons/md/MdRemoveRedEye.svelte";

// (4:8) <IconBase viewBox="0 0 24 24" {...$$props}>
function create_default_slot$l(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z");
			add_location(path, file$n, 4, 10, 151);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$l.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 24 24\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment$n(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 24 24" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot$l] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$n.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$n($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("MdRemoveRedEye", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class MdRemoveRedEye extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$n, create_fragment$n, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "MdRemoveRedEye",
			options,
			id: create_fragment$n.name
		});
	}
}

/* node_modules/svelte-icons/fa/FaMapMarkerAlt.svelte generated by Svelte v3.24.0 */
const file$o = "node_modules/svelte-icons/fa/FaMapMarkerAlt.svelte";

// (4:8) <IconBase viewBox="0 0 384 512" {...$$props}>
function create_default_slot$m(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M172.268 501.67C26.97 291.031 0 269.413 0 192 0 85.961 85.961 0 192 0s192 85.961 192 192c0 77.413-26.97 99.031-172.268 309.67-9.535 13.774-29.93 13.773-39.464 0zM192 272c44.183 0 80-35.817 80-80s-35.817-80-80-80-80 35.817-80 80 35.817 80 80 80z");
			add_location(path, file$o, 4, 10, 153);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$m.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 384 512\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment$o(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 384 512" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot$m] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$o.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$o($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("FaMapMarkerAlt", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class FaMapMarkerAlt extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$o, create_fragment$o, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FaMapMarkerAlt",
			options,
			id: create_fragment$o.name
		});
	}
}

/* node_modules/svelte-icons/fa/FaTelegramPlane.svelte generated by Svelte v3.24.0 */
const file$p = "node_modules/svelte-icons/fa/FaTelegramPlane.svelte";

// (4:8) <IconBase viewBox="0 0 448 512" {...$$props}>
function create_default_slot$n(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M446.7 98.6l-67.6 318.8c-5.1 22.5-18.4 28.1-37.3 17.5l-103-75.9-49.7 47.8c-5.5 5.5-10.1 10.1-20.7 10.1l7.4-104.9 190.9-172.5c8.3-7.4-1.8-11.5-12.9-4.1L117.8 284 16.2 252.2c-22.1-6.9-22.5-22.1 4.6-32.7L418.2 66.4c18.4-6.9 34.5 4.1 28.5 32.2z");
			add_location(path, file$p, 4, 10, 153);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$n.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 448 512\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment$p(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 448 512" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot$n] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$p.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$p($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("FaTelegramPlane", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class FaTelegramPlane extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$p, create_fragment$p, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FaTelegramPlane",
			options,
			id: create_fragment$p.name
		});
	}
}

/* node_modules/svelte-icons/fa/FaLongArrowAltUp.svelte generated by Svelte v3.24.0 */
const file$q = "node_modules/svelte-icons/fa/FaLongArrowAltUp.svelte";

// (4:8) <IconBase viewBox="0 0 256 512" {...$$props}>
function create_default_slot$o(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M88 166.059V468c0 6.627 5.373 12 12 12h56c6.627 0 12-5.373 12-12V166.059h46.059c21.382 0 32.09-25.851 16.971-40.971l-86.059-86.059c-9.373-9.373-24.569-9.373-33.941 0l-86.059 86.059c-15.119 15.119-4.411 40.971 16.971 40.971H88z");
			add_location(path, file$q, 4, 10, 153);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$o.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 256 512\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment$q(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 256 512" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot$o] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$q.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$q($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("FaLongArrowAltUp", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class FaLongArrowAltUp extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$q, create_fragment$q, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FaLongArrowAltUp",
			options,
			id: create_fragment$q.name
		});
	}
}

/* node_modules/svelte-icons/fa/FaLongArrowAltDown.svelte generated by Svelte v3.24.0 */
const file$r = "node_modules/svelte-icons/fa/FaLongArrowAltDown.svelte";

// (4:8) <IconBase viewBox="0 0 256 512" {...$$props}>
function create_default_slot$p(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M168 345.941V44c0-6.627-5.373-12-12-12h-56c-6.627 0-12 5.373-12 12v301.941H41.941c-21.382 0-32.09 25.851-16.971 40.971l86.059 86.059c9.373 9.373 24.569 9.373 33.941 0l86.059-86.059c15.119-15.119 4.411-40.971-16.971-40.971H168z");
			add_location(path, file$r, 4, 10, 153);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$p.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 256 512\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment$r(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 256 512" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot$p] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$r.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$r($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("FaLongArrowAltDown", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class FaLongArrowAltDown extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$r, create_fragment$r, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FaLongArrowAltDown",
			options,
			id: create_fragment$r.name
		});
	}
}

/* node_modules/svelte-icons/fa/FaLongArrowAltLeft.svelte generated by Svelte v3.24.0 */
const file$s = "node_modules/svelte-icons/fa/FaLongArrowAltLeft.svelte";

// (4:8) <IconBase viewBox="0 0 448 512" {...$$props}>
function create_default_slot$q(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M134.059 296H436c6.627 0 12-5.373 12-12v-56c0-6.627-5.373-12-12-12H134.059v-46.059c0-21.382-25.851-32.09-40.971-16.971L7.029 239.029c-9.373 9.373-9.373 24.569 0 33.941l86.059 86.059c15.119 15.119 40.971 4.411 40.971-16.971V296z");
			add_location(path, file$s, 4, 10, 153);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$q.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 448 512\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment$s(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 448 512" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot$q] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$s.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$s($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("FaLongArrowAltLeft", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class FaLongArrowAltLeft extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$s, create_fragment$s, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FaLongArrowAltLeft",
			options,
			id: create_fragment$s.name
		});
	}
}

/* node_modules/svelte-icons/fa/FaLongArrowAltRight.svelte generated by Svelte v3.24.0 */
const file$t = "node_modules/svelte-icons/fa/FaLongArrowAltRight.svelte";

// (4:8) <IconBase viewBox="0 0 448 512" {...$$props}>
function create_default_slot$r(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M313.941 216H12c-6.627 0-12 5.373-12 12v56c0 6.627 5.373 12 12 12h301.941v46.059c0 21.382 25.851 32.09 40.971 16.971l86.059-86.059c9.373-9.373 9.373-24.569 0-33.941l-86.059-86.059c-15.119-15.119-40.971-4.411-40.971 16.971V216z");
			add_location(path, file$t, 4, 10, 153);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$r.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 448 512\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment$t(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 448 512" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot$r] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$t.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$t($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("FaLongArrowAltRight", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class FaLongArrowAltRight extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$t, create_fragment$t, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FaLongArrowAltRight",
			options,
			id: create_fragment$t.name
		});
	}
}

/* node_modules/svelte-icons/md/MdKeyboardArrowUp.svelte generated by Svelte v3.24.0 */
const file$u = "node_modules/svelte-icons/md/MdKeyboardArrowUp.svelte";

// (4:8) <IconBase viewBox="0 0 24 24" {...$$props}>
function create_default_slot$s(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z");
			add_location(path, file$u, 4, 10, 151);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$s.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 24 24\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment$u(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 24 24" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot$s] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$u.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$u($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("MdKeyboardArrowUp", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class MdKeyboardArrowUp extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$u, create_fragment$u, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "MdKeyboardArrowUp",
			options,
			id: create_fragment$u.name
		});
	}
}

/* node_modules/svelte-icons/md/MdKeyboardArrowLeft.svelte generated by Svelte v3.24.0 */
const file$v = "node_modules/svelte-icons/md/MdKeyboardArrowLeft.svelte";

// (4:8) <IconBase viewBox="0 0 24 24" {...$$props}>
function create_default_slot$t(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z");
			add_location(path, file$v, 4, 10, 151);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$t.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 24 24\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment$v(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 24 24" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot$t] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$v.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$v($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("MdKeyboardArrowLeft", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class MdKeyboardArrowLeft extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$v, create_fragment$v, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "MdKeyboardArrowLeft",
			options,
			id: create_fragment$v.name
		});
	}
}

/* node_modules/svelte-icons/md/MdKeyboardArrowDown.svelte generated by Svelte v3.24.0 */
const file$w = "node_modules/svelte-icons/md/MdKeyboardArrowDown.svelte";

// (4:8) <IconBase viewBox="0 0 24 24" {...$$props}>
function create_default_slot$u(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M7.41 7.84L12 12.42l4.59-4.58L18 9.25l-6 6-6-6z");
			add_location(path, file$w, 4, 10, 151);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$u.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 24 24\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment$w(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 24 24" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot$u] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$w.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$w($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("MdKeyboardArrowDown", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class MdKeyboardArrowDown extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$w, create_fragment$w, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "MdKeyboardArrowDown",
			options,
			id: create_fragment$w.name
		});
	}
}

/* node_modules/svelte-icons/md/MdKeyboardArrowRight.svelte generated by Svelte v3.24.0 */
const file$x = "node_modules/svelte-icons/md/MdKeyboardArrowRight.svelte";

// (4:8) <IconBase viewBox="0 0 24 24" {...$$props}>
function create_default_slot$v(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z");
			add_location(path, file$x, 4, 10, 151);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$v.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 24 24\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment$x(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 24 24" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot$v] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$x.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$x($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("MdKeyboardArrowRight", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class MdKeyboardArrowRight extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$x, create_fragment$x, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "MdKeyboardArrowRight",
			options,
			id: create_fragment$x.name
		});
	}
}

/* node_modules/svelte-icons/io/IoIosCheckmarkCircle.svelte generated by Svelte v3.24.0 */
const file$y = "node_modules/svelte-icons/io/IoIosCheckmarkCircle.svelte";

// (4:8) <IconBase viewBox="0 0 512 512" {...$$props}>
function create_default_slot$w(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M256 48C141.1 48 48 141.1 48 256s93.1 208 208 208 208-93.1 208-208S370.9 48 256 48zm106.5 150.5L228.8 332.8h-.1c-1.7 1.7-6.3 5.5-11.6 5.5-3.8 0-8.1-2.1-11.7-5.7l-56-56c-1.6-1.6-1.6-4.1 0-5.7l17.8-17.8c.8-.8 1.8-1.2 2.8-1.2 1 0 2 .4 2.8 1.2l44.4 44.4 122-122.9c.8-.8 1.8-1.2 2.8-1.2 1.1 0 2.1.4 2.8 1.2l17.5 18.1c1.8 1.7 1.8 4.2.2 5.8z");
			add_location(path, file$y, 4, 10, 153);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$w.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 512 512\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment$y(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 512 512" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot$w] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$y.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$y($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("IoIosCheckmarkCircle", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class IoIosCheckmarkCircle extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$y, create_fragment$y, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "IoIosCheckmarkCircle",
			options,
			id: create_fragment$y.name
		});
	}
}

/* node_modules/svelte-icons/io/IoIosCloseCircleOutline.svelte generated by Svelte v3.24.0 */
const file$z = "node_modules/svelte-icons/io/IoIosCloseCircleOutline.svelte";

// (4:8) <IconBase viewBox="0 0 512 512" {...$$props}>
function create_default_slot$x(ctx) {
	let path0;
	let t;
	let path1;

	const block = {
		c: function create() {
			path0 = svg_element("path");
			t = space();
			path1 = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path0 = claim_element(nodes, "path", { d: true }, 1);
			children(path0).forEach(detach_dev);
			t = claim_space(nodes);
			path1 = claim_element(nodes, "path", { d: true }, 1);
			children(path1).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path0, "d", "M331.3 308.7L278.6 256l52.7-52.7c6.2-6.2 6.2-16.4 0-22.6-6.2-6.2-16.4-6.2-22.6 0L256 233.4l-52.7-52.7c-6.2-6.2-15.6-7.1-22.6 0-7.1 7.1-6 16.6 0 22.6l52.7 52.7-52.7 52.7c-6.7 6.7-6.4 16.3 0 22.6 6.4 6.4 16.4 6.2 22.6 0l52.7-52.7 52.7 52.7c6.2 6.2 16.4 6.2 22.6 0 6.3-6.2 6.3-16.4 0-22.6z");
			add_location(path0, file$z, 4, 10, 153);
			attr_dev(path1, "d", "M256 76c48.1 0 93.3 18.7 127.3 52.7S436 207.9 436 256s-18.7 93.3-52.7 127.3S304.1 436 256 436c-48.1 0-93.3-18.7-127.3-52.7S76 304.1 76 256s18.7-93.3 52.7-127.3S207.9 76 256 76m0-28C141.1 48 48 141.1 48 256s93.1 208 208 208 208-93.1 208-208S370.9 48 256 48z");
			add_location(path1, file$z, 5, 0, 453);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path0, anchor);
			insert_dev(target, t, anchor);
			insert_dev(target, path1, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path0);
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(path1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$x.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 512 512\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment$z(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 512 512" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot$x] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$z.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$z($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("IoIosCloseCircleOutline", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class IoIosCloseCircleOutline extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$z, create_fragment$z, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "IoIosCloseCircleOutline",
			options,
			id: create_fragment$z.name
		});
	}
}

var icons = {
    email: FaAt,
    edit: MdEdit,
    link: MdLink,
    moon: FaMoon,
    male: GiMale,
    send: IoMdSend,
    share: FaShare,
    heart: FaHeart,
    viber: FaViber,
    close: IoMdClose,
    box: FaRegSquare,
    search: GoSearch,
    female: GiFemale,
    phone: FaPhoneAlt,
    coin: FaDollarSign,
    eye: MdRemoveRedEye,
    polygon: TiStarburst,
    facebook: FaFacebookF,
    upload: MdCloudUpload,
    'check-flag': MdCheck,
    calendar: FaCalendarAlt,
    location: FaMapMarkerAlt,
    telegram: FaTelegramPlane,
    'box-checked': FaCheckSquare,
    'arrow-up': FaLongArrowAltUp,
    'arrow-left': FaLongArrowAltLeft,
    'arrow-down': FaLongArrowAltDown,
    'arrow-right': FaLongArrowAltRight,
    'caret-up': MdKeyboardArrowUp,
    'caret-left': MdKeyboardArrowLeft,
    'caret-down': MdKeyboardArrowDown,
    'caret-right': MdKeyboardArrowRight,
    'checked-circle': IoIosCheckmarkCircle,
    'cancel-circle': IoIosCloseCircleOutline,
};

/**
 *
 * @description API URLs builders.
 */
var endpoints = {
    USER: (id) => `user.json`,
    USERS: () => `users.json`,

    RECENT: (id) => `recent.json`,
    RECENTS: () => `recents.json`,

    COMMENT: (id) => `comment.json`,
    COMMENTS: () => `comments.json`,

    FUND: (id) => `fund.json`,
    FUNDS: () => `funds.json`,

    ORGANIZATION: (id) => `organization.json`,
    ORGANIZATIONS: () => `organizations.json`,

    IMAGES_UPLOAD: () => `/images/upload`,
};
// export default {
//     USER: (id) => `apiusers/${id || ':id'}`,
//     USERS: () => `apiusers`,
//
//     RECENT: (id) => `apirecents/${id || ':id'}`,
//     RECENTS: () => `apirecents`,
//
//     COMMENT: (id) => `apicomments/${id || ':id'}`,
//     COMMENTS: () => `apicomments`,
//
//     FUND: (id) => `apifunds/${id || ':id'}`,
//     FUNDS: () => `apifunds`,
//
//     ORGANIZATION: (id) => `apiorganizations/${id || ':id'}`,
//     ORGANIZATIONS: () => `apiorganizations`,
// }

const vaccinations = [
    {
        text: 'Від кліщів',
        value: 'from-fungi'
    },
    {
        text: 'Від сказу',
        value: 'from-rabies'
    },
    {
        text: 'Від парагрипу',
        value: 'from-parainfluenza'
    },
    {
        text: 'Від чуми м\'ясоїдних',
        value: 'from-carnivorous-plague'
    },
    {
        text: 'Від парвовіроз',
        value: 'from-parvovirus'
    },
    {
        text: 'Від аденовіроз',
        value: 'from-adenovirus'
    },
    {
        text: 'Від лептоспіроз',
        value: 'from-leptospirosis'
    },
];

var options = /*#__PURE__*/Object.freeze({
    __proto__: null,
    vaccinations: vaccinations
});

/* src/components/Icon.svelte generated by Svelte v3.24.0 */
const file$A = "src/components/Icon.svelte";

function add_css$2() {
	var style = element("style");
	style.id = "svelte-1v3w8cp-style";
	style.textContent = ".ico.svelte-1v3w8cp{-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;-ms-flex-item-align:stretch;align-self:stretch;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;vertical-align:middle}.ico.svelte-1v3w8cp:not(.custom){color:rgba(var(--theme-svg-fill))}.tiny.svelte-1v3w8cp{width:13px;height:13px;-webkit-box-flex:0;-ms-flex:none;flex:none;-ms-flex-item-align:auto;align-self:auto}.small.svelte-1v3w8cp{width:18px;height:18px;-webkit-box-flex:0;-ms-flex:none;flex:none;-ms-flex-item-align:auto;align-self:auto}.medium.svelte-1v3w8cp{width:24px;height:24px;-webkit-box-flex:0;-ms-flex:none;flex:none;-ms-flex-item-align:auto;align-self:auto}.big.svelte-1v3w8cp{width:30px;height:30px;-webkit-box-flex:0;-ms-flex:none;flex:none;-ms-flex-item-align:auto;align-self:auto}.large.svelte-1v3w8cp{width:40px;height:40px;-webkit-box-flex:0;-ms-flex:none;flex:none;-ms-flex-item-align:auto;align-self:auto}.ico.primary.svelte-1v3w8cp{color:rgb(var(--color-success))}.ico.danger.svelte-1v3w8cp{color:rgb(var(--color-danger))}.ico.info.svelte-1v3w8cp{color:rgb(var(--color-info))}.ico.light.svelte-1v3w8cp{color:rgb(var(--color-white))}.ico.dark.svelte-1v3w8cp{color:rgb(var(--color-black))}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSWNvbi5zdmVsdGUiLCJzb3VyY2VzIjpbIkljb24uc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gICAgLyoqXG4gICAgICogQGluZm8gc2VlIG1vcmUgaWNvbnM6IGh0dHBzOi8vd3d3LnN2ZWx0ZS1pY29ucy5naWJkaWcuY29tL1xuICAgICAqL1xuICAgIGltcG9ydCB7IGNsYXNzbmFtZXMsIHRvQ1NTU3RyaW5nIH0gZnJvbSAnQHV0aWxzJ1xuICAgIGltcG9ydCB7IGljb25zIH0gZnJvbSAnQGNvbmZpZydcblxuXG4gICAgZXhwb3J0IGxldCB0eXBlXG4gICAgZXhwb3J0IGxldCBpcyA9IG51bGwgLy8gcHJpbWFyeXxpbmZvfGRhbmdlcnxsaWdodHxkYXJrXG4gICAgZXhwb3J0IGxldCBzaXplID0gbnVsbCAvLyBzbWFsbHxtZWRpdW18YmlnXG4gICAgZXhwb3J0IGxldCByb3RhdGUgPSAwXG4gICAgZXhwb3J0IGxldCBzdHlsZSA9IHVuZGVmaW5lZFxuICAgIGV4cG9ydCBsZXQgaWQgPSB1bmRlZmluZWRcbiAgICBleHBvcnQgbGV0IHRpdGxlID0gdW5kZWZpbmVkXG4gICAgZXhwb3J0IGxldCBhcmlhTGFiZWwgPSB1bmRlZmluZWRcblxuICAgIGxldCB0aXRsZVByb3AgPSB0aXRsZSB8fCBhcmlhTGFiZWxcbiAgICBsZXQgYXJpYUxhYmVsUHJvcCA9IGFyaWFMYWJlbCB8fCB0aXRsZVxuICAgIGxldCBzdHlsZVByb3AgPSB0b0NTU1N0cmluZyh7IHRyYW5zZm9ybTogISFyb3RhdGUgPyBgcm90YXRlWigke3JvdGF0ZX1kZWcpYCA6IG51bGwsIC4uLnN0eWxlIH0pXG5cbiAgICAkOiBjbGFzc1Byb3AgPSBjbGFzc25hbWVzKCdpY28nLCBpcywgc2l6ZSwgJCRwcm9wcy5jbGFzcylcbjwvc2NyaXB0PlxuXG48aSB7aWR9IHRpdGxlPXt0aXRsZVByb3B9IHN0eWxlPXtzdHlsZVByb3B9IGNsYXNzPXtjbGFzc1Byb3B9PlxuICAgIDxzdmVsdGU6Y29tcG9uZW50IHRoaXM9e2ljb25zW3R5cGVdfS8+XG48L2k+XG5cbjxzdHlsZT5cbi5pY28ge1xuICAgIC13ZWJraXQtYm94LWZsZXg6IDE7XG4gICAgICAgIC1tcy1mbGV4LXBvc2l0aXZlOiAxO1xuICAgICAgICAgICAgZmxleC1ncm93OiAxO1xuICAgIC1tcy1mbGV4LWl0ZW0tYWxpZ246IHN0cmV0Y2g7XG4gICAgICAgIGFsaWduLXNlbGY6IHN0cmV0Y2g7XG4gICAgZGlzcGxheTogLXdlYmtpdC1pbmxpbmUtYm94O1xuICAgIGRpc3BsYXk6IC1tcy1pbmxpbmUtZmxleGJveDtcbiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xufVxuXG4uaWNvOm5vdCguY3VzdG9tKSB7XG4gICAgY29sb3I6IHJnYmEodmFyKC0tdGhlbWUtc3ZnLWZpbGwpKTtcbn1cblxuLyogLS0tLS0tLS0tLS0tPT09PT09PT09KCBTaXplICk9PT09PT09PT0tLS0tLS0tLS0tLS0gKi9cbi50aW55IHtcbiAgICB3aWR0aDogMTNweDtcbiAgICBoZWlnaHQ6IDEzcHg7XG4gICAgLXdlYmtpdC1ib3gtZmxleDogMDtcbiAgICAgICAgLW1zLWZsZXg6IG5vbmU7XG4gICAgICAgICAgICBmbGV4OiBub25lO1xuICAgIC1tcy1mbGV4LWl0ZW0tYWxpZ246IGF1dG87XG4gICAgICAgIGFsaWduLXNlbGY6IGF1dG87XG59XG5cbi5zbWFsbCB7XG4gICAgd2lkdGg6IDE4cHg7XG4gICAgaGVpZ2h0OiAxOHB4O1xuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XG4gICAgICAgIC1tcy1mbGV4OiBub25lO1xuICAgICAgICAgICAgZmxleDogbm9uZTtcbiAgICAtbXMtZmxleC1pdGVtLWFsaWduOiBhdXRvO1xuICAgICAgICBhbGlnbi1zZWxmOiBhdXRvO1xufVxuXG4ubWVkaXVtIHtcbiAgICB3aWR0aDogMjRweDtcbiAgICBoZWlnaHQ6IDI0cHg7XG4gICAgLXdlYmtpdC1ib3gtZmxleDogMDtcbiAgICAgICAgLW1zLWZsZXg6IG5vbmU7XG4gICAgICAgICAgICBmbGV4OiBub25lO1xuICAgIC1tcy1mbGV4LWl0ZW0tYWxpZ246IGF1dG87XG4gICAgICAgIGFsaWduLXNlbGY6IGF1dG87XG59XG5cbi5iaWcge1xuICAgIHdpZHRoOiAzMHB4O1xuICAgIGhlaWdodDogMzBweDtcbiAgICAtd2Via2l0LWJveC1mbGV4OiAwO1xuICAgICAgICAtbXMtZmxleDogbm9uZTtcbiAgICAgICAgICAgIGZsZXg6IG5vbmU7XG4gICAgLW1zLWZsZXgtaXRlbS1hbGlnbjogYXV0bztcbiAgICAgICAgYWxpZ24tc2VsZjogYXV0bztcbn1cblxuLmxhcmdlIHtcbiAgICB3aWR0aDogNDBweDtcbiAgICBoZWlnaHQ6IDQwcHg7XG4gICAgLXdlYmtpdC1ib3gtZmxleDogMDtcbiAgICAgICAgLW1zLWZsZXg6IG5vbmU7XG4gICAgICAgICAgICBmbGV4OiBub25lO1xuICAgIC1tcy1mbGV4LWl0ZW0tYWxpZ246IGF1dG87XG4gICAgICAgIGFsaWduLXNlbGY6IGF1dG87XG59XG5cbi8qIC0tLS0tLS0tLS0tLT09PT09PT09PSggQ29sb3IgKT09PT09PT09PS0tLS0tLS0tLS0tLSAqL1xuLmljby5wcmltYXJ5IHtcbiAgICBjb2xvcjogcmdiKHZhcigtLWNvbG9yLXN1Y2Nlc3MpKTtcbn1cblxuLmljby5kYW5nZXIge1xuICAgIGNvbG9yOiByZ2IodmFyKC0tY29sb3ItZGFuZ2VyKSk7XG59XG5cbi5pY28uaW5mbyB7XG4gICAgY29sb3I6IHJnYih2YXIoLS1jb2xvci1pbmZvKSk7XG59XG5cbi5pY28ubGlnaHQge1xuICAgIGNvbG9yOiByZ2IodmFyKC0tY29sb3Itd2hpdGUpKTtcbn1cblxuLmljby5kYXJrIHtcbiAgICBjb2xvcjogcmdiKHZhcigtLWNvbG9yLWJsYWNrKSk7XG59PC9zdHlsZT5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE2QkEsSUFBSSxlQUFDLENBQUMsQUFDRixnQkFBZ0IsQ0FBRSxDQUFDLENBQ2YsaUJBQWlCLENBQUUsQ0FBQyxDQUNoQixTQUFTLENBQUUsQ0FBQyxDQUNwQixtQkFBbUIsQ0FBRSxPQUFPLENBQ3hCLFVBQVUsQ0FBRSxPQUFPLENBQ3ZCLE9BQU8sQ0FBRSxrQkFBa0IsQ0FDM0IsT0FBTyxDQUFFLGtCQUFrQixDQUMzQixPQUFPLENBQUUsV0FBVyxDQUNwQixjQUFjLENBQUUsTUFBTSxBQUMxQixDQUFDLEFBRUQsbUJBQUksS0FBSyxPQUFPLENBQUMsQUFBQyxDQUFDLEFBQ2YsS0FBSyxDQUFFLEtBQUssSUFBSSxnQkFBZ0IsQ0FBQyxDQUFDLEFBQ3RDLENBQUMsQUFHRCxLQUFLLGVBQUMsQ0FBQyxBQUNILEtBQUssQ0FBRSxJQUFJLENBQ1gsTUFBTSxDQUFFLElBQUksQ0FDWixnQkFBZ0IsQ0FBRSxDQUFDLENBQ2YsUUFBUSxDQUFFLElBQUksQ0FDVixJQUFJLENBQUUsSUFBSSxDQUNsQixtQkFBbUIsQ0FBRSxJQUFJLENBQ3JCLFVBQVUsQ0FBRSxJQUFJLEFBQ3hCLENBQUMsQUFFRCxNQUFNLGVBQUMsQ0FBQyxBQUNKLEtBQUssQ0FBRSxJQUFJLENBQ1gsTUFBTSxDQUFFLElBQUksQ0FDWixnQkFBZ0IsQ0FBRSxDQUFDLENBQ2YsUUFBUSxDQUFFLElBQUksQ0FDVixJQUFJLENBQUUsSUFBSSxDQUNsQixtQkFBbUIsQ0FBRSxJQUFJLENBQ3JCLFVBQVUsQ0FBRSxJQUFJLEFBQ3hCLENBQUMsQUFFRCxPQUFPLGVBQUMsQ0FBQyxBQUNMLEtBQUssQ0FBRSxJQUFJLENBQ1gsTUFBTSxDQUFFLElBQUksQ0FDWixnQkFBZ0IsQ0FBRSxDQUFDLENBQ2YsUUFBUSxDQUFFLElBQUksQ0FDVixJQUFJLENBQUUsSUFBSSxDQUNsQixtQkFBbUIsQ0FBRSxJQUFJLENBQ3JCLFVBQVUsQ0FBRSxJQUFJLEFBQ3hCLENBQUMsQUFFRCxJQUFJLGVBQUMsQ0FBQyxBQUNGLEtBQUssQ0FBRSxJQUFJLENBQ1gsTUFBTSxDQUFFLElBQUksQ0FDWixnQkFBZ0IsQ0FBRSxDQUFDLENBQ2YsUUFBUSxDQUFFLElBQUksQ0FDVixJQUFJLENBQUUsSUFBSSxDQUNsQixtQkFBbUIsQ0FBRSxJQUFJLENBQ3JCLFVBQVUsQ0FBRSxJQUFJLEFBQ3hCLENBQUMsQUFFRCxNQUFNLGVBQUMsQ0FBQyxBQUNKLEtBQUssQ0FBRSxJQUFJLENBQ1gsTUFBTSxDQUFFLElBQUksQ0FDWixnQkFBZ0IsQ0FBRSxDQUFDLENBQ2YsUUFBUSxDQUFFLElBQUksQ0FDVixJQUFJLENBQUUsSUFBSSxDQUNsQixtQkFBbUIsQ0FBRSxJQUFJLENBQ3JCLFVBQVUsQ0FBRSxJQUFJLEFBQ3hCLENBQUMsQUFHRCxJQUFJLFFBQVEsZUFBQyxDQUFDLEFBQ1YsS0FBSyxDQUFFLElBQUksSUFBSSxlQUFlLENBQUMsQ0FBQyxBQUNwQyxDQUFDLEFBRUQsSUFBSSxPQUFPLGVBQUMsQ0FBQyxBQUNULEtBQUssQ0FBRSxJQUFJLElBQUksY0FBYyxDQUFDLENBQUMsQUFDbkMsQ0FBQyxBQUVELElBQUksS0FBSyxlQUFDLENBQUMsQUFDUCxLQUFLLENBQUUsSUFBSSxJQUFJLFlBQVksQ0FBQyxDQUFDLEFBQ2pDLENBQUMsQUFFRCxJQUFJLE1BQU0sZUFBQyxDQUFDLEFBQ1IsS0FBSyxDQUFFLElBQUksSUFBSSxhQUFhLENBQUMsQ0FBQyxBQUNsQyxDQUFDLEFBRUQsSUFBSSxLQUFLLGVBQUMsQ0FBQyxBQUNQLEtBQUssQ0FBRSxJQUFJLElBQUksYUFBYSxDQUFDLENBQUMsQUFDbEMsQ0FBQyJ9 */";
	append_dev(document.head, style);
}

function create_fragment$A(ctx) {
	let i;
	let switch_instance;
	let i_class_value;
	let current;
	var switch_value = icons[/*type*/ ctx[0]];

	function switch_props(ctx) {
		return { $$inline: true };
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
	}

	const block = {
		c: function create() {
			i = element("i");
			if (switch_instance) create_component(switch_instance.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			i = claim_element(nodes, "I", {
				id: true,
				title: true,
				style: true,
				class: true
			});

			var i_nodes = children(i);
			if (switch_instance) claim_component(switch_instance.$$.fragment, i_nodes);
			i_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(i, "id", /*id*/ ctx[1]);
			attr_dev(i, "title", /*titleProp*/ ctx[3]);
			attr_dev(i, "style", /*styleProp*/ ctx[4]);
			attr_dev(i, "class", i_class_value = "" + (null_to_empty(/*classProp*/ ctx[2]) + " svelte-1v3w8cp"));
			add_location(i, file$A, 24, 0, 724);
		},
		m: function mount(target, anchor) {
			insert_dev(target, i, anchor);

			if (switch_instance) {
				mount_component(switch_instance, i, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (switch_value !== (switch_value = icons[/*type*/ ctx[0]])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, i, null);
				} else {
					switch_instance = null;
				}
			}

			if (!current || dirty & /*id*/ 2) {
				attr_dev(i, "id", /*id*/ ctx[1]);
			}

			if (!current || dirty & /*classProp*/ 4 && i_class_value !== (i_class_value = "" + (null_to_empty(/*classProp*/ ctx[2]) + " svelte-1v3w8cp"))) {
				attr_dev(i, "class", i_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(i);
			if (switch_instance) destroy_component(switch_instance);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$A.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$A($$self, $$props, $$invalidate) {
	let { type } = $$props;
	let { is = null } = $$props; // primary|info|danger|light|dark
	let { size = null } = $$props; // small|medium|big
	let { rotate = 0 } = $$props;
	let { style = undefined } = $$props;
	let { id = undefined } = $$props;
	let { title = undefined } = $$props;
	let { ariaLabel = undefined } = $$props;
	let titleProp = title || ariaLabel;
	let ariaLabelProp = ariaLabel || title;

	let styleProp = toCSSString({
		transform: !!rotate ? `rotateZ(${rotate}deg)` : null,
		...style
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Icon", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(12, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("type" in $$new_props) $$invalidate(0, type = $$new_props.type);
		if ("is" in $$new_props) $$invalidate(5, is = $$new_props.is);
		if ("size" in $$new_props) $$invalidate(6, size = $$new_props.size);
		if ("rotate" in $$new_props) $$invalidate(7, rotate = $$new_props.rotate);
		if ("style" in $$new_props) $$invalidate(8, style = $$new_props.style);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("title" in $$new_props) $$invalidate(9, title = $$new_props.title);
		if ("ariaLabel" in $$new_props) $$invalidate(10, ariaLabel = $$new_props.ariaLabel);
	};

	$$self.$capture_state = () => ({
		classnames,
		toCSSString,
		icons,
		type,
		is,
		size,
		rotate,
		style,
		id,
		title,
		ariaLabel,
		titleProp,
		ariaLabelProp,
		styleProp,
		classProp
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(12, $$props = assign(assign({}, $$props), $$new_props));
		if ("type" in $$props) $$invalidate(0, type = $$new_props.type);
		if ("is" in $$props) $$invalidate(5, is = $$new_props.is);
		if ("size" in $$props) $$invalidate(6, size = $$new_props.size);
		if ("rotate" in $$props) $$invalidate(7, rotate = $$new_props.rotate);
		if ("style" in $$props) $$invalidate(8, style = $$new_props.style);
		if ("id" in $$props) $$invalidate(1, id = $$new_props.id);
		if ("title" in $$props) $$invalidate(9, title = $$new_props.title);
		if ("ariaLabel" in $$props) $$invalidate(10, ariaLabel = $$new_props.ariaLabel);
		if ("titleProp" in $$props) $$invalidate(3, titleProp = $$new_props.titleProp);
		if ("ariaLabelProp" in $$props) ariaLabelProp = $$new_props.ariaLabelProp;
		if ("styleProp" in $$props) $$invalidate(4, styleProp = $$new_props.styleProp);
		if ("classProp" in $$props) $$invalidate(2, classProp = $$new_props.classProp);
	};

	let classProp;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		 $$invalidate(2, classProp = classnames("ico", is, size, $$props.class));
	};

	$$props = exclude_internal_props($$props);

	return [
		type,
		id,
		classProp,
		titleProp,
		styleProp,
		is,
		size,
		rotate,
		style,
		title,
		ariaLabel
	];
}

class Icon extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-1v3w8cp-style")) add_css$2();

		init(this, options, instance$A, create_fragment$A, safe_not_equal, {
			type: 0,
			is: 5,
			size: 6,
			rotate: 7,
			style: 8,
			id: 1,
			title: 9,
			ariaLabel: 10
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Icon",
			options,
			id: create_fragment$A.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*type*/ ctx[0] === undefined && !("type" in props)) {
			console.warn("<Icon> was created without expected prop 'type'");
		}
	}

	get type() {
		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get is() {
		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set is(value) {
		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get size() {
		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rotate() {
		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rotate(value) {
		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ariaLabel() {
		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ariaLabel(value) {
		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Form.svelte generated by Svelte v3.24.0 */

const file$B = "src/components/Form.svelte";

function create_fragment$B(ctx) {
	let form;
	let form_class_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

	const block = {
		c: function create() {
			form = element("form");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			form = claim_element(nodes, "FORM", {
				id: true,
				name: true,
				method: true,
				autocomplete: true,
				title: true,
				class: true,
				"aria-label": true
			});

			var form_nodes = children(form);
			if (default_slot) default_slot.l(form_nodes);
			form_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(form, "id", /*id*/ ctx[1]);
			attr_dev(form, "name", /*name*/ ctx[0]);
			attr_dev(form, "method", /*method*/ ctx[2]);
			attr_dev(form, "autocomplete", /*autocomplete*/ ctx[3]);
			attr_dev(form, "title", /*titleProp*/ ctx[4]);
			attr_dev(form, "class", form_class_value = /*$$props*/ ctx[6].class);
			attr_dev(form, "aria-label", /*ariaLabelProp*/ ctx[5]);
			add_location(form, file$B, 12, 0, 309);
		},
		m: function mount(target, anchor) {
			insert_dev(target, form, anchor);

			if (default_slot) {
				default_slot.m(form, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen_dev(form, "submit", prevent_default(/*submit_handler*/ ctx[11]), false, true, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 512) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[9], dirty, null, null);
				}
			}

			if (!current || dirty & /*id*/ 2) {
				attr_dev(form, "id", /*id*/ ctx[1]);
			}

			if (!current || dirty & /*name*/ 1) {
				attr_dev(form, "name", /*name*/ ctx[0]);
			}

			if (!current || dirty & /*method*/ 4) {
				attr_dev(form, "method", /*method*/ ctx[2]);
			}

			if (!current || dirty & /*autocomplete*/ 8) {
				attr_dev(form, "autocomplete", /*autocomplete*/ ctx[3]);
			}

			if (!current || dirty & /*$$props*/ 64 && form_class_value !== (form_class_value = /*$$props*/ ctx[6].class)) {
				attr_dev(form, "class", form_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(form);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$B.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$B($$self, $$props, $$invalidate) {
	let { name = undefined } = $$props;
	let { id = undefined } = $$props;
	let { title = undefined } = $$props;
	let { ariaLabel = undefined } = $$props;
	let { method = undefined } = $$props;
	let { autocomplete = undefined } = $$props;
	let titleProp = title || ariaLabel;
	let ariaLabelProp = ariaLabel || title;
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Form", $$slots, ['default']);

	function submit_handler(event) {
		bubble($$self, event);
	}

	$$self.$set = $$new_props => {
		$$invalidate(6, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("name" in $$new_props) $$invalidate(0, name = $$new_props.name);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("title" in $$new_props) $$invalidate(7, title = $$new_props.title);
		if ("ariaLabel" in $$new_props) $$invalidate(8, ariaLabel = $$new_props.ariaLabel);
		if ("method" in $$new_props) $$invalidate(2, method = $$new_props.method);
		if ("autocomplete" in $$new_props) $$invalidate(3, autocomplete = $$new_props.autocomplete);
		if ("$$scope" in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		name,
		id,
		title,
		ariaLabel,
		method,
		autocomplete,
		titleProp,
		ariaLabelProp
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(6, $$props = assign(assign({}, $$props), $$new_props));
		if ("name" in $$props) $$invalidate(0, name = $$new_props.name);
		if ("id" in $$props) $$invalidate(1, id = $$new_props.id);
		if ("title" in $$props) $$invalidate(7, title = $$new_props.title);
		if ("ariaLabel" in $$props) $$invalidate(8, ariaLabel = $$new_props.ariaLabel);
		if ("method" in $$props) $$invalidate(2, method = $$new_props.method);
		if ("autocomplete" in $$props) $$invalidate(3, autocomplete = $$new_props.autocomplete);
		if ("titleProp" in $$props) $$invalidate(4, titleProp = $$new_props.titleProp);
		if ("ariaLabelProp" in $$props) $$invalidate(5, ariaLabelProp = $$new_props.ariaLabelProp);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);

	return [
		name,
		id,
		method,
		autocomplete,
		titleProp,
		ariaLabelProp,
		$$props,
		title,
		ariaLabel,
		$$scope,
		$$slots,
		submit_handler
	];
}

class Form extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$B, create_fragment$B, safe_not_equal, {
			name: 0,
			id: 1,
			title: 7,
			ariaLabel: 8,
			method: 2,
			autocomplete: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Form",
			options,
			id: create_fragment$B.name
		});
	}

	get name() {
		throw new Error("<Form>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<Form>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Form>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Form>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<Form>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Form>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ariaLabel() {
		throw new Error("<Form>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ariaLabel(value) {
		throw new Error("<Form>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get method() {
		throw new Error("<Form>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set method(value) {
		throw new Error("<Form>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get autocomplete() {
		throw new Error("<Form>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set autocomplete(value) {
		throw new Error("<Form>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Card.svelte generated by Svelte v3.24.0 */
const file$C = "src/components/Card.svelte";

function add_css$3() {
	var style = element("style");
	style.id = "svelte-1ivni0f-style";
	style.textContent = ".card.svelte-1ivni0f{width:100%;overflow:hidden;position:relative;-webkit-transform:translateZ(0);transform:translateZ(0);-webkit-box-shadow:var(--shadow-secondary);box-shadow:var(--shadow-secondary);border-radius:var(--border-radius-big);background-color:rgba(var(--theme-color-primary))}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2FyZC5zdmVsdGUiLCJzb3VyY2VzIjpbIkNhcmQuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgY2xhc3NuYW1lcyB9IGZyb20gJ0B1dGlscydcblxuICAgICQ6IGNsYXNzUHJvcCA9IGNsYXNzbmFtZXMoJ2NhcmQnLCAkJHByb3BzLmNsYXNzKVxuPC9zY3JpcHQ+XG5cbjxzZWN0aW9uIGNsYXNzPXtjbGFzc1Byb3B9IHN0eWxlPXskJHByb3BzLnN0eWxlfT5cbiAgICA8c2xvdD48L3Nsb3Q+XG48L3NlY3Rpb24+XG5cbjxzdHlsZT5cbi5jYXJkIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWigwKTtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWigwKTtcbiAgICAtd2Via2l0LWJveC1zaGFkb3c6IHZhcigtLXNoYWRvdy1zZWNvbmRhcnkpO1xuICAgICAgICAgICAgYm94LXNoYWRvdzogdmFyKC0tc2hhZG93LXNlY29uZGFyeSk7XG4gICAgYm9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cy1iaWcpO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEodmFyKC0tdGhlbWUtY29sb3ItcHJpbWFyeSkpO1xufTwvc3R5bGU+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBV0EsS0FBSyxlQUFDLENBQUMsQUFDSCxLQUFLLENBQUUsSUFBSSxDQUNYLFFBQVEsQ0FBRSxNQUFNLENBQ2hCLFFBQVEsQ0FBRSxRQUFRLENBQ2xCLGlCQUFpQixDQUFFLFdBQVcsQ0FBQyxDQUFDLENBQ3hCLFNBQVMsQ0FBRSxXQUFXLENBQUMsQ0FBQyxDQUNoQyxrQkFBa0IsQ0FBRSxJQUFJLGtCQUFrQixDQUFDLENBQ25DLFVBQVUsQ0FBRSxJQUFJLGtCQUFrQixDQUFDLENBQzNDLGFBQWEsQ0FBRSxJQUFJLG1CQUFtQixDQUFDLENBQ3ZDLGdCQUFnQixDQUFFLEtBQUssSUFBSSxxQkFBcUIsQ0FBQyxDQUFDLEFBQ3RELENBQUMifQ== */";
	append_dev(document.head, style);
}

function create_fragment$C(ctx) {
	let section;
	let section_class_value;
	let section_style_value;
	let current;
	const default_slot_template = /*$$slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

	const block = {
		c: function create() {
			section = element("section");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true, style: true });
			var section_nodes = children(section);
			if (default_slot) default_slot.l(section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(section, "class", section_class_value = "" + (null_to_empty(/*classProp*/ ctx[0]) + " svelte-1ivni0f"));
			attr_dev(section, "style", section_style_value = /*$$props*/ ctx[1].style);
			add_location(section, file$C, 6, 0, 114);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);

			if (default_slot) {
				default_slot.m(section, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 4) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[2], dirty, null, null);
				}
			}

			if (!current || dirty & /*classProp*/ 1 && section_class_value !== (section_class_value = "" + (null_to_empty(/*classProp*/ ctx[0]) + " svelte-1ivni0f"))) {
				attr_dev(section, "class", section_class_value);
			}

			if (!current || dirty & /*$$props*/ 2 && section_style_value !== (section_style_value = /*$$props*/ ctx[1].style)) {
				attr_dev(section, "style", section_style_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$C.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$C($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Card", $$slots, ['default']);

	$$self.$set = $$new_props => {
		$$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("$$scope" in $$new_props) $$invalidate(2, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({ classnames, classProp });

	$$self.$inject_state = $$new_props => {
		$$invalidate(1, $$props = assign(assign({}, $$props), $$new_props));
		if ("classProp" in $$props) $$invalidate(0, classProp = $$new_props.classProp);
	};

	let classProp;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		 $$invalidate(0, classProp = classnames("card", $$props.class));
	};

	$$props = exclude_internal_props($$props);
	return [classProp, $$props, $$scope, $$slots];
}

class Card extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-1ivni0f-style")) add_css$3();
		init(this, options, instance$C, create_fragment$C, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Card",
			options,
			id: create_fragment$C.name
		});
	}
}

function cubicOut(t) {
    const f = t - 1.0;
    return f * f * f + 1.0;
}

function fly(node, { delay = 0, duration = 400, easing = cubicOut, x = 0, y = 0, opacity = 0 }) {
    const style = getComputedStyle(node);
    const target_opacity = +style.opacity;
    const transform = style.transform === 'none' ? '' : style.transform;
    const od = target_opacity * (1 - opacity);
    return {
        delay,
        duration,
        easing,
        css: (t, u) => `
			transform: ${transform} translate(${(1 - t) * x}px, ${(1 - t) * y}px);
			opacity: ${target_opacity - (od * u)}`
    };
}
function slide(node, { delay = 0, duration = 400, easing = cubicOut }) {
    const style = getComputedStyle(node);
    const opacity = +style.opacity;
    const height = parseFloat(style.height);
    const padding_top = parseFloat(style.paddingTop);
    const padding_bottom = parseFloat(style.paddingBottom);
    const margin_top = parseFloat(style.marginTop);
    const margin_bottom = parseFloat(style.marginBottom);
    const border_top_width = parseFloat(style.borderTopWidth);
    const border_bottom_width = parseFloat(style.borderBottomWidth);
    return {
        delay,
        duration,
        easing,
        css: t => `overflow: hidden;` +
            `opacity: ${Math.min(t * 20, 1) * opacity};` +
            `height: ${t * height}px;` +
            `padding-top: ${t * padding_top}px;` +
            `padding-bottom: ${t * padding_bottom}px;` +
            `margin-top: ${t * margin_top}px;` +
            `margin-bottom: ${t * margin_bottom}px;` +
            `border-top-width: ${t * border_top_width}px;` +
            `border-bottom-width: ${t * border_bottom_width}px;`
    };
}

(function(self) {

var irrelevant = (function (exports) {
  var support = {
    searchParams: 'URLSearchParams' in self,
    iterable: 'Symbol' in self && 'iterator' in Symbol,
    blob:
      'FileReader' in self &&
      'Blob' in self &&
      (function() {
        try {
          new Blob();
          return true
        } catch (e) {
          return false
        }
      })(),
    formData: 'FormData' in self,
    arrayBuffer: 'ArrayBuffer' in self
  };

  function isDataView(obj) {
    return obj && DataView.prototype.isPrototypeOf(obj)
  }

  if (support.arrayBuffer) {
    var viewClasses = [
      '[object Int8Array]',
      '[object Uint8Array]',
      '[object Uint8ClampedArray]',
      '[object Int16Array]',
      '[object Uint16Array]',
      '[object Int32Array]',
      '[object Uint32Array]',
      '[object Float32Array]',
      '[object Float64Array]'
    ];

    var isArrayBufferView =
      ArrayBuffer.isView ||
      function(obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
      };
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name);
    }
    if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
      throw new TypeError('Invalid character in header field name')
    }
    return name.toLowerCase()
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value);
    }
    return value
  }

  // Build a destructive iterator for the value list
  function iteratorFor(items) {
    var iterator = {
      next: function() {
        var value = items.shift();
        return {done: value === undefined, value: value}
      }
    };

    if (support.iterable) {
      iterator[Symbol.iterator] = function() {
        return iterator
      };
    }

    return iterator
  }

  function Headers(headers) {
    this.map = {};

    if (headers instanceof Headers) {
      headers.forEach(function(value, name) {
        this.append(name, value);
      }, this);
    } else if (Array.isArray(headers)) {
      headers.forEach(function(header) {
        this.append(header[0], header[1]);
      }, this);
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name]);
      }, this);
    }
  }

  Headers.prototype.append = function(name, value) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var oldValue = this.map[name];
    this.map[name] = oldValue ? oldValue + ', ' + value : value;
  };

  Headers.prototype['delete'] = function(name) {
    delete this.map[normalizeName(name)];
  };

  Headers.prototype.get = function(name) {
    name = normalizeName(name);
    return this.has(name) ? this.map[name] : null
  };

  Headers.prototype.has = function(name) {
    return this.map.hasOwnProperty(normalizeName(name))
  };

  Headers.prototype.set = function(name, value) {
    this.map[normalizeName(name)] = normalizeValue(value);
  };

  Headers.prototype.forEach = function(callback, thisArg) {
    for (var name in this.map) {
      if (this.map.hasOwnProperty(name)) {
        callback.call(thisArg, this.map[name], name, this);
      }
    }
  };

  Headers.prototype.keys = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push(name);
    });
    return iteratorFor(items)
  };

  Headers.prototype.values = function() {
    var items = [];
    this.forEach(function(value) {
      items.push(value);
    });
    return iteratorFor(items)
  };

  Headers.prototype.entries = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push([name, value]);
    });
    return iteratorFor(items)
  };

  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
  }

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'))
    }
    body.bodyUsed = true;
  }

  function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
      reader.onload = function() {
        resolve(reader.result);
      };
      reader.onerror = function() {
        reject(reader.error);
      };
    })
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsArrayBuffer(blob);
    return promise
  }

  function readBlobAsText(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsText(blob);
    return promise
  }

  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf);
    var chars = new Array(view.length);

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i]);
    }
    return chars.join('')
  }

  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0)
    } else {
      var view = new Uint8Array(buf.byteLength);
      view.set(new Uint8Array(buf));
      return view.buffer
    }
  }

  function Body() {
    this.bodyUsed = false;

    this._initBody = function(body) {
      this._bodyInit = body;
      if (!body) {
        this._bodyText = '';
      } else if (typeof body === 'string') {
        this._bodyText = body;
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body;
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body;
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString();
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer);
        // IE 10-11 can't handle a DataView body.
        this._bodyInit = new Blob([this._bodyArrayBuffer]);
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body);
      } else {
        this._bodyText = body = Object.prototype.toString.call(body);
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8');
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type);
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }
      }
    };

    if (support.blob) {
      this.blob = function() {
        var rejected = consumed(this);
        if (rejected) {
          return rejected
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob)
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob')
        } else {
          return Promise.resolve(new Blob([this._bodyText]))
        }
      };

      this.arrayBuffer = function() {
        if (this._bodyArrayBuffer) {
          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
        } else {
          return this.blob().then(readBlobAsArrayBuffer)
        }
      };
    }

    this.text = function() {
      var rejected = consumed(this);
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text')
      } else {
        return Promise.resolve(this._bodyText)
      }
    };

    if (support.formData) {
      this.formData = function() {
        return this.text().then(decode)
      };
    }

    this.json = function() {
      return this.text().then(JSON.parse)
    };

    return this
  }

  // HTTP methods whose capitalization should be normalized
  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

  function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method
  }

  function Request(input, options) {
    options = options || {};
    var body = options.body;

    if (input instanceof Request) {
      if (input.bodyUsed) {
        throw new TypeError('Already read')
      }
      this.url = input.url;
      this.credentials = input.credentials;
      if (!options.headers) {
        this.headers = new Headers(input.headers);
      }
      this.method = input.method;
      this.mode = input.mode;
      this.signal = input.signal;
      if (!body && input._bodyInit != null) {
        body = input._bodyInit;
        input.bodyUsed = true;
      }
    } else {
      this.url = String(input);
    }

    this.credentials = options.credentials || this.credentials || 'same-origin';
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers);
    }
    this.method = normalizeMethod(options.method || this.method || 'GET');
    this.mode = options.mode || this.mode || null;
    this.signal = options.signal || this.signal;
    this.referrer = null;

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests')
    }
    this._initBody(body);
  }

  Request.prototype.clone = function() {
    return new Request(this, {body: this._bodyInit})
  };

  function decode(body) {
    var form = new FormData();
    body
      .trim()
      .split('&')
      .forEach(function(bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
    return form
  }

  function parseHeaders(rawHeaders) {
    var headers = new Headers();
    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
    // https://tools.ietf.org/html/rfc7230#section-3.2
    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
    preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
      var parts = line.split(':');
      var key = parts.shift().trim();
      if (key) {
        var value = parts.join(':').trim();
        headers.append(key, value);
      }
    });
    return headers
  }

  Body.call(Request.prototype);

  function Response(bodyInit, options) {
    if (!options) {
      options = {};
    }

    this.type = 'default';
    this.status = options.status === undefined ? 200 : options.status;
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = 'statusText' in options ? options.statusText : 'OK';
    this.headers = new Headers(options.headers);
    this.url = options.url || '';
    this._initBody(bodyInit);
  }

  Body.call(Response.prototype);

  Response.prototype.clone = function() {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    })
  };

  Response.error = function() {
    var response = new Response(null, {status: 0, statusText: ''});
    response.type = 'error';
    return response
  };

  var redirectStatuses = [301, 302, 303, 307, 308];

  Response.redirect = function(url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code')
    }

    return new Response(null, {status: status, headers: {location: url}})
  };

  exports.DOMException = self.DOMException;
  try {
    new exports.DOMException();
  } catch (err) {
    exports.DOMException = function(message, name) {
      this.message = message;
      this.name = name;
      var error = Error(message);
      this.stack = error.stack;
    };
    exports.DOMException.prototype = Object.create(Error.prototype);
    exports.DOMException.prototype.constructor = exports.DOMException;
  }

  function fetch(input, init) {
    return new Promise(function(resolve, reject) {
      var request = new Request(input, init);

      if (request.signal && request.signal.aborted) {
        return reject(new exports.DOMException('Aborted', 'AbortError'))
      }

      var xhr = new XMLHttpRequest();

      function abortXhr() {
        xhr.abort();
      }

      xhr.onload = function() {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        };
        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
        var body = 'response' in xhr ? xhr.response : xhr.responseText;
        resolve(new Response(body, options));
      };

      xhr.onerror = function() {
        reject(new TypeError('Network request failed'));
      };

      xhr.ontimeout = function() {
        reject(new TypeError('Network request failed'));
      };

      xhr.onabort = function() {
        reject(new exports.DOMException('Aborted', 'AbortError'));
      };

      xhr.open(request.method, request.url, true);

      if (request.credentials === 'include') {
        xhr.withCredentials = true;
      } else if (request.credentials === 'omit') {
        xhr.withCredentials = false;
      }

      if ('responseType' in xhr && support.blob) {
        xhr.responseType = 'blob';
      }

      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value);
      });

      if (request.signal) {
        request.signal.addEventListener('abort', abortXhr);

        xhr.onreadystatechange = function() {
          // DONE (success or failure)
          if (xhr.readyState === 4) {
            request.signal.removeEventListener('abort', abortXhr);
          }
        };
      }

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
    })
  }

  fetch.polyfill = true;

  if (!self.fetch) {
    self.fetch = fetch;
    self.Headers = Headers;
    self.Request = Request;
    self.Response = Response;
  }

  exports.Headers = Headers;
  exports.Request = Request;
  exports.Response = Response;
  exports.fetch = fetch;

  return exports;

}({}));
})(typeof self !== 'undefined' ? self : commonjsGlobal);

var btoa$1 = createCommonjsModule(function (module) {
(function () {

  function btoa(str) {
    var buffer;

    if (str instanceof Buffer) {
      buffer = str;
    } else {
      buffer = Buffer.from(str.toString(), 'binary');
    }

    return buffer.toString('base64');
  }

  module.exports = btoa;
}());
});

var dist = createCommonjsModule(function (module, exports) {
!function(t,e){module.exports=e();}(commonjsGlobal,(function(){var t=function(t){if(Array.isArray(t))return t};var e=function(t,e){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)){var r=[],n=!0,o=!1,i=void 0;try{for(var c,u=t[Symbol.iterator]();!(n=(c=u.next()).done)&&(r.push(c.value),!e||r.length!==e);n=!0);}catch(t){o=!0,i=t;}finally{try{n||null==u.return||u.return();}finally{if(o)throw i}}return r}};var r=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")};var n=function(n,o){return t(n)||e(n,o)||r()};var o=function(t,e){return t(e={exports:{}},e.exports),e.exports}((function(t){function e(r){return "function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?t.exports=e=function(t){return typeof t}:t.exports=e=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},e(r)}t.exports=e;})),i=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.headers,r=void 0===e?{}:e,n=(t.body,t.method),i=void 0===n?"get":n,c=t.auth;var u=new Headers(r);if(u.get("content-type")||"get"===i||u.set("content-type","application/json"),c)if("object"===o(c)){var a,s=c.username,f=c.password;if(!s)throw new Error("Username required for basic authentication");if(!f)throw new Error("Password required for basic authentication");a="btoa"in window?btoa:btoa$1,u.set("Authorization","Basic "+a("".concat(s,":").concat(f)));}else u.set("Authorization","Bearer ".concat(c));return u},c=function(t){if(t)return Object.entries(t).reduce((function(t,e,r){var o=n(e,2),i=o[0],c=o[1],u=0===r?"".concat(i,"=").concat(encodeURIComponent(c)):"&".concat(i,"=").concat(encodeURIComponent(c));return "".concat(t).concat(u)}),"")},u=function(t){var e=t.url,r=t.queries;return r?"".concat(e,"?").concat(c(r)):e},a=function(t){if("get"!==t.method){var e=t.headers.get("content-type");if(e)return e.includes("x-www-form-urlencoded")?c(t.body):e.includes("json")?JSON.stringify(t.body):t.body}},s=function(t){return t.headers.entries?function(t){var e={},r=!0,o=!1,i=void 0;try{for(var c,u=t.headers.entries()[Symbol.iterator]();!(r=(c=u.next()).done);r=!0){var a=n(c.value,2),s=a[0],f=a[1];e[s]=f;}}catch(t){o=!0,i=t;}finally{try{r||null==u.return||u.return();}finally{if(o)throw i}}return e}(t):function(t){var e={},r=t.headers._headers;for(var n in r)e[n]=r[n].join("");return e}(t)},f=function(t,e){var r=("function"==typeof t.clone?t.clone():void 0)||t;return t[e]().then((function(t){return function(t,e){var r={body:e,headers:s(t),response:t,status:t.status,statusText:t.statusText};return t.ok?Promise.resolve(r):Promise.reject(r)}(r,t)}))},d=function(t){var e=t.headers.get("content-type");if(e.includes("json"))return f(t,"json");if(e.includes("text"))return f(t,"text");if(e.includes("image"))return f(t,"blob");throw new Error("zlFetch does not support content-type ".concat(e," yet"))},l=function(t){return "Failed to fetch"===t.message?Promise.reject({error:t}):Promise.reject(t)};for(var y=function(t,e){var r=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=Object.assign({},t);return e.url=u(e),e.method=e.method||"get",e.headers=i(e),e.body=a(e),delete e.auth,e}(Object.assign({url:t},e));return fetch(r.url,r).then(d).catch(l)},h=function(){var t=v[p];y[t]=function(e,r){return r=Object.assign({method:t},r),y(e,r)};},p=0,v=["get","post","put","patch","delete"];p<v.length;p++)h();return y}));
});

class APIService {
  /**
   *
   * @typedef Config {{
   *   adapter: Function, (zlFetch)
   *
   *   basePath: string,
   *
   *   requestInterceptor([
   *     endpoint: string,
   *     params?: object,
   *     config?: object,
   *   ]): {*},
   *   responseInterceptor() {
   *     body: {*},
   *     headers: object,
   *     response: {Response},
   *     status: number,
   *     statusText: string,
   *   },
   *   errorInterceptor() {{
   *     body: {*},
   *     headers: object,
   *     response: {Response},
   *     status: number,
   *     statusText: string,
   *   }},
   * }}
   * @param config {Config}
   */
  constructor(config = {}) {
    this._adapter = config.adapter || dist;

    this._base_path = config.basePath ? config.basePath.replace(/\/$/, '') : '';

    this._requestInterceptor = config.requestInterceptor || (async (...args) => args);
    this._responseInterceptor = config.responseInterceptor || (async (...args) => args);
    this._errorInterceptor = config.errorInterceptor || Promise.reject;
  }

  /**
   *
   * @param method {'get'|'put'|'post'|'delete'|'patch'}
   * @param args {*[]}
   */
  get newRequest() {
    const methods = ['get', 'put', 'post', 'delete', 'patch'];

    return methods.reduce((acc, method) => {
      acc[method] = this.withInterceptors.bind(this, this._adapter[method]);
      return acc
    }, {})
  }

  async withInterceptors(caller, ...args) {
    const newArgs1 = await this.requestInterceptor(...args);
    const newArgs2 = await this._requestInterceptor(...newArgs1);

    return caller(...newArgs2)
      .then(async (response) => {
        const newResponse = await this._responseInterceptor(response);
        return await this.handleResponse(newResponse)
      })
      .catch(async (reject) => {
        try {
          return await this._errorInterceptor(reject)
        } catch (error) {
          throw error
        }
      })
      .catch(this.handleReject)
  }

  async requestInterceptor(...args) {
    if (typeof args[0] === 'string') { // If URL then concat BASE_PATH.
      args[0] = `${this._base_path}/${args[0]}`;
    }
    return [...args]
  }

  async handleResponse(response) {
    return response.body
  }

  async handleReject(reject) {
    throw reject
  }
}

/**
 *
 * @description API class for making REST API requests in a browser.
 */
class ApiClass extends APIService {
  /**
   *
   * @param config {Config}
   */
  constructor(config) {
    super(config);
  }

  /**
   *
   * @description Users
   */
  getUser(id, params, config) {
    return this.newRequest.get(endpoints.USER(id), params, config)
  }

  getUsers(params, config) {
    return this.newRequest.get(endpoints.USERS(), params, config)
  }

  postUser(id, body, config) {
    return this.newRequest.post(endpoints.USER(id), body, config)
  }

  putUser(id, body, config) {
    return this.newRequest.put(endpoints.USER(id), body, config)
  }

  deleteUser(id, config) {
    return this.newRequest.delete(endpoints.USER(id), config)
  }

  /**
   *
   * @description Recent
   */
  getRecent(id, params, config) {
    return this.newRequest.get(endpoints.RECENT(id), params, config)
  }

  getRecents(params, config) {
    return this.newRequest.get(endpoints.RECENTS(), params, config)
  }

  postRecent(id, body, config) {
    return this.newRequest.post(endpoints.RECENT(id), body, config)
  }

  putRecent(id, body, config) {
    return this.newRequest.put(endpoints.RECENT(id), body, config)
  }

  deleteRecent(id, config) {
    return this.newRequest.delete(endpoints.RECENT(id), config)
  }

  /**
   *
   * @description Comments
   */
  getComment(id, params, config) {
    return this.newRequest.get(endpoints.COMMENT(id), params, config)
  }

  getComments(params, config) {
    return this.newRequest.get(endpoints.COMMENTS(), params, config)
  }

  postComment(id, body, config) {
    return this.newRequest.post(endpoints.COMMENT(id), body, config)
  }

  putComment(id, body, config) {
    return this.newRequest.put(endpoints.COMMENT(id), body, config)
  }

  deleteComment(id, config) {
    return this.newRequest.delete(endpoints.COMMENT(id), config)
  }

  /**
   *
   * @description Fund
   */
  getFund(id, params, config) {
    return this.newRequest.get(endpoints.FUND(id), params, config)
  }

  getFunds(params, config) {
    return this.newRequest.get(endpoints.FUNDS(), params, config)
  }

  postFund(id, body, config) {
    return this.newRequest.post(endpoints.FUND(id), body, config)
  }

  putFund(id, body, config) {
    return this.newRequest.put(endpoints.FUND(id), body, config)
  }

  deleteFund(id, config) {
    return this.newRequest.delete(endpoints.FUND(id), config)
  }

  /**
   *
   * @description Organization
   */
  getOrganization(id, params, config) {
    return this.newRequest.get(endpoints.ORGANIZATION(id), params, config)
  }

  getOrganizations(params, config) {
    return this.newRequest.get(endpoints.ORGANIZATIONS(), params, config)
  }

  postOrganization(id, body, config) {
    return this.newRequest.post(endpoints.ORGANIZATION(id), body, config)
  }

  putOrganization(id, body, config) {
    return this.newRequest.put(endpoints.ORGANIZATION(id), body, config)
  }

  deleteOrganization(id, config) {
    return this.newRequest.delete(endpoints.ORGANIZATION(id), config)
  }

  /**
   *
   * @description Media
   */
  uploadImage(body, config) {
    return this.newRequest.post(endpoints.IMAGES_UPLOAD(), body, config)
  }

}

/**
 *
 * @constructor {Config}
 */
var API = new ApiClass({
  basePath: setup.BACKEND_URL,
  responseInterceptor: res => (console.info('response -------\n', res), res),
  errorInterceptor: rej => {
    console.warn('request error -------\n', rej);

    if (rej && rej.error && rej.error.message === 'Failed to fetch') {
      console.log('Lost internet connection');
      showOfflineMessage();
    }

    throw rej
  },
});

function showOfflineMessage() {
  try {
    let timer = null;
    const offlineEl = document.querySelector('#offline-message');
    if (!timer) {
      offlineEl.classList.add('active');
      timer = setTimeout(() => {
        offlineEl.classList.remove('active');
        clearTimeout(timer);
      }, 5000);
    }
  } catch (err) {
    console.warn(err);
  }
}

var dayjs_min = createCommonjsModule(function (module, exports) {
!function(t,e){module.exports=e();}(commonjsGlobal,function(){var t="millisecond",e="second",n="minute",r="hour",i="day",s="week",u="month",a="quarter",o="year",h=/^(\d{4})-?(\d{1,2})?-?(\d{0,2})[^0-9]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?.?(\d{1,3})?$/,f=/\[([^\]]+)]|Y{2,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,c=function(t,e,n){var r=String(t);return !r||r.length>=e?t:""+Array(e+1-r.length).join(n)+t},d={s:c,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return (e<=0?"+":"-")+c(r,2,"0")+":"+c(i,2,"0")},m:function(t,e){var n=12*(e.year()-t.year())+(e.month()-t.month()),r=t.clone().add(n,u),i=e-r<0,s=t.clone().add(n+(i?-1:1),u);return Number(-(n+(e-r)/(i?r-s:s-r))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(h){return {M:u,y:o,w:s,d:i,D:"date",h:r,m:n,s:e,ms:t,Q:a}[h]||String(h||"").toLowerCase().replace(/s$/,"")},u:function(t){return void 0===t}},$={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_")},l="en",m={};m[l]=$;var y=function(t){return t instanceof v},M=function(t,e,n){var r;if(!t)return l;if("string"==typeof t)m[t]&&(r=t),e&&(m[t]=e,r=t);else {var i=t.name;m[i]=t,r=i;}return !n&&r&&(l=r),r||!n&&l},g=function(t,e){if(y(t))return t.clone();var n="object"==typeof e?e:{};return n.date=t,n.args=arguments,new v(n)},D=d;D.l=M,D.i=y,D.w=function(t,e){return g(t,{locale:e.$L,utc:e.$u,$offset:e.$offset})};var v=function(){function c(t){this.$L=this.$L||M(t.locale,null,!0),this.parse(t);}var d=c.prototype;return d.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(D.u(e))return new Date;if(e instanceof Date)return new Date(e);if("string"==typeof e&&!/Z$/i.test(e)){var r=e.match(h);if(r){var i=r[2]-1||0;return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,r[7]||0)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,r[7]||0)}}return new Date(e)}(t),this.init();},d.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds();},d.$utils=function(){return D},d.isValid=function(){return !("Invalid Date"===this.$d.toString())},d.isSame=function(t,e){var n=g(t);return this.startOf(e)<=n&&n<=this.endOf(e)},d.isAfter=function(t,e){return g(t)<this.startOf(e)},d.isBefore=function(t,e){return this.endOf(e)<g(t)},d.$g=function(t,e,n){return D.u(t)?this[e]:this.set(n,t)},d.year=function(t){return this.$g(t,"$y",o)},d.month=function(t){return this.$g(t,"$M",u)},d.day=function(t){return this.$g(t,"$W",i)},d.date=function(t){return this.$g(t,"$D","date")},d.hour=function(t){return this.$g(t,"$H",r)},d.minute=function(t){return this.$g(t,"$m",n)},d.second=function(t){return this.$g(t,"$s",e)},d.millisecond=function(e){return this.$g(e,"$ms",t)},d.unix=function(){return Math.floor(this.valueOf()/1e3)},d.valueOf=function(){return this.$d.getTime()},d.startOf=function(t,a){var h=this,f=!!D.u(a)||a,c=D.p(t),d=function(t,e){var n=D.w(h.$u?Date.UTC(h.$y,e,t):new Date(h.$y,e,t),h);return f?n:n.endOf(i)},$=function(t,e){return D.w(h.toDate()[t].apply(h.toDate("s"),(f?[0,0,0,0]:[23,59,59,999]).slice(e)),h)},l=this.$W,m=this.$M,y=this.$D,M="set"+(this.$u?"UTC":"");switch(c){case o:return f?d(1,0):d(31,11);case u:return f?d(1,m):d(0,m+1);case s:var g=this.$locale().weekStart||0,v=(l<g?l+7:l)-g;return d(f?y-v:y+(6-v),m);case i:case"date":return $(M+"Hours",0);case r:return $(M+"Minutes",1);case n:return $(M+"Seconds",2);case e:return $(M+"Milliseconds",3);default:return this.clone()}},d.endOf=function(t){return this.startOf(t,!1)},d.$set=function(s,a){var h,f=D.p(s),c="set"+(this.$u?"UTC":""),d=(h={},h[i]=c+"Date",h.date=c+"Date",h[u]=c+"Month",h[o]=c+"FullYear",h[r]=c+"Hours",h[n]=c+"Minutes",h[e]=c+"Seconds",h[t]=c+"Milliseconds",h)[f],$=f===i?this.$D+(a-this.$W):a;if(f===u||f===o){var l=this.clone().set("date",1);l.$d[d]($),l.init(),this.$d=l.set("date",Math.min(this.$D,l.daysInMonth())).$d;}else d&&this.$d[d]($);return this.init(),this},d.set=function(t,e){return this.clone().$set(t,e)},d.get=function(t){return this[D.p(t)]()},d.add=function(t,a){var h,f=this;t=Number(t);var c=D.p(a),d=function(e){var n=g(f);return D.w(n.date(n.date()+Math.round(e*t)),f)};if(c===u)return this.set(u,this.$M+t);if(c===o)return this.set(o,this.$y+t);if(c===i)return d(1);if(c===s)return d(7);var $=(h={},h[n]=6e4,h[r]=36e5,h[e]=1e3,h)[c]||1,l=this.$d.getTime()+t*$;return D.w(l,this)},d.subtract=function(t,e){return this.add(-1*t,e)},d.format=function(t){var e=this;if(!this.isValid())return "Invalid Date";var n=t||"YYYY-MM-DDTHH:mm:ssZ",r=D.z(this),i=this.$locale(),s=this.$H,u=this.$m,a=this.$M,o=i.weekdays,h=i.months,c=function(t,r,i,s){return t&&(t[r]||t(e,n))||i[r].substr(0,s)},d=function(t){return D.s(s%12||12,t,"0")},$=i.meridiem||function(t,e,n){var r=t<12?"AM":"PM";return n?r.toLowerCase():r},l={YY:String(this.$y).slice(-2),YYYY:this.$y,M:a+1,MM:D.s(a+1,2,"0"),MMM:c(i.monthsShort,a,h,3),MMMM:c(h,a),D:this.$D,DD:D.s(this.$D,2,"0"),d:String(this.$W),dd:c(i.weekdaysMin,this.$W,o,2),ddd:c(i.weekdaysShort,this.$W,o,3),dddd:o[this.$W],H:String(s),HH:D.s(s,2,"0"),h:d(1),hh:d(2),a:$(s,u,!0),A:$(s,u,!1),m:String(u),mm:D.s(u,2,"0"),s:String(this.$s),ss:D.s(this.$s,2,"0"),SSS:D.s(this.$ms,3,"0"),Z:r};return n.replace(f,function(t,e){return e||l[t]||r.replace(":","")})},d.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},d.diff=function(t,h,f){var c,d=D.p(h),$=g(t),l=6e4*($.utcOffset()-this.utcOffset()),m=this-$,y=D.m(this,$);return y=(c={},c[o]=y/12,c[u]=y,c[a]=y/3,c[s]=(m-l)/6048e5,c[i]=(m-l)/864e5,c[r]=m/36e5,c[n]=m/6e4,c[e]=m/1e3,c)[d]||m,f?y:D.a(y)},d.daysInMonth=function(){return this.endOf(u).$D},d.$locale=function(){return m[this.$L]},d.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=M(t,e,!0);return r&&(n.$L=r),n},d.clone=function(){return D.w(this.$d,this)},d.toDate=function(){return new Date(this.valueOf())},d.toJSON=function(){return this.isValid()?this.toISOString():null},d.toISOString=function(){return this.$d.toISOString()},d.toString=function(){return this.$d.toUTCString()},c}();return g.prototype=v.prototype,g.extend=function(t,e){return t(e,v,g),g},g.locale=M,g.isDayjs=y,g.unix=function(t){return g(1e3*t)},g.en=m[l],g.Ls=m,g});
});

var relativeTime = createCommonjsModule(function (module, exports) {
!function(r,t){module.exports=t();}(commonjsGlobal,function(){return function(r,t,e){r=r||{};var n=t.prototype,o={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"};e.en.relativeTime=o;var d=function(t,n,d,i){for(var u,a,s,f=d.$locale().relativeTime||o,l=r.thresholds||[{l:"s",r:44,d:"second"},{l:"m",r:89},{l:"mm",r:44,d:"minute"},{l:"h",r:89},{l:"hh",r:21,d:"hour"},{l:"d",r:35},{l:"dd",r:25,d:"day"},{l:"M",r:45},{l:"MM",r:10,d:"month"},{l:"y",r:17},{l:"yy",d:"year"}],h=l.length,m=0;m<h;m+=1){var c=l[m];c.d&&(u=i?e(t).diff(d,c.d,!0):d.diff(t,c.d,!0));var y=(r.rounding||Math.round)(Math.abs(u));if(s=u>0,y<=c.r||!c.r){y<=1&&m>0&&(c=l[m-1]);var p=f[c.l];a="string"==typeof p?p.replace("%d",y):p(y,n,c.l,s);break}}return n?a:(s?f.future:f.past).replace("%s",a)};n.to=function(r,t){return d(r,t,this,!0)},n.from=function(r,t){return d(r,t,this)};var i=function(r){return r.$u?e.utc():e()};n.toNow=function(r){return this.to(i(this),r)},n.fromNow=function(r){return this.from(i(this),r)};}});
});

var utc = createCommonjsModule(function (module, exports) {
!function(t,i){module.exports=i();}(commonjsGlobal,function(){return function(t,i,e){var s=(new Date).getTimezoneOffset(),n=i.prototype;e.utc=function(t){return new i({date:t,utc:!0,args:arguments})},n.utc=function(){return e(this.toDate(),{locale:this.$L,utc:!0})},n.local=function(){return e(this.toDate(),{locale:this.$L,utc:!1})};var u=n.parse;n.parse=function(t){t.utc&&(this.$u=!0),this.$utils().u(t.$offset)||(this.$offset=t.$offset),u.call(this,t);};var o=n.init;n.init=function(){if(this.$u){var t=this.$d;this.$y=t.getUTCFullYear(),this.$M=t.getUTCMonth(),this.$D=t.getUTCDate(),this.$W=t.getUTCDay(),this.$H=t.getUTCHours(),this.$m=t.getUTCMinutes(),this.$s=t.getUTCSeconds(),this.$ms=t.getUTCMilliseconds();}else o.call(this);};var f=n.utcOffset;n.utcOffset=function(t){var i=this.$utils().u;if(i(t))return this.$u?0:i(this.$offset)?f.call(this):this.$offset;var e,n=Math.abs(t)<=16?60*t:t;return 0!==t?(e=this.local().add(n+s,"minute")).$offset=n:e=this.utc(),e};var r=n.format;n.format=function(t){var i=t||(this.$u?"YYYY-MM-DDTHH:mm:ss[Z]":"");return r.call(this,i)},n.valueOf=function(){var t=this.$utils().u(this.$offset)?0:this.$offset+s;return this.$d.valueOf()-6e4*t},n.isUTC=function(){return !!this.$u},n.toISOString=function(){return this.toDate().toISOString()},n.toString=function(){return this.toDate().toUTCString()};var a=n.toDate;n.toDate=function(t){return "s"===t&&this.$offset?e(this.format("YYYY-MM-DD HH:mm:ss:SSS")).toDate():a.call(this)};}});
});

var weekday = createCommonjsModule(function (module, exports) {
!function(e,t){module.exports=t();}(commonjsGlobal,function(){return function(e,t){t.prototype.weekday=function(e){var t=this.$locale().weekStart||0,n=this.$W,i=(n<t?n+7:n)-t;return this.$utils().u(e)?i:this.subtract(i,"day").add(e,"day")};}});
});

var en = createCommonjsModule(function (module, exports) {
!function(e,n){module.exports=n();}(commonjsGlobal,function(){return {name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_")}});
});

var ru = createCommonjsModule(function (module, exports) {
!function(_,t){module.exports=t(dayjs_min);}(commonjsGlobal,function(_){_=_&&_.hasOwnProperty("default")?_.default:_;var t="января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),e="январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),n="янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),s="янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_"),r=/D[oD]?(\[[^[\]]*\]|\s)+MMMM?/;function o(_,t,e){var n,s;return "m"===e?t?"минута":"минуту":_+" "+(n=+_,s={mm:t?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",MM:"месяц_месяца_месяцев",yy:"год_года_лет"}[e].split("_"),n%10==1&&n%100!=11?s[0]:n%10>=2&&n%10<=4&&(n%100<10||n%100>=20)?s[1]:s[2])}var d=function(_,n){return r.test(n)?t[_.month()]:e[_.month()]};d.s=e,d.f=t;var i=function(_,t){return r.test(t)?n[_.month()]:s[_.month()]};i.s=s,i.f=n;var m={name:"ru",weekdays:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),weekdaysShort:"вск_пнд_втр_срд_чтв_птн_сбт".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),months:d,monthsShort:i,weekStart:1,formats:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., H:mm",LLLL:"dddd, D MMMM YYYY г., H:mm"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",m:o,mm:o,h:"час",hh:o,d:"день",dd:o,M:"месяц",MM:o,y:"год",yy:o},ordinal:function(_){return _}};return _.locale(m,null,!0),m});
});

var uk = createCommonjsModule(function (module, exports) {
!function(_,t){module.exports=t(dayjs_min);}(commonjsGlobal,function(_){_=_&&_.hasOwnProperty("default")?_.default:_;var t="січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),e="січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_"),s=/D[oD]?(\[[^[\]]*\]|\s)+MMMM?/;function n(_,t,e){var s,n;return "m"===e?t?"хвилина":"хвилину":"h"===e?t?"година":"годину":_+" "+(s=+_,n={ss:t?"секунда_секунди_секунд":"секунду_секунди_секунд",mm:t?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:t?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"}[e].split("_"),s%10==1&&s%100!=11?n[0]:s%10>=2&&s%10<=4&&(s%100<10||s%100>=20)?n[1]:n[2])}var d=function(_,n){return s.test(n)?t[_.month()]:e[_.month()]};d.s=e,d.f=t;var i={name:"uk",weekdays:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),weekdaysShort:"ндл_пнд_втр_срд_чтв_птн_сбт".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),months:d,monthsShort:"сiч_лют_бер_квiт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekStart:1,relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",m:n,mm:n,h:n,hh:n,d:"день",dd:n,M:"місяць",MM:n,y:"рік",yy:n},ordinal:function(_){return _},formats:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"}};return _.locale(i,null,!0),i});
});

dayjs_min.extend(relativeTime); // use RelativeTime pluggin
dayjs_min.extend(utc); // use UTC pluggin
dayjs_min.extend(weekday); // use Weekday pluggin

dayjs_min.locale('en'); // use Engllish
dayjs_min.locale('ru'); // use Russian
dayjs_min.locale('uk'); // use Ukrainian

class Swipe {
  constructor(element) {
    this.isMoveStart = false;
    this.isTwoFingers = false;

    this.xDown = null;
    this.yDown = null;
    this.element = typeof (element) === 'string' ? document.querySelector(element) : element;

    this.element.addEventListener('touchstart', this.touchStartHandler.bind(this), false);
    this.element.addEventListener('touchend', this.touchEndHandler.bind(this), false);

    this.element.addEventListener('gesturestart', () => {
      this.isTwoFingers = true;
    });

    this.element.addEventListener('gestureend', () => {
      this.isTwoFingers = false;
    });
  }

  touchStartHandler(evt) {
    if (this.isTwoFingers) return

    this.isMoveStart = true;

    this.xDown = evt.touches[0].clientX;
    this.yDown = evt.touches[0].clientY;

    try {
      this.onTouchStart(this.xDown, this.yDown, evt, this.element);
    } catch(err) { /* ignore throwing of unknown functions */ }
  }

  touchEndHandler(evt) {
    if (this.isTwoFingers) return

    this.isMoveStart = false;

    this.xDown = null;
    this.yDown = null;

    try {
      const xUp = evt.changedTouches[0].clientX;
      const yUp = evt.changedTouches[0].clientY;
      this.onTouchEnd(xUp, yUp, evt, this.element);
    } catch(err) { /* ignore throwing of unknown functions */ }
  }

  onLeft(callback) {
    this.onLeft = callback;

    return this;
  }

  onRight(callback) {
    this.onRight = callback;

    return this;
  }

  onUp(callback) {
    this.onUp = callback;

    return this;
  }

  onDown(callback) {
    this.onDown = callback;

    return this;
  }

  onTouchStart(callback) {
    this.onTouchStart = callback;

    return this;
  }

  onTouchEnd(callback) {
    this.onTouchEnd = callback;

    return this;
  }

  handleTouchMove(evt) {
    if (!this.isMoveStart || this.isTwoFingers) {
      return
    }

    const xUp = evt.touches[0].clientX;
    const yUp = evt.touches[0].clientY;

    this.xDiff = xUp - this.xDown;
    this.yDiff = yUp - this.yDown;

    try {
      if ( Math.abs( this.xDiff ) > Math.abs( this.yDiff ) ) { // Most significant.
        if ( this.xDiff < 0 ) {
          return this.onLeft(this.xDown, xUp, evt, this.element);
        } else {
          return this.onRight(this.xDown, xUp, evt, this.element);
        }
      } else {
        if ( this.yDiff < 0 ) {
          return this.onUp(this.yDown, yUp, evt, this.element);
        } else {
          return this.onDown(this.yDown, yUp, evt, this.element);
        }
      }
    } catch(err) { /* ignore throwing of unknown functions */ }
  }

  handleMove(e) {
    return requestAnimationFrame(() => this.handleTouchMove(e))
  }

  stop() {
    this.element.removeEventListener('touchmove', this.handleMove.bind(this), false);

    return this
  }

  run() {
    this.element.addEventListener('touchmove', this.handleMove.bind(this), false);

    return this
  }
}

var js_storage = createCommonjsModule(function (module, exports) {
/*
 * JS Storage Plugin
 *
 * Copyright (c) 2019 Julien Maurel
 *
 * Licensed under the MIT license:
 * http://www.opensource.org/licenses/mit-license.php
 *
 * Project home:
 * https://github.com/julien-maurel/js-storage
 *
 * Version: 1.1.0
 */
(function (factory) {
    var registeredInModuleLoader = false;
    {
        module.exports = factory();
        registeredInModuleLoader = true;
    }
    if (!registeredInModuleLoader) {
        var OldStorages = window.Storages;
        var api = window.Storages = factory();
        api.noConflict = function () {
            window.Storages = OldStorages;
            return api;
        };
    }
}(function () {
    // Variables used by utilities functions (like isPlainObject...)
    var class2type = {};
    var toString = class2type.toString;
    var hasOwn = class2type.hasOwnProperty;
    var fnToString = hasOwn.toString;
    var ObjectFunctionString = fnToString.call(Object);
    var getProto = Object.getPrototypeOf;
    var apis = {};

    // Prefix to use with cookie fallback
    var cookie_local_prefix = "ls_";
    var cookie_session_prefix = "ss_";

    // Get items from a storage
    function _get() {
        var storage = this._type, l = arguments.length, s = window[storage], a = arguments, a0 = a[0], vi, ret, tmp, i, j;
        if (l < 1) {
            throw new Error('Minimum 1 argument must be given');
        } else if (Array.isArray(a0)) {
            // If second argument is an array, return an object with value of storage for each item in this array
            ret = {};
            for (i in a0) {
                if (a0.hasOwnProperty(i)) {
                    vi = a0[i];
                    try {
                        ret[vi] = JSON.parse(s.getItem(vi));
                    } catch (e) {
                        ret[vi] = s.getItem(vi);
                    }
                }
            }
            return ret;
        } else if (l == 1) {
            // If only 1 argument, return value directly
            try {
                return JSON.parse(s.getItem(a0));
            } catch (e) {
                return s.getItem(a0);
            }
        } else {
            // If more than 1 argument, parse storage to retrieve final value to return it
            // Get first level
            try {
                ret = JSON.parse(s.getItem(a0));
                if (!ret) {
                    throw new ReferenceError(a0 + ' is not defined in this storage');
                }
            } catch (e) {
                throw new ReferenceError(a0 + ' is not defined in this storage');
            }
            // Parse next levels
            for (i = 1; i < l - 1; i++) {
                ret = ret[a[i]];
                if (ret === undefined) {
                    throw new ReferenceError([].slice.call(a, 0, i + 1).join('.') + ' is not defined in this storage');
                }
            }
            // If last argument is an array, return an object with value for each item in this array
            // Else return value normally
            if (Array.isArray(a[i])) {
                tmp = ret;
                ret = {};
                for (j in a[i]) {
                    if (a[i].hasOwnProperty(j)) {
                        ret[a[i][j]] = tmp[a[i][j]];
                    }
                }
                return ret;
            } else {
                return ret[a[i]];
            }
        }
    }

    // Set items of a storage
    function _set() {
        var storage = this._type, l = arguments.length, s = window[storage], a = arguments, a0 = a[0], a1 = a[1], vi, to_store = isNaN(a1) ? {} : [], type, tmp, i;
        if (l < 1 || !_isPlainObject(a0) && l < 2) {
            throw new Error('Minimum 2 arguments must be given or first parameter must be an object');
        } else if (_isPlainObject(a0)) {
            // If first argument is an object, set values of storage for each property of this object
            for (i in a0) {
                if (a0.hasOwnProperty(i)) {
                    vi = a0[i];
                    if (!_isPlainObject(vi) && !this.alwaysUseJson) {
                        s.setItem(i, vi);
                    } else {
                        s.setItem(i, JSON.stringify(vi));
                    }
                }
            }
            return a0;
        } else if (l == 2) {
            // If only 2 arguments, set value of storage directly
            if (typeof a1 === 'object' || this.alwaysUseJson) {
                s.setItem(a0, JSON.stringify(a1));
            } else {
                s.setItem(a0, a1);
            }
            return a1;
        } else {
            // If more than 3 arguments, parse storage to retrieve final node and set value
            // Get first level
            try {
                tmp = s.getItem(a0);
                if (tmp != null) {
                    to_store = JSON.parse(tmp);
                }
            } catch (e) {
            }
            tmp = to_store;
            // Parse next levels and set value
            for (i = 1; i < l - 2; i++) {
                vi = a[i];
                type = isNaN(a[i + 1]) ? "object" : "array";
                if (!tmp[vi] || type == "object" && !_isPlainObject(tmp[vi]) || type == "array" && !Array.isArray(tmp[vi])) {
                    if (type == "array") tmp[vi] = [];
                    else tmp[vi] = {};
                }
                tmp = tmp[vi];
            }
            tmp[a[i]] = a[i + 1];
            s.setItem(a0, JSON.stringify(to_store));
            return to_store;
        }
    }

    // Remove items from a storage
    function _remove() {
        var storage = this._type, l = arguments.length, s = window[storage], a = arguments, a0 = a[0], to_store, tmp, i, j;
        if (l < 1) {
            throw new Error('Minimum 1 argument must be given');
        } else if (Array.isArray(a0)) {
            // If first argument is an array, remove values from storage for each item of this array
            for (i in a0) {
                if (a0.hasOwnProperty(i)) {
                    s.removeItem(a0[i]);
                }
            }
            return true;
        } else if (l == 1) {
            // If only 2 arguments, remove value from storage directly
            s.removeItem(a0);
            return true;
        } else {
            // If more than 2 arguments, parse storage to retrieve final node and remove value
            // Get first level
            try {
                to_store = tmp = JSON.parse(s.getItem(a0));
            } catch (e) {
                throw new ReferenceError(a0 + ' is not defined in this storage');
            }
            // Parse next levels and remove value
            for (i = 1; i < l - 1; i++) {
                tmp = tmp[a[i]];
                if (tmp === undefined) {
                    throw new ReferenceError([].slice.call(a, 1, i).join('.') + ' is not defined in this storage');
                }
            }
            // If last argument is an array,remove value for each item in this array
            // Else remove value normally
            if (Array.isArray(a[i])) {
                for (j in a[i]) {
                    if (a[i].hasOwnProperty(j)) {
                        delete tmp[a[i][j]];
                    }
                }
            } else {
                delete tmp[a[i]];
            }
            s.setItem(a0, JSON.stringify(to_store));
            return true;
        }
    }

    // Remove all items from a storage
    function _removeAll(reinit_ns) {
        var keys = _keys.call(this), i;
        for (i in keys) {
            if (keys.hasOwnProperty(i)) {
                _remove.call(this, keys[i]);
            }
        }
        // Reinitialize all namespace storages
        if (reinit_ns) {
            for (i in apis.namespaceStorages) {
                if (apis.namespaceStorages.hasOwnProperty(i)) {
                    _createNamespace(i);
                }
            }
        }
    }

    // Check if items of a storage are empty
    function _isEmpty() {
        var l = arguments.length, a = arguments, a0 = a[0], i;
        if (l == 0) {
            // If no argument, test if storage is empty
            return (_keys.call(this).length == 0);
        } else if (Array.isArray(a0)) {
            // If first argument is an array, test each item of this array and return true only if all items are empty
            for (i = 0; i < a0.length; i++) {
                if (!_isEmpty.call(this, a0[i])) {
                    return false;
                }
            }
            return true;
        } else {
            // If at least 1 argument, try to get value and test it
            try {
                var v = _get.apply(this, arguments);
                // Convert result to an object (if last argument is an array, _get return already an object) and test each item
                if (!Array.isArray(a[l - 1])) {
                    v = {'totest': v};
                }
                for (i in v) {
                    if (v.hasOwnProperty(i) && !(
                            (_isPlainObject(v[i]) && _isEmptyObject(v[i])) ||
                            (Array.isArray(v[i]) && !v[i].length) ||
                            (typeof v[i] !== 'boolean' && !v[i])
                        )) {
                        return false;
                    }
                }
                return true;
            } catch (e) {
                return true;
            }
        }
    }

    // Check if items of a storage exist
    function _isSet() {
        var l = arguments.length, a = arguments, a0 = a[0], i;
        if (l < 1) {
            throw new Error('Minimum 1 argument must be given');
        }
        if (Array.isArray(a0)) {
            // If first argument is an array, test each item of this array and return true only if all items exist
            for (i = 0; i < a0.length; i++) {
                if (!_isSet.call(this, a0[i])) {
                    return false;
                }
            }
            return true;
        } else {
            // For other case, try to get value and test it
            try {
                var v = _get.apply(this, arguments);
                // Convert result to an object (if last argument is an array, _get return already an object) and test each item
                if (!Array.isArray(a[l - 1])) {
                    v = {'totest': v};
                }
                for (i in v) {
                    if (v.hasOwnProperty(i) && !(v[i] !== undefined && v[i] !== null)) {
                        return false;
                    }
                }
                return true;
            } catch (e) {
                return false;
            }
        }
    }

    // Get keys of a storage or of an item of the storage
    function _keys() {
        var storage = this._type, l = arguments.length, s = window[storage], keys = [], o = {};
        // If at least 1 argument, get value from storage to retrieve keys
        // Else, use storage to retrieve keys
        if (l > 0) {
            o = _get.apply(this, arguments);
        } else {
            o = s;
        }
        if (o && o._cookie) {
            // If storage is a cookie, use js-cookie to retrieve keys
            var cookies = Cookies.get();
            for (var key in cookies) {
                if (cookies.hasOwnProperty(key) && key != '') {
                    keys.push(key.replace(o._prefix, ''));
                }
            }
        } else {
            for (var i in o) {
                if (o.hasOwnProperty(i)) {
                    keys.push(i);
                }
            }
        }
        return keys;
    }

    // Create new namespace storage
    function _createNamespace(name) {
        if (!name || typeof name != "string") {
            throw new Error('First parameter must be a string');
        }
        if (storage_available) {
            if (!window.localStorage.getItem(name)) {
                window.localStorage.setItem(name, '{}');
            }
            if (!window.sessionStorage.getItem(name)) {
                window.sessionStorage.setItem(name, '{}');
            }
        } else {
            if (!window.localCookieStorage.getItem(name)) {
                window.localCookieStorage.setItem(name, '{}');
            }
            if (!window.sessionCookieStorage.getItem(name)) {
                window.sessionCookieStorage.setItem(name, '{}');
            }
        }
        var ns = {
            localStorage: _extend({}, apis.localStorage, {_ns: name}),
            sessionStorage: _extend({}, apis.sessionStorage, {_ns: name})
        };
        if (cookies_available) {
            if (!window.cookieStorage.getItem(name)) {
                window.cookieStorage.setItem(name, '{}');
            }
            ns.cookieStorage = _extend({}, apis.cookieStorage, {_ns: name});
        }
        apis.namespaceStorages[name] = ns;
        return ns;
    }

    // Test if storage is natively available on browser
    function _testStorage(name) {
        var foo = 'jsapi';
        try {
            if (!window[name]) {
                return false;
            }
            window[name].setItem(foo, foo);
            window[name].removeItem(foo);
            return true;
        } catch (e) {
            return false;
        }
    }

    // Test if a variable is a plain object (from jQuery)
    function _isPlainObject(obj) {
        var proto, Ctor;

        // Detect obvious negatives
        // Use toString instead of jQuery.type to catch host objects
        if (!obj || toString.call(obj) !== "[object Object]") {
            return false;
        }

        proto = getProto(obj);

        // Objects with no prototype (e.g., `Object.create( null )`) are plain
        if (!proto) {
            return true;
        }

        // Objects with prototype are plain iff they were constructed by a global Object function
        Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
        return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
    }

    // Test if a variable is an empty object (from jQuery)
    function _isEmptyObject(obj) {
        var name;

        for (name in obj) {
            return false;
        }
        return true;
    }

    // Merge objects
    function _extend() {
        var i = 1;
        var result = arguments[0];
        for (; i < arguments.length; i++) {
            var attributes = arguments[i];
            for (var key in attributes) {
                if (attributes.hasOwnProperty(key)) {
                    result[key] = attributes[key];
                }
            }
        }
        return result;
    }

    // Check if storages are natively available on browser and check is js-cookie is present
    var storage_available = _testStorage('localStorage');
    var cookies_available = typeof Cookies !== 'undefined';

    // Namespace object
    var storage = {
        _type: '',
        _ns: '',
        _callMethod: function (f, a) {
            a = Array.prototype.slice.call(a);
            var p = [], a0 = a[0];
            if (this._ns) {
                p.push(this._ns);
            }
            if (typeof a0 === 'string' && a0.indexOf('.') !== -1) {
                a.shift();
                [].unshift.apply(a, a0.split('.'));
            }
            [].push.apply(p, a);
            return f.apply(this, p);
        },
        // Define if plugin always use JSON to store values (even to store simple values like string, int...) or not
        alwaysUseJson: false,
        // Get items. If no parameters and storage have a namespace, return all namespace
        get: function () {
            if (!storage_available && !cookies_available){
                return null;
            }
            return this._callMethod(_get, arguments);
        },
        // Set items
        set: function () {
            var l = arguments.length, a = arguments, a0 = a[0];
            if (l < 1 || !_isPlainObject(a0) && l < 2) {
                throw new Error('Minimum 2 arguments must be given or first parameter must be an object');
            }
            if (!storage_available && !cookies_available){
                return null;
            }
            // If first argument is an object and storage is a namespace storage, set values individually
            if (_isPlainObject(a0) && this._ns) {
                for (var i in a0) {
                    if (a0.hasOwnProperty(i)) {
                        this._callMethod(_set, [i, a0[i]]);
                    }
                }
                return a0;
            } else {
                var r = this._callMethod(_set, a);
                if (this._ns) {
                    return r[a0.split('.')[0]];
                } else {
                    return r;
                }
            }
        },
        // Delete items
        remove: function () {
            if (arguments.length < 1) {
                throw new Error('Minimum 1 argument must be given');
            }
            if (!storage_available && !cookies_available){
                return null;
            }
            return this._callMethod(_remove, arguments);
        },
        // Delete all items
        removeAll: function (reinit_ns) {
            if (!storage_available && !cookies_available){
                return null;
            }
            if (this._ns) {
                this._callMethod(_set, [{}]);
                return true;
            } else {
                return this._callMethod(_removeAll, [reinit_ns]);
            }
        },
        // Items empty
        isEmpty: function () {
            if (!storage_available && !cookies_available){
                return null;
            }
            return this._callMethod(_isEmpty, arguments);
        },
        // Items exists
        isSet: function () {
            if (arguments.length < 1) {
                throw new Error('Minimum 1 argument must be given');
            }
            if (!storage_available && !cookies_available){
                return null;
            }
            return this._callMethod(_isSet, arguments);
        },
        // Get keys of items
        keys: function () {
            if (!storage_available && !cookies_available){
                return null;
            }
            return this._callMethod(_keys, arguments);
        }
    };

    // Use js-cookie for compatibility with old browsers and give access to cookieStorage
    if (cookies_available) {
        // sessionStorage is valid for one window/tab. To simulate that with cookie, we set a name for the window and use it for the name of the cookie
        if (!window.name) {
            window.name = Math.floor(Math.random() * 100000000);
        }
        var cookie_storage = {
            _cookie: true,
            _prefix: '',
            _expires: null,
            _path: null,
            _domain: null,
            _secure: false,
            setItem: function (n, v) {
                Cookies.set(this._prefix + n, v, {expires: this._expires, path: this._path, domain: this._domain, secure: this._secure});
            },
            getItem: function (n) {
                return Cookies.get(this._prefix + n);
            },
            removeItem: function (n) {
                return Cookies.remove(this._prefix + n, {path: this._path});
            },
            clear: function () {
                var cookies = Cookies.get();
                for (var key in cookies) {
                    if (cookies.hasOwnProperty(key) && key != '') {
                        if (!this._prefix && key.indexOf(cookie_local_prefix) === -1 && key.indexOf(cookie_session_prefix) === -1 || this._prefix && key.indexOf(this._prefix) === 0) {
                            Cookies.remove(key);
                        }
                    }
                }
            },
            setExpires: function (e) {
                this._expires = e;
                return this;
            },
            setPath: function (p) {
                this._path = p;
                return this;
            },
            setDomain: function (d) {
                this._domain = d;
                return this;
            },
            setSecure: function (s) {
                this._secure = s;
                return this;
            },
            setConf: function (c) {
                if (c.path) {
                    this._path = c.path;
                }
                if (c.domain) {
                    this._domain = c.domain;
                }
                if (c.secure) {
                    this._secure = c.secure;
                }
                if (c.expires) {
                    this._expires = c.expires;
                }
                return this;
            },
            setDefaultConf: function () {
                this._path = this._domain = this._expires = null;
                this._secure = false;
            }
        };
        if (!storage_available) {
            window.localCookieStorage = _extend({}, cookie_storage, {
                _prefix: cookie_local_prefix,
                _expires: 365 * 10,
                _secure: true
            });
            window.sessionCookieStorage = _extend({}, cookie_storage, {
                _prefix: cookie_session_prefix + window.name + '_',
                _secure: true
            });
        }
        window.cookieStorage = _extend({}, cookie_storage);
        // cookieStorage API
        apis.cookieStorage = _extend({}, storage, {
            _type: 'cookieStorage',
            setExpires: function (e) {
                window.cookieStorage.setExpires(e);
                return this;
            },
            setPath: function (p) {
                window.cookieStorage.setPath(p);
                return this;
            },
            setDomain: function (d) {
                window.cookieStorage.setDomain(d);
                return this;
            },
            setSecure: function (s) {
                window.cookieStorage.setSecure(s);
                return this;
            },
            setConf: function (c) {
                window.cookieStorage.setConf(c);
                return this;
            },
            setDefaultConf: function () {
                window.cookieStorage.setDefaultConf();
                return this;
            }
        });
    }

    // Get a new API on a namespace
    apis.initNamespaceStorage = function (ns) {
        return _createNamespace(ns);
    };
    if (storage_available) {
        // localStorage API
        apis.localStorage = _extend({}, storage, {_type: 'localStorage'});
        // sessionStorage API
        apis.sessionStorage = _extend({}, storage, {_type: 'sessionStorage'});
    } else {
        // localStorage API
        apis.localStorage = _extend({}, storage, {_type: 'localCookieStorage'});
        // sessionStorage API
        apis.sessionStorage = _extend({}, storage, {_type: 'sessionCookieStorage'});
    }
    // List of all namespace storage
    apis.namespaceStorages = {};
    // Remove all items in all storages
    apis.removeAllStorages = function (reinit_ns) {
        apis.localStorage.removeAll(reinit_ns);
        apis.sessionStorage.removeAll(reinit_ns);
        if (apis.cookieStorage) {
            apis.cookieStorage.removeAll(reinit_ns);
        }
        if (!reinit_ns) {
            apis.namespaceStorages = {};
        }
    };
    // About alwaysUseJson
    // By default, all values are string on html storages and the plugin don't use json to store simple values (strings, int, float...)
    // So by default, if you do storage.setItem('test',2), value in storage will be "2", not 2
    // If you set this property to true, all values set with the plugin will be stored as json to have typed values in any cases
    apis.alwaysUseJsonInStorage = function (value) {
        storage.alwaysUseJson = value;
        apis.localStorage.alwaysUseJson = value;
        apis.sessionStorage.alwaysUseJson = value;
        if (apis.cookieStorage) {
            apis.cookieStorage.alwaysUseJson = value;
        }
    };

    return apis;
}));
});

var js_cookie = createCommonjsModule(function (module, exports) {
(function (factory) {
	var registeredInModuleLoader;
	{
		module.exports = factory();
		registeredInModuleLoader = true;
	}
	if (!registeredInModuleLoader) {
		var OldCookies = window.Cookies;
		var api = window.Cookies = factory();
		api.noConflict = function () {
			window.Cookies = OldCookies;
			return api;
		};
	}
}(function () {
	function extend () {
		var i = 0;
		var result = {};
		for (; i < arguments.length; i++) {
			var attributes = arguments[ i ];
			for (var key in attributes) {
				result[key] = attributes[key];
			}
		}
		return result;
	}

	function decode (s) {
		return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
	}

	function init (converter) {
		function api() {}

		function set (key, value, attributes) {
			if (typeof document === 'undefined') {
				return;
			}

			attributes = extend({
				path: '/'
			}, api.defaults, attributes);

			if (typeof attributes.expires === 'number') {
				attributes.expires = new Date(new Date() * 1 + attributes.expires * 864e+5);
			}

			// We're using "expires" because "max-age" is not supported by IE
			attributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';

			try {
				var result = JSON.stringify(value);
				if (/^[\{\[]/.test(result)) {
					value = result;
				}
			} catch (e) {}

			value = converter.write ?
				converter.write(value, key) :
				encodeURIComponent(String(value))
					.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);

			key = encodeURIComponent(String(key))
				.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)
				.replace(/[\(\)]/g, escape);

			var stringifiedAttributes = '';
			for (var attributeName in attributes) {
				if (!attributes[attributeName]) {
					continue;
				}
				stringifiedAttributes += '; ' + attributeName;
				if (attributes[attributeName] === true) {
					continue;
				}

				// Considers RFC 6265 section 5.2:
				// ...
				// 3.  If the remaining unparsed-attributes contains a %x3B (";")
				//     character:
				// Consume the characters of the unparsed-attributes up to,
				// not including, the first %x3B (";") character.
				// ...
				stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
			}

			return (document.cookie = key + '=' + value + stringifiedAttributes);
		}

		function get (key, json) {
			if (typeof document === 'undefined') {
				return;
			}

			var jar = {};
			// To prevent the for loop in the first place assign an empty array
			// in case there are no cookies at all.
			var cookies = document.cookie ? document.cookie.split('; ') : [];
			var i = 0;

			for (; i < cookies.length; i++) {
				var parts = cookies[i].split('=');
				var cookie = parts.slice(1).join('=');

				if (!json && cookie.charAt(0) === '"') {
					cookie = cookie.slice(1, -1);
				}

				try {
					var name = decode(parts[0]);
					cookie = (converter.read || converter)(cookie, name) ||
						decode(cookie);

					if (json) {
						try {
							cookie = JSON.parse(cookie);
						} catch (e) {}
					}

					jar[name] = cookie;

					if (key === name) {
						break;
					}
				} catch (e) {}
			}

			return key ? jar[key] : jar;
		}

		api.set = set;
		api.get = function (key) {
			return get(key, false /* read as raw */);
		};
		api.getJSON = function (key) {
			return get(key, true /* read as json */);
		};
		api.remove = function (key, attributes) {
			set(key, '', extend(attributes, {
				expires: -1
			}));
		};

		api.defaults = {};

		api.withConverter = init;

		return api;
	}

	return init(function () {});
}));
});

js_storage.alwaysUseJsonInStorage();

const localStorage = js_storage.localStorage;
const sessionStorage = js_storage.sessionStorage;
const cookieStorage = js_cookie;

var Storages = /*#__PURE__*/Object.freeze({
    __proto__: null,
    localStorage: localStorage,
    sessionStorage: sessionStorage,
    cookieStorage: cookieStorage,
    'default': js_storage
});

const modals = writable({});

function isSimpleDeriver(deriver) {
    return deriver.length < 2;
}
function generator(storage) {
    /**
     * Creates a `Readable` store that allows reading by subscription.
     * @param key storage key
     * @param value initial value
     * @param {StartStopNotifier}start start and stop notifications for subscriptions
     */
    function readable(key, value, start) {
        return {
            subscribe: writable$1(key, value, start).subscribe
        };
    }
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param key storage key
     * @param {*=}value default value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable$1(key, value, start = noop) {
        function wrap_start(ogSet) {
            return start(function wrap_set(new_value) {
                if (storage) {
                    storage.setItem(key, JSON.stringify(new_value));
                }
                return ogSet(new_value);
            });
        }
        if (storage) {
            if (storage.getItem(key)) {
                value = JSON.parse(storage.getItem(key));
            }
            storage.setItem(key, JSON.stringify(value));
        }
        const ogStore = writable(value, start ? wrap_start : undefined);
        function set(new_value) {
            if (storage) {
                storage.setItem(key, JSON.stringify(new_value));
            }
            ogStore.set(new_value);
        }
        function update(fn) {
            set(fn(get_store_value(ogStore)));
        }
        function subscribe(run, invalidate = noop) {
            return ogStore.subscribe(run, invalidate);
        }
        return { set, update, subscribe };
    }
    /**
     * Derived value store by synchronizing one or more readable stores and
     * applying an aggregation function over its input values.
     * @param key storage key
     * @param {Stores} stores input stores
     * @param {function(Stores=, function(*)=):*}fn function callback that aggregates the values
     * @param {*=}initial_value when used asynchronously
     */
    function derived(key, stores, fn, initial_value) {
        const single = !Array.isArray(stores);
        const stores_array = single
            ? [stores]
            : stores;
        if (storage && storage.getItem(key)) {
            initial_value = JSON.parse(storage.getItem(key));
        }
        return readable(key, initial_value, (set) => {
            let inited = false;
            const values = [];
            let pending = 0;
            let cleanup = noop;
            const sync = () => {
                if (pending) {
                    return;
                }
                cleanup();
                const input = single ? values[0] : values;
                if (isSimpleDeriver(fn)) {
                    set(fn(input));
                }
                else {
                    const result = fn(input, set);
                    cleanup = is_function(result) ? result : noop;
                }
            };
            const unsubscribers = stores_array.map((store, i) => store.subscribe((value) => {
                values[i] = value;
                pending &= ~(1 << i);
                if (inited) {
                    sync();
                }
            }, () => {
                pending |= (1 << i);
            }));
            inited = true;
            sync();
            return function stop() {
                run_all(unsubscribers);
                cleanup();
            };
        });
    }
    return {
        readable,
        writable: writable$1,
        derived,
        get: get_store_value
    };
}

const storage = typeof window !== 'undefined' ? window.localStorage : undefined;
const { readable, writable: writable$1, derived, get: get$1 } = generator(storage);

const organization = writable$1('organization', null);
const organizations = writable$1('organizations', null);

/* src/components/Portal.svelte generated by Svelte v3.24.0 */

const { document: document_1 } = globals;
const file$D = "src/components/Portal.svelte";

function add_css$4() {
	var style = element("style");
	style.id = "svelte-1xulprs-style";
	style.textContent = ".portal-clone.svelte-1xulprs{display:none}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUG9ydGFsLnN2ZWx0ZSIsInNvdXJjZXMiOlsiUG9ydGFsLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICBpbXBvcnQgeyBvbk1vdW50IH0gZnJvbSBcInN2ZWx0ZVwiO1xuXG4gIGV4cG9ydCBsZXQgaWQgPSB1bmRlZmluZWRcbiAgZXhwb3J0IGxldCBvZmYgPSBmYWxzZVxuXG4gIGxldCByZWY7XG4gIGxldCBwb3J0YWw7XG5cbiAgb25Nb3VudCgoKSA9PiB7XG4gICAgaWYgKG9mZikgcmV0dXJuXG4gICAgY29uc3QgcHJldlBvcnRhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBwb3J0YWxfJHtpZH1gKVxuICAgIGlmIChpZCAmJiBwcmV2UG9ydGFsKSBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHByZXZQb3J0YWwpO1xuICAgIHBvcnRhbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgcG9ydGFsLmNsYXNzTmFtZSA9IFwicG9ydGFsXCI7XG4gICAgcG9ydGFsLmlkID0gYHBvcnRhbF8ke2lkfWA7XG4gICAgcG9ydGFsLmFwcGVuZENoaWxkKHJlZik7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChwb3J0YWwpO1xuICAgIHJldHVybiAoKSA9PiBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHBvcnRhbClcbiAgfSk7XG5cbjwvc2NyaXB0PlxuXG57I2lmIG9mZn1cbiAgPHNsb3QgLz5cbns6ZWxzZX1cbiAgPGRpdiBjbGFzcz1cInBvcnRhbC1jbG9uZVwiPlxuICAgICAgPGRpdiBiaW5kOnRoaXM9e3JlZn0+XG4gICAgICAgICAgPHNsb3QgLz5cbiAgICAgIDwvZGl2PlxuICA8L2Rpdj5cbnsvaWZ9XG5cbjxzdHlsZT5cbi5wb3J0YWwtY2xvbmUge1xuICBkaXNwbGF5OiBub25lO1xufTwvc3R5bGU+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0NBLGFBQWEsZUFBQyxDQUFDLEFBQ2IsT0FBTyxDQUFFLElBQUksQUFDZixDQUFDIn0= */";
	append_dev(document_1.head, style);
}

// (26:0) {:else}
function create_else_block(ctx) {
	let div1;
	let div0;
	let current;
	const default_slot_template = /*$$slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", {});
			var div0_nodes = children(div0);
			if (default_slot) default_slot.l(div0_nodes);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(div0, file$D, 27, 6, 602);
			attr_dev(div1, "class", "portal-clone svelte-1xulprs");
			add_location(div1, file$D, 26, 2, 569);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			/*div0_binding*/ ctx[5](div0);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 8) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[3], dirty, null, null);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if (default_slot) default_slot.d(detaching);
			/*div0_binding*/ ctx[5](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(26:0) {:else}",
		ctx
	});

	return block;
}

// (24:0) {#if off}
function create_if_block$1(ctx) {
	let current;
	const default_slot_template = /*$$slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		l: function claim(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 8) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[3], dirty, null, null);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(24:0) {#if off}",
		ctx
	});

	return block;
}

function create_fragment$D(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$1, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*off*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$D.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$D($$self, $$props, $$invalidate) {
	let { id = undefined } = $$props;
	let { off = false } = $$props;
	let ref;
	let portal;

	onMount(() => {
		if (off) return;
		const prevPortal = document.getElementById(`portal_${id}`);
		if (id && prevPortal) document.body.removeChild(prevPortal);
		portal = document.createElement("div");
		portal.className = "portal";
		portal.id = `portal_${id}`;
		portal.appendChild(ref);
		document.body.appendChild(portal);
		return () => document.body.removeChild(portal);
	});

	const writable_props = ["id", "off"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Portal> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Portal", $$slots, ['default']);

	function div0_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	$$self.$set = $$props => {
		if ("id" in $$props) $$invalidate(2, id = $$props.id);
		if ("off" in $$props) $$invalidate(0, off = $$props.off);
		if ("$$scope" in $$props) $$invalidate(3, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({ onMount, id, off, ref, portal });

	$$self.$inject_state = $$props => {
		if ("id" in $$props) $$invalidate(2, id = $$props.id);
		if ("off" in $$props) $$invalidate(0, off = $$props.off);
		if ("ref" in $$props) $$invalidate(1, ref = $$props.ref);
		if ("portal" in $$props) portal = $$props.portal;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [off, ref, id, $$scope, $$slots, div0_binding];
}

class Portal extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document_1.getElementById("svelte-1xulprs-style")) add_css$4();
		init(this, options, instance$D, create_fragment$D, safe_not_equal, { id: 2, off: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Portal",
			options,
			id: create_fragment$D.name
		});
	}

	get id() {
		throw new Error("<Portal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Portal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get off() {
		throw new Error("<Portal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set off(value) {
		throw new Error("<Portal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Modal.svelte generated by Svelte v3.24.0 */
const file$E = "src/components/Modal.svelte";

function add_css$5() {
	var style = element("style");
	style.id = "svelte-48jsm1-style";
	style.textContent = ".modal.svelte-48jsm1.svelte-48jsm1{z-index:8;position:fixed;top:0;left:0;width:100%;height:100%;display:-webkit-box;display:-ms-flexbox;display:flex;overflow-x:hidden;overflow-y:auto;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-ms-touch-action:manipulation;touch-action:manipulation;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background-color:rgba(var(--color-black), .75);outline:150px solid rgba(var(--color-black), .75);-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;opacity:0;pointer-events:none}.modal.active.svelte-48jsm1.svelte-48jsm1,.modal-header.active.svelte-48jsm1.svelte-48jsm1{opacity:1;pointer-events:auto}.modal-inner.svelte-48jsm1.svelte-48jsm1{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:stretch;-ms-flex-align:stretch;align-items:stretch;-webkit-box-pack:stretch;-ms-flex-pack:stretch;justify-content:stretch;overflow:hidden;-webkit-transform:translateZ(0);transform:translateZ(0);background-color:rgba(var(--theme-color-primary))}.small.svelte-48jsm1 .modal-inner.svelte-48jsm1{width:200px;border-radius:var(--border-radius-big);max-width:var(--full-container)}.medium.svelte-48jsm1 .modal-inner.svelte-48jsm1{width:calc(100vw - var(--screen-padding) * 2);border-radius:var(--border-radius-big);max-width:var(--full-container)}.big.svelte-48jsm1 .modal-inner.svelte-48jsm1{width:calc(100% - var(--screen-padding) * 2);height:calc(100% - var(--screen-padding) * 2);border-radius:var(--border-radius-big);max-width:var(--full-container)}.full.svelte-48jsm1.svelte-48jsm1{-webkit-box-align:stretch;-ms-flex-align:stretch;align-items:stretch;-webkit-box-pack:stretch;-ms-flex-pack:stretch;justify-content:stretch}.full.svelte-48jsm1 .modal-inner.svelte-48jsm1{-webkit-box-flex:0;-ms-flex:none;flex:none;width:100%;min-height:100%;border-radius:0}.modal-header.svelte-48jsm1.svelte-48jsm1{-webkit-transform:translateZ(0);transform:translateZ(0);z-index:9;position:fixed;top:0;left:0;width:100%;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;color:rgb(var(--color-white));background-color:rgb(var(--color-info));opacity:0;pointer-events:none;-webkit-transform-origin:50% 50vh;transform-origin:50% 50vh}.modal-header-relative.svelte-48jsm1.svelte-48jsm1{-webkit-transform:translateZ(0);transform:translateZ(0);z-index:9;position:relative;width:100%;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;color:rgb(var(--color-white));background-color:rgb(var(--color-info))}.modal-header.svelte-48jsm1 .close.svelte-48jsm1,.modal-header-relative.svelte-48jsm1 .close.svelte-48jsm1{font-size:24px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;width:50px;height:60px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append_dev(document.head, style);
}

const get_default_slot_changes = dirty => ({ props: dirty[0] & /*$modals, id*/ 130 });

const get_default_slot_context = ctx => ({
	props: safeGet(/*func*/ ctx[19], {}, true)
});

const get_header_slot_changes_1 = dirty => ({ props: dirty[0] & /*$modals, id*/ 130 });

const get_header_slot_context_1 = ctx => ({
	props: safeGet(/*func*/ ctx[19], {}, true)
});

const get_header_slot_changes = dirty => ({});
const get_header_slot_context = ctx => ({});

// (243:0) {#if active}
function create_if_block$2(ctx) {
	let portal;
	let current;

	portal = new Portal({
			props: {
				id: /*id*/ ctx[1],
				$$slots: { default: [create_default_slot$y] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(portal.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(portal.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(portal, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const portal_changes = {};
			if (dirty[0] & /*id*/ 2) portal_changes.id = /*id*/ ctx[1];

			if (dirty[0] & /*$$scope, id, classProp, ref, $modals, title, withHeader, size, active, refHeader*/ 2097663) {
				portal_changes.$$scope = { dirty, ctx };
			}

			portal.$set(portal_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(portal.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(portal.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(portal, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$2.name,
		type: "if",
		source: "(243:0) {#if active}",
		ctx
	});

	return block;
}

// (254:12) {#if withHeader && size === 'full'}
function create_if_block_2(ctx) {
	let portal;
	let t;
	let br;
	let current;

	portal = new Portal({
			props: {
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	br = new Br({ props: { size: "60" }, $$inline: true });

	const block = {
		c: function create() {
			create_component(portal.$$.fragment);
			t = space();
			create_component(br.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(portal.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(br.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(portal, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(br, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const portal_changes = {};

			if (dirty[0] & /*$$scope, active, refHeader, title*/ 2097256) {
				portal_changes.$$scope = { dirty, ctx };
			}

			portal.$set(portal_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(portal.$$.fragment, local);
			transition_in(br.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(portal.$$.fragment, local);
			transition_out(br.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(portal, detaching);
			if (detaching) detach_dev(t);
			destroy_component(br, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(254:12) {#if withHeader && size === 'full'}",
		ctx
	});

	return block;
}

// (256:40)                          
function fallback_block_1(ctx) {
	let button;
	let h2;
	let t0;
	let t1;
	let span;
	let icon;
	let button_class_value;
	let button_intro;
	let current;
	let mounted;
	let dispose;

	icon = new Icon({
			props: { type: "close", size: "big", is: "light" },
			$$inline: true
		});

	const block = {
		c: function create() {
			button = element("button");
			h2 = element("h2");
			t0 = text(/*title*/ ctx[3]);
			t1 = space();
			span = element("span");
			create_component(icon.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", { type: true, class: true });
			var button_nodes = children(button);
			h2 = claim_element(button_nodes, "H2", { style: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, /*title*/ ctx[3]);
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(button_nodes);
			span = claim_element(button_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			claim_component(icon.$$.fragment, span_nodes);
			span_nodes.forEach(detach_dev);
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(h2, "padding", "15px");
			add_location(h2, file$E, 263, 28, 10489);
			attr_dev(span, "class", "close svelte-48jsm1");
			add_location(span, file$E, 264, 28, 10558);
			attr_dev(button, "type", "button");
			attr_dev(button, "class", button_class_value = "" + (null_to_empty(classnames("modal-header", { active: /*active*/ ctx[6] })) + " svelte-48jsm1"));
			add_location(button, file$E, 256, 24, 10169);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, h2);
			append_dev(h2, t0);
			append_dev(button, t1);
			append_dev(button, span);
			mount_component(icon, span, null);
			/*button_binding*/ ctx[18](button);
			current = true;

			if (!mounted) {
				dispose = listen_dev(button, "click", /*onCloseModal*/ ctx[12], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (!current || dirty[0] & /*title*/ 8) set_data_dev(t0, /*title*/ ctx[3]);

			if (!current || dirty[0] & /*active*/ 64 && button_class_value !== (button_class_value = "" + (null_to_empty(classnames("modal-header", { active: /*active*/ ctx[6] })) + " svelte-48jsm1"))) {
				attr_dev(button, "class", button_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);

			if (!button_intro) {
				add_render_callback(() => {
					button_intro = create_in_transition(button, /*appear*/ ctx[11], {});
					button_intro.start();
				});
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			destroy_component(icon);
			/*button_binding*/ ctx[18](null);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block_1.name,
		type: "fallback",
		source: "(256:40)                          ",
		ctx
	});

	return block;
}

// (255:16) <Portal>
function create_default_slot_1(ctx) {
	let current;
	const header_slot_template = /*$$slots*/ ctx[17].header;
	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[21], get_header_slot_context);
	const header_slot_or_fallback = header_slot || fallback_block_1(ctx);

	const block = {
		c: function create() {
			if (header_slot_or_fallback) header_slot_or_fallback.c();
		},
		l: function claim(nodes) {
			if (header_slot_or_fallback) header_slot_or_fallback.l(nodes);
		},
		m: function mount(target, anchor) {
			if (header_slot_or_fallback) {
				header_slot_or_fallback.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (header_slot) {
				if (header_slot.p && dirty[0] & /*$$scope*/ 2097152) {
					update_slot(header_slot, header_slot_template, ctx, /*$$scope*/ ctx[21], dirty, get_header_slot_changes, get_header_slot_context);
				}
			} else {
				if (header_slot_or_fallback && header_slot_or_fallback.p && dirty[0] & /*active, refHeader, title*/ 104) {
					header_slot_or_fallback.p(ctx, dirty);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(header_slot_or_fallback, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(header_slot_or_fallback, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (header_slot_or_fallback) header_slot_or_fallback.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(255:16) <Portal>",
		ctx
	});

	return block;
}

// (281:16) {#if withHeader && size !== 'full'}
function create_if_block_1(ctx) {
	let current;
	const header_slot_template = /*$$slots*/ ctx[17].header;
	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[21], get_header_slot_context_1);
	const header_slot_or_fallback = header_slot || fallback_block(ctx);

	const block = {
		c: function create() {
			if (header_slot_or_fallback) header_slot_or_fallback.c();
		},
		l: function claim(nodes) {
			if (header_slot_or_fallback) header_slot_or_fallback.l(nodes);
		},
		m: function mount(target, anchor) {
			if (header_slot_or_fallback) {
				header_slot_or_fallback.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (header_slot) {
				if (header_slot.p && dirty[0] & /*$$scope, $modals, id*/ 2097282) {
					update_slot(header_slot, header_slot_template, ctx, /*$$scope*/ ctx[21], dirty, get_header_slot_changes_1, get_header_slot_context_1);
				}
			} else {
				if (header_slot_or_fallback && header_slot_or_fallback.p && dirty[0] & /*title*/ 8) {
					header_slot_or_fallback.p(ctx, dirty);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(header_slot_or_fallback, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(header_slot_or_fallback, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (header_slot_or_fallback) header_slot_or_fallback.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(281:16) {#if withHeader && size !== 'full'}",
		ctx
	});

	return block;
}

// (282:40)                          
function fallback_block(ctx) {
	let button;
	let h2;
	let t0;
	let t1;
	let span;
	let icon;
	let button_class_value;
	let button_intro;
	let current;
	let mounted;
	let dispose;

	icon = new Icon({
			props: { type: "close", size: "big", is: "light" },
			$$inline: true
		});

	const block = {
		c: function create() {
			button = element("button");
			h2 = element("h2");
			t0 = text(/*title*/ ctx[3]);
			t1 = space();
			span = element("span");
			create_component(icon.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", { type: true, class: true });
			var button_nodes = children(button);
			h2 = claim_element(button_nodes, "H2", { style: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, /*title*/ ctx[3]);
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(button_nodes);
			span = claim_element(button_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			claim_component(icon.$$.fragment, span_nodes);
			span_nodes.forEach(detach_dev);
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(h2, "padding", "15px");
			add_location(h2, file$E, 288, 28, 11500);
			attr_dev(span, "class", "close svelte-48jsm1");
			add_location(span, file$E, 289, 28, 11569);
			attr_dev(button, "type", "button");
			attr_dev(button, "class", button_class_value = "" + (null_to_empty(classnames("modal-header-relative active")) + " svelte-48jsm1"));
			add_location(button, file$E, 282, 24, 11211);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, h2);
			append_dev(h2, t0);
			append_dev(button, t1);
			append_dev(button, span);
			mount_component(icon, span, null);
			current = true;

			if (!mounted) {
				dispose = listen_dev(button, "click", /*onCloseModal*/ ctx[12], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (!current || dirty[0] & /*title*/ 8) set_data_dev(t0, /*title*/ ctx[3]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);

			if (!button_intro) {
				add_render_callback(() => {
					button_intro = create_in_transition(button, /*appear*/ ctx[11], {});
					button_intro.start();
				});
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			destroy_component(icon);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block.name,
		type: "fallback",
		source: "(282:40)                          ",
		ctx
	});

	return block;
}

// (244:4) <Portal {id}>
function create_default_slot$y(ctx) {
	let div1;
	let t0;
	let div0;
	let t1;
	let div1_id_value;
	let div1_class_value;
	let addSwipe_action;
	let div1_intro;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*withHeader*/ ctx[4] && /*size*/ ctx[2] === "full" && create_if_block_2(ctx);
	let if_block1 = /*withHeader*/ ctx[4] && /*size*/ ctx[2] !== "full" && create_if_block_1(ctx);
	const default_slot_template = /*$$slots*/ ctx[17].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[21], get_default_slot_context);

	const block = {
		c: function create() {
			div1 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			div0 = element("div");
			if (if_block1) if_block1.c();
			t1 = space();
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", {
				id: true,
				"aria-hidden": true,
				class: true
			});

			var div1_nodes = children(div1);
			if (if_block0) if_block0.l(div1_nodes);
			t0 = claim_space(div1_nodes);

			div0 = claim_element(div1_nodes, "DIV", {
				class: true,
				tabindex: true,
				role: true,
				"aria-modal": true,
				"aria-labelledby": true
			});

			var div0_nodes = children(div0);
			if (if_block1) if_block1.l(div0_nodes);
			t1 = claim_space(div0_nodes);
			if (default_slot) default_slot.l(div0_nodes);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "modal-inner svelte-48jsm1");
			attr_dev(div0, "tabindex", "-1");
			attr_dev(div0, "role", "dialog");
			attr_dev(div0, "aria-modal", "true");
			attr_dev(div0, "aria-labelledby", "модальне вікно");
			add_location(div0, file$E, 272, 12, 10844);
			attr_dev(div1, "id", div1_id_value = `modal-${/*id*/ ctx[1]}`);
			attr_dev(div1, "aria-hidden", "true");
			attr_dev(div1, "class", div1_class_value = "" + (null_to_empty(/*classProp*/ ctx[8]) + " svelte-48jsm1"));
			add_location(div1, file$E, 244, 8, 9797);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			if (if_block0) if_block0.m(div1, null);
			append_dev(div1, t0);
			append_dev(div1, div0);
			if (if_block1) if_block1.m(div0, null);
			append_dev(div0, t1);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			/*div1_binding*/ ctx[20](div1);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(div0, "click", click_handler, false, false, false),
					action_destroyer(addSwipe_action = /*addSwipe*/ ctx[10].call(null, div1)),
					listen_dev(div1, "click", /*setActive*/ ctx[9].bind(null, false), false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (/*withHeader*/ ctx[4] && /*size*/ ctx[2] === "full") {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*withHeader, size*/ 20) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div1, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*withHeader*/ ctx[4] && /*size*/ ctx[2] !== "full") {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*withHeader, size*/ 20) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div0, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && dirty[0] & /*$$scope, $modals, id*/ 2097282) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[21], dirty, get_default_slot_changes, get_default_slot_context);
				}
			}

			if (!current || dirty[0] & /*id*/ 2 && div1_id_value !== (div1_id_value = `modal-${/*id*/ ctx[1]}`)) {
				attr_dev(div1, "id", div1_id_value);
			}

			if (!current || dirty[0] & /*classProp*/ 256 && div1_class_value !== (div1_class_value = "" + (null_to_empty(/*classProp*/ ctx[8]) + " svelte-48jsm1"))) {
				attr_dev(div1, "class", div1_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(default_slot, local);

			if (!div1_intro) {
				add_render_callback(() => {
					div1_intro = create_in_transition(div1, /*appear*/ ctx[11], {});
					div1_intro.start();
				});
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (default_slot) default_slot.d(detaching);
			/*div1_binding*/ ctx[20](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$y.name,
		type: "slot",
		source: "(244:4) <Portal {id}>",
		ctx
	});

	return block;
}

function create_fragment$E(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*active*/ ctx[6] && create_if_block$2(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*active*/ ctx[6]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*active*/ 64) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$2(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$E.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const DURATION$1 = 250;
const THRESHOLD = 50;
const SWIPE_SPEED = 0.5;

function drawTransform(el, x, y) {
	const delta = Math.abs(x) > Math.abs(y) ? x : y;
	let scale = 1 - Math.abs(delta / window.innerHeight);
	el && (el.style.transform = `matrix(${scale}, 0, 0, ${scale}, ${x}, ${y})`);
}

function setDuration(el, ms) {
	el && (el.style.transitionDuration = `${ms}ms`);
}

function drawOpacity(el, x, y) {
	const delta = Math.abs(x) > Math.abs(y) ? x : y;
	el && (el.style.opacity = 1 - Math.min(Math.abs(delta / (THRESHOLD * 1.5)), 1));
}

const click_handler = e => e.stopPropagation();

function instance$E($$self, $$props, $$invalidate) {
	let $modals;
	validate_store(modals, "modals");
	component_subscribe($$self, modals, $$value => $$invalidate(7, $modals = $$value));
	const dispatch = createEventDispatcher();
	const THRESHOLD_RANGES = { x: [0, 100], y: [1, 99] };
	const START_POSITION = { x: 50, y: 0 };
	let { id } = $$props;
	let { ref = null } = $$props;
	let { size = "full" } = $$props; // small/medium/big/full
	let { swipe = [] } = $$props; // up down left right all
	let { title = "Закрити" } = $$props;
	let { open = null } = $$props;
	let { startPosition = START_POSITION } = $$props;
	let { blockBody = true } = $$props;
	let { withHeader = true } = $$props;
	let refHeader;
	let isBodyBlocked = false;

	let isAllowed = {
		up: true,
		down: false,
		left: true,
		right: true
	};

	function blockScroll(modal) {
		if (blockBody && active && !isBodyBlocked) {
			disableScroll(modal, { extraLock: size === "full" });
			isBodyBlocked = true;
			modal && (modal.scrollTop = 0);

			isAllowed = {
				up: true,
				down: false,
				left: true,
				right: true
			};
		} else if (blockBody && !active && isBodyBlocked) {
			enableScroll(modal, { extraLock: size === "full" });
			isBodyBlocked = false;
		}
	}

	async function onActiveChange(active) {
		if (active) {
			setDuration(ref, DURATION$1);
			setDuration(refHeader, DURATION$1);
			setTimeout(() => setDuration(ref, 0), DURATION$1);
			setTimeout(() => setDuration(refHeader, 0), DURATION$1);
			drawTransform(ref, 0, 0);
			drawTransform(refHeader, 0, 0);
			drawOpacity(ref, 0, 0);
			drawOpacity(refHeader, 0, 0);
			blockScroll(ref);
			await tick();
			dispatch("open");
		} else {
			blockScroll(ref);
			await tick();
			dispatch("close");
		}
	}

	function setActive(isActive) {
		if (open !== null) $$invalidate(13, open = isActive);

		modals.update(s => ({
			...s,
			[`modal-${id}`]: { open: isActive }
		}));
	}

	let xSwipe = 0;
	let ySwipe = 0;

	function addSwipe(el) {
		stopPropagationInRanges(el, THRESHOLD_RANGES, ({ x, y }) => {
			isAllowed = {
				up: y <= THRESHOLD_RANGES.y[0],
				down: y >= THRESHOLD_RANGES.y[1],
				left: x <= THRESHOLD_RANGES.x[0] || x >= THRESHOLD_RANGES.x[1],
				right: x <= THRESHOLD_RANGES.x[0] || x >= THRESHOLD_RANGES.x[1]
			};
		});

		new Swipe(el).run().onUp(isSwipe.up ? handleVerticalSwipe : null).onDown(isSwipe.down ? handleVerticalSwipe : null).onLeft(isSwipe.left ? handleHorizontalSwipe : null).onRight(isSwipe.right ? handleHorizontalSwipe : null).onTouchEnd(async () => {
			const shift = 50;

			if (xSwipe > THRESHOLD) {
				setDuration(el, DURATION$1);
				setDuration(refHeader, DURATION$1);
				setTimeout(() => setDuration(el, 0), DURATION$1);
				setTimeout(() => setDuration(refHeader, 0), DURATION$1);
				setActive(false);
				drawOpacity(el, xSwipe + shift, ySwipe);
				drawOpacity(refHeader, xSwipe + shift, ySwipe);
				drawTransform(el, xSwipe + shift, ySwipe);
				drawTransform(refHeader, xSwipe + shift, ySwipe);
				await delay(DURATION$1);
			} else if (xSwipe < -THRESHOLD) {
				setDuration(el, DURATION$1);
				setDuration(refHeader, DURATION$1);
				setTimeout(() => setDuration(el, 0), DURATION$1);
				setTimeout(() => setDuration(refHeader, 0), DURATION$1);
				setActive(false);
				drawOpacity(el, xSwipe - shift, ySwipe);
				drawOpacity(refHeader, xSwipe - shift, ySwipe);
				drawTransform(el, xSwipe - shift, ySwipe);
				drawTransform(refHeader, xSwipe - shift, ySwipe);
				await delay(DURATION$1);
			}

			if (ySwipe > THRESHOLD) {
				setDuration(el, DURATION$1);
				setDuration(refHeader, DURATION$1);
				setTimeout(() => setDuration(el, 0), DURATION$1);
				setTimeout(() => setDuration(refHeader, 0), DURATION$1);
				setActive(false);
				drawOpacity(el, xSwipe, ySwipe + shift);
				drawOpacity(refHeader, xSwipe, ySwipe + shift);
				drawTransform(el, xSwipe, ySwipe + shift);
				drawTransform(refHeader, xSwipe, ySwipe + shift);
				await delay(DURATION$1);
			} else if (ySwipe < -THRESHOLD) {
				setDuration(el, DURATION$1);
				setDuration(refHeader, DURATION$1);
				setTimeout(() => setDuration(el, 0), DURATION$1);
				setTimeout(() => setDuration(refHeader, 0), DURATION$1);
				setActive(false);
				drawOpacity(el, xSwipe, ySwipe - shift);
				drawOpacity(refHeader, xSwipe, ySwipe - shift);
				drawTransform(el, xSwipe, ySwipe - shift);
				drawTransform(refHeader, xSwipe, ySwipe - shift);
				await delay(DURATION$1);
			}

			if (xSwipe <= THRESHOLD && xSwipe >= -THRESHOLD && ySwipe <= THRESHOLD && ySwipe >= -THRESHOLD) {
				setDuration(el, DURATION$1);
				setDuration(refHeader, DURATION$1);
				setTimeout(() => setDuration(el, 0), DURATION$1);
				setTimeout(() => setDuration(refHeader, 0), DURATION$1);
				drawTransform(el, 0, 0);
				drawTransform(refHeader, 0, 0);
			} else {
				setStartPosition();
			}

			xSwipe = 0;
			ySwipe = 0;
			el && (el.style.opacity = null);
			refHeader && $$invalidate(5, refHeader.style.opacity = null, refHeader);
		});
	}

	function handleVerticalSwipe(yDown, yUp, evt, el) {
		const dir = yUp - yDown;
		if (!isAllowed.up && dir > 0 || !isAllowed.down && dir < 0) return;
		ySwipe = dir * SWIPE_SPEED;
		drawTransform(el, xSwipe, ySwipe);
		drawTransform(refHeader, xSwipe, ySwipe);
		drawOpacity(el, xSwipe, ySwipe);
		drawOpacity(refHeader, xSwipe, ySwipe);
	}

	function handleHorizontalSwipe(xDown, xUp, evt, el) {
		const dir = xUp - xDown;
		if (!isAllowed.left && dir > 0 || !isAllowed.right && dir < 0) return;
		xSwipe = dir * SWIPE_SPEED;
		drawTransform(el, xSwipe, ySwipe);
		drawTransform(refHeader, xSwipe, ySwipe);
		drawOpacity(el, xSwipe, ySwipe);
		drawOpacity(refHeader, xSwipe, ySwipe);
	}

	function setStartPosition() {
		drawTransform(ref, startPosition.x, startPosition.y);
		drawTransform(refHeader, startPosition.x, startPosition.y);
	}

	function appear(node, params) {
		if (!active) return;
		const existingTransform = getComputedStyle(node).transform.replace("none", "");
		const getScale = t => 0.9 + 0.1 * t;
		const getX = t => startPosition.x - startPosition.x * t;

		return {
			duration: DURATION$1,
			css: t => `opacity: ${t}; transform: matrix(${getScale(t)}, 0, 0, ${getScale(t)}, ${getX(t)}, 0)`
		};
	}

	function onCloseModal() {
		setDuration(ref, DURATION$1);
		setDuration(refHeader, DURATION$1);
		setTimeout(() => setDuration(ref, 0), DURATION$1);
		setTimeout(() => setDuration(refHeader, 0), DURATION$1);
		setStartPosition();
		drawOpacity(ref, startPosition.x * 2, startPosition.y);
		drawOpacity(refHeader, startPosition.x * 2, startPosition.y);
		setTimeout(() => setActive(false), DURATION$1);
	}

	const writable_props = [
		"id",
		"ref",
		"size",
		"swipe",
		"title",
		"open",
		"startPosition",
		"blockBody",
		"withHeader"
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Modal> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Modal", $$slots, ['header','default']);

	function button_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			refHeader = $$value;
			$$invalidate(5, refHeader);
		});
	}

	const func = () => $modals[`modal-${id}`];

	function div1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$set = $$props => {
		if ("id" in $$props) $$invalidate(1, id = $$props.id);
		if ("ref" in $$props) $$invalidate(0, ref = $$props.ref);
		if ("size" in $$props) $$invalidate(2, size = $$props.size);
		if ("swipe" in $$props) $$invalidate(14, swipe = $$props.swipe);
		if ("title" in $$props) $$invalidate(3, title = $$props.title);
		if ("open" in $$props) $$invalidate(13, open = $$props.open);
		if ("startPosition" in $$props) $$invalidate(15, startPosition = $$props.startPosition);
		if ("blockBody" in $$props) $$invalidate(16, blockBody = $$props.blockBody);
		if ("withHeader" in $$props) $$invalidate(4, withHeader = $$props.withHeader);
		if ("$$scope" in $$props) $$invalidate(21, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		tick,
		fly,
		Swipe,
		safeGet,
		classnames,
		delay,
		bodyScroll,
		stopPropagationInRanges,
		modals,
		Portal,
		Br,
		Icon,
		dispatch,
		DURATION: DURATION$1,
		THRESHOLD,
		SWIPE_SPEED,
		THRESHOLD_RANGES,
		START_POSITION,
		id,
		ref,
		size,
		swipe,
		title,
		open,
		startPosition,
		blockBody,
		withHeader,
		refHeader,
		isBodyBlocked,
		isAllowed,
		blockScroll,
		onActiveChange,
		setActive,
		xSwipe,
		ySwipe,
		addSwipe,
		handleVerticalSwipe,
		handleHorizontalSwipe,
		setStartPosition,
		drawTransform,
		setDuration,
		drawOpacity,
		appear,
		onCloseModal,
		isSwipe,
		scrollY,
		active,
		$modals,
		classProp
	});

	$$self.$inject_state = $$props => {
		if ("id" in $$props) $$invalidate(1, id = $$props.id);
		if ("ref" in $$props) $$invalidate(0, ref = $$props.ref);
		if ("size" in $$props) $$invalidate(2, size = $$props.size);
		if ("swipe" in $$props) $$invalidate(14, swipe = $$props.swipe);
		if ("title" in $$props) $$invalidate(3, title = $$props.title);
		if ("open" in $$props) $$invalidate(13, open = $$props.open);
		if ("startPosition" in $$props) $$invalidate(15, startPosition = $$props.startPosition);
		if ("blockBody" in $$props) $$invalidate(16, blockBody = $$props.blockBody);
		if ("withHeader" in $$props) $$invalidate(4, withHeader = $$props.withHeader);
		if ("refHeader" in $$props) $$invalidate(5, refHeader = $$props.refHeader);
		if ("isBodyBlocked" in $$props) isBodyBlocked = $$props.isBodyBlocked;
		if ("isAllowed" in $$props) isAllowed = $$props.isAllowed;
		if ("xSwipe" in $$props) xSwipe = $$props.xSwipe;
		if ("ySwipe" in $$props) ySwipe = $$props.ySwipe;
		if ("isSwipe" in $$props) isSwipe = $$props.isSwipe;
		if ("scrollY" in $$props) scrollY = $$props.scrollY;
		if ("active" in $$props) $$invalidate(6, active = $$props.active);
		if ("classProp" in $$props) $$invalidate(8, classProp = $$props.classProp);
	};

	let isSwipe;
	let scrollY;
	let active;
	let classProp;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*swipe*/ 16384) {
			 isSwipe = {
				up: safeGet(() => swipe.includes("up") || swipe.includes("all")),
				down: safeGet(() => swipe.includes("down") || swipe.includes("all")),
				left: safeGet(() => swipe.includes("left") || swipe.includes("all")),
				right: safeGet(() => swipe.includes("right") || swipe.includes("all"))
			};
		}

		if ($$self.$$.dirty[0] & /*ref*/ 1) {
			 scrollY = ref && ref.scrollTop;
		}

		if ($$self.$$.dirty[0] & /*open, $modals, id*/ 8322) {
			 $$invalidate(6, active = safeGet(() => open !== null ? open : $modals[`modal-${id}`].open, null));
		}

		if ($$self.$$.dirty[0] & /*size, active*/ 68) {
			 $$invalidate(8, classProp = classnames("modal", size, { active }));
		}

		if ($$self.$$.dirty[0] & /*active*/ 64) {
			 onActiveChange(active);
		}

		if ($$self.$$.dirty[0] & /*ref*/ 1) {
			 blockScroll(ref);
		}
	};

	return [
		ref,
		id,
		size,
		title,
		withHeader,
		refHeader,
		active,
		$modals,
		classProp,
		setActive,
		addSwipe,
		appear,
		onCloseModal,
		open,
		swipe,
		startPosition,
		blockBody,
		$$slots,
		button_binding,
		func,
		div1_binding,
		$$scope
	];
}

class Modal extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-48jsm1-style")) add_css$5();

		init(
			this,
			options,
			instance$E,
			create_fragment$E,
			safe_not_equal,
			{
				id: 1,
				ref: 0,
				size: 2,
				swipe: 14,
				title: 3,
				open: 13,
				startPosition: 15,
				blockBody: 16,
				withHeader: 4
			},
			[-1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Modal",
			options,
			id: create_fragment$E.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*id*/ ctx[1] === undefined && !("id" in props)) {
			console.warn("<Modal> was created without expected prop 'id'");
		}
	}

	get id() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ref() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ref(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get size() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get swipe() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set swipe(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get open() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set open(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get startPosition() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set startPosition(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get blockBody() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set blockBody(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get withHeader() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set withHeader(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Square.svelte generated by Svelte v3.24.0 */

const file$F = "src/components/Square.svelte";

function add_css$6() {
	var style = element("style");
	style.id = "svelte-i76mlm-style";
	style.textContent = "section.svelte-i76mlm{position:relative;width:100%;overflow:hidden;-webkit-transform:translateZ(0);transform:translateZ(0)}section.svelte-i76mlm:after{content:\"\";display:block;padding-top:100%}div.svelte-i76mlm{position:absolute;top:0;left:0;right:0;bottom:0;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3F1YXJlLnN2ZWx0ZSIsInNvdXJjZXMiOlsiU3F1YXJlLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICAgIGV4cG9ydCBsZXQgc3R5bGUgPSB1bmRlZmluZWRcbjwvc2NyaXB0PiAgXG5cbjxzZWN0aW9uIHtzdHlsZX0gY2xhc3M9e2BzcXVhcmUgJHskJHByb3BzLmNsYXNzIHx8ICcnfWB9PlxuICAgIDxkaXY+XG4gICAgICAgIDxzbG90Pjwvc2xvdD5cbiAgICA8L2Rpdj5cbjwvc2VjdGlvbj5cblxuPHN0eWxlPlxuc2VjdGlvbiB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XG59XG5cbnNlY3Rpb246YWZ0ZXIge1xuICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgcGFkZGluZy10b3A6IDEwMCU7XG59XG5cbmRpdiB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBsZWZ0OiAwO1xuICAgIHJpZ2h0OiAwO1xuICAgIGJvdHRvbTogMDtcbiAgICBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgICBkaXNwbGF5OiAtbXMtZmxleGJveDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIC13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWw7XG4gICAgLXdlYmtpdC1ib3gtZGlyZWN0aW9uOiBub3JtYWw7XG4gICAgICAgIC1tcy1mbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbn08L3N0eWxlPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVdBLE9BQU8sY0FBQyxDQUFDLEFBQ0wsUUFBUSxDQUFFLFFBQVEsQ0FDbEIsS0FBSyxDQUFFLElBQUksQ0FDWCxRQUFRLENBQUUsTUFBTSxDQUNoQixpQkFBaUIsQ0FBRSxXQUFXLENBQUMsQ0FBQyxDQUN4QixTQUFTLENBQUUsV0FBVyxDQUFDLENBQUMsQUFDcEMsQ0FBQyxBQUVELHFCQUFPLE1BQU0sQUFBQyxDQUFDLEFBQ1gsT0FBTyxDQUFFLEVBQUUsQ0FDWCxPQUFPLENBQUUsS0FBSyxDQUNkLFdBQVcsQ0FBRSxJQUFJLEFBQ3JCLENBQUMsQUFFRCxHQUFHLGNBQUMsQ0FBQyxBQUNELFFBQVEsQ0FBRSxRQUFRLENBQ2xCLEdBQUcsQ0FBRSxDQUFDLENBQ04sSUFBSSxDQUFFLENBQUMsQ0FDUCxLQUFLLENBQUUsQ0FBQyxDQUNSLE1BQU0sQ0FBRSxDQUFDLENBQ1QsT0FBTyxDQUFFLFdBQVcsQ0FDcEIsT0FBTyxDQUFFLFdBQVcsQ0FDcEIsT0FBTyxDQUFFLElBQUksQ0FDYixrQkFBa0IsQ0FBRSxRQUFRLENBQzVCLHFCQUFxQixDQUFFLE1BQU0sQ0FDekIsa0JBQWtCLENBQUUsTUFBTSxDQUN0QixjQUFjLENBQUUsTUFBTSxBQUNsQyxDQUFDIn0= */";
	append_dev(document.head, style);
}

function create_fragment$F(ctx) {
	let section;
	let div;
	let section_class_value;
	let current;
	const default_slot_template = /*$$slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

	const block = {
		c: function create() {
			section = element("section");
			div = element("div");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { style: true, class: true });
			var section_nodes = children(section);
			div = claim_element(section_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (default_slot) default_slot.l(div_nodes);
			div_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "svelte-i76mlm");
			add_location(div, file$F, 5, 4, 117);
			attr_dev(section, "style", /*style*/ ctx[0]);
			attr_dev(section, "class", section_class_value = "" + (null_to_empty(`square ${/*$$props*/ ctx[1].class || ""}`) + " svelte-i76mlm"));
			add_location(section, file$F, 4, 0, 55);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, div);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 4) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[2], dirty, null, null);
				}
			}

			if (!current || dirty & /*style*/ 1) {
				attr_dev(section, "style", /*style*/ ctx[0]);
			}

			if (!current || dirty & /*$$props*/ 2 && section_class_value !== (section_class_value = "" + (null_to_empty(`square ${/*$$props*/ ctx[1].class || ""}`) + " svelte-i76mlm"))) {
				attr_dev(section, "class", section_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$F.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$F($$self, $$props, $$invalidate) {
	let { style = undefined } = $$props;
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Square", $$slots, ['default']);

	$$self.$set = $$new_props => {
		$$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("style" in $$new_props) $$invalidate(0, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(2, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({ style });

	$$self.$inject_state = $$new_props => {
		$$invalidate(1, $$props = assign(assign({}, $$props), $$new_props));
		if ("style" in $$props) $$invalidate(0, style = $$new_props.style);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [style, $$props, $$scope, $$slots];
}

class Square extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-i76mlm-style")) add_css$6();
		init(this, options, instance$F, create_fragment$F, safe_not_equal, { style: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Square",
			options,
			id: create_fragment$F.name
		});
	}

	get style() {
		throw new Error("<Square>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<Square>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Picture.svelte generated by Svelte v3.24.0 */
const file$G = "src/components/Picture.svelte";

function add_css$7() {
	var style = element("style");
	style.id = "svelte-e9w1rq-style";
	style.textContent = ".picture.svelte-e9w1rq.svelte-e9w1rq{position:relative;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;-ms-flex-item-align:stretch;align-self:stretch;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:stretch;-ms-flex-align:stretch;align-items:stretch;-webkit-box-pack:stretch;-ms-flex-pack:stretch;justify-content:stretch;background-color:rgba(var(--theme-bg-color-opposite), .04)}.picture.svelte-e9w1rq .pic.svelte-e9w1rq{-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;overflow:hidden;-ms-flex-item-align:stretch;align-self:stretch;-o-object-position:center;object-position:center;-webkit-transition:opacity .5s ease-in;transition:opacity .5s ease-in}.picture.svelte-e9w1rq .pic-2x.svelte-e9w1rq{position:absolute;top:0;left:0;width:100%;height:100%}.picture.cover.svelte-e9w1rq .pic.svelte-e9w1rq{-o-object-fit:cover;object-fit:cover}.picture.contain.svelte-e9w1rq .pic.svelte-e9w1rq{-o-object-fit:contain;object-fit:contain}.picture.isErrorSmall.svelte-e9w1rq .pic-1x.svelte-e9w1rq,.picture.isErrorBig.svelte-e9w1rq .pic-2x.svelte-e9w1rq,.picture.loadingSrcSmall.svelte-e9w1rq .pic-1x.svelte-e9w1rq,.picture.loadingSrcBig.svelte-e9w1rq .pic-2x.svelte-e9w1rq{opacity:0}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGljdHVyZS5zdmVsdGUiLCJzb3VyY2VzIjpbIlBpY3R1cmUuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSAnc3ZlbHRlJ1xuICAgIGltcG9ydCB7IGNsYXNzbmFtZXMgfSBmcm9tICdAdXRpbHMnXG5cbiAgICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpXG5cbiAgICBleHBvcnQgbGV0IHNyY1xuICAgIGV4cG9ydCBsZXQgYWx0XG4gICAgZXhwb3J0IGxldCBzaXplID0gJ2NvdmVyJ1xuICAgIGV4cG9ydCBsZXQgc3JjQmlnID0gdW5kZWZpbmVkXG4gICAgZXhwb3J0IGxldCBpZCA9IHVuZGVmaW5lZFxuICAgIGV4cG9ydCBsZXQgd2lkdGggPSB1bmRlZmluZWRcbiAgICBleHBvcnQgbGV0IGhlaWdodCA9IHVuZGVmaW5lZFxuXG4gICAgbGV0IGxvYWRpbmdTcmNTbWFsbCA9IHRydWVcbiAgICBsZXQgbG9hZGluZ1NyY0JpZyA9IHRydWVcbiAgICBsZXQgaXNFcnJvclNtYWxsID0gZmFsc2VcbiAgICBsZXQgaXNFcnJvckJpZyA9IGZhbHNlXG5cbiAgICAkOiB3cmFwQ2xhc3NQcm9wID0gY2xhc3NuYW1lcygncGljdHVyZScsICQkcHJvcHMuY2xhc3MsIHNpemUsIHsgbG9hZGluZ1NyY1NtYWxsLCBsb2FkaW5nU3JjQmlnLCBpc0Vycm9yU21hbGwsIGlzRXJyb3JCaWcgfSlcblxuICAgIGZ1bmN0aW9uIGltZ1NlcnZpY2Uobm9kZSwgcG9zdEZpeCkge1xuICAgICAgICBpZiAobm9kZS5jb21wbGV0ZSkge1xuICAgICAgICAgICAgb25Mb2FkKG5vZGUsIHBvc3RGaXgpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub2RlLm9ubG9hZCA9IG9uTG9hZC5iaW5kKG51bGwsIG5vZGUsIHBvc3RGaXgpXG4gICAgICAgICAgICBub2RlLm9uZXJyb3IgPSBvbkVycm9yLmJpbmQobnVsbCwgbm9kZSwgcG9zdEZpeClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uTG9hZChub2RlLCBwb3N0Rml4KSB7XG4gICAgICAgIGNoYW5nZUxvYWRpbmcocG9zdEZpeCwgZmFsc2UpXG4gICAgICAgIGNoYW5nZUVycm9yKHBvc3RGaXgsIGZhbHNlKVxuICAgICAgICBkaXNwYXRjaChgbG9hZCR7cG9zdEZpeH1gLCBub2RlKVxuXG4gICAgICAgIGlmICghc3JjQmlnIHx8ICFsb2FkaW5nU3JjQmlnKSB7XG4gICAgICAgICAgICBkaXNwYXRjaCgnbG9hZCcsIG5vZGUpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkVycm9yKG5vZGUsIHBvc3RGaXgpIHtcbiAgICAgICAgY2hhbmdlTG9hZGluZyhwb3N0Rml4LCBmYWxzZSlcbiAgICAgICAgY2hhbmdlRXJyb3IocG9zdEZpeCwgdHJ1ZSlcbiAgICAgICAgZGlzcGF0Y2goYGVycm9yJHtwb3N0Rml4fWAsIG5vZGUpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hhbmdlTG9hZGluZyh0eXBlLCBpc0xvYWRpbmcpIHtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdTbWFsbCc6XG4gICAgICAgICAgICAgICAgbG9hZGluZ1NyY1NtYWxsID0gaXNMb2FkaW5nXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgJ0JpZyc6XG4gICAgICAgICAgICAgICAgbG9hZGluZ1NyY0JpZyA9IGlzTG9hZGluZ1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGFuZ2VFcnJvcih0eXBlLCBpc0Vycm9yKSB7XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnU21hbGwnOlxuICAgICAgICAgICAgICAgIGlzRXJyb3JTbWFsbCA9IGlzRXJyb3JcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSAnQmlnJzpcbiAgICAgICAgICAgICAgICBpc0Vycm9yQmlnID0gaXNFcnJvclxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICB9XG5cbjwvc2NyaXB0PlxuXG48ZmlndXJlIGNsYXNzPXt3cmFwQ2xhc3NQcm9wfT5cbiAgICB7I2lmIHNyY31cbiAgICAgICAgPGltZ1xuICAgICAgICAgICAgdXNlOmltZ1NlcnZpY2U9eydTbWFsbCd9XG4gICAgICAgICAgICB7aWR9XG4gICAgICAgICAgICB7YWx0fVxuICAgICAgICAgICAge3NyY31cbiAgICAgICAgICAgIHt3aWR0aH1cbiAgICAgICAgICAgIHtoZWlnaHR9XG4gICAgICAgICAgICBjbGFzcz1cInBpYyBwaWMtMXhcIlxuICAgICAgICAvPlxuICAgIHsvaWZ9XG5cbiAgICB7I2lmIHNyY0JpZyAmJiAhbG9hZGluZ1NyY1NtYWxsfVxuICAgICAgICA8aW1nXG4gICAgICAgICAgICB1c2U6aW1nU2VydmljZT17J0JpZyd9XG4gICAgICAgICAgICB7YWx0fVxuICAgICAgICAgICAge3dpZHRofVxuICAgICAgICAgICAge2hlaWdodH1cbiAgICAgICAgICAgIHNyYz17c3JjQmlnfVxuICAgICAgICAgICAgY2xhc3M9XCJwaWMgcGljLTJ4XCJcbiAgICAgICAgLz5cbiAgICB7L2lmfVxuXG4gICAgPGZpZ2NhcHRpb24+XG4gICAgICAgIDxzbG90Pjwvc2xvdD5cbiAgICA8L2ZpZ2NhcHRpb24+XG48L2ZpZ3VyZT5cblxuPHN0eWxlPlxuLnBpY3R1cmUge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAtd2Via2l0LWJveC1mbGV4OiAxO1xuICAgICAgICAtbXMtZmxleC1wb3NpdGl2ZTogMTtcbiAgICAgICAgICAgIGZsZXgtZ3JvdzogMTtcbiAgICAtbXMtZmxleC1pdGVtLWFsaWduOiBzdHJldGNoO1xuICAgICAgICBhbGlnbi1zZWxmOiBzdHJldGNoO1xuICAgIGRpc3BsYXk6IC13ZWJraXQtaW5saW5lLWJveDtcbiAgICBkaXNwbGF5OiAtbXMtaW5saW5lLWZsZXhib3g7XG4gICAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gICAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDtcbiAgICAtd2Via2l0LWJveC1kaXJlY3Rpb246IG5vcm1hbDtcbiAgICAgICAgLW1zLWZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIC13ZWJraXQtYm94LWFsaWduOiBzdHJldGNoO1xuICAgICAgICAtbXMtZmxleC1hbGlnbjogc3RyZXRjaDtcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBzdHJldGNoO1xuICAgIC13ZWJraXQtYm94LXBhY2s6IHN0cmV0Y2g7XG4gICAgICAgIC1tcy1mbGV4LXBhY2s6IHN0cmV0Y2g7XG4gICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHN0cmV0Y2g7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSh2YXIoLS10aGVtZS1iZy1jb2xvci1vcHBvc2l0ZSksIC4wNCk7XG59XG5cbi5waWN0dXJlIC5waWMge1xuICAgIC13ZWJraXQtYm94LWZsZXg6IDE7XG4gICAgICAgIC1tcy1mbGV4LXBvc2l0aXZlOiAxO1xuICAgICAgICAgICAgZmxleC1ncm93OiAxO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgLW1zLWZsZXgtaXRlbS1hbGlnbjogc3RyZXRjaDtcbiAgICAgICAgYWxpZ24tc2VsZjogc3RyZXRjaDtcbiAgICAtby1vYmplY3QtcG9zaXRpb246IGNlbnRlcjtcbiAgICAgICBvYmplY3QtcG9zaXRpb246IGNlbnRlcjtcbiAgICAtd2Via2l0LXRyYW5zaXRpb246IG9wYWNpdHkgLjVzIGVhc2UtaW47XG4gICAgdHJhbnNpdGlvbjogb3BhY2l0eSAuNXMgZWFzZS1pbjtcbn1cblxuLnBpY3R1cmUgLnBpYy0yeCB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBsZWZ0OiAwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbn1cblxuLnBpY3R1cmUuY292ZXIgLnBpYyB7XG4gICAgLW8tb2JqZWN0LWZpdDogY292ZXI7XG4gICAgICAgb2JqZWN0LWZpdDogY292ZXI7XG59XG5cbi5waWN0dXJlLmNvbnRhaW4gLnBpYyB7XG4gICAgLW8tb2JqZWN0LWZpdDogY29udGFpbjtcbiAgICAgICBvYmplY3QtZml0OiBjb250YWluO1xufVxuXG4ucGljdHVyZS5pc0Vycm9yU21hbGwgLnBpYy0xeCxcbi5waWN0dXJlLmlzRXJyb3JCaWcgLnBpYy0yeCxcbi5waWN0dXJlLmxvYWRpbmdTcmNTbWFsbCAucGljLTF4LFxuLnBpY3R1cmUubG9hZGluZ1NyY0JpZyAucGljLTJ4IHtcbiAgICBvcGFjaXR5OiAwO1xufTwvc3R5bGU+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBb0dBLFFBQVEsNEJBQUMsQ0FBQyxBQUNOLFFBQVEsQ0FBRSxRQUFRLENBQ2xCLGdCQUFnQixDQUFFLENBQUMsQ0FDZixpQkFBaUIsQ0FBRSxDQUFDLENBQ2hCLFNBQVMsQ0FBRSxDQUFDLENBQ3BCLG1CQUFtQixDQUFFLE9BQU8sQ0FDeEIsVUFBVSxDQUFFLE9BQU8sQ0FDdkIsT0FBTyxDQUFFLGtCQUFrQixDQUMzQixPQUFPLENBQUUsa0JBQWtCLENBQzNCLE9BQU8sQ0FBRSxXQUFXLENBQ3BCLGtCQUFrQixDQUFFLFFBQVEsQ0FDNUIscUJBQXFCLENBQUUsTUFBTSxDQUN6QixrQkFBa0IsQ0FBRSxNQUFNLENBQ3RCLGNBQWMsQ0FBRSxNQUFNLENBQzlCLGlCQUFpQixDQUFFLE9BQU8sQ0FDdEIsY0FBYyxDQUFFLE9BQU8sQ0FDbkIsV0FBVyxDQUFFLE9BQU8sQ0FDNUIsZ0JBQWdCLENBQUUsT0FBTyxDQUNyQixhQUFhLENBQUUsT0FBTyxDQUNsQixlQUFlLENBQUUsT0FBTyxDQUNoQyxnQkFBZ0IsQ0FBRSxLQUFLLElBQUkseUJBQXlCLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxBQUMvRCxDQUFDLEFBRUQsc0JBQVEsQ0FBQyxJQUFJLGNBQUMsQ0FBQyxBQUNYLGdCQUFnQixDQUFFLENBQUMsQ0FDZixpQkFBaUIsQ0FBRSxDQUFDLENBQ2hCLFNBQVMsQ0FBRSxDQUFDLENBQ3BCLFFBQVEsQ0FBRSxNQUFNLENBQ2hCLG1CQUFtQixDQUFFLE9BQU8sQ0FDeEIsVUFBVSxDQUFFLE9BQU8sQ0FDdkIsa0JBQWtCLENBQUUsTUFBTSxDQUN2QixlQUFlLENBQUUsTUFBTSxDQUMxQixrQkFBa0IsQ0FBRSxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FDdkMsVUFBVSxDQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxBQUNuQyxDQUFDLEFBRUQsc0JBQVEsQ0FBQyxPQUFPLGNBQUMsQ0FBQyxBQUNkLFFBQVEsQ0FBRSxRQUFRLENBQ2xCLEdBQUcsQ0FBRSxDQUFDLENBQ04sSUFBSSxDQUFFLENBQUMsQ0FDUCxLQUFLLENBQUUsSUFBSSxDQUNYLE1BQU0sQ0FBRSxJQUFJLEFBQ2hCLENBQUMsQUFFRCxRQUFRLG9CQUFNLENBQUMsSUFBSSxjQUFDLENBQUMsQUFDakIsYUFBYSxDQUFFLEtBQUssQ0FDakIsVUFBVSxDQUFFLEtBQUssQUFDeEIsQ0FBQyxBQUVELFFBQVEsc0JBQVEsQ0FBQyxJQUFJLGNBQUMsQ0FBQyxBQUNuQixhQUFhLENBQUUsT0FBTyxDQUNuQixVQUFVLENBQUUsT0FBTyxBQUMxQixDQUFDLEFBRUQsUUFBUSwyQkFBYSxDQUFDLHFCQUFPLENBQzdCLFFBQVEseUJBQVcsQ0FBQyxxQkFBTyxDQUMzQixRQUFRLDhCQUFnQixDQUFDLHFCQUFPLENBQ2hDLFFBQVEsNEJBQWMsQ0FBQyxPQUFPLGNBQUMsQ0FBQyxBQUM1QixPQUFPLENBQUUsQ0FBQyxBQUNkLENBQUMifQ== */";
	append_dev(document.head, style);
}

// (72:4) {#if src}
function create_if_block_1$1(ctx) {
	let img;
	let img_src_value;
	let imgService_action;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", {
				id: true,
				alt: true,
				src: true,
				width: true,
				height: true,
				class: true
			});

			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "id", /*id*/ ctx[3]);
			attr_dev(img, "alt", /*alt*/ ctx[1]);
			if (img.src !== (img_src_value = /*src*/ ctx[0])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "width", /*width*/ ctx[4]);
			attr_dev(img, "height", /*height*/ ctx[5]);
			attr_dev(img, "class", "pic pic-1x svelte-e9w1rq");
			add_location(img, file$G, 72, 8, 1841);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);

			if (!mounted) {
				dispose = action_destroyer(imgService_action = /*imgService*/ ctx[8].call(null, img, "Small"));
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*id*/ 8) {
				attr_dev(img, "id", /*id*/ ctx[3]);
			}

			if (dirty & /*alt*/ 2) {
				attr_dev(img, "alt", /*alt*/ ctx[1]);
			}

			if (dirty & /*src*/ 1 && img.src !== (img_src_value = /*src*/ ctx[0])) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*width*/ 16) {
				attr_dev(img, "width", /*width*/ ctx[4]);
			}

			if (dirty & /*height*/ 32) {
				attr_dev(img, "height", /*height*/ ctx[5]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(72:4) {#if src}",
		ctx
	});

	return block;
}

// (84:4) {#if srcBig && !loadingSrcSmall}
function create_if_block$3(ctx) {
	let img;
	let img_src_value;
	let imgService_action;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", {
				alt: true,
				width: true,
				height: true,
				src: true,
				class: true
			});

			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "alt", /*alt*/ ctx[1]);
			attr_dev(img, "width", /*width*/ ctx[4]);
			attr_dev(img, "height", /*height*/ ctx[5]);
			if (img.src !== (img_src_value = /*srcBig*/ ctx[2])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "class", "pic pic-2x svelte-e9w1rq");
			add_location(img, file$G, 84, 8, 2075);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);

			if (!mounted) {
				dispose = action_destroyer(imgService_action = /*imgService*/ ctx[8].call(null, img, "Big"));
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*alt*/ 2) {
				attr_dev(img, "alt", /*alt*/ ctx[1]);
			}

			if (dirty & /*width*/ 16) {
				attr_dev(img, "width", /*width*/ ctx[4]);
			}

			if (dirty & /*height*/ 32) {
				attr_dev(img, "height", /*height*/ ctx[5]);
			}

			if (dirty & /*srcBig*/ 4 && img.src !== (img_src_value = /*srcBig*/ ctx[2])) {
				attr_dev(img, "src", img_src_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$3.name,
		type: "if",
		source: "(84:4) {#if srcBig && !loadingSrcSmall}",
		ctx
	});

	return block;
}

function create_fragment$G(ctx) {
	let figure;
	let t0;
	let t1;
	let figcaption;
	let figure_class_value;
	let current;
	let if_block0 = /*src*/ ctx[0] && create_if_block_1$1(ctx);
	let if_block1 = /*srcBig*/ ctx[2] && !/*loadingSrcSmall*/ ctx[6] && create_if_block$3(ctx);
	const default_slot_template = /*$$slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

	const block = {
		c: function create() {
			figure = element("figure");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			figcaption = element("figcaption");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			figure = claim_element(nodes, "FIGURE", { class: true });
			var figure_nodes = children(figure);
			if (if_block0) if_block0.l(figure_nodes);
			t0 = claim_space(figure_nodes);
			if (if_block1) if_block1.l(figure_nodes);
			t1 = claim_space(figure_nodes);
			figcaption = claim_element(figure_nodes, "FIGCAPTION", {});
			var figcaption_nodes = children(figcaption);
			if (default_slot) default_slot.l(figcaption_nodes);
			figcaption_nodes.forEach(detach_dev);
			figure_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(figcaption, file$G, 94, 4, 2256);
			attr_dev(figure, "class", figure_class_value = "" + (null_to_empty(/*wrapClassProp*/ ctx[7]) + " svelte-e9w1rq"));
			add_location(figure, file$G, 70, 0, 1788);
		},
		m: function mount(target, anchor) {
			insert_dev(target, figure, anchor);
			if (if_block0) if_block0.m(figure, null);
			append_dev(figure, t0);
			if (if_block1) if_block1.m(figure, null);
			append_dev(figure, t1);
			append_dev(figure, figcaption);

			if (default_slot) {
				default_slot.m(figcaption, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*src*/ ctx[0]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1$1(ctx);
					if_block0.c();
					if_block0.m(figure, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*srcBig*/ ctx[2] && !/*loadingSrcSmall*/ ctx[6]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$3(ctx);
					if_block1.c();
					if_block1.m(figure, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			}

			if (!current || dirty & /*wrapClassProp*/ 128 && figure_class_value !== (figure_class_value = "" + (null_to_empty(/*wrapClassProp*/ ctx[7]) + " svelte-e9w1rq"))) {
				attr_dev(figure, "class", figure_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(figure);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$G.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$G($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { src } = $$props;
	let { alt } = $$props;
	let { size = "cover" } = $$props;
	let { srcBig = undefined } = $$props;
	let { id = undefined } = $$props;
	let { width = undefined } = $$props;
	let { height = undefined } = $$props;
	let loadingSrcSmall = true;
	let loadingSrcBig = true;
	let isErrorSmall = false;
	let isErrorBig = false;

	function imgService(node, postFix) {
		if (node.complete) {
			onLoad(node, postFix);
		} else {
			node.onload = onLoad.bind(null, node, postFix);
			node.onerror = onError.bind(null, node, postFix);
		}
	}

	function onLoad(node, postFix) {
		changeLoading(postFix, false);
		changeError(postFix, false);
		dispatch(`load${postFix}`, node);

		if (!srcBig || !loadingSrcBig) {
			dispatch("load", node);
		}
	}

	function onError(node, postFix) {
		changeLoading(postFix, false);
		changeError(postFix, true);
		dispatch(`error${postFix}`, node);
	}

	function changeLoading(type, isLoading) {
		switch (type) {
			case "Small":
				$$invalidate(6, loadingSrcSmall = isLoading);
				break;
			case "Big":
				$$invalidate(12, loadingSrcBig = isLoading);
				break;
		}
	}

	function changeError(type, isError) {
		switch (type) {
			case "Small":
				$$invalidate(13, isErrorSmall = isError);
				break;
			case "Big":
				$$invalidate(14, isErrorBig = isError);
				break;
		}
	}

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Picture", $$slots, ['default']);

	$$self.$set = $$new_props => {
		$$invalidate(20, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("src" in $$new_props) $$invalidate(0, src = $$new_props.src);
		if ("alt" in $$new_props) $$invalidate(1, alt = $$new_props.alt);
		if ("size" in $$new_props) $$invalidate(9, size = $$new_props.size);
		if ("srcBig" in $$new_props) $$invalidate(2, srcBig = $$new_props.srcBig);
		if ("id" in $$new_props) $$invalidate(3, id = $$new_props.id);
		if ("width" in $$new_props) $$invalidate(4, width = $$new_props.width);
		if ("height" in $$new_props) $$invalidate(5, height = $$new_props.height);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		classnames,
		dispatch,
		src,
		alt,
		size,
		srcBig,
		id,
		width,
		height,
		loadingSrcSmall,
		loadingSrcBig,
		isErrorSmall,
		isErrorBig,
		imgService,
		onLoad,
		onError,
		changeLoading,
		changeError,
		wrapClassProp
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(20, $$props = assign(assign({}, $$props), $$new_props));
		if ("src" in $$props) $$invalidate(0, src = $$new_props.src);
		if ("alt" in $$props) $$invalidate(1, alt = $$new_props.alt);
		if ("size" in $$props) $$invalidate(9, size = $$new_props.size);
		if ("srcBig" in $$props) $$invalidate(2, srcBig = $$new_props.srcBig);
		if ("id" in $$props) $$invalidate(3, id = $$new_props.id);
		if ("width" in $$props) $$invalidate(4, width = $$new_props.width);
		if ("height" in $$props) $$invalidate(5, height = $$new_props.height);
		if ("loadingSrcSmall" in $$props) $$invalidate(6, loadingSrcSmall = $$new_props.loadingSrcSmall);
		if ("loadingSrcBig" in $$props) $$invalidate(12, loadingSrcBig = $$new_props.loadingSrcBig);
		if ("isErrorSmall" in $$props) $$invalidate(13, isErrorSmall = $$new_props.isErrorSmall);
		if ("isErrorBig" in $$props) $$invalidate(14, isErrorBig = $$new_props.isErrorBig);
		if ("wrapClassProp" in $$props) $$invalidate(7, wrapClassProp = $$new_props.wrapClassProp);
	};

	let wrapClassProp;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		 $$invalidate(7, wrapClassProp = classnames("picture", $$props.class, size, {
			loadingSrcSmall,
			loadingSrcBig,
			isErrorSmall,
			isErrorBig
		}));
	};

	$$props = exclude_internal_props($$props);

	return [
		src,
		alt,
		srcBig,
		id,
		width,
		height,
		loadingSrcSmall,
		wrapClassProp,
		imgService,
		size,
		$$scope,
		$$slots
	];
}

class Picture extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-e9w1rq-style")) add_css$7();

		init(this, options, instance$G, create_fragment$G, safe_not_equal, {
			src: 0,
			alt: 1,
			size: 9,
			srcBig: 2,
			id: 3,
			width: 4,
			height: 5
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Picture",
			options,
			id: create_fragment$G.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*src*/ ctx[0] === undefined && !("src" in props)) {
			console.warn("<Picture> was created without expected prop 'src'");
		}

		if (/*alt*/ ctx[1] === undefined && !("alt" in props)) {
			console.warn("<Picture> was created without expected prop 'alt'");
		}
	}

	get src() {
		throw new Error("<Picture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set src(value) {
		throw new Error("<Picture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get alt() {
		throw new Error("<Picture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set alt(value) {
		throw new Error("<Picture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get size() {
		throw new Error("<Picture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Picture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get srcBig() {
		throw new Error("<Picture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set srcBig(value) {
		throw new Error("<Picture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Picture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Picture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get width() {
		throw new Error("<Picture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<Picture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<Picture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<Picture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Avatar.svelte generated by Svelte v3.24.0 */
const file$H = "src/components/Avatar.svelte";

function add_css$8() {
	var style = element("style");
	style.id = "svelte-z7tvoj-style";
	style.textContent = ".ava.svelte-z7tvoj{position:relative;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;display:-webkit-box;display:-ms-flexbox;display:flex;border-radius:50%;overflow:hidden;-webkit-transform:translateZ(0);transform:translateZ(0)}.ava.small.svelte-z7tvoj{-webkit-box-flex:0;-ms-flex:none;flex:none;width:30px;height:30px}.ava.medium.svelte-z7tvoj{-webkit-box-flex:0;-ms-flex:none;flex:none;width:60px;height:60px}.ava.big.svelte-z7tvoj{-webkit-box-flex:0;-ms-flex:none;flex:none;width:130px;height:130px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXZhdGFyLnN2ZWx0ZSIsInNvdXJjZXMiOlsiQXZhdGFyLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICAgIGltcG9ydCB7IGNsYXNzbmFtZXMgfSBmcm9tICdAdXRpbHMnXG4gICAgaW1wb3J0IFBpY3R1cmUgZnJvbSAnLi9QaWN0dXJlLnN2ZWx0ZSdcblxuICAgIGV4cG9ydCBsZXQgc3JjXG4gICAgZXhwb3J0IGxldCBhbHRcbiAgICBleHBvcnQgbGV0IHNpemUgPSBudWxsIC8vIHNtYWxsfG1lZGl1bXxiaWdcbiAgICBleHBvcnQgbGV0IHNyY0JpZyA9IHVuZGVmaW5lZFxuXG4gICAgJDogY2xhc3NQcm9wID0gY2xhc3NuYW1lcygnYXZhJywgc2l6ZSwgJCRwcm9wcy5jbGFzcylcbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPXtjbGFzc1Byb3B9PlxuICAgIDxQaWN0dXJlIHtzcmN9IHtzcmNCaWd9IHthbHR9Lz5cbjwvZGl2PlxuXG48c3R5bGU+XG4uYXZhIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgLXdlYmtpdC1ib3gtZmxleDogMTtcbiAgICAgICAgLW1zLWZsZXgtcG9zaXRpdmU6IDE7XG4gICAgICAgICAgICBmbGV4LWdyb3c6IDE7XG4gICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gICAgZGlzcGxheTogLW1zLWZsZXhib3g7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWigwKTtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWigwKTtcbn1cblxuLmF2YS5zbWFsbCB7XG4gICAgLXdlYmtpdC1ib3gtZmxleDogMDtcbiAgICAgICAgLW1zLWZsZXg6IG5vbmU7XG4gICAgICAgICAgICBmbGV4OiBub25lO1xuICAgIHdpZHRoOiAzMHB4O1xuICAgIGhlaWdodDogMzBweDtcbn1cbi5hdmEubWVkaXVtIHtcbiAgICAtd2Via2l0LWJveC1mbGV4OiAwO1xuICAgICAgICAtbXMtZmxleDogbm9uZTtcbiAgICAgICAgICAgIGZsZXg6IG5vbmU7XG4gICAgd2lkdGg6IDYwcHg7XG4gICAgaGVpZ2h0OiA2MHB4O1xufVxuLmF2YS5iaWcge1xuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XG4gICAgICAgIC1tcy1mbGV4OiBub25lO1xuICAgICAgICAgICAgZmxleDogbm9uZTtcbiAgICB3aWR0aDogMTMwcHg7XG4gICAgaGVpZ2h0OiAxMzBweDtcbn08L3N0eWxlPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlCQSxJQUFJLGNBQUMsQ0FBQyxBQUNGLFFBQVEsQ0FBRSxRQUFRLENBQ2xCLGdCQUFnQixDQUFFLENBQUMsQ0FDZixpQkFBaUIsQ0FBRSxDQUFDLENBQ2hCLFNBQVMsQ0FBRSxDQUFDLENBQ3BCLE9BQU8sQ0FBRSxXQUFXLENBQ3BCLE9BQU8sQ0FBRSxXQUFXLENBQ3BCLE9BQU8sQ0FBRSxJQUFJLENBQ2IsYUFBYSxDQUFFLEdBQUcsQ0FDbEIsUUFBUSxDQUFFLE1BQU0sQ0FDaEIsaUJBQWlCLENBQUUsV0FBVyxDQUFDLENBQUMsQ0FDeEIsU0FBUyxDQUFFLFdBQVcsQ0FBQyxDQUFDLEFBQ3BDLENBQUMsQUFFRCxJQUFJLE1BQU0sY0FBQyxDQUFDLEFBQ1IsZ0JBQWdCLENBQUUsQ0FBQyxDQUNmLFFBQVEsQ0FBRSxJQUFJLENBQ1YsSUFBSSxDQUFFLElBQUksQ0FDbEIsS0FBSyxDQUFFLElBQUksQ0FDWCxNQUFNLENBQUUsSUFBSSxBQUNoQixDQUFDLEFBQ0QsSUFBSSxPQUFPLGNBQUMsQ0FBQyxBQUNULGdCQUFnQixDQUFFLENBQUMsQ0FDZixRQUFRLENBQUUsSUFBSSxDQUNWLElBQUksQ0FBRSxJQUFJLENBQ2xCLEtBQUssQ0FBRSxJQUFJLENBQ1gsTUFBTSxDQUFFLElBQUksQUFDaEIsQ0FBQyxBQUNELElBQUksSUFBSSxjQUFDLENBQUMsQUFDTixnQkFBZ0IsQ0FBRSxDQUFDLENBQ2YsUUFBUSxDQUFFLElBQUksQ0FDVixJQUFJLENBQUUsSUFBSSxDQUNsQixLQUFLLENBQUUsS0FBSyxDQUNaLE1BQU0sQ0FBRSxLQUFLLEFBQ2pCLENBQUMifQ== */";
	append_dev(document.head, style);
}

function create_fragment$H(ctx) {
	let div;
	let picture;
	let div_class_value;
	let current;

	picture = new Picture({
			props: {
				src: /*src*/ ctx[0],
				srcBig: /*srcBig*/ ctx[2],
				alt: /*alt*/ ctx[1]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(picture.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(picture.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", div_class_value = "" + (null_to_empty(/*classProp*/ ctx[3]) + " svelte-z7tvoj"));
			add_location(div, file$H, 12, 0, 282);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(picture, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const picture_changes = {};
			if (dirty & /*src*/ 1) picture_changes.src = /*src*/ ctx[0];
			if (dirty & /*srcBig*/ 4) picture_changes.srcBig = /*srcBig*/ ctx[2];
			if (dirty & /*alt*/ 2) picture_changes.alt = /*alt*/ ctx[1];
			picture.$set(picture_changes);

			if (!current || dirty & /*classProp*/ 8 && div_class_value !== (div_class_value = "" + (null_to_empty(/*classProp*/ ctx[3]) + " svelte-z7tvoj"))) {
				attr_dev(div, "class", div_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(picture.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(picture.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(picture);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$H.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$H($$self, $$props, $$invalidate) {
	let { src } = $$props;
	let { alt } = $$props;
	let { size = null } = $$props; // small|medium|big
	let { srcBig = undefined } = $$props;
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Avatar", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("src" in $$new_props) $$invalidate(0, src = $$new_props.src);
		if ("alt" in $$new_props) $$invalidate(1, alt = $$new_props.alt);
		if ("size" in $$new_props) $$invalidate(4, size = $$new_props.size);
		if ("srcBig" in $$new_props) $$invalidate(2, srcBig = $$new_props.srcBig);
	};

	$$self.$capture_state = () => ({
		classnames,
		Picture,
		src,
		alt,
		size,
		srcBig,
		classProp
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), $$new_props));
		if ("src" in $$props) $$invalidate(0, src = $$new_props.src);
		if ("alt" in $$props) $$invalidate(1, alt = $$new_props.alt);
		if ("size" in $$props) $$invalidate(4, size = $$new_props.size);
		if ("srcBig" in $$props) $$invalidate(2, srcBig = $$new_props.srcBig);
		if ("classProp" in $$props) $$invalidate(3, classProp = $$new_props.classProp);
	};

	let classProp;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		 $$invalidate(3, classProp = classnames("ava", size, $$props.class));
	};

	$$props = exclude_internal_props($$props);
	return [src, alt, srcBig, classProp, size];
}

class Avatar extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-z7tvoj-style")) add_css$8();
		init(this, options, instance$H, create_fragment$H, safe_not_equal, { src: 0, alt: 1, size: 4, srcBig: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Avatar",
			options,
			id: create_fragment$H.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*src*/ ctx[0] === undefined && !("src" in props)) {
			console.warn("<Avatar> was created without expected prop 'src'");
		}

		if (/*alt*/ ctx[1] === undefined && !("alt" in props)) {
			console.warn("<Avatar> was created without expected prop 'alt'");
		}
	}

	get src() {
		throw new Error("<Avatar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set src(value) {
		throw new Error("<Avatar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get alt() {
		throw new Error("<Avatar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set alt(value) {
		throw new Error("<Avatar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get size() {
		throw new Error("<Avatar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Avatar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get srcBig() {
		throw new Error("<Avatar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set srcBig(value) {
		throw new Error("<Avatar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Button.svelte generated by Svelte v3.24.0 */

const { document: document_1$1 } = globals;
const file$I = "src/components/Button.svelte";

function add_css$9() {
	var style = element("style");
	style.id = "svelte-1hd9njw-style";
	style.textContent = ".btn.svelte-1hd9njw:not(.auto){width:100%;padding:5px 15px}.btn{-webkit-box-flex:0;-ms-flex:none;flex:none;cursor:pointer;max-width:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;font-weight:bold;text-align:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;color:rgba(var(--theme-font-color));border-radius:var(--border-radius-medium)}.btn.small{padding:5px;min-width:calc(var(--min-interactive-size) / 1.3);min-height:calc(var(--min-interactive-size) / 1.3)}.btn.medium{padding:5px 10px;min-width:var(--min-interactive-size);min-height:var(--min-interactive-size)}.btn.big{padding:5px 15px;min-width:calc(var(--min-interactive-size) * 1.3);min-height:calc(var(--min-interactive-size) * 1.3)}.btn:focus{background-color:rgba(var(--color-black), 0.1)}.btn:hover{background-color:rgba(var(--color-black), 0.1)}.btn:active{background-color:rgba(var(--color-black), 0.1)}.btn.theme{color:rgba(var(--theme-font-color));background-color:rgba(var(--theme-color-secondary))}.btn.theme:focus{background-color:rgba(var(--theme-color-secondary), .85)}.btn.theme:hover{-webkit-box-shadow:var(--shadow-primary);box-shadow:var(--shadow-primary)}.btn.theme:active{-webkit-box-shadow:var(--shadow-primary);box-shadow:var(--shadow-primary)}.btn.theme-border{color:rgba(var(--theme-font-color));border:2px solid rgba(var(--theme-color-primary-opposite))}.btn.theme-border:focus{background-color:rgba(var(--theme-color-secondary), .85)}.btn.them-border:hover{-webkit-box-shadow:var(--shadow-primary);box-shadow:var(--shadow-primary)}.btn.theme-border:active{-webkit-box-shadow:var(--shadow-primary);box-shadow:var(--shadow-primary)}.btn.white{color:rgba(var(--color-font-dark));background-color:rgba(var(--color-white))}.btn.white:focus{background-color:rgba(var(--color-white), .85)}.btn.white:hover{-webkit-box-shadow:var(--shadow-primary);box-shadow:var(--shadow-primary)}.btn.white:active{-webkit-box-shadow:var(--shadow-primary);box-shadow:var(--shadow-primary)}.btn.dark{color:rgba(var(--color-font-light));background-color:rgba(var(--color-dark))}.btn.dark:focus{background-color:rgba(var(--color-dark), .85)}.btn.dark:hover{-webkit-box-shadow:var(--shadow-primary);box-shadow:var(--shadow-primary)}.btn.dark:active{-webkit-box-shadow:var(--shadow-primary);box-shadow:var(--shadow-primary)}.btn.dark-border{color:rgba(var(--theme-font-color));border:2px solid rgba(var(--theme-font-color))}.btn.dark-border:focus{background-color:rgba(var(--color-dark), .85)}.btn.dark-border:hover{-webkit-box-shadow:var(--shadow-primary);box-shadow:var(--shadow-primary)}.btn.dark-border:active{-webkit-box-shadow:var(--shadow-primary);box-shadow:var(--shadow-primary)}.btn.success{color:rgba(var(--color-font-light));background-color:rgba(var(--color-success))}.btn.success:focus{background-color:rgba(var(--color-success), .85)}.btn.success:hover{-webkit-box-shadow:var(--shadow-primary);box-shadow:var(--shadow-primary)}.btn.success:active{-webkit-box-shadow:var(--shadow-primary);box-shadow:var(--shadow-primary)}.btn.warning{color:rgba(var(--color-font-light));background-color:rgba(var(--color-warning))}.btn.warning:focus{background-color:rgba(var(--color-warning), .85)}.btn.warning:hover{-webkit-box-shadow:var(--shadow-primary);box-shadow:var(--shadow-primary)}.btn.warning:active{-webkit-box-shadow:var(--shadow-primary);box-shadow:var(--shadow-primary)}.btn.info{color:rgba(var(--color-font-light));border:2px solid rgba(var(--color-info));background-color:rgba(var(--color-info))}.btn.info:focus{background-color:rgba(var(--color-info), .85)}.btn.info:hover{-webkit-box-shadow:var(--shadow-primary);box-shadow:var(--shadow-primary)}.btn.info:active{-webkit-box-shadow:var(--shadow-primary);box-shadow:var(--shadow-primary)}.btn.info-border{color:rgba(var(--color-info));border:2px solid rgba(var(--color-info))}.btn.info-border:focus{background-color:rgba(var(--color-dark), .85)}.btn.info-border:hover{-webkit-box-shadow:var(--shadow-primary);box-shadow:var(--shadow-primary)}.btn.info-border:active{-webkit-box-shadow:var(--shadow-primary);box-shadow:var(--shadow-primary)}.btn.danger{color:rgba(var(--color-font-light));background-color:rgba(var(--color-danger))}.btn.danger:focus{background-color:rgba(var(--color-danger), .85)}.btn.danger:hover{-webkit-box-shadow:var(--shadow-primary);box-shadow:var(--shadow-primary)}.btn.danger:active{-webkit-box-shadow:var(--shadow-primary);box-shadow:var(--shadow-primary)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append_dev(document_1$1.head, style);
}

// (63:0) {:else}
function create_else_block$1(ctx) {
	let button;
	let button_class_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[19].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[18], null);

	const block = {
		c: function create() {
			button = element("button");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", {
				id: true,
				form: true,
				type: true,
				style: true,
				disabled: true,
				title: true,
				class: true,
				"aria-label": true
			});

			var button_nodes = children(button);
			if (default_slot) default_slot.l(button_nodes);
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "id", /*id*/ ctx[0]);
			attr_dev(button, "form", /*form*/ ctx[4]);
			attr_dev(button, "type", /*type*/ ctx[3]);
			attr_dev(button, "style", /*style*/ ctx[5]);
			button.disabled = /*disabled*/ ctx[7];
			attr_dev(button, "title", /*titleProp*/ ctx[9]);
			attr_dev(button, "class", button_class_value = "" + (null_to_empty(/*classProp*/ ctx[8]) + " svelte-1hd9njw"));
			attr_dev(button, "aria-label", /*ariaLabelProp*/ ctx[10]);
			add_location(button, file$I, 63, 4, 1611);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);

			if (default_slot) {
				default_slot.m(button, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen_dev(button, "click", /*onClick*/ ctx[12], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 262144) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[18], dirty, null, null);
				}
			}

			if (!current || dirty & /*id*/ 1) {
				attr_dev(button, "id", /*id*/ ctx[0]);
			}

			if (!current || dirty & /*form*/ 16) {
				attr_dev(button, "form", /*form*/ ctx[4]);
			}

			if (!current || dirty & /*type*/ 8) {
				attr_dev(button, "type", /*type*/ ctx[3]);
			}

			if (!current || dirty & /*style*/ 32) {
				attr_dev(button, "style", /*style*/ ctx[5]);
			}

			if (!current || dirty & /*disabled*/ 128) {
				prop_dev(button, "disabled", /*disabled*/ ctx[7]);
			}

			if (!current || dirty & /*classProp*/ 256 && button_class_value !== (button_class_value = "" + (null_to_empty(/*classProp*/ ctx[8]) + " svelte-1hd9njw"))) {
				attr_dev(button, "class", button_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$1.name,
		type: "else",
		source: "(63:0) {:else}",
		ctx
	});

	return block;
}

// (50:18) 
function create_if_block_1$2(ctx) {
	let label;
	let label_class_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[19].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[18], null);

	const block = {
		c: function create() {
			label = element("label");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			label = claim_element(nodes, "LABEL", {
				id: true,
				style: true,
				disabled: true,
				for: true,
				title: true,
				class: true,
				"aria-label": true
			});

			var label_nodes = children(label);
			if (default_slot) default_slot.l(label_nodes);
			label_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(label, "id", /*id*/ ctx[0]);
			attr_dev(label, "style", /*style*/ ctx[5]);
			attr_dev(label, "disabled", /*disabled*/ ctx[7]);
			attr_dev(label, "for", /*htmlFor*/ ctx[6]);
			attr_dev(label, "title", /*titleProp*/ ctx[9]);
			attr_dev(label, "class", label_class_value = "" + (null_to_empty(/*classProp*/ ctx[8]) + " svelte-1hd9njw"));
			attr_dev(label, "aria-label", /*ariaLabelProp*/ ctx[10]);
			add_location(label, file$I, 50, 4, 1330);
		},
		m: function mount(target, anchor) {
			insert_dev(target, label, anchor);

			if (default_slot) {
				default_slot.m(label, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen_dev(label, "click", /*onLabelClick*/ ctx[11], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 262144) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[18], dirty, null, null);
				}
			}

			if (!current || dirty & /*id*/ 1) {
				attr_dev(label, "id", /*id*/ ctx[0]);
			}

			if (!current || dirty & /*style*/ 32) {
				attr_dev(label, "style", /*style*/ ctx[5]);
			}

			if (!current || dirty & /*disabled*/ 128) {
				attr_dev(label, "disabled", /*disabled*/ ctx[7]);
			}

			if (!current || dirty & /*htmlFor*/ 64) {
				attr_dev(label, "for", /*htmlFor*/ ctx[6]);
			}

			if (!current || dirty & /*classProp*/ 256 && label_class_value !== (label_class_value = "" + (null_to_empty(/*classProp*/ ctx[8]) + " svelte-1hd9njw"))) {
				attr_dev(label, "class", label_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(label);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$2.name,
		type: "if",
		source: "(50:18) ",
		ctx
	});

	return block;
}

// (37:0) {#if href}
function create_if_block$4(ctx) {
	let a;
	let a_class_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[19].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[18], null);

	const block = {
		c: function create() {
			a = element("a");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", {
				id: true,
				rel: true,
				href: true,
				style: true,
				title: true,
				class: true,
				"aria-label": true
			});

			var a_nodes = children(a);
			if (default_slot) default_slot.l(a_nodes);
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "id", /*id*/ ctx[0]);
			attr_dev(a, "rel", /*rel*/ ctx[1]);
			attr_dev(a, "href", /*href*/ ctx[2]);
			attr_dev(a, "style", /*style*/ ctx[5]);
			attr_dev(a, "title", /*titleProp*/ ctx[9]);
			attr_dev(a, "class", a_class_value = "" + (null_to_empty(/*classProp*/ ctx[8]) + " svelte-1hd9njw"));
			attr_dev(a, "aria-label", /*ariaLabelProp*/ ctx[10]);
			add_location(a, file$I, 37, 4, 1063);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);

			if (default_slot) {
				default_slot.m(a, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen_dev(a, "click", /*onClick*/ ctx[12], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 262144) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[18], dirty, null, null);
				}
			}

			if (!current || dirty & /*id*/ 1) {
				attr_dev(a, "id", /*id*/ ctx[0]);
			}

			if (!current || dirty & /*rel*/ 2) {
				attr_dev(a, "rel", /*rel*/ ctx[1]);
			}

			if (!current || dirty & /*href*/ 4) {
				attr_dev(a, "href", /*href*/ ctx[2]);
			}

			if (!current || dirty & /*style*/ 32) {
				attr_dev(a, "style", /*style*/ ctx[5]);
			}

			if (!current || dirty & /*classProp*/ 256 && a_class_value !== (a_class_value = "" + (null_to_empty(/*classProp*/ ctx[8]) + " svelte-1hd9njw"))) {
				attr_dev(a, "class", a_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$4.name,
		type: "if",
		source: "(37:0) {#if href}",
		ctx
	});

	return block;
}

function create_fragment$I(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$4, create_if_block_1$2, create_else_block$1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*href*/ ctx[2]) return 0;
		if (/*htmlFor*/ ctx[6]) return 1;
		return 2;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$I.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$I($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { is = undefined } = $$props; // theme, theme-border, white, success, warning, danger, dark, dark-border
	let { id = undefined } = $$props;
	let { rel = undefined } = $$props;
	let { href = undefined } = $$props;
	let { auto = false } = $$props;
	let { type = "button" } = $$props;
	let { form = undefined } = $$props;
	let { size = undefined } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;
	let { htmlFor = undefined } = $$props;
	let { disabled = false } = $$props;
	let { ariaLabel = undefined } = $$props;
	let titleProp = title || ariaLabel;
	let ariaLabelProp = ariaLabel || title;

	function onLabelClick(e) {
		document.getElementById(htmlFor).click();
		!disabled && dispatch("click", e);
	}

	function onClick(e) {
		e.stopPropagation();
		!disabled && dispatch("click", e);
	}

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Button", $$slots, ['default']);

	$$self.$set = $$new_props => {
		$$invalidate(21, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("is" in $$new_props) $$invalidate(13, is = $$new_props.is);
		if ("id" in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ("rel" in $$new_props) $$invalidate(1, rel = $$new_props.rel);
		if ("href" in $$new_props) $$invalidate(2, href = $$new_props.href);
		if ("auto" in $$new_props) $$invalidate(14, auto = $$new_props.auto);
		if ("type" in $$new_props) $$invalidate(3, type = $$new_props.type);
		if ("form" in $$new_props) $$invalidate(4, form = $$new_props.form);
		if ("size" in $$new_props) $$invalidate(15, size = $$new_props.size);
		if ("title" in $$new_props) $$invalidate(16, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(5, style = $$new_props.style);
		if ("htmlFor" in $$new_props) $$invalidate(6, htmlFor = $$new_props.htmlFor);
		if ("disabled" in $$new_props) $$invalidate(7, disabled = $$new_props.disabled);
		if ("ariaLabel" in $$new_props) $$invalidate(17, ariaLabel = $$new_props.ariaLabel);
		if ("$$scope" in $$new_props) $$invalidate(18, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		classnames,
		dispatch,
		is,
		id,
		rel,
		href,
		auto,
		type,
		form,
		size,
		title,
		style,
		htmlFor,
		disabled,
		ariaLabel,
		titleProp,
		ariaLabelProp,
		onLabelClick,
		onClick,
		classProp
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(21, $$props = assign(assign({}, $$props), $$new_props));
		if ("is" in $$props) $$invalidate(13, is = $$new_props.is);
		if ("id" in $$props) $$invalidate(0, id = $$new_props.id);
		if ("rel" in $$props) $$invalidate(1, rel = $$new_props.rel);
		if ("href" in $$props) $$invalidate(2, href = $$new_props.href);
		if ("auto" in $$props) $$invalidate(14, auto = $$new_props.auto);
		if ("type" in $$props) $$invalidate(3, type = $$new_props.type);
		if ("form" in $$props) $$invalidate(4, form = $$new_props.form);
		if ("size" in $$props) $$invalidate(15, size = $$new_props.size);
		if ("title" in $$props) $$invalidate(16, title = $$new_props.title);
		if ("style" in $$props) $$invalidate(5, style = $$new_props.style);
		if ("htmlFor" in $$props) $$invalidate(6, htmlFor = $$new_props.htmlFor);
		if ("disabled" in $$props) $$invalidate(7, disabled = $$new_props.disabled);
		if ("ariaLabel" in $$props) $$invalidate(17, ariaLabel = $$new_props.ariaLabel);
		if ("titleProp" in $$props) $$invalidate(9, titleProp = $$new_props.titleProp);
		if ("ariaLabelProp" in $$props) $$invalidate(10, ariaLabelProp = $$new_props.ariaLabelProp);
		if ("classProp" in $$props) $$invalidate(8, classProp = $$new_props.classProp);
	};

	let classProp;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		 $$invalidate(8, classProp = classnames("btn", is, size, $$props.class, { auto, disabled }));
	};

	$$props = exclude_internal_props($$props);

	return [
		id,
		rel,
		href,
		type,
		form,
		style,
		htmlFor,
		disabled,
		classProp,
		titleProp,
		ariaLabelProp,
		onLabelClick,
		onClick,
		is,
		auto,
		size,
		title,
		ariaLabel,
		$$scope,
		$$slots
	];
}

class Button extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document_1$1.getElementById("svelte-1hd9njw-style")) add_css$9();

		init(this, options, instance$I, create_fragment$I, safe_not_equal, {
			is: 13,
			id: 0,
			rel: 1,
			href: 2,
			auto: 14,
			type: 3,
			form: 4,
			size: 15,
			title: 16,
			style: 5,
			htmlFor: 6,
			disabled: 7,
			ariaLabel: 17
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Button",
			options,
			id: create_fragment$I.name
		});
	}

	get is() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set is(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rel() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rel(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get href() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set href(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get auto() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set auto(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get type() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get form() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set form(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get size() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get htmlFor() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set htmlFor(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ariaLabel() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ariaLabel(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Divider.svelte generated by Svelte v3.24.0 */
const file$J = "src/components/Divider.svelte";

function add_css$a() {
	var style = element("style");
	style.id = "svelte-12ng15v-style";
	style.textContent = ".divider.svelte-12ng15v{margin:0;border:none;-webkit-box-sizing:content-box;box-sizing:content-box;background-clip:content-box}.info.svelte-12ng15v{background-color:rgb(var(--color-info))}.success.svelte-12ng15v{background-color:rgb(var(--color-success))}.warning.svelte-12ng15v{background-color:rgb(var(--color-warning))}.danger.svelte-12ng15v{background-color:rgb(var(--color-danger))}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGl2aWRlci5zdmVsdGUiLCJzb3VyY2VzIjpbIkRpdmlkZXIuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgdG9DU1NTdHJpbmcsIGNsYXNzbmFtZXMgfSBmcm9tICdAdXRpbHMnXG5cbiAgICBleHBvcnQgbGV0IGlzID0gJ2luZm8nXG4gICAgZXhwb3J0IGxldCBzaXplID0gMFxuICAgIGV4cG9ydCBsZXQgd2lkdGggPSAyXG5cbiAgICAkOiBjbGFzc1Byb3AgPSBjbGFzc25hbWVzKCdkaXZpZGVyJywgaXMsICQkcHJvcHMuY2xhc3MpXG4gICAgJDogc3R5bGVQcm9wID0gdG9DU1NTdHJpbmcoeyBwYWRkaW5nOiBgJHtzaXplIC8gMn1weCAwYCwgaGVpZ2h0OiBgJHt3aWR0aH1weGAgfSlcbjwvc2NyaXB0PlxuXG48aHIgY2xhc3M9e2NsYXNzUHJvcH0gc3R5bGU9e3N0eWxlUHJvcH0+XG5cbjxzdHlsZT5cbi5kaXZpZGVyIHtcbiAgICBtYXJnaW46IDA7XG4gICAgYm9yZGVyOiBub25lO1xuICAgIC13ZWJraXQtYm94LXNpemluZzogY29udGVudC1ib3g7XG4gICAgICAgICAgICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgICBiYWNrZ3JvdW5kLWNsaXA6IGNvbnRlbnQtYm94O1xufVxuXG4uaW5mbyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKHZhcigtLWNvbG9yLWluZm8pKTtcbn1cblxuLnN1Y2Nlc3Mge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYih2YXIoLS1jb2xvci1zdWNjZXNzKSk7XG59XG5cbi53YXJuaW5nIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IodmFyKC0tY29sb3Itd2FybmluZykpO1xufVxuXG4uZGFuZ2VyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IodmFyKC0tY29sb3ItZGFuZ2VyKSk7XG59PC9zdHlsZT5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFjQSxRQUFRLGVBQUMsQ0FBQyxBQUNOLE1BQU0sQ0FBRSxDQUFDLENBQ1QsTUFBTSxDQUFFLElBQUksQ0FDWixrQkFBa0IsQ0FBRSxXQUFXLENBQ3ZCLFVBQVUsQ0FBRSxXQUFXLENBQy9CLGVBQWUsQ0FBRSxXQUFXLEFBQ2hDLENBQUMsQUFFRCxLQUFLLGVBQUMsQ0FBQyxBQUNILGdCQUFnQixDQUFFLElBQUksSUFBSSxZQUFZLENBQUMsQ0FBQyxBQUM1QyxDQUFDLEFBRUQsUUFBUSxlQUFDLENBQUMsQUFDTixnQkFBZ0IsQ0FBRSxJQUFJLElBQUksZUFBZSxDQUFDLENBQUMsQUFDL0MsQ0FBQyxBQUVELFFBQVEsZUFBQyxDQUFDLEFBQ04sZ0JBQWdCLENBQUUsSUFBSSxJQUFJLGVBQWUsQ0FBQyxDQUFDLEFBQy9DLENBQUMsQUFFRCxPQUFPLGVBQUMsQ0FBQyxBQUNMLGdCQUFnQixDQUFFLElBQUksSUFBSSxjQUFjLENBQUMsQ0FBQyxBQUM5QyxDQUFDIn0= */";
	append_dev(document.head, style);
}

function create_fragment$J(ctx) {
	let hr;
	let hr_class_value;

	const block = {
		c: function create() {
			hr = element("hr");
			this.h();
		},
		l: function claim(nodes) {
			hr = claim_element(nodes, "HR", { class: true, style: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(hr, "class", hr_class_value = "" + (null_to_empty(/*classProp*/ ctx[0]) + " svelte-12ng15v"));
			attr_dev(hr, "style", /*styleProp*/ ctx[1]);
			add_location(hr, file$J, 11, 0, 296);
		},
		m: function mount(target, anchor) {
			insert_dev(target, hr, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*classProp*/ 1 && hr_class_value !== (hr_class_value = "" + (null_to_empty(/*classProp*/ ctx[0]) + " svelte-12ng15v"))) {
				attr_dev(hr, "class", hr_class_value);
			}

			if (dirty & /*styleProp*/ 2) {
				attr_dev(hr, "style", /*styleProp*/ ctx[1]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(hr);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$J.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$J($$self, $$props, $$invalidate) {
	let { is = "info" } = $$props;
	let { size = 0 } = $$props;
	let { width = 2 } = $$props;
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Divider", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("is" in $$new_props) $$invalidate(2, is = $$new_props.is);
		if ("size" in $$new_props) $$invalidate(3, size = $$new_props.size);
		if ("width" in $$new_props) $$invalidate(4, width = $$new_props.width);
	};

	$$self.$capture_state = () => ({
		toCSSString,
		classnames,
		is,
		size,
		width,
		classProp,
		styleProp
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), $$new_props));
		if ("is" in $$props) $$invalidate(2, is = $$new_props.is);
		if ("size" in $$props) $$invalidate(3, size = $$new_props.size);
		if ("width" in $$props) $$invalidate(4, width = $$new_props.width);
		if ("classProp" in $$props) $$invalidate(0, classProp = $$new_props.classProp);
		if ("styleProp" in $$props) $$invalidate(1, styleProp = $$new_props.styleProp);
	};

	let classProp;
	let styleProp;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		 $$invalidate(0, classProp = classnames("divider", is, $$props.class));

		if ($$self.$$.dirty & /*size, width*/ 24) {
			 $$invalidate(1, styleProp = toCSSString({
				padding: `${size / 2}px 0`,
				height: `${width}px`
			}));
		}
	};

	$$props = exclude_internal_props($$props);
	return [classProp, styleProp, is, size, width];
}

class Divider extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-12ng15v-style")) add_css$a();
		init(this, options, instance$J, create_fragment$J, safe_not_equal, { is: 2, size: 3, width: 4 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Divider",
			options,
			id: create_fragment$J.name
		});
	}

	get is() {
		throw new Error("<Divider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set is(value) {
		throw new Error("<Divider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get size() {
		throw new Error("<Divider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Divider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get width() {
		throw new Error("<Divider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<Divider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Progress.svelte generated by Svelte v3.24.0 */
const file$K = "src/components/Progress.svelte";

function add_css$b() {
	var style = element("style");
	style.id = "svelte-wvyka1-style";
	style.textContent = ".progress.medium.svelte-wvyka1.svelte-wvyka1{--progress-height:10px;--progress-padding-point:1px}.progress.svelte-wvyka1.svelte-wvyka1{-webkit-box-flex:0;-ms-flex:0;flex:0;width:100%;border-radius:9999px;height:var(--progress-height)}.progress-inner-frame.svelte-wvyka1.svelte-wvyka1{position:relative;display:-webkit-box;display:-ms-flexbox;display:flex;width:100%;height:100%;border-radius:9999px;overflow:hidden;padding:var(--progress-padding-point) 0;background-color:rgba(var(--theme-color-primary-opposite), .1);background-clip:content-box}.progress-core.svelte-wvyka1.svelte-wvyka1{position:absolute;top:0;left:0;height:100%;-webkit-box-flex:0;-ms-flex:none;flex:none;-ms-flex-item-align:stretch;align-self:stretch;-webkit-transition:1s ease-in-out;transition:1s ease-in-out;border-radius:9999px;background-color:rgba(var(--color-info))}.progress[aria-valuenow=\"100\"].svelte-wvyka1 .progress-core.svelte-wvyka1{background-color:rgba(var(--color-success))}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvZ3Jlc3Muc3ZlbHRlIiwic291cmNlcyI6WyJQcm9ncmVzcy5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIsIG9uTW91bnQgfSBmcm9tICdzdmVsdGUnXG4gICAgaW1wb3J0IHsgY2xhc3NuYW1lcywgc2FmZUdldCB9IGZyb20gJ0B1dGlscydcblxuICAgIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKClcblxuICAgIGV4cG9ydCBsZXQgaWQgPSB1bmRlZmluZWRcbiAgICBleHBvcnQgbGV0IHZhbHVlID0gMCAvLyAwIC0gMTAwXG4gICAgZXhwb3J0IGxldCBzaXplID0gJ21lZGl1bSdcbiAgICBleHBvcnQgbGV0IHRpdGxlID0gdW5kZWZpbmVkXG4gICAgZXhwb3J0IGxldCBhcmlhTGFiZWwgPSB1bmRlZmluZWRcbiAgICBleHBvcnQgbGV0IGJvcmRlclJhZGl1cyA9IHVuZGVmaW5lZFxuXG4gICAgJDogdmFsID0gTnVtYmVyLmlzRmluaXRlKCt2YWx1ZSkgPyBNYXRoLm1heCgwLCBNYXRoLm1pbigrdmFsdWUsIDEwMCkpIDogMFxuICAgICQ6IHRpdGxlUHJvcCA9IHRpdGxlIHx8IGBQcm9ncmVzcyAtICR7dmFsfSVgXG4gICAgJDogYXJpYUxhYmVsUHJvcCA9IGFyaWFMYWJlbCB8fCBgUHJvZ3Jlc3MgLSAke3ZhbH0lYFxuICAgICQ6IGNsYXNzUHJvcCA9IGNsYXNzbmFtZXMoJ3Byb2dyZXNzJywgc2l6ZSwgJCRwcm9wcy5jbGFzcylcblxuICAgIGZ1bmN0aW9uIGdldEJvcmRlclJhZGl1cyhib3JkZXJzLCBkZWZhdWx0cyA9ICc5OTk5OXB4Jykge1xuICAgICAgICBjb25zdCBickRlZmF1bHQgPSBuZXcgQXJyYXkoNCkuZmlsbChkZWZhdWx0cylcbiAgICAgICAgY29uc3QgYmRzID0gc2FmZUdldCgoKSA9PiBib3JkZXJzLnNwbGl0KCcgJyksIFtdLCB0cnVlKVxuICAgICAgICBjb25zdCBydWxlID0gJ2JvcmRlci1yYWRpdXMnXG4gICAgICAgIHJldHVybiBgJHtydWxlfToke2JyRGVmYXVsdC5tYXAoKGRlZiwgaSkgPT4gYCR7YmRzW2ldIHx8IGRlZn1gKS5qb2luKCcgJyl9YFxuICAgIH1cbjwvc2NyaXB0PlxuXG5cbjxkaXZcbiAgICAgICAge2lkfVxuICAgICAgICBjbGFzcz17Y2xhc3NQcm9wfVxuICAgICAgICB0aXRsZT17dGl0bGVQcm9wfVxuICAgICAgICBhcmlhLWxhYmVsPXthcmlhTGFiZWxQcm9wfVxuICAgICAgICByb2xlPVwicHJvZ3Jlc3NiYXJcIlxuICAgICAgICBhcmlhLXZhbHVlbWluPVwiMFwiXG4gICAgICAgIGFyaWEtdmFsdWVtYXg9XCIxMDBcIlxuICAgICAgICBhcmlhLXZhbHVlbm93PXt2YWx9XG4gICAgICAgIHN0eWxlPXtnZXRCb3JkZXJSYWRpdXMoYm9yZGVyUmFkaXVzKX1cbj5cbiAgICA8ZGl2IGNsYXNzPVwicHJvZ3Jlc3MtaW5uZXItZnJhbWVcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInByb2dyZXNzLWNvcmVcIiBzdHlsZT17YHdpZHRoOiR7dmFsfSVgfT48L2Rpdj5cbiAgICA8L2Rpdj5cbjwvZGl2PlxuXG48c3R5bGU+XG4ucHJvZ3Jlc3MubWVkaXVtIHtcbiAgICAtLXByb2dyZXNzLWhlaWdodDogMTBweDtcbiAgICAtLXByb2dyZXNzLXBhZGRpbmctcG9pbnQ6IDFweDtcbn1cblxuLnByb2dyZXNzIHtcbiAgICAtd2Via2l0LWJveC1mbGV4OiAwO1xuICAgICAgICAtbXMtZmxleDogMDtcbiAgICAgICAgICAgIGZsZXg6IDA7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgYm9yZGVyLXJhZGl1czogOTk5OXB4O1xuICAgIGhlaWdodDogdmFyKC0tcHJvZ3Jlc3MtaGVpZ2h0KTtcbn1cblxuLnByb2dyZXNzLWlubmVyLWZyYW1lIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gICAgZGlzcGxheTogLW1zLWZsZXhib3g7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgYm9yZGVyLXJhZGl1czogOTk5OXB4O1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgcGFkZGluZzogdmFyKC0tcHJvZ3Jlc3MtcGFkZGluZy1wb2ludCkgMDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKHZhcigtLXRoZW1lLWNvbG9yLXByaW1hcnktb3Bwb3NpdGUpLCAuMSk7XG4gICAgYmFja2dyb3VuZC1jbGlwOiBjb250ZW50LWJveDtcbn1cblxuLnByb2dyZXNzLWNvcmUge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgbGVmdDogMDtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgLXdlYmtpdC1ib3gtZmxleDogMDtcbiAgICAgICAgLW1zLWZsZXg6IG5vbmU7XG4gICAgICAgICAgICBmbGV4OiBub25lO1xuICAgIC1tcy1mbGV4LWl0ZW0tYWxpZ246IHN0cmV0Y2g7XG4gICAgICAgIGFsaWduLXNlbGY6IHN0cmV0Y2g7XG4gICAgLXdlYmtpdC10cmFuc2l0aW9uOiAxcyBlYXNlLWluLW91dDtcbiAgICB0cmFuc2l0aW9uOiAxcyBlYXNlLWluLW91dDtcbiAgICBib3JkZXItcmFkaXVzOiA5OTk5cHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSh2YXIoLS1jb2xvci1pbmZvKSk7XG59XG5cbi5wcm9ncmVzc1thcmlhLXZhbHVlbm93PVwiMTAwXCJdIC5wcm9ncmVzcy1jb3JlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKHZhcigtLWNvbG9yLXN1Y2Nlc3MpKTtcbn08L3N0eWxlPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTRDQSxTQUFTLE9BQU8sNEJBQUMsQ0FBQyxBQUNkLGlCQUFpQixDQUFFLElBQUksQ0FDdkIsd0JBQXdCLENBQUUsR0FBRyxBQUNqQyxDQUFDLEFBRUQsU0FBUyw0QkFBQyxDQUFDLEFBQ1AsZ0JBQWdCLENBQUUsQ0FBQyxDQUNmLFFBQVEsQ0FBRSxDQUFDLENBQ1AsSUFBSSxDQUFFLENBQUMsQ0FDZixLQUFLLENBQUUsSUFBSSxDQUNYLGFBQWEsQ0FBRSxNQUFNLENBQ3JCLE1BQU0sQ0FBRSxJQUFJLGlCQUFpQixDQUFDLEFBQ2xDLENBQUMsQUFFRCxxQkFBcUIsNEJBQUMsQ0FBQyxBQUNuQixRQUFRLENBQUUsUUFBUSxDQUNsQixPQUFPLENBQUUsV0FBVyxDQUNwQixPQUFPLENBQUUsV0FBVyxDQUNwQixPQUFPLENBQUUsSUFBSSxDQUNiLEtBQUssQ0FBRSxJQUFJLENBQ1gsTUFBTSxDQUFFLElBQUksQ0FDWixhQUFhLENBQUUsTUFBTSxDQUNyQixRQUFRLENBQUUsTUFBTSxDQUNoQixPQUFPLENBQUUsSUFBSSx3QkFBd0IsQ0FBQyxDQUFDLENBQUMsQ0FDeEMsZ0JBQWdCLENBQUUsS0FBSyxJQUFJLDhCQUE4QixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FDL0QsZUFBZSxDQUFFLFdBQVcsQUFDaEMsQ0FBQyxBQUVELGNBQWMsNEJBQUMsQ0FBQyxBQUNaLFFBQVEsQ0FBRSxRQUFRLENBQ2xCLEdBQUcsQ0FBRSxDQUFDLENBQ04sSUFBSSxDQUFFLENBQUMsQ0FDUCxNQUFNLENBQUUsSUFBSSxDQUNaLGdCQUFnQixDQUFFLENBQUMsQ0FDZixRQUFRLENBQUUsSUFBSSxDQUNWLElBQUksQ0FBRSxJQUFJLENBQ2xCLG1CQUFtQixDQUFFLE9BQU8sQ0FDeEIsVUFBVSxDQUFFLE9BQU8sQ0FDdkIsa0JBQWtCLENBQUUsRUFBRSxDQUFDLFdBQVcsQ0FDbEMsVUFBVSxDQUFFLEVBQUUsQ0FBQyxXQUFXLENBQzFCLGFBQWEsQ0FBRSxNQUFNLENBQ3JCLGdCQUFnQixDQUFFLEtBQUssSUFBSSxZQUFZLENBQUMsQ0FBQyxBQUM3QyxDQUFDLEFBRUQsU0FBUyxDQUFDLGFBQWEsQ0FBQyxLQUFLLGVBQUMsQ0FBQyxjQUFjLGNBQUMsQ0FBQyxBQUMzQyxnQkFBZ0IsQ0FBRSxLQUFLLElBQUksZUFBZSxDQUFDLENBQUMsQUFDaEQsQ0FBQyJ9 */";
	append_dev(document.head, style);
}

function create_fragment$K(ctx) {
	let div2;
	let div1;
	let div0;
	let div0_style_value;
	let div2_class_value;
	let div2_style_value;

	const block = {
		c: function create() {
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", {
				id: true,
				class: true,
				title: true,
				"aria-label": true,
				role: true,
				"aria-valuemin": true,
				"aria-valuemax": true,
				"aria-valuenow": true,
				style: true
			});

			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true, style: true });
			children(div0).forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "progress-core svelte-wvyka1");
			attr_dev(div0, "style", div0_style_value = `width:${/*val*/ ctx[2]}%`);
			add_location(div0, file$K, 39, 8, 1249);
			attr_dev(div1, "class", "progress-inner-frame svelte-wvyka1");
			add_location(div1, file$K, 38, 4, 1206);
			attr_dev(div2, "id", /*id*/ ctx[0]);
			attr_dev(div2, "class", div2_class_value = "" + (null_to_empty(/*classProp*/ ctx[5]) + " svelte-wvyka1"));
			attr_dev(div2, "title", /*titleProp*/ ctx[3]);
			attr_dev(div2, "aria-label", /*ariaLabelProp*/ ctx[4]);
			attr_dev(div2, "role", "progressbar");
			attr_dev(div2, "aria-valuemin", "0");
			attr_dev(div2, "aria-valuemax", "100");
			attr_dev(div2, "aria-valuenow", /*val*/ ctx[2]);
			attr_dev(div2, "style", div2_style_value = /*getBorderRadius*/ ctx[6](/*borderRadius*/ ctx[1]));
			add_location(div2, file$K, 27, 0, 940);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div1);
			append_dev(div1, div0);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*val*/ 4 && div0_style_value !== (div0_style_value = `width:${/*val*/ ctx[2]}%`)) {
				attr_dev(div0, "style", div0_style_value);
			}

			if (dirty & /*id*/ 1) {
				attr_dev(div2, "id", /*id*/ ctx[0]);
			}

			if (dirty & /*classProp*/ 32 && div2_class_value !== (div2_class_value = "" + (null_to_empty(/*classProp*/ ctx[5]) + " svelte-wvyka1"))) {
				attr_dev(div2, "class", div2_class_value);
			}

			if (dirty & /*titleProp*/ 8) {
				attr_dev(div2, "title", /*titleProp*/ ctx[3]);
			}

			if (dirty & /*ariaLabelProp*/ 16) {
				attr_dev(div2, "aria-label", /*ariaLabelProp*/ ctx[4]);
			}

			if (dirty & /*val*/ 4) {
				attr_dev(div2, "aria-valuenow", /*val*/ ctx[2]);
			}

			if (dirty & /*borderRadius*/ 2 && div2_style_value !== (div2_style_value = /*getBorderRadius*/ ctx[6](/*borderRadius*/ ctx[1]))) {
				attr_dev(div2, "style", div2_style_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$K.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$K($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { id = undefined } = $$props;
	let { value = 0 } = $$props; // 0 - 100
	let { size = "medium" } = $$props;
	let { title = undefined } = $$props;
	let { ariaLabel = undefined } = $$props;
	let { borderRadius = undefined } = $$props;

	function getBorderRadius(borders, defaults = "99999px") {
		const brDefault = new Array(4).fill(defaults);
		const bds = safeGet(() => borders.split(" "), [], true);
		const rule = "border-radius";
		return `${rule}:${brDefault.map((def, i) => `${bds[i] || def}`).join(" ")}`;
	}

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Progress", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(12, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("id" in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ("value" in $$new_props) $$invalidate(7, value = $$new_props.value);
		if ("size" in $$new_props) $$invalidate(8, size = $$new_props.size);
		if ("title" in $$new_props) $$invalidate(9, title = $$new_props.title);
		if ("ariaLabel" in $$new_props) $$invalidate(10, ariaLabel = $$new_props.ariaLabel);
		if ("borderRadius" in $$new_props) $$invalidate(1, borderRadius = $$new_props.borderRadius);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		onMount,
		classnames,
		safeGet,
		dispatch,
		id,
		value,
		size,
		title,
		ariaLabel,
		borderRadius,
		getBorderRadius,
		val,
		titleProp,
		ariaLabelProp,
		classProp
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(12, $$props = assign(assign({}, $$props), $$new_props));
		if ("id" in $$props) $$invalidate(0, id = $$new_props.id);
		if ("value" in $$props) $$invalidate(7, value = $$new_props.value);
		if ("size" in $$props) $$invalidate(8, size = $$new_props.size);
		if ("title" in $$props) $$invalidate(9, title = $$new_props.title);
		if ("ariaLabel" in $$props) $$invalidate(10, ariaLabel = $$new_props.ariaLabel);
		if ("borderRadius" in $$props) $$invalidate(1, borderRadius = $$new_props.borderRadius);
		if ("val" in $$props) $$invalidate(2, val = $$new_props.val);
		if ("titleProp" in $$props) $$invalidate(3, titleProp = $$new_props.titleProp);
		if ("ariaLabelProp" in $$props) $$invalidate(4, ariaLabelProp = $$new_props.ariaLabelProp);
		if ("classProp" in $$props) $$invalidate(5, classProp = $$new_props.classProp);
	};

	let val;
	let titleProp;
	let ariaLabelProp;
	let classProp;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value*/ 128) {
			 $$invalidate(2, val = Number.isFinite(+value)
			? Math.max(0, Math.min(+value, 100))
			: 0);
		}

		if ($$self.$$.dirty & /*title, val*/ 516) {
			 $$invalidate(3, titleProp = title || `Progress - ${val}%`);
		}

		if ($$self.$$.dirty & /*ariaLabel, val*/ 1028) {
			 $$invalidate(4, ariaLabelProp = ariaLabel || `Progress - ${val}%`);
		}

		 $$invalidate(5, classProp = classnames("progress", size, $$props.class));
	};

	$$props = exclude_internal_props($$props);

	return [
		id,
		borderRadius,
		val,
		titleProp,
		ariaLabelProp,
		classProp,
		getBorderRadius,
		value,
		size,
		title,
		ariaLabel
	];
}

class Progress extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-wvyka1-style")) add_css$b();

		init(this, options, instance$K, create_fragment$K, safe_not_equal, {
			id: 0,
			value: 7,
			size: 8,
			title: 9,
			ariaLabel: 10,
			borderRadius: 1
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Progress",
			options,
			id: create_fragment$K.name
		});
	}

	get id() {
		throw new Error("<Progress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Progress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<Progress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Progress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get size() {
		throw new Error("<Progress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Progress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<Progress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Progress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ariaLabel() {
		throw new Error("<Progress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ariaLabel(value) {
		throw new Error("<Progress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get borderRadius() {
		throw new Error("<Progress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set borderRadius(value) {
		throw new Error("<Progress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/FancyBox.svelte generated by Svelte v3.24.0 */
const file$L = "src/components/FancyBox.svelte";

function add_css$c() {
	var style = element("style");
	style.id = "svelte-17mfy9g-style";
	style.textContent = ".fancy-box.svelte-17mfy9g.svelte-17mfy9g{position:relative;width:100%;-webkit-box-flex:0;-ms-flex:none;flex:none;display:-webkit-box;display:-ms-flexbox;display:flex;overflow:hidden;-ms-flex-item-align:stretch;align-self:stretch;-webkit-box-align:stretch;-ms-flex-align:stretch;align-items:stretch;-webkit-box-pack:stretch;-ms-flex-pack:stretch;justify-content:stretch}.fancy-box-ghost.svelte-17mfy9g.svelte-17mfy9g{z-index:10;position:fixed;top:0;left:0;width:100%;height:100%;display:-webkit-box;display:-ms-flexbox;display:flex;overflow:hidden;-webkit-box-align:stretch;-ms-flex-align:stretch;align-items:stretch;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-ms-touch-action:manipulation;touch-action:manipulation;background-color:rgba(var(--color-black), .75);outline:150px solid rgba(var(--color-black), .75);-webkit-transition-timing-function:linear;transition-timing-function:linear;opacity:0;padding:0 var(--screen-padding);-webkit-transform:translate3d(0,30px,0);transform:translate3d(0,30px,0);pointer-events:none;will-change:transform, opacity}.fancy-box-ghost.svelte-17mfy9g>.svelte-17mfy9g{max-width:100%;max-height:100%}.fancy-box-ghost.active.svelte-17mfy9g.svelte-17mfy9g{opacity:1;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0);pointer-events:auto}button.svelte-17mfy9g.svelte-17mfy9g{position:absolute;top:0;right:0;font-size:24px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;width:60px;height:60px;color:rgb(var(--color-white))}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append_dev(document.head, style);
}

const get_box_slot_changes = dirty => ({ active: dirty & /*active*/ 2 });
const get_box_slot_context = ctx => ({ active: /*active*/ ctx[1] });
const get_default_slot_changes$1 = dirty => ({ active: dirty & /*active*/ 2 });
const get_default_slot_context$1 = ctx => ({ active: /*active*/ ctx[1] });

// (155:0) {#if active !== null}
function create_if_block$5(ctx) {
	let portal;
	let current;

	portal = new Portal({
			props: {
				$$slots: { default: [create_default_slot$z] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(portal.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(portal.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(portal, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const portal_changes = {};

			if (dirty & /*$$scope, classProp, ref, active*/ 16391) {
				portal_changes.$$scope = { dirty, ctx };
			}

			portal.$set(portal_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(portal.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(portal.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(portal, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$5.name,
		type: "if",
		source: "(155:0) {#if active !== null}",
		ctx
	});

	return block;
}

// (167:12) {:else}
function create_else_block$2(ctx) {
	let current;
	const default_slot_template = /*$$slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[14], null);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		l: function claim(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 16384) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[14], dirty, null, null);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$2.name,
		type: "else",
		source: "(167:12) {:else}",
		ctx
	});

	return block;
}

// (165:12) {#if slots.box}
function create_if_block_1$3(ctx) {
	let current;
	const box_slot_template = /*$$slots*/ ctx[12].box;
	const box_slot = create_slot(box_slot_template, ctx, /*$$scope*/ ctx[14], get_box_slot_context);

	const block = {
		c: function create() {
			if (box_slot) box_slot.c();
		},
		l: function claim(nodes) {
			if (box_slot) box_slot.l(nodes);
		},
		m: function mount(target, anchor) {
			if (box_slot) {
				box_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (box_slot) {
				if (box_slot.p && dirty & /*$$scope, active*/ 16386) {
					update_slot(box_slot, box_slot_template, ctx, /*$$scope*/ ctx[14], dirty, get_box_slot_changes, get_box_slot_context);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(box_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(box_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (box_slot) box_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$3.name,
		type: "if",
		source: "(165:12) {#if slots.box}",
		ctx
	});

	return block;
}

// (156:4) <Portal>
function create_default_slot$z(ctx) {
	let section;
	let button;
	let icon;
	let t;
	let current_block_type_index;
	let if_block;
	let section_class_value;
	let addSwipe_action;
	let current;
	let mounted;
	let dispose;

	icon = new Icon({
			props: { type: "close", size: "big", is: "light" },
			$$inline: true
		});

	const if_block_creators = [create_if_block_1$3, create_else_block$2];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*slots*/ ctx[4].box) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			section = element("section");
			button = element("button");
			create_component(icon.$$.fragment);
			t = space();
			if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			button = claim_element(section_nodes, "BUTTON", { type: true, class: true });
			var button_nodes = children(button);
			claim_component(icon.$$.fragment, button_nodes);
			button_nodes.forEach(detach_dev);
			t = claim_space(section_nodes);
			if_block.l(section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "type", "button");
			attr_dev(button, "class", "svelte-17mfy9g");
			add_location(button, file$L, 161, 12, 5781);
			attr_dev(section, "class", section_class_value = "" + (null_to_empty(/*classProp*/ ctx[2]) + " svelte-17mfy9g"));
			add_location(section, file$L, 156, 8, 5667);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, button);
			mount_component(icon, button, null);
			append_dev(section, t);
			if_blocks[current_block_type_index].m(section, null);
			/*section_binding*/ ctx[13](section);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(button, "click", /*onClick*/ ctx[5], false, false, false),
					action_destroyer(addSwipe_action = /*addSwipe*/ ctx[6].call(null, section))
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if_block.p(ctx, dirty);

			if (!current || dirty & /*classProp*/ 4 && section_class_value !== (section_class_value = "" + (null_to_empty(/*classProp*/ ctx[2]) + " svelte-17mfy9g"))) {
				attr_dev(section, "class", section_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			destroy_component(icon);
			if_blocks[current_block_type_index].d();
			/*section_binding*/ ctx[13](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$z.name,
		type: "slot",
		source: "(156:4) <Portal>",
		ctx
	});

	return block;
}

function create_fragment$L(ctx) {
	let section;
	let section_class_value;
	let t;
	let if_block_anchor;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[14], get_default_slot_context$1);
	let if_block = /*active*/ ctx[1] !== null && create_if_block$5(ctx);

	const block = {
		c: function create() {
			section = element("section");
			if (default_slot) default_slot.c();
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { role: true, class: true });
			var section_nodes = children(section);
			if (default_slot) default_slot.l(section_nodes);
			section_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			attr_dev(section, "role", "button");
			attr_dev(section, "class", section_class_value = "" + (null_to_empty(/*classPropWrap*/ ctx[3]) + " svelte-17mfy9g"));
			add_location(section, file$L, 150, 0, 5520);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);

			if (default_slot) {
				default_slot.m(section, null);
			}

			insert_dev(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = listen_dev(section, "click", /*onClick*/ ctx[5], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope, active*/ 16386) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[14], dirty, get_default_slot_changes$1, get_default_slot_context$1);
				}
			}

			if (!current || dirty & /*classPropWrap*/ 8 && section_class_value !== (section_class_value = "" + (null_to_empty(/*classPropWrap*/ ctx[3]) + " svelte-17mfy9g"))) {
				attr_dev(section, "class", section_class_value);
			}

			if (/*active*/ ctx[1] !== null) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*active*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$5(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			if (default_slot) default_slot.d(detaching);
			if (detaching) detach_dev(t);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$L.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const DURATION$2 = 250;
const THRESHOLD$1 = 50;
const SWIPE_SPEED$1 = 0.5;

function drawTransform$1(el, x, y) {
	const delta = Math.abs(x) > Math.abs(y) ? x : y;
	let scale = 1 - Math.abs(delta / window.innerHeight);
	el && (el.style.transform = `matrix(${scale}, 0, 0, ${scale}, ${x}, ${y})`);
}

function setDuration$1(el, ms) {
	el && (el.style.transitionDuration = `${ms}ms`);
}

function drawOpacity$1(el, x, y) {
	const delta = Math.abs(x) > Math.abs(y) ? x : y;
	el && (el.style.opacity = 1 - Math.min(Math.abs(delta / (THRESHOLD$1 * 1.5)), 1));
}

function instance$L($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	const START_POSITION = { x: 0, y: 20 };
	let { ref = null } = $$props;
	let { blockBody = true } = $$props;
	let { swipe = ["all"] } = $$props; // up down left right all
	let { disabled = false } = $$props;
	let { extraLock = false } = $$props;
	let { startPosition = START_POSITION } = $$props;
	let active = null;
	let slots = $$props.$$slots || {};

	async function onClick(e) {
		if (disabled) return;
		const newActive = !active;
		setActive(newActive);

		if (newActive) {
			drawTransform$1(ref, 0, 0);
		} else {
			drawTransform$1(ref, startPosition.x, startPosition.y);
		}
	}

	async function setActive(isActive) {
		$$invalidate(1, active = isActive);
		await tick();

		if (active) {
			setDuration$1(ref, DURATION$2);
			setTimeout(() => setDuration$1(ref, 0), DURATION$2);
			blockBody && disableScroll(ref, { extraLock });
			dispatch("open");
		} else {
			setDuration$1(ref, DURATION$2);
			blockBody && enableScroll(ref, { extraLock });
			dispatch("close");
		}
	}

	let xSwipe = 0;
	let ySwipe = 0;

	function addSwipe(el) {
		new Swipe(el).run().onUp(isSwipe.up ? handleVerticalSwipe : null).onDown(isSwipe.down ? handleVerticalSwipe : null).onLeft(isSwipe.left ? handleHorizontalSwipe : null).onRight(isSwipe.right ? handleHorizontalSwipe : null).onTouchEnd(async () => {
			if (xSwipe > THRESHOLD$1) {
				setDuration$1(ref, DURATION$2);
				setTimeout(() => setDuration$1(ref, 0), DURATION$2);
				setActive(false);
				drawTransform$1(el, xSwipe + 50, ySwipe);
				drawOpacity$1(el, xSwipe + 50, ySwipe);
				await delay(DURATION$2);
			} else if (xSwipe < -THRESHOLD$1) {
				setDuration$1(ref, DURATION$2);
				setTimeout(() => setDuration$1(ref, 0), DURATION$2);
				setActive(false);
				drawTransform$1(el, xSwipe - 50, ySwipe);
				drawOpacity$1(el, xSwipe - 50, ySwipe);
				await delay(DURATION$2);
			}

			if (ySwipe > THRESHOLD$1) {
				setDuration$1(ref, DURATION$2);
				setTimeout(() => setDuration$1(ref, 0), DURATION$2);
				setActive(false);
				drawTransform$1(el, xSwipe, ySwipe + 50);
				drawOpacity$1(el, xSwipe, ySwipe + 50);
				await delay(DURATION$2);
			} else if (ySwipe < -THRESHOLD$1) {
				setDuration$1(ref, DURATION$2);
				setTimeout(() => setDuration$1(ref, 0), DURATION$2);
				setActive(false);
				drawTransform$1(el, xSwipe, ySwipe - 50);
				drawOpacity$1(el, xSwipe, ySwipe - 50);
				await delay(DURATION$2);
			}

			if (xSwipe <= THRESHOLD$1 && xSwipe >= -THRESHOLD$1 && ySwipe <= THRESHOLD$1 && ySwipe >= -THRESHOLD$1) {
				setDuration$1(ref, DURATION$2);
				setTimeout(() => setDuration$1(ref, 0), DURATION$2);
				drawTransform$1(el, 0, 0);
			} else {
				drawTransform$1(el, startPosition.x, startPosition.y);
			}

			xSwipe = 0;
			ySwipe = 0;
			el.style.opacity = null;
		});
	}

	function handleVerticalSwipe(yDown, yUp, evt, el) {
		ySwipe = (yUp - yDown) * SWIPE_SPEED$1;
		drawTransform$1(el, xSwipe, ySwipe);
		drawOpacity$1(el, xSwipe, ySwipe);
	}

	function handleHorizontalSwipe(xDown, xUp, evt, el) {
		xSwipe = (xUp - xDown) * SWIPE_SPEED$1;
		drawTransform$1(el, xSwipe, ySwipe);
		drawOpacity$1(el, xSwipe, ySwipe);
	}

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("FancyBox", $$slots, ['default','box']);

	function section_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$set = $$new_props => {
		$$invalidate(23, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("ref" in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ("blockBody" in $$new_props) $$invalidate(7, blockBody = $$new_props.blockBody);
		if ("swipe" in $$new_props) $$invalidate(8, swipe = $$new_props.swipe);
		if ("disabled" in $$new_props) $$invalidate(9, disabled = $$new_props.disabled);
		if ("extraLock" in $$new_props) $$invalidate(10, extraLock = $$new_props.extraLock);
		if ("startPosition" in $$new_props) $$invalidate(11, startPosition = $$new_props.startPosition);
		if ("$$scope" in $$new_props) $$invalidate(14, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		tick,
		fly,
		Swipe,
		classnames,
		delay,
		bodyScroll,
		safeGet,
		Icon,
		Portal,
		dispatch,
		DURATION: DURATION$2,
		THRESHOLD: THRESHOLD$1,
		SWIPE_SPEED: SWIPE_SPEED$1,
		START_POSITION,
		ref,
		blockBody,
		swipe,
		disabled,
		extraLock,
		startPosition,
		active,
		slots,
		onClick,
		setActive,
		xSwipe,
		ySwipe,
		addSwipe,
		handleVerticalSwipe,
		handleHorizontalSwipe,
		drawTransform: drawTransform$1,
		setDuration: setDuration$1,
		drawOpacity: drawOpacity$1,
		isSwipe,
		classProp,
		classPropWrap
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(23, $$props = assign(assign({}, $$props), $$new_props));
		if ("ref" in $$props) $$invalidate(0, ref = $$new_props.ref);
		if ("blockBody" in $$props) $$invalidate(7, blockBody = $$new_props.blockBody);
		if ("swipe" in $$props) $$invalidate(8, swipe = $$new_props.swipe);
		if ("disabled" in $$props) $$invalidate(9, disabled = $$new_props.disabled);
		if ("extraLock" in $$props) $$invalidate(10, extraLock = $$new_props.extraLock);
		if ("startPosition" in $$props) $$invalidate(11, startPosition = $$new_props.startPosition);
		if ("active" in $$props) $$invalidate(1, active = $$new_props.active);
		if ("slots" in $$props) $$invalidate(4, slots = $$new_props.slots);
		if ("xSwipe" in $$props) xSwipe = $$new_props.xSwipe;
		if ("ySwipe" in $$props) ySwipe = $$new_props.ySwipe;
		if ("isSwipe" in $$props) isSwipe = $$new_props.isSwipe;
		if ("classProp" in $$props) $$invalidate(2, classProp = $$new_props.classProp);
		if ("classPropWrap" in $$props) $$invalidate(3, classPropWrap = $$new_props.classPropWrap);
	};

	let isSwipe;
	let classProp;
	let classPropWrap;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*swipe*/ 256) {
			 isSwipe = {
				up: safeGet(() => swipe.includes("up") || swipe.includes("all")),
				down: safeGet(() => swipe.includes("down") || swipe.includes("all")),
				left: safeGet(() => swipe.includes("left") || swipe.includes("all")),
				right: safeGet(() => swipe.includes("right") || swipe.includes("all"))
			};
		}

		if ($$self.$$.dirty & /*active*/ 2) {
			 $$invalidate(2, classProp = classnames("fancy-box-ghost", { active }));
		}

		 $$invalidate(3, classPropWrap = classnames("fancy-box", $$props.class));
	};

	$$props = exclude_internal_props($$props);

	return [
		ref,
		active,
		classProp,
		classPropWrap,
		slots,
		onClick,
		addSwipe,
		blockBody,
		swipe,
		disabled,
		extraLock,
		startPosition,
		$$slots,
		section_binding,
		$$scope
	];
}

class FancyBox extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-17mfy9g-style")) add_css$c();

		init(this, options, instance$L, create_fragment$L, safe_not_equal, {
			ref: 0,
			blockBody: 7,
			swipe: 8,
			disabled: 9,
			extraLock: 10,
			startPosition: 11
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FancyBox",
			options,
			id: create_fragment$L.name
		});
	}

	get ref() {
		throw new Error("<FancyBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ref(value) {
		throw new Error("<FancyBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get blockBody() {
		throw new Error("<FancyBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set blockBody(value) {
		throw new Error("<FancyBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get swipe() {
		throw new Error("<FancyBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set swipe(value) {
		throw new Error("<FancyBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<FancyBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<FancyBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get extraLock() {
		throw new Error("<FancyBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set extraLock(value) {
		throw new Error("<FancyBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get startPosition() {
		throw new Error("<FancyBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set startPosition(value) {
		throw new Error("<FancyBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Carousel.svelte generated by Svelte v3.24.0 */

const { Error: Error_1 } = globals;
const file$M = "src/components/Carousel.svelte";

function add_css$d() {
	var style = element("style");
	style.id = "svelte-b7wi34-style";
	style.textContent = ".carousel.rounded.svelte-b7wi34.svelte-b7wi34>.carousel-inner.svelte-b7wi34.svelte-b7wi34{border-radius:var(--border-radius-big)}.carousel.svelte-b7wi34.svelte-b7wi34.svelte-b7wi34,.carousel-inner.svelte-b7wi34.svelte-b7wi34.svelte-b7wi34,.carousel-inner.svelte-b7wi34.svelte-b7wi34>li.svelte-b7wi34.svelte-b7wi34{position:relative;-webkit-box-flex:0;-ms-flex:none;flex:none;display:-webkit-box;display:-ms-flexbox;display:flex;overflow:hidden;text-align:left;-ms-flex-item-align:stretch;align-self:stretch;-webkit-box-align:stretch;-ms-flex-align:stretch;align-items:stretch;-webkit-box-pack:stretch;-ms-flex-pack:stretch;justify-content:stretch}.carousel.dots.dotsBelow.filled.svelte-b7wi34.svelte-b7wi34.svelte-b7wi34{padding-bottom:40px}.carousel.filled.svelte-b7wi34.svelte-b7wi34>.carousel-inner.svelte-b7wi34.svelte-b7wi34{background-color:transparent}.carousel.dotsBelow.svelte-b7wi34.svelte-b7wi34 .carousel-dots.svelte-b7wi34.svelte-b7wi34{bottom:0}.carousel.dotsBelow.svelte-b7wi34.svelte-b7wi34 .carousel-dots li.svelte-b7wi34.svelte-b7wi34{background-color:rgba(var(--theme-bg-color-opposite))}.carousel.stretch.svelte-b7wi34>.carousel-inner.svelte-b7wi34>.fluid.svelte-b7wi34{-webkit-box-flex:0;-ms-flex:none;flex:none;width:100%}.carousel.auto.svelte-b7wi34>.carousel-inner.svelte-b7wi34>.fluid.svelte-b7wi34{width:auto}.carousel.svelte-b7wi34.svelte-b7wi34.svelte-b7wi34{width:100%}.carousel.svelte-b7wi34.svelte-b7wi34>.carousel-inner.svelte-b7wi34.svelte-b7wi34{width:100%;overflow-y:hidden;overflow-x:scroll;background-color:rgba(var(--theme-bg-color-opposite), .04)}.carousel-dots.svelte-b7wi34.svelte-b7wi34.svelte-b7wi34{position:absolute;left:0;bottom:10px;width:100%;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;justify-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;pointer-events:none}.carousel-dots.svelte-b7wi34.svelte-b7wi34 li.svelte-b7wi34.svelte-b7wi34{position:relative;width:8px;height:8px;margin:5px;border-radius:50%;overflow:hidden;-webkit-box-shadow:var(--shadow-primary);box-shadow:var(--shadow-primary);background-color:rgba(var(--color-light))}.carousel-dots.svelte-b7wi34.svelte-b7wi34 li.svelte-b7wi34.svelte-b7wi34:not(.active){opacity:.5}.carousel-dots.svelte-b7wi34.svelte-b7wi34 li.active.svelte-b7wi34.svelte-b7wi34{-webkit-transform:scale(1.5);transform:scale(1.5)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append_dev(document.head, style);
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[20] = list[i];
	child_ctx[22] = i;
	return child_ctx;
}

const get_default_slot_changes$2 = dirty => ({ item: dirty & /*items*/ 1 });

const get_default_slot_context$2 = ctx => ({
	item: /*item*/ ctx[23],
	index: /*index*/ ctx[25]
});

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[23] = list[i];
	child_ctx[25] = i;
	return child_ctx;
}

// (88:8) {#if items !== null}
function create_if_block_1$4(ctx) {
	let each_1_anchor;
	let current;
	let each_value_1 = /*items*/ ctx[0];
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*onClick, items, disableFancy, $$scope*/ 8261) {
				each_value_1 = /*items*/ ctx[0];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$4.name,
		type: "if",
		source: "(88:8) {#if items !== null}",
		ctx
	});

	return block;
}

// (94:28) <section slot="box" class="flex full-width">
function create_box_slot(ctx) {
	let section;
	let picture;
	let current;

	const picture_spread_levels = [
		{ key: "picture" },
		/*item*/ ctx[23],
		{
			alt: /*item*/ ctx[23].alt || "Фото слайду"
		}
	];

	let picture_props = {};

	for (let i = 0; i < picture_spread_levels.length; i += 1) {
		picture_props = assign(picture_props, picture_spread_levels[i]);
	}

	picture = new Picture({ props: picture_props, $$inline: true });

	const block = {
		c: function create() {
			section = element("section");
			create_component(picture.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { slot: true, class: true });
			var section_nodes = children(section);
			claim_component(picture.$$.fragment, section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(section, "slot", "box");
			attr_dev(section, "class", "flex full-width");
			add_location(section, file$M, 93, 28, 3160);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			mount_component(picture, section, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const picture_changes = (dirty & /*items*/ 1)
			? get_spread_update(picture_spread_levels, [
					picture_spread_levels[0],
					get_spread_object(/*item*/ ctx[23]),
					{
						alt: /*item*/ ctx[23].alt || "Фото слайду"
					}
				])
			: {};

			picture.$set(picture_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(picture.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(picture.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			destroy_component(picture);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_box_slot.name,
		type: "slot",
		source: "(94:28) <section slot=\\\"box\\\" class=\\\"flex full-width\\\">",
		ctx
	});

	return block;
}

// (92:24) <FancyBox disabled={disableFancy}>
function create_default_slot$A(ctx) {
	let picture;
	let t;
	let current;

	const picture_spread_levels = [
		{ key: "picture" },
		/*item*/ ctx[23],
		{
			alt: /*item*/ ctx[23].alt || "Фото слайду"
		}
	];

	let picture_props = {};

	for (let i = 0; i < picture_spread_levels.length; i += 1) {
		picture_props = assign(picture_props, picture_spread_levels[i]);
	}

	picture = new Picture({ props: picture_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(picture.$$.fragment);
			t = space();
		},
		l: function claim(nodes) {
			claim_component(picture.$$.fragment, nodes);
			t = claim_space(nodes);
		},
		m: function mount(target, anchor) {
			mount_component(picture, target, anchor);
			insert_dev(target, t, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const picture_changes = (dirty & /*items*/ 1)
			? get_spread_update(picture_spread_levels, [
					picture_spread_levels[0],
					get_spread_object(/*item*/ ctx[23]),
					{
						alt: /*item*/ ctx[23].alt || "Фото слайду"
					}
				])
			: {};

			picture.$set(picture_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(picture.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(picture.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(picture, detaching);
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$A.name,
		type: "slot",
		source: "(92:24) <FancyBox disabled={disableFancy}>",
		ctx
	});

	return block;
}

// (91:41)                          
function fallback_block$1(ctx) {
	let fancybox;
	let current;

	fancybox = new FancyBox({
			props: {
				disabled: /*disableFancy*/ ctx[2],
				$$slots: {
					default: [create_default_slot$A],
					box: [create_box_slot]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(fancybox.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(fancybox.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(fancybox, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const fancybox_changes = {};
			if (dirty & /*disableFancy*/ 4) fancybox_changes.disabled = /*disableFancy*/ ctx[2];

			if (dirty & /*$$scope, items*/ 8193) {
				fancybox_changes.$$scope = { dirty, ctx };
			}

			fancybox.$set(fancybox_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(fancybox.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(fancybox.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(fancybox, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block$1.name,
		type: "fallback",
		source: "(91:41)                          ",
		ctx
	});

	return block;
}

// (89:12) {#each items as item, index}
function create_each_block_1(ctx) {
	let li;
	let t;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], get_default_slot_context$2);
	const default_slot_or_fallback = default_slot || fallback_block$1(ctx);

	const block = {
		c: function create() {
			li = element("li");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true, role: true });
			var li_nodes = children(li);
			if (default_slot_or_fallback) default_slot_or_fallback.l(li_nodes);
			t = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(li, "class", "fluid svelte-b7wi34");
			attr_dev(li, "role", "button");
			add_location(li, file$M, 89, 16, 2860);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(li, null);
			}

			append_dev(li, t);
			current = true;

			if (!mounted) {
				dispose = listen_dev(
					li,
					"click",
					function () {
						if (is_function(/*onClick*/ ctx[6].bind(null, /*item*/ ctx[23], /*index*/ ctx[25]))) /*onClick*/ ctx[6].bind(null, /*item*/ ctx[23], /*index*/ ctx[25]).apply(this, arguments);
					},
					false,
					false,
					false
				);

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope, items*/ 8193) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[13], dirty, get_default_slot_changes$2, get_default_slot_context$2);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*disableFancy, items*/ 5) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(89:12) {#each items as item, index}",
		ctx
	});

	return block;
}

// (105:4) {#if dots && Array.isArray(items)}
function create_if_block$6(ctx) {
	let ul;
	let each_value = /*items*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(ul, "class", "carousel-dots svelte-b7wi34");
			add_location(ul, file$M, 105, 8, 3522);
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*activeDot, items*/ 9) {
				each_value = /*items*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$6.name,
		type: "if",
		source: "(105:4) {#if dots && Array.isArray(items)}",
		ctx
	});

	return block;
}

// (107:12) {#each items as _item, i}
function create_each_block(ctx) {
	let li;
	let li_class_value;

	const block = {
		c: function create() {
			li = element("li");
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			children(li).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(li, "class", li_class_value = "" + (null_to_empty(/*i*/ ctx[22] === /*activeDot*/ ctx[3] ? "active" : "") + " svelte-b7wi34"));
			add_location(li, file$M, 107, 16, 3603);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*activeDot*/ 8 && li_class_value !== (li_class_value = "" + (null_to_empty(/*i*/ ctx[22] === /*activeDot*/ ctx[3] ? "active" : "") + " svelte-b7wi34"))) {
				attr_dev(li, "class", li_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(107:12) {#each items as _item, i}",
		ctx
	});

	return block;
}

function create_fragment$M(ctx) {
	let section;
	let ul;
	let carousel_action;
	let t;
	let show_if = /*dots*/ ctx[1] && Array.isArray(/*items*/ ctx[0]);
	let section_class_value;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*items*/ ctx[0] !== null && create_if_block_1$4(ctx);
	let if_block1 = show_if && create_if_block$6(ctx);

	const block = {
		c: function create() {
			section = element("section");
			ul = element("ul");
			if (if_block0) if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { "aria-label": true, class: true });
			var section_nodes = children(section);
			ul = claim_element(section_nodes, "UL", { class: true });
			var ul_nodes = children(ul);
			if (if_block0) if_block0.l(ul_nodes);
			ul_nodes.forEach(detach_dev);
			t = claim_space(section_nodes);
			if (if_block1) if_block1.l(section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(ul, "class", "carousel-inner scroll-x-center svelte-b7wi34");
			add_location(ul, file$M, 83, 4, 2695);
			attr_dev(section, "aria-label", "carousel");
			attr_dev(section, "class", section_class_value = "" + (null_to_empty(/*classProp*/ ctx[4]) + " svelte-b7wi34"));
			add_location(section, file$M, 82, 0, 2641);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, ul);
			if (if_block0) if_block0.m(ul, null);
			append_dev(section, t);
			if (if_block1) if_block1.m(section, null);
			current = true;

			if (!mounted) {
				dispose = action_destroyer(carousel_action = /*carousel*/ ctx[5].call(null, ul));
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (/*items*/ ctx[0] !== null) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*items*/ 1) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1$4(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(ul, null);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (dirty & /*dots, items*/ 3) show_if = /*dots*/ ctx[1] && Array.isArray(/*items*/ ctx[0]);

			if (show_if) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$6(ctx);
					if_block1.c();
					if_block1.m(section, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (!current || dirty & /*classProp*/ 16 && section_class_value !== (section_class_value = "" + (null_to_empty(/*classProp*/ ctx[4]) + " svelte-b7wi34"))) {
				attr_dev(section, "class", section_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$M.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$M($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { items = [] } = $$props;
	let { dots = true } = $$props;
	let { dotsBelow = true } = $$props;
	let { rounded = true } = $$props;
	let { size = "stretch" } = $$props;
	let { initIndex = 0 } = $$props;
	let { disableFancy = false } = $$props;
	let { stopPropagation = undefined } = $$props;
	let parent = null;

	function carousel(node) {
		node.ontouchstart = e => stopPropagation && e.stopPropagation();
		node.ontouchmove = e => stopPropagation && e.stopPropagation();
		node.ontouchend = e => stopPropagation && e.stopPropagation();
		$$invalidate(14, parent = node);
		setScrollPosition(node, activeDot);
		node.addEventListener("scroll", onScroll);

		return {
			destroy: () => {
				node.removeEventListener("scroll", onScroll);
				node.ontouchstart = null;
				node.ontouchmove = null;
				node.ontouchend = null;
			}
		};
	}

	function onScroll(e) {
		try {
			getActiveDot(e.target);
		} catch(err) {
			console.warn("Carousel does not work.", err);
		}
	}

	function getActiveDot(parent) {
		const { scrollLeft, scrollWidth, offsetWidth } = parent;
		const dotAmount = Array.from(parent.children).length;
		const scrollX = scrollLeft / (scrollWidth - offsetWidth);
		const newActiveDot = Math.round(scrollX * (dotAmount - 1));
		if (activeDot !== newActiveDot && !isNaN(newActiveDot)) $$invalidate(3, activeDot = newActiveDot);
	}

	function setScrollPosition(parent, activeDot) {
		if (!parent) return;
		const { width } = parent.getBoundingClientRect();

		waitUntil(
			() => {
				parent.scrollLeft = Math.round(width * activeDot);

				if (parent.scrollLeft !== Math.round(width * activeDot)) {
					throw new Error("Not set.");
				}
			},
			{ interval: 50 }
		);
	}

	function onClick(item, index, e) {
		dispatch("click", { item, index, e });
		if (typeof item.onClick === "function") item.onClick(item, index, e);
	}

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Carousel", $$slots, ['default']);

	$$self.$set = $$new_props => {
		$$invalidate(19, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("items" in $$new_props) $$invalidate(0, items = $$new_props.items);
		if ("dots" in $$new_props) $$invalidate(1, dots = $$new_props.dots);
		if ("dotsBelow" in $$new_props) $$invalidate(7, dotsBelow = $$new_props.dotsBelow);
		if ("rounded" in $$new_props) $$invalidate(8, rounded = $$new_props.rounded);
		if ("size" in $$new_props) $$invalidate(9, size = $$new_props.size);
		if ("initIndex" in $$new_props) $$invalidate(10, initIndex = $$new_props.initIndex);
		if ("disableFancy" in $$new_props) $$invalidate(2, disableFancy = $$new_props.disableFancy);
		if ("stopPropagation" in $$new_props) $$invalidate(11, stopPropagation = $$new_props.stopPropagation);
		if ("$$scope" in $$new_props) $$invalidate(13, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		waitUntil,
		classnames,
		Picture,
		FancyBox,
		dispatch,
		items,
		dots,
		dotsBelow,
		rounded,
		size,
		initIndex,
		disableFancy,
		stopPropagation,
		parent,
		carousel,
		onScroll,
		getActiveDot,
		setScrollPosition,
		onClick,
		activeDot,
		classProp
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(19, $$props = assign(assign({}, $$props), $$new_props));
		if ("items" in $$props) $$invalidate(0, items = $$new_props.items);
		if ("dots" in $$props) $$invalidate(1, dots = $$new_props.dots);
		if ("dotsBelow" in $$props) $$invalidate(7, dotsBelow = $$new_props.dotsBelow);
		if ("rounded" in $$props) $$invalidate(8, rounded = $$new_props.rounded);
		if ("size" in $$props) $$invalidate(9, size = $$new_props.size);
		if ("initIndex" in $$props) $$invalidate(10, initIndex = $$new_props.initIndex);
		if ("disableFancy" in $$props) $$invalidate(2, disableFancy = $$new_props.disableFancy);
		if ("stopPropagation" in $$props) $$invalidate(11, stopPropagation = $$new_props.stopPropagation);
		if ("parent" in $$props) $$invalidate(14, parent = $$new_props.parent);
		if ("activeDot" in $$props) $$invalidate(3, activeDot = $$new_props.activeDot);
		if ("classProp" in $$props) $$invalidate(4, classProp = $$new_props.classProp);
	};

	let activeDot;
	let classProp;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*initIndex*/ 1024) {
			 $$invalidate(3, activeDot = initIndex);
		}

		 $$invalidate(4, classProp = classnames("carousel", size, $$props.class, {
			dots,
			dotsBelow,
			rounded,
			filled: items && items.length
		}));

		if ($$self.$$.dirty & /*parent, initIndex*/ 17408) {
			 setScrollPosition(parent, initIndex);
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		items,
		dots,
		disableFancy,
		activeDot,
		classProp,
		carousel,
		onClick,
		dotsBelow,
		rounded,
		size,
		initIndex,
		stopPropagation,
		$$slots,
		$$scope
	];
}

class Carousel extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-b7wi34-style")) add_css$d();

		init(this, options, instance$M, create_fragment$M, safe_not_equal, {
			items: 0,
			dots: 1,
			dotsBelow: 7,
			rounded: 8,
			size: 9,
			initIndex: 10,
			disableFancy: 2,
			stopPropagation: 11
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Carousel",
			options,
			id: create_fragment$M.name
		});
	}

	get items() {
		throw new Error_1("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set items(value) {
		throw new Error_1("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get dots() {
		throw new Error_1("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set dots(value) {
		throw new Error_1("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get dotsBelow() {
		throw new Error_1("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set dotsBelow(value) {
		throw new Error_1("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rounded() {
		throw new Error_1("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rounded(value) {
		throw new Error_1("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get size() {
		throw new Error_1("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error_1("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get initIndex() {
		throw new Error_1("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set initIndex(value) {
		throw new Error_1("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disableFancy() {
		throw new Error_1("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disableFancy(value) {
		throw new Error_1("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get stopPropagation() {
		throw new Error_1("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set stopPropagation(value) {
		throw new Error_1("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/EditArea.svelte generated by Svelte v3.24.0 */
const file$N = "src/components/EditArea.svelte";

function add_css$e() {
	var style = element("style");
	style.id = "svelte-1tyi7td-style";
	style.textContent = ".edit-area.svelte-1tyi7td{--color-bg:rgba(var(--theme-color-primary-opposite), .1);--color-lines:rgba(var(--theme-color-primary-opposite));padding:0 var(--screen-padding);background-image:-webkit-gradient(linear, left top, right top, color-stop(50%, var(--color-lines)), color-stop(0%, rgba(var(--color-black), 0))),\n                      -webkit-gradient(linear, left top, right top, color-stop(50%, var(--color-lines)), color-stop(0%, rgba(var(--color-black), 0)));background-image:linear-gradient(to right, var(--color-lines) 50%, rgba(var(--color-black), 0) 0%),\n                      linear-gradient(to right, var(--color-lines) 50%, rgba(var(--color-black), 0) 0%);background-color:var(--color-bg);background-position:calc(50% - 15px) top, calc(50% - 15px) bottom;background-size:20px 1px;background-repeat:repeat-x;overflow:hidden}.edit-area.svelte-1tyi7td:not(.off)>*{pointer-events:none}.edit-area.off.svelte-1tyi7td{background:none}.edit-area.svelte-1tyi7td:not(.off) *:not(.no-filter){-webkit-filter:grayscale(100%);filter:grayscale(100%)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRWRpdEFyZWEuc3ZlbHRlIiwic291cmNlcyI6WyJFZGl0QXJlYS5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tICdzdmVsdGUnXG4gICAgaW1wb3J0IHsgY2xhc3NuYW1lcyB9IGZyb20gJ0B1dGlscydcblxuICAgIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKClcblxuICAgIGltcG9ydCBCciBmcm9tICcuL0JyLnN2ZWx0ZSdcbiAgICBpbXBvcnQgSWNvbiBmcm9tICcuL0ljb24uc3ZlbHRlJ1xuICAgIGltcG9ydCBCdXR0b24gZnJvbSAnLi9CdXR0b24uc3ZlbHRlJ1xuXG4gICAgZXhwb3J0IGxldCBvZmYgPSBmYWxzZVxuXG4gICAgJDogY2xhc3NQcm9wID0gY2xhc3NuYW1lcygnZWRpdC1hcmVhJywgJCRwcm9wcy5jbGFzcywgeyBvZmYgfSlcblxuICAgIGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgICBpZiAoIW9mZikge1xuICAgICAgICAgICAgZGlzcGF0Y2goJ2NsaWNrJywgZSlcbiAgICAgICAgfVxuICAgIH1cbjwvc2NyaXB0PlxuXG48c2VjdGlvbiByb2xlPVwiYnV0dG9uXCIgY2xhc3M9e2NsYXNzUHJvcH0gb246Y2xpY2s9e29uQ2xpY2t9PlxuICAgIDxzbG90Pjwvc2xvdD5cblxuICAgIHsjaWYgIW9mZn1cbiAgICAgICAgPEJyIHNpemU9XCIzMFwiLz5cbiAgICAgICAgPEJ1dHRvbiBzaXplPVwic21hbGxcIiBpcz1cImluZm9cIiBjbGFzcz1cIm5vLWZpbHRlclwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJoMyBmb250LXNlY29uZGFyeSBmb250LXctNTAwIGZsZXggZmxleC1hbGlnbi1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICDQoNC10LTQsNCz0YPQstCw0YLQuFxuICAgICAgICAgICAgICAgIDxzPjwvcz5cbiAgICAgICAgICAgICAgICA8cz48L3M+XG4gICAgICAgICAgICAgICAgPEljb24gdHlwZT1cImVkaXRcIiBzaXplPVwic21hbGxcIiBpcz1cImxpZ2h0XCIvPlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgPEJyIHNpemU9XCI0MFwiLz5cbiAgICB7L2lmfVxuPC9zZWN0aW9uPlxuXG48c3R5bGU+XG4uZWRpdC1hcmVhIHtcbiAgICAtLWNvbG9yLWJnOiByZ2JhKHZhcigtLXRoZW1lLWNvbG9yLXByaW1hcnktb3Bwb3NpdGUpLCAuMSk7XG4gICAgLS1jb2xvci1saW5lczogcmdiYSh2YXIoLS10aGVtZS1jb2xvci1wcmltYXJ5LW9wcG9zaXRlKSk7XG5cbiAgICBwYWRkaW5nOiAwIHZhcigtLXNjcmVlbi1wYWRkaW5nKTtcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiAtd2Via2l0LWdyYWRpZW50KGxpbmVhciwgbGVmdCB0b3AsIHJpZ2h0IHRvcCwgY29sb3Itc3RvcCg1MCUsIHZhcigtLWNvbG9yLWxpbmVzKSksIGNvbG9yLXN0b3AoMCUsIHJnYmEodmFyKC0tY29sb3ItYmxhY2spLCAwKSkpLFxuICAgICAgICAgICAgICAgICAgICAgIC13ZWJraXQtZ3JhZGllbnQobGluZWFyLCBsZWZ0IHRvcCwgcmlnaHQgdG9wLCBjb2xvci1zdG9wKDUwJSwgdmFyKC0tY29sb3ItbGluZXMpKSwgY29sb3Itc3RvcCgwJSwgcmdiYSh2YXIoLS1jb2xvci1ibGFjayksIDApKSk7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCB2YXIoLS1jb2xvci1saW5lcykgNTAlLCByZ2JhKHZhcigtLWNvbG9yLWJsYWNrKSwgMCkgMCUpLFxuICAgICAgICAgICAgICAgICAgICAgIGxpbmVhci1ncmFkaWVudCh0byByaWdodCwgdmFyKC0tY29sb3ItbGluZXMpIDUwJSwgcmdiYSh2YXIoLS1jb2xvci1ibGFjayksIDApIDAlKTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jb2xvci1iZyk7XG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2FsYyg1MCUgLSAxNXB4KSB0b3AsIGNhbGMoNTAlIC0gMTVweCkgYm90dG9tO1xuICAgIGJhY2tncm91bmQtc2l6ZTogMjBweCAxcHg7XG4gICAgYmFja2dyb3VuZC1yZXBlYXQ6IHJlcGVhdC14O1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG59XG5cbi5lZGl0LWFyZWE6bm90KC5vZmYpID4gOmdsb2JhbCgqKSB7XG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG59XG5cbi5lZGl0LWFyZWEub2ZmIHtcbiAgICBiYWNrZ3JvdW5kOiBub25lO1xufVxuXG4uZWRpdC1hcmVhOm5vdCgub2ZmKSA6Z2xvYmFsKCo6bm90KC5uby1maWx0ZXIpKSB7XG4gICAgLXdlYmtpdC1maWx0ZXI6IGdyYXlzY2FsZSgxMDAlKTtcbiAgICAgICAgICAgIGZpbHRlcjogZ3JheXNjYWxlKDEwMCUpO1xufTwvc3R5bGU+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBdUNBLFVBQVUsZUFBQyxDQUFDLEFBQ1IsVUFBVSxDQUFFLDZDQUE2QyxDQUN6RCxhQUFhLENBQUUseUNBQXlDLENBRXhELE9BQU8sQ0FBRSxDQUFDLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQyxDQUNoQyxnQkFBZ0IsQ0FBRSxpQkFBaUIsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO3NCQUNoSSxpQkFBaUIsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUNqSixnQkFBZ0IsQ0FBRSxnQkFBZ0IsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksYUFBYSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxJQUFJLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7c0JBQ2xGLGdCQUFnQixFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxhQUFhLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FDbkcsZ0JBQWdCLENBQUUsSUFBSSxVQUFVLENBQUMsQ0FDakMsbUJBQW1CLENBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQ2xFLGVBQWUsQ0FBRSxJQUFJLENBQUMsR0FBRyxDQUN6QixpQkFBaUIsQ0FBRSxRQUFRLENBQzNCLFFBQVEsQ0FBRSxNQUFNLEFBQ3BCLENBQUMsQUFFRCx5QkFBVSxLQUFLLElBQUksQ0FBQyxDQUFXLENBQUMsQUFBRSxDQUFDLEFBQy9CLGNBQWMsQ0FBRSxJQUFJLEFBQ3hCLENBQUMsQUFFRCxVQUFVLElBQUksZUFBQyxDQUFDLEFBQ1osVUFBVSxDQUFFLElBQUksQUFDcEIsQ0FBQyxBQUVELHlCQUFVLEtBQUssSUFBSSxDQUFDLENBQUMsQUFBUSxpQkFBaUIsQUFBRSxDQUFDLEFBQzdDLGNBQWMsQ0FBRSxVQUFVLElBQUksQ0FBQyxDQUN2QixNQUFNLENBQUUsVUFBVSxJQUFJLENBQUMsQUFDbkMsQ0FBQyJ9 */";
	append_dev(document.head, style);
}

// (25:4) {#if !off}
function create_if_block$7(ctx) {
	let br0;
	let t0;
	let button;
	let t1;
	let br1;
	let current;
	br0 = new Br({ props: { size: "30" }, $$inline: true });

	button = new Button({
			props: {
				size: "small",
				is: "info",
				class: "no-filter",
				$$slots: { default: [create_default_slot$B] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	br1 = new Br({ props: { size: "40" }, $$inline: true });

	const block = {
		c: function create() {
			create_component(br0.$$.fragment);
			t0 = space();
			create_component(button.$$.fragment);
			t1 = space();
			create_component(br1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(br0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(button.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(br1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(br0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(button, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(br1, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(br0.$$.fragment, local);
			transition_in(button.$$.fragment, local);
			transition_in(br1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(br0.$$.fragment, local);
			transition_out(button.$$.fragment, local);
			transition_out(br1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(br0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(button, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(br1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$7.name,
		type: "if",
		source: "(25:4) {#if !off}",
		ctx
	});

	return block;
}

// (27:8) <Button size="small" is="info" class="no-filter">
function create_default_slot$B(ctx) {
	let span;
	let t0;
	let s0;
	let t1;
	let s1;
	let t2;
	let icon;
	let current;

	icon = new Icon({
			props: { type: "edit", size: "small", is: "light" },
			$$inline: true
		});

	const block = {
		c: function create() {
			span = element("span");
			t0 = text("Редагувати\n                ");
			s0 = element("s");
			t1 = space();
			s1 = element("s");
			t2 = space();
			create_component(icon.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t0 = claim_text(span_nodes, "Редагувати\n                ");
			s0 = claim_element(span_nodes, "S", {});
			children(s0).forEach(detach_dev);
			t1 = claim_space(span_nodes);
			s1 = claim_element(span_nodes, "S", {});
			children(s1).forEach(detach_dev);
			t2 = claim_space(span_nodes);
			claim_component(icon.$$.fragment, span_nodes);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(s0, file$N, 29, 16, 760);
			add_location(s1, file$N, 30, 16, 784);
			attr_dev(span, "class", "h3 font-secondary font-w-500 flex flex-align-center");
			add_location(span, file$N, 27, 12, 650);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t0);
			append_dev(span, s0);
			append_dev(span, t1);
			append_dev(span, s1);
			append_dev(span, t2);
			mount_component(icon, span, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			destroy_component(icon);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$B.name,
		type: "slot",
		source: "(27:8) <Button size=\\\"small\\\" is=\\\"info\\\" class=\\\"no-filter\\\">",
		ctx
	});

	return block;
}

function create_fragment$N(ctx) {
	let section;
	let t;
	let section_class_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
	let if_block = !/*off*/ ctx[0] && create_if_block$7(ctx);

	const block = {
		c: function create() {
			section = element("section");
			if (default_slot) default_slot.c();
			t = space();
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { role: true, class: true });
			var section_nodes = children(section);
			if (default_slot) default_slot.l(section_nodes);
			t = claim_space(section_nodes);
			if (if_block) if_block.l(section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(section, "role", "button");
			attr_dev(section, "class", section_class_value = "" + (null_to_empty(/*classProp*/ ctx[1]) + " svelte-1tyi7td"));
			add_location(section, file$N, 21, 0, 461);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);

			if (default_slot) {
				default_slot.m(section, null);
			}

			append_dev(section, t);
			if (if_block) if_block.m(section, null);
			current = true;

			if (!mounted) {
				dispose = listen_dev(section, "click", /*onClick*/ ctx[2], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 16) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[4], dirty, null, null);
				}
			}

			if (!/*off*/ ctx[0]) {
				if (if_block) {
					if (dirty & /*off*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$7(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(section, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (!current || dirty & /*classProp*/ 2 && section_class_value !== (section_class_value = "" + (null_to_empty(/*classProp*/ ctx[1]) + " svelte-1tyi7td"))) {
				attr_dev(section, "class", section_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			if (default_slot) default_slot.d(detaching);
			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$N.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$N($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { off = false } = $$props;

	function onClick(e) {
		if (!off) {
			dispatch("click", e);
		}
	}

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("EditArea", $$slots, ['default']);

	$$self.$set = $$new_props => {
		$$invalidate(6, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("off" in $$new_props) $$invalidate(0, off = $$new_props.off);
		if ("$$scope" in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		classnames,
		dispatch,
		Br,
		Icon,
		Button,
		off,
		onClick,
		classProp
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(6, $$props = assign(assign({}, $$props), $$new_props));
		if ("off" in $$props) $$invalidate(0, off = $$new_props.off);
		if ("classProp" in $$props) $$invalidate(1, classProp = $$new_props.classProp);
	};

	let classProp;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		 $$invalidate(1, classProp = classnames("edit-area", $$props.class, { off }));
	};

	$$props = exclude_internal_props($$props);
	return [off, classProp, onClick, $$slots, $$scope];
}

class EditArea extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-1tyi7td-style")) add_css$e();
		init(this, options, instance$N, create_fragment$N, safe_not_equal, { off: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "EditArea",
			options,
			id: create_fragment$N.name
		});
	}

	get off() {
		throw new Error("<EditArea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set off(value) {
		throw new Error("<EditArea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/EditCard.svelte generated by Svelte v3.24.0 */
const file$O = "src/components/EditCard.svelte";

// (28:12) <Button size="small" is="dark-border" on:click={onCancel}>
function create_default_slot_2(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Скасувати");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Скасувати");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "h3 font-secondary font-w-500 flex flex-align-center");
			add_location(span, file$O, 28, 16, 680);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(28:12) <Button size=\\\"small\\\" is=\\\"dark-border\\\" on:click={onCancel}>",
		ctx
	});

	return block;
}

// (38:12) <Button {form} size="small" type="submit" is="info">
function create_default_slot_1$1(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Зберегти");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Зберегти");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "h3 font-secondary font-w-500 flex flex-align-center");
			add_location(span, file$O, 38, 16, 1003);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$1.name,
		type: "slot",
		source: "(38:12) <Button {form} size=\\\"small\\\" type=\\\"submit\\\" is=\\\"info\\\">",
		ctx
	});

	return block;
}

// (19:0) <Card class={classProp}>
function create_default_slot$C(ctx) {
	let br0;
	let t0;
	let t1;
	let br1;
	let t2;
	let section;
	let div0;
	let button0;
	let t3;
	let s0;
	let t4;
	let s1;
	let t5;
	let s2;
	let t6;
	let div1;
	let button1;
	let t7;
	let br2;
	let current;
	br0 = new Br({ props: { size: "30" }, $$inline: true });
	const default_slot_template = /*$$slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
	br1 = new Br({ props: { size: "40" }, $$inline: true });

	button0 = new Button({
			props: {
				size: "small",
				is: "dark-border",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button0.$on("click", /*onCancel*/ ctx[2]);

	button1 = new Button({
			props: {
				form: /*form*/ ctx[0],
				size: "small",
				type: "submit",
				is: "info",
				$$slots: { default: [create_default_slot_1$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	br2 = new Br({ props: { size: "40" }, $$inline: true });

	const block = {
		c: function create() {
			create_component(br0.$$.fragment);
			t0 = space();
			if (default_slot) default_slot.c();
			t1 = space();
			create_component(br1.$$.fragment);
			t2 = space();
			section = element("section");
			div0 = element("div");
			create_component(button0.$$.fragment);
			t3 = space();
			s0 = element("s");
			t4 = space();
			s1 = element("s");
			t5 = space();
			s2 = element("s");
			t6 = space();
			div1 = element("div");
			create_component(button1.$$.fragment);
			t7 = space();
			create_component(br2.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			claim_component(br0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			if (default_slot) default_slot.l(nodes);
			t1 = claim_space(nodes);
			claim_component(br1.$$.fragment, nodes);
			t2 = claim_space(nodes);
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div0 = claim_element(section_nodes, "DIV", { style: true });
			var div0_nodes = children(div0);
			claim_component(button0.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t3 = claim_space(section_nodes);
			s0 = claim_element(section_nodes, "S", {});
			children(s0).forEach(detach_dev);
			t4 = claim_space(section_nodes);
			s1 = claim_element(section_nodes, "S", {});
			children(s1).forEach(detach_dev);
			t5 = claim_space(section_nodes);
			s2 = claim_element(section_nodes, "S", {});
			children(s2).forEach(detach_dev);
			t6 = claim_space(section_nodes);
			div1 = claim_element(section_nodes, "DIV", { style: true });
			var div1_nodes = children(div1);
			claim_component(button1.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			t7 = claim_space(nodes);
			claim_component(br2.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			set_style(div0, "flex", "1 1 50%");
			add_location(div0, file$O, 26, 8, 565);
			add_location(s0, file$O, 33, 8, 846);
			add_location(s1, file$O, 34, 8, 862);
			add_location(s2, file$O, 35, 8, 878);
			set_style(div1, "flex", "1 1 50%");
			add_location(div1, file$O, 36, 8, 894);
			attr_dev(section, "class", "flex flex-align-center");
			add_location(section, file$O, 25, 4, 516);
		},
		m: function mount(target, anchor) {
			mount_component(br0, target, anchor);
			insert_dev(target, t0, anchor);

			if (default_slot) {
				default_slot.m(target, anchor);
			}

			insert_dev(target, t1, anchor);
			mount_component(br1, target, anchor);
			insert_dev(target, t2, anchor);
			insert_dev(target, section, anchor);
			append_dev(section, div0);
			mount_component(button0, div0, null);
			append_dev(section, t3);
			append_dev(section, s0);
			append_dev(section, t4);
			append_dev(section, s1);
			append_dev(section, t5);
			append_dev(section, s2);
			append_dev(section, t6);
			append_dev(section, div1);
			mount_component(button1, div1, null);
			insert_dev(target, t7, anchor);
			mount_component(br2, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 16) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[4], dirty, null, null);
				}
			}

			const button0_changes = {};

			if (dirty & /*$$scope*/ 16) {
				button0_changes.$$scope = { dirty, ctx };
			}

			button0.$set(button0_changes);
			const button1_changes = {};
			if (dirty & /*form*/ 1) button1_changes.form = /*form*/ ctx[0];

			if (dirty & /*$$scope*/ 16) {
				button1_changes.$$scope = { dirty, ctx };
			}

			button1.$set(button1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(br0.$$.fragment, local);
			transition_in(default_slot, local);
			transition_in(br1.$$.fragment, local);
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			transition_in(br2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(br0.$$.fragment, local);
			transition_out(default_slot, local);
			transition_out(br1.$$.fragment, local);
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			transition_out(br2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(br0, detaching);
			if (detaching) detach_dev(t0);
			if (default_slot) default_slot.d(detaching);
			if (detaching) detach_dev(t1);
			destroy_component(br1, detaching);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(section);
			destroy_component(button0);
			destroy_component(button1);
			if (detaching) detach_dev(t7);
			destroy_component(br2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$C.name,
		type: "slot",
		source: "(19:0) <Card class={classProp}>",
		ctx
	});

	return block;
}

function create_fragment$O(ctx) {
	let card;
	let current;

	card = new Card({
			props: {
				class: /*classProp*/ ctx[1],
				$$slots: { default: [create_default_slot$C] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(card.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(card.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(card, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const card_changes = {};
			if (dirty & /*classProp*/ 2) card_changes.class = /*classProp*/ ctx[1];

			if (dirty & /*$$scope, form*/ 17) {
				card_changes.$$scope = { dirty, ctx };
			}

			card.$set(card_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(card, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$O.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$O($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { form } = $$props;

	function onCancel(e) {
		dispatch("cancel", e);
	}

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("EditCard", $$slots, ['default']);

	$$self.$set = $$new_props => {
		$$invalidate(6, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("form" in $$new_props) $$invalidate(0, form = $$new_props.form);
		if ("$$scope" in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		classnames,
		Br,
		Card,
		Button,
		dispatch,
		form,
		onCancel,
		classProp
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(6, $$props = assign(assign({}, $$props), $$new_props));
		if ("form" in $$props) $$invalidate(0, form = $$new_props.form);
		if ("classProp" in $$props) $$invalidate(1, classProp = $$new_props.classProp);
	};

	let classProp;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		 $$invalidate(1, classProp = classnames("edit-area-container container", $$props.class));
	};

	$$props = exclude_internal_props($$props);
	return [form, classProp, onCancel, $$slots, $$scope];
}

class EditCard extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$O, create_fragment$O, safe_not_equal, { form: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "EditCard",
			options,
			id: create_fragment$O.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*form*/ ctx[0] === undefined && !("form" in props)) {
			console.warn("<EditCard> was created without expected prop 'form'");
		}
	}

	get form() {
		throw new Error("<EditCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set form(value) {
		throw new Error("<EditCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/LazyToggle.svelte generated by Svelte v3.24.0 */
const file$P = "src/components/LazyToggle.svelte";

function add_css$f() {
	var style = element("style");
	style.id = "svelte-15bu51u-style";
	style.textContent = ".lazy-toggle.hidden.svelte-15bu51u{display:none}.lazy-toggle.invisible.svelte-15bu51u{visibility:hidden}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGF6eVRvZ2dsZS5zdmVsdGUiLCJzb3VyY2VzIjpbIkxhenlUb2dnbGUuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgY2xhc3NuYW1lcyB9IGZyb20gJ0B1dGlscydcblxuICAgIGV4cG9ydCBsZXQgYWN0aXZlID0gZmFsc2VcbiAgICBleHBvcnQgbGV0IHZpc2libGUgPSB0cnVlXG4gICAgZXhwb3J0IGxldCBtb3VudGVkID0gZmFsc2VcblxuICAgIGxldCBpc01vdW50ZWQgPSBtb3VudGVkXG5cbiAgICAkOiBjbGFzc1Byb3AgPSBjbGFzc25hbWVzKCdsYXp5LXRvZ2dsZSBmbGV4LTEnLCAkJHByb3BzLmNsYXNzLCB7IGhpZGRlbjogIWFjdGl2ZSwgaW52aXNpYmxlOiAhdmlzaWJsZSB9KVxuICAgICQ6IGlmIChhY3RpdmUgJiYgIWlzTW91bnRlZCkgaXNNb3VudGVkID0gdHJ1ZVxuPC9zY3JpcHQ+XG5cbjxzZWN0aW9uIGNsYXNzPXtjbGFzc1Byb3B9PlxuICAgIHsjaWYgaXNNb3VudGVkfVxuICAgICAgICA8c2xvdD48L3Nsb3Q+XG4gICAgey9pZn1cbjwvc2VjdGlvbj5cblxuPHN0eWxlPlxuLmxhenktdG9nZ2xlLmhpZGRlbiB7XG4gICAgZGlzcGxheTogbm9uZTtcbn1cblxuLmxhenktdG9nZ2xlLmludmlzaWJsZSB7XG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xufTwvc3R5bGU+Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9CQSxZQUFZLE9BQU8sZUFBQyxDQUFDLEFBQ2pCLE9BQU8sQ0FBRSxJQUFJLEFBQ2pCLENBQUMsQUFFRCxZQUFZLFVBQVUsZUFBQyxDQUFDLEFBQ3BCLFVBQVUsQ0FBRSxNQUFNLEFBQ3RCLENBQUMifQ== */";
	append_dev(document.head, style);
}

// (15:4) {#if isMounted}
function create_if_block$8(ctx) {
	let current;
	const default_slot_template = /*$$slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		l: function claim(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 32) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[5], dirty, null, null);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$8.name,
		type: "if",
		source: "(15:4) {#if isMounted}",
		ctx
	});

	return block;
}

function create_fragment$P(ctx) {
	let section;
	let section_class_value;
	let current;
	let if_block = /*isMounted*/ ctx[0] && create_if_block$8(ctx);

	const block = {
		c: function create() {
			section = element("section");
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			if (if_block) if_block.l(section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(section, "class", section_class_value = "" + (null_to_empty(/*classProp*/ ctx[1]) + " svelte-15bu51u"));
			add_location(section, file$P, 13, 0, 341);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			if (if_block) if_block.m(section, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*isMounted*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*isMounted*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$8(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(section, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (!current || dirty & /*classProp*/ 2 && section_class_value !== (section_class_value = "" + (null_to_empty(/*classProp*/ ctx[1]) + " svelte-15bu51u"))) {
				attr_dev(section, "class", section_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$P.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$P($$self, $$props, $$invalidate) {
	let { active = false } = $$props;
	let { visible = true } = $$props;
	let { mounted = false } = $$props;
	let isMounted = mounted;
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("LazyToggle", $$slots, ['default']);

	$$self.$set = $$new_props => {
		$$invalidate(7, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("active" in $$new_props) $$invalidate(2, active = $$new_props.active);
		if ("visible" in $$new_props) $$invalidate(3, visible = $$new_props.visible);
		if ("mounted" in $$new_props) $$invalidate(4, mounted = $$new_props.mounted);
		if ("$$scope" in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		classnames,
		active,
		visible,
		mounted,
		isMounted,
		classProp
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(7, $$props = assign(assign({}, $$props), $$new_props));
		if ("active" in $$props) $$invalidate(2, active = $$new_props.active);
		if ("visible" in $$props) $$invalidate(3, visible = $$new_props.visible);
		if ("mounted" in $$props) $$invalidate(4, mounted = $$new_props.mounted);
		if ("isMounted" in $$props) $$invalidate(0, isMounted = $$new_props.isMounted);
		if ("classProp" in $$props) $$invalidate(1, classProp = $$new_props.classProp);
	};

	let classProp;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		 $$invalidate(1, classProp = classnames("lazy-toggle flex-1", $$props.class, { hidden: !active, invisible: !visible }));

		if ($$self.$$.dirty & /*active, isMounted*/ 5) {
			 if (active && !isMounted) $$invalidate(0, isMounted = true);
		}
	};

	$$props = exclude_internal_props($$props);
	return [isMounted, classProp, active, visible, mounted, $$scope, $$slots];
}

class LazyToggle extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-15bu51u-style")) add_css$f();
		init(this, options, instance$P, create_fragment$P, safe_not_equal, { active: 2, visible: 3, mounted: 4 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "LazyToggle",
			options,
			id: create_fragment$P.name
		});
	}

	get active() {
		throw new Error("<LazyToggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set active(value) {
		throw new Error("<LazyToggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get visible() {
		throw new Error("<LazyToggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set visible(value) {
		throw new Error("<LazyToggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get mounted() {
		throw new Error("<LazyToggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set mounted(value) {
		throw new Error("<LazyToggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/loader/Text.svelte generated by Svelte v3.24.0 */

const file$Q = "src/components/loader/Text.svelte";

function create_fragment$Q(ctx) {
	let rect;

	const block = {
		c: function create() {
			rect = svg_element("rect");
			this.h();
		},
		l: function claim(nodes) {
			rect = claim_element(
				nodes,
				"rect",
				{
					x: true,
					y: true,
					rx: true,
					ry: true,
					width: true,
					height: true
				},
				1
			);

			children(rect).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(rect, "x", "0");
			attr_dev(rect, "y", "10%");
			attr_dev(rect, "rx", "3");
			attr_dev(rect, "ry", "3");
			attr_dev(rect, "width", "100%");
			attr_dev(rect, "height", "80%");
			add_location(rect, file$Q, 0, 0, 0);
		},
		m: function mount(target, anchor) {
			insert_dev(target, rect, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(rect);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$Q.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$Q($$self, $$props) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Text> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Text", $$slots, []);
	return [];
}

class Text extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$Q, create_fragment$Q, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Text",
			options,
			id: create_fragment$Q.name
		});
	}
}

/* src/components/loader/Circle.svelte generated by Svelte v3.24.0 */

const file$R = "src/components/loader/Circle.svelte";

function create_fragment$R(ctx) {
	let circle;

	const block = {
		c: function create() {
			circle = svg_element("circle");
			this.h();
		},
		l: function claim(nodes) {
			circle = claim_element(nodes, "circle", { cx: true, cy: true, r: true }, 1);
			children(circle).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(circle, "cx", "50%");
			attr_dev(circle, "cy", "50%");
			attr_dev(circle, "r", "50%");
			add_location(circle, file$R, 0, 0, 0);
		},
		m: function mount(target, anchor) {
			insert_dev(target, circle, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(circle);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$R.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$R($$self, $$props) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Circle> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Circle", $$slots, []);
	return [];
}

class Circle extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$R, create_fragment$R, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Circle",
			options,
			id: create_fragment$R.name
		});
	}
}

/* src/components/loader/Loader.svelte generated by Svelte v3.24.0 */

const { document: document_1$2 } = globals;
const file$S = "src/components/loader/Loader.svelte";

function add_css$g() {
	var style = element("style");
	style.id = "svelte-13ssox4-style";
	style.textContent = ".loader.svelte-13ssox4.svelte-13ssox4{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;-ms-flex-item-align:stretch;align-self:stretch;-webkit-transform:translateZ(0);transform:translateZ(0)}.loader.svelte-13ssox4 svg.svelte-13ssox4{-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;-ms-flex-item-align:stretch;align-self:stretch;-webkit-transform:translateZ(0);transform:translateZ(0)}.loader.absolute.svelte-13ssox4.svelte-13ssox4{position:absolute;top:0;left:0;right:0;bottom:0}.loader.border.svelte-13ssox4.svelte-13ssox4{outline-width:1px;outline-style:solid}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9hZGVyLnN2ZWx0ZSIsInNvdXJjZXMiOlsiTG9hZGVyLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICAgIC8vIEhvdyB0byBtYWtlIGEgY3VzdG9tIGxvYWRlcj9cbiAgICAvLyBTZWUgaGVyZSBmb3IgZ2VuZXJhdGluZzogaHR0cHM6Ly9kYW5pbG93b3ouY29tL2NyZWF0ZS1jb250ZW50LWxvYWRlci9cbiAgICBcbiAgICBpbXBvcnQgeyBvbk1vdW50IH0gZnJvbSAnc3ZlbHRlJ1xuICAgIGltcG9ydCB7IGNsYXNzbmFtZXMsIHV1aWQgfSBmcm9tICdAdXRpbHMnXG4gICAgaW1wb3J0IFRleHQgZnJvbSAnLi9UZXh0LnN2ZWx0ZSdcbiAgICBpbXBvcnQgQ2lyY2xlIGZyb20gJy4vQ2lyY2xlLnN2ZWx0ZSdcblxuICAgIGV4cG9ydCBsZXQgd2lkdGggPSAnMTAwJScgXG4gICAgZXhwb3J0IGxldCBoZWlnaHQgPSAnMTAwJSdcbiAgICBleHBvcnQgbGV0IGxpZ2h0ID0gJyM5OTk5OTknO1xuICAgIGV4cG9ydCBsZXQgZGFyayA9ICcjNTU1NTU1JztcbiAgICBleHBvcnQgbGV0IG9wYWNpdHkgPSAuMjtcbiAgICBleHBvcnQgbGV0IGJvcmRlciA9IGZhbHNlO1xuICAgIGV4cG9ydCBsZXQgYWJzb2x1dGUgPSBmYWxzZTtcbiAgICBleHBvcnQgbGV0IHR5cGUgPSB1bmRlZmluZWQ7IC8vIGgxLCBoMiwgaDMsIGg0LCBoNSwgaDYsIHAsIHByZSwgYXZhdGFyXG5cbiAgICBjb25zdCB1aWQgPSB1dWlkKClcblxuICAgIGxldCBoVHlwZXMgPSB7XG4gICAgICAgIHA6IDIxLFxuICAgICAgICBoMTogMzUsXG4gICAgICAgIGgyOiAyOSxcbiAgICAgICAgaDM6IDI2LFxuICAgICAgICBoNDogMjEsXG4gICAgICAgIGg1OiAyMSxcbiAgICAgICAgaDY6IDIxLFxuICAgICAgICBwcmU6IDIxLFxuICAgIH1cblxuICAgIG9uTW91bnQoKCkgPT4ge1xuICAgICAgICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuYm9keSk7XG4gICAgICAgIGNvbnN0IGxoID0gTnVtYmVyLnBhcnNlSW50KHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2xpbmUtaGVpZ2h0JykpXG4gICAgICAgIGNvbnN0IGJhbGFuY2UgPSAwXG5cbiAgICAgICAgaFR5cGVzID0ge1xuICAgICAgICAgICAgcDogbGggKiAxLjE1ICsgYmFsYW5jZSxcbiAgICAgICAgICAgIGgxOiBsaCAqIDEuODUgKyBiYWxhbmNlLFxuICAgICAgICAgICAgaDI6IGxoICogMS40ICsgYmFsYW5jZSxcbiAgICAgICAgICAgIGgzOiBsaCAqIDEuMyArIGJhbGFuY2UsXG4gICAgICAgICAgICBoNDogbGggKiAxLjE1ICsgYmFsYW5jZSxcbiAgICAgICAgICAgIGg1OiBsaCAqIDEuMTUgKyBiYWxhbmNlLFxuICAgICAgICAgICAgaDY6IGxoICogMS4xNSArIGJhbGFuY2UsXG4gICAgICAgICAgICBwcmU6IGxoICogMS4xNSArIGJhbGFuY2UsXG4gICAgICAgIH1cbiAgICB9KVxuXG4gICAgJDogYXJlYVdpZHRoID0gd2lkdGgucmVwbGFjZSgnJScsICcnKVxuICAgICQ6IGFyZWFIZWlnaHQgPSBoVHlwZXNbdHlwZV0gfHwgaGVpZ2h0XG4gICAgJDogY2xhc3NQcm9wID0gY2xhc3NuYW1lcygnbG9hZGVyJywgeyBib3JkZXIsIGFic29sdXRlIH0pXG48L3NjcmlwdD5cblxuPHNlY3Rpb24gXG4gICAgY2xhc3M9e2NsYXNzUHJvcH1cbiAgICBzdHlsZT17YG9wYWNpdHk6ICR7b3BhY2l0eX07IG91dGxpbmUtY29sb3I6ICR7bGlnaHR9O2B9XG4+XG4gICAgPHN2Z1xuICAgICAgICByb2xlPVwiaW1nXCJcbiAgICAgICAgd2lkdGg9XCIxMDAlXCJcbiAgICAgICAgaGVpZ2h0PXthcmVhSGVpZ2h0fVxuICAgICAgICBhcmlhLWxhYmVsbGVkYnk9XCJsb2FkaW5nLWFyaWFcIlxuICAgICAgICB2aWV3Qm94PXtgMCAwICR7YXJlYVdpZHRofSAxMDBgfVxuICAgICAgICBwcmVzZXJ2ZUFzcGVjdFJhdGlvPVwibm9uZVwiXG4gICAgPlxuICAgICAgICA8dGl0bGUgaWQ9XCJsb2FkaW5nLWFyaWFcIj5Mb2FkaW5nLi4uPC90aXRsZT5cbiAgICAgICAgPHJlY3RcbiAgICAgICAgICAgIHg9XCIwXCJcbiAgICAgICAgICAgIHk9XCIwXCJcbiAgICAgICAgICAgIHdpZHRoPVwiMTAwJVwiXG4gICAgICAgICAgICBoZWlnaHQ9XCIxMDAlXCJcbiAgICAgICAgICAgIGNsaXAtcGF0aD17YHVybCgjY2xpcC1wYXRoLSR7dWlkfSlgfVxuICAgICAgICAgICAgc3R5bGU9J2ZpbGw6IHVybChcIiNsb2FkZXItZmlsbFwiKTsnXG4gICAgICAgID48L3JlY3Q+XG4gICAgICAgIDxkZWZzPlxuICAgICAgICAgICAgPGNsaXBQYXRoIGlkPXtgY2xpcC1wYXRoLSR7dWlkfWB9PlxuICAgICAgICAgICAgICAgIDxzbG90PlxuICAgICAgICAgICAgICAgICAgICB7I2lmICdhdmF0YXInLmluY2x1ZGVzKHR5cGUpfVxuICAgICAgICAgICAgICAgICAgICAgICAgPENpcmNsZS8+XG4gICAgICAgICAgICAgICAgICAgIHs6ZWxzZSBpZiAnaDEsaDIsaDMsaDQsaDUsaDYscCxwcmUnLmluY2x1ZGVzKHR5cGUpfVxuICAgICAgICAgICAgICAgICAgICAgICAgPFRleHQvPlxuICAgICAgICAgICAgICAgICAgICB7OmVsc2V9XG4gICAgICAgICAgICAgICAgICAgICAgICA8cmVjdCB4PVwiMFwiIHk9XCIwXCIgcng9XCIzXCIgcnk9XCIzXCIgd2lkdGg9XCIxMDAlXCIgaGVpZ2h0PVwiMTAwJVwiIC8+XG4gICAgICAgICAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgICAgICAgICAgPC9zbG90PlxuICAgICAgICAgICAgPC9jbGlwUGF0aD5cbiAgICAgICAgICAgIDxsaW5lYXJHcmFkaWVudCBpZD1cImxvYWRlci1maWxsXCI+XG4gICAgICAgICAgICAgICAgPHN0b3BcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0PVwiMC41OTk5NjRcIlxuICAgICAgICAgICAgICAgICAgICBzdG9wLWNvbG9yPXtsaWdodH1cbiAgICAgICAgICAgICAgICAgICAgc3RvcC1vcGFjaXR5PVwiMVwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8YW5pbWF0ZVxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVOYW1lPVwib2Zmc2V0XCJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzPVwiLTI7IC0yOyAxXCJcbiAgICAgICAgICAgICAgICAgICAga2V5VGltZXM9XCIwOyAwLjI1OyAxXCJcbiAgICAgICAgICAgICAgICAgICAgZHVyPVwiMnNcIlxuICAgICAgICAgICAgICAgICAgICByZXBlYXRDb3VudD1cImluZGVmaW5pdGVcIlxuICAgICAgICAgICAgICAgICAgICA+PC9hbmltYXRlPlxuICAgICAgICAgICAgICAgIDwvc3RvcD5cbiAgICAgICAgICAgICAgICA8c3RvcFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ9XCIxLjU5OTk2XCJcbiAgICAgICAgICAgICAgICAgICAgc3RvcC1jb2xvcj17ZGFya31cbiAgICAgICAgICAgICAgICAgICAgc3RvcC1vcGFjaXR5PVwiMVwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8YW5pbWF0ZVxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVOYW1lPVwib2Zmc2V0XCJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzPVwiLTE7IC0xOyAyXCJcbiAgICAgICAgICAgICAgICAgICAga2V5VGltZXM9XCIwOyAwLjI1OyAxXCJcbiAgICAgICAgICAgICAgICAgICAgZHVyPVwiMnNcIlxuICAgICAgICAgICAgICAgICAgICByZXBlYXRDb3VudD1cImluZGVmaW5pdGVcIlxuICAgICAgICAgICAgICAgICAgICA+PC9hbmltYXRlPlxuICAgICAgICAgICAgICAgIDwvc3RvcD5cbiAgICAgICAgICAgICAgICA8c3RvcFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ9XCIyLjU5OTk2XCJcbiAgICAgICAgICAgICAgICAgICAgc3RvcC1jb2xvcj17bGlnaHR9XG4gICAgICAgICAgICAgICAgICAgIHN0b3Atb3BhY2l0eT1cIjFcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPGFuaW1hdGVcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlTmFtZT1cIm9mZnNldFwiXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlcz1cIjA7IDA7IDNcIlxuICAgICAgICAgICAgICAgICAgICBrZXlUaW1lcz1cIjA7IDAuMjU7IDFcIlxuICAgICAgICAgICAgICAgICAgICBkdXI9XCIyc1wiXG4gICAgICAgICAgICAgICAgICAgIHJlcGVhdENvdW50PVwiaW5kZWZpbml0ZVwiXG4gICAgICAgICAgICAgICAgICAgID48L2FuaW1hdGU+XG4gICAgICAgICAgICAgICAgPC9zdG9wPlxuICAgICAgICAgICAgPC9saW5lYXJHcmFkaWVudD5cbiAgICAgICAgPC9kZWZzPlxuICAgIDwvc3ZnPlxuPC9zZWN0aW9uPlxuXG48c3R5bGU+XG4ubG9hZGVyIHtcbiAgICBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgICBkaXNwbGF5OiAtbXMtZmxleGJveDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIC13ZWJraXQtYm94LWZsZXg6IDE7XG4gICAgICAgIC1tcy1mbGV4OiAxIDEgYXV0bztcbiAgICAgICAgICAgIGZsZXg6IDEgMSBhdXRvO1xuICAgIC1tcy1mbGV4LWl0ZW0tYWxpZ246IHN0cmV0Y2g7XG4gICAgICAgIGFsaWduLXNlbGY6IHN0cmV0Y2g7XG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XG59XG5cbi5sb2FkZXIgc3ZnIHtcbiAgICAtd2Via2l0LWJveC1mbGV4OiAxO1xuICAgICAgICAtbXMtZmxleDogMSAxIGF1dG87XG4gICAgICAgICAgICBmbGV4OiAxIDEgYXV0bztcbiAgICAtbXMtZmxleC1pdGVtLWFsaWduOiBzdHJldGNoO1xuICAgICAgICBhbGlnbi1zZWxmOiBzdHJldGNoO1xuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVaKDApO1xuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVaKDApO1xufVxuXG4ubG9hZGVyLmFic29sdXRlIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgcmlnaHQ6IDA7XG4gICAgYm90dG9tOiAwO1xufVxuXG4ubG9hZGVyLmJvcmRlciB7XG4gICAgb3V0bGluZS13aWR0aDogMXB4O1xuICAgIG91dGxpbmUtc3R5bGU6IHNvbGlkO1xufTwvc3R5bGU+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBb0lBLE9BQU8sOEJBQUMsQ0FBQyxBQUNMLE9BQU8sQ0FBRSxXQUFXLENBQ3BCLE9BQU8sQ0FBRSxXQUFXLENBQ3BCLE9BQU8sQ0FBRSxJQUFJLENBQ2IsZ0JBQWdCLENBQUUsQ0FBQyxDQUNmLFFBQVEsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDZCxJQUFJLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ3RCLG1CQUFtQixDQUFFLE9BQU8sQ0FDeEIsVUFBVSxDQUFFLE9BQU8sQ0FDdkIsaUJBQWlCLENBQUUsV0FBVyxDQUFDLENBQUMsQ0FDeEIsU0FBUyxDQUFFLFdBQVcsQ0FBQyxDQUFDLEFBQ3BDLENBQUMsQUFFRCxzQkFBTyxDQUFDLEdBQUcsZUFBQyxDQUFDLEFBQ1QsZ0JBQWdCLENBQUUsQ0FBQyxDQUNmLFFBQVEsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDZCxJQUFJLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ3RCLG1CQUFtQixDQUFFLE9BQU8sQ0FDeEIsVUFBVSxDQUFFLE9BQU8sQ0FDdkIsaUJBQWlCLENBQUUsV0FBVyxDQUFDLENBQUMsQ0FDeEIsU0FBUyxDQUFFLFdBQVcsQ0FBQyxDQUFDLEFBQ3BDLENBQUMsQUFFRCxPQUFPLFNBQVMsOEJBQUMsQ0FBQyxBQUNkLFFBQVEsQ0FBRSxRQUFRLENBQ2xCLEdBQUcsQ0FBRSxDQUFDLENBQ04sSUFBSSxDQUFFLENBQUMsQ0FDUCxLQUFLLENBQUUsQ0FBQyxDQUNSLE1BQU0sQ0FBRSxDQUFDLEFBQ2IsQ0FBQyxBQUVELE9BQU8sT0FBTyw4QkFBQyxDQUFDLEFBQ1osYUFBYSxDQUFFLEdBQUcsQ0FDbEIsYUFBYSxDQUFFLEtBQUssQUFDeEIsQ0FBQyJ9 */";
	append_dev(document_1$2.head, style);
}

// (82:20) {:else}
function create_else_block$3(ctx) {
	let rect;

	const block = {
		c: function create() {
			rect = svg_element("rect");
			this.h();
		},
		l: function claim(nodes) {
			rect = claim_element(
				nodes,
				"rect",
				{
					x: true,
					y: true,
					rx: true,
					ry: true,
					width: true,
					height: true
				},
				1
			);

			children(rect).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(rect, "x", "0");
			attr_dev(rect, "y", "0");
			attr_dev(rect, "rx", "3");
			attr_dev(rect, "ry", "3");
			attr_dev(rect, "width", "100%");
			attr_dev(rect, "height", "100%");
			add_location(rect, file$S, 82, 24, 2313);
		},
		m: function mount(target, anchor) {
			insert_dev(target, rect, anchor);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(rect);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$3.name,
		type: "else",
		source: "(82:20) {:else}",
		ctx
	});

	return block;
}

// (80:71) 
function create_if_block_1$5(ctx) {
	let text_1;
	let current;
	text_1 = new Text({ $$inline: true });

	const block = {
		c: function create() {
			create_component(text_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(text_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(text_1, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(text_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(text_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(text_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$5.name,
		type: "if",
		source: "(80:71) ",
		ctx
	});

	return block;
}

// (78:20) {#if 'avatar'.includes(type)}
function create_if_block$9(ctx) {
	let circle;
	let current;
	circle = new Circle({ $$inline: true });

	const block = {
		c: function create() {
			create_component(circle.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(circle.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(circle, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(circle.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(circle.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(circle, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$9.name,
		type: "if",
		source: "(78:20) {#if 'avatar'.includes(type)}",
		ctx
	});

	return block;
}

// (77:22)                      
function fallback_block$2(ctx) {
	let show_if;
	let show_if_1;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$9, create_if_block_1$5, create_else_block$3];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (dirty & /*type*/ 8) show_if = !!("avatar").includes(/*type*/ ctx[3]);
		if (show_if) return 0;
		if (dirty & /*type*/ 8) show_if_1 = !!("h1,h2,h3,h4,h5,h6,p,pre").includes(/*type*/ ctx[3]);
		if (show_if_1) return 1;
		return 2;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index !== previous_block_index) {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block$2.name,
		type: "fallback",
		source: "(77:22)                      ",
		ctx
	});

	return block;
}

function create_fragment$S(ctx) {
	let section;
	let svg;
	let title;
	let t;
	let rect;
	let rect_clip_path_value;
	let defs;
	let clipPath;
	let clipPath_id_value;
	let linearGradient;
	let stop0;
	let animate0;
	let stop1;
	let animate1;
	let stop2;
	let animate2;
	let svg_viewBox_value;
	let section_class_value;
	let section_style_value;
	let current;
	const default_slot_template = /*$$slots*/ ctx[13].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);
	const default_slot_or_fallback = default_slot || fallback_block$2(ctx);

	const block = {
		c: function create() {
			section = element("section");
			svg = svg_element("svg");
			title = svg_element("title");
			t = text("Loading...");
			rect = svg_element("rect");
			defs = svg_element("defs");
			clipPath = svg_element("clipPath");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			linearGradient = svg_element("linearGradient");
			stop0 = svg_element("stop");
			animate0 = svg_element("animate");
			stop1 = svg_element("stop");
			animate1 = svg_element("animate");
			stop2 = svg_element("stop");
			animate2 = svg_element("animate");
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true, style: true });
			var section_nodes = children(section);

			svg = claim_element(
				section_nodes,
				"svg",
				{
					role: true,
					width: true,
					height: true,
					"aria-labelledby": true,
					viewBox: true,
					preserveAspectRatio: true,
					class: true
				},
				1
			);

			var svg_nodes = children(svg);
			title = claim_element(svg_nodes, "title", { id: true }, 1);
			var title_nodes = children(title);
			t = claim_text(title_nodes, "Loading...");
			title_nodes.forEach(detach_dev);

			rect = claim_element(
				svg_nodes,
				"rect",
				{
					x: true,
					y: true,
					width: true,
					height: true,
					"clip-path": true,
					style: true
				},
				1
			);

			children(rect).forEach(detach_dev);
			defs = claim_element(svg_nodes, "defs", {}, 1);
			var defs_nodes = children(defs);
			clipPath = claim_element(defs_nodes, "clipPath", { id: true }, 1);
			var clipPath_nodes = children(clipPath);
			if (default_slot_or_fallback) default_slot_or_fallback.l(clipPath_nodes);
			clipPath_nodes.forEach(detach_dev);
			linearGradient = claim_element(defs_nodes, "linearGradient", { id: true }, 1);
			var linearGradient_nodes = children(linearGradient);

			stop0 = claim_element(
				linearGradient_nodes,
				"stop",
				{
					offset: true,
					"stop-color": true,
					"stop-opacity": true
				},
				1
			);

			var stop0_nodes = children(stop0);

			animate0 = claim_element(
				stop0_nodes,
				"animate",
				{
					attributeName: true,
					values: true,
					keyTimes: true,
					dur: true,
					repeatCount: true
				},
				1
			);

			children(animate0).forEach(detach_dev);
			stop0_nodes.forEach(detach_dev);

			stop1 = claim_element(
				linearGradient_nodes,
				"stop",
				{
					offset: true,
					"stop-color": true,
					"stop-opacity": true
				},
				1
			);

			var stop1_nodes = children(stop1);

			animate1 = claim_element(
				stop1_nodes,
				"animate",
				{
					attributeName: true,
					values: true,
					keyTimes: true,
					dur: true,
					repeatCount: true
				},
				1
			);

			children(animate1).forEach(detach_dev);
			stop1_nodes.forEach(detach_dev);

			stop2 = claim_element(
				linearGradient_nodes,
				"stop",
				{
					offset: true,
					"stop-color": true,
					"stop-opacity": true
				},
				1
			);

			var stop2_nodes = children(stop2);

			animate2 = claim_element(
				stop2_nodes,
				"animate",
				{
					attributeName: true,
					values: true,
					keyTimes: true,
					dur: true,
					repeatCount: true
				},
				1
			);

			children(animate2).forEach(detach_dev);
			stop2_nodes.forEach(detach_dev);
			linearGradient_nodes.forEach(detach_dev);
			defs_nodes.forEach(detach_dev);
			svg_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(title, "id", "loading-aria");
			add_location(title, file$S, 65, 8, 1730);
			attr_dev(rect, "x", "0");
			attr_dev(rect, "y", "0");
			attr_dev(rect, "width", "100%");
			attr_dev(rect, "height", "100%");
			attr_dev(rect, "clip-path", rect_clip_path_value = `url(#clip-path-${/*uid*/ ctx[7]})`);
			set_style(rect, "fill", "url(\"#loader-fill\")");
			add_location(rect, file$S, 66, 8, 1782);
			attr_dev(clipPath, "id", clipPath_id_value = `clip-path-${/*uid*/ ctx[7]}`);
			add_location(clipPath, file$S, 75, 12, 2015);
			attr_dev(animate0, "attributeName", "offset");
			attr_dev(animate0, "values", "-2; -2; 1");
			attr_dev(animate0, "keyTimes", "0; 0.25; 1");
			attr_dev(animate0, "dur", "2s");
			attr_dev(animate0, "repeatCount", "indefinite");
			add_location(animate0, file$S, 92, 20, 2669);
			attr_dev(stop0, "offset", "0.599964");
			attr_dev(stop0, "stop-color", /*light*/ ctx[0]);
			attr_dev(stop0, "stop-opacity", "1");
			add_location(stop0, file$S, 87, 16, 2511);
			attr_dev(animate1, "attributeName", "offset");
			attr_dev(animate1, "values", "-1; -1; 2");
			attr_dev(animate1, "keyTimes", "0; 0.25; 1");
			attr_dev(animate1, "dur", "2s");
			attr_dev(animate1, "repeatCount", "indefinite");
			add_location(animate1, file$S, 105, 20, 3104);
			attr_dev(stop1, "offset", "1.59996");
			attr_dev(stop1, "stop-color", /*dark*/ ctx[1]);
			attr_dev(stop1, "stop-opacity", "1");
			add_location(stop1, file$S, 100, 16, 2948);
			attr_dev(animate2, "attributeName", "offset");
			attr_dev(animate2, "values", "0; 0; 3");
			attr_dev(animate2, "keyTimes", "0; 0.25; 1");
			attr_dev(animate2, "dur", "2s");
			attr_dev(animate2, "repeatCount", "indefinite");
			add_location(animate2, file$S, 118, 20, 3540);
			attr_dev(stop2, "offset", "2.59996");
			attr_dev(stop2, "stop-color", /*light*/ ctx[0]);
			attr_dev(stop2, "stop-opacity", "1");
			add_location(stop2, file$S, 113, 16, 3383);
			attr_dev(linearGradient, "id", "loader-fill");
			add_location(linearGradient, file$S, 86, 12, 2461);
			add_location(defs, file$S, 74, 8, 1996);
			attr_dev(svg, "role", "img");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", /*areaHeight*/ ctx[5]);
			attr_dev(svg, "aria-labelledby", "loading-aria");
			attr_dev(svg, "viewBox", svg_viewBox_value = `0 0 ${/*areaWidth*/ ctx[4]} 100`);
			attr_dev(svg, "preserveAspectRatio", "none");
			attr_dev(svg, "class", "svelte-13ssox4");
			add_location(svg, file$S, 57, 4, 1528);
			attr_dev(section, "class", section_class_value = "" + (null_to_empty(/*classProp*/ ctx[6]) + " svelte-13ssox4"));
			attr_dev(section, "style", section_style_value = `opacity: ${/*opacity*/ ctx[2]}; outline-color: ${/*light*/ ctx[0]};`);
			add_location(section, file$S, 53, 0, 1430);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, svg);
			append_dev(svg, title);
			append_dev(title, t);
			append_dev(svg, rect);
			append_dev(svg, defs);
			append_dev(defs, clipPath);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(clipPath, null);
			}

			append_dev(defs, linearGradient);
			append_dev(linearGradient, stop0);
			append_dev(stop0, animate0);
			append_dev(linearGradient, stop1);
			append_dev(stop1, animate1);
			append_dev(linearGradient, stop2);
			append_dev(stop2, animate2);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 4096) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[12], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*type*/ 8) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (!current || dirty & /*light*/ 1) {
				attr_dev(stop0, "stop-color", /*light*/ ctx[0]);
			}

			if (!current || dirty & /*dark*/ 2) {
				attr_dev(stop1, "stop-color", /*dark*/ ctx[1]);
			}

			if (!current || dirty & /*light*/ 1) {
				attr_dev(stop2, "stop-color", /*light*/ ctx[0]);
			}

			if (!current || dirty & /*areaHeight*/ 32) {
				attr_dev(svg, "height", /*areaHeight*/ ctx[5]);
			}

			if (!current || dirty & /*areaWidth*/ 16 && svg_viewBox_value !== (svg_viewBox_value = `0 0 ${/*areaWidth*/ ctx[4]} 100`)) {
				attr_dev(svg, "viewBox", svg_viewBox_value);
			}

			if (!current || dirty & /*classProp*/ 64 && section_class_value !== (section_class_value = "" + (null_to_empty(/*classProp*/ ctx[6]) + " svelte-13ssox4"))) {
				attr_dev(section, "class", section_class_value);
			}

			if (!current || dirty & /*opacity, light*/ 5 && section_style_value !== (section_style_value = `opacity: ${/*opacity*/ ctx[2]}; outline-color: ${/*light*/ ctx[0]};`)) {
				attr_dev(section, "style", section_style_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$S.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$S($$self, $$props, $$invalidate) {
	let { width = "100%" } = $$props;
	let { height = "100%" } = $$props;
	let { light = "#999999" } = $$props;
	let { dark = "#555555" } = $$props;
	let { opacity = 0.2 } = $$props;
	let { border = false } = $$props;
	let { absolute = false } = $$props;
	let { type = undefined } = $$props; // h1, h2, h3, h4, h5, h6, p, pre, avatar
	const uid = uuidv4();

	let hTypes = {
		p: 21,
		h1: 35,
		h2: 29,
		h3: 26,
		h4: 21,
		h5: 21,
		h6: 21,
		pre: 21
	};

	onMount(() => {
		const style = getComputedStyle(document.body);
		const lh = Number.parseInt(style.getPropertyValue("line-height"));
		const balance = 0;

		$$invalidate(14, hTypes = {
			p: lh * 1.15 + balance,
			h1: lh * 1.85 + balance,
			h2: lh * 1.4 + balance,
			h3: lh * 1.3 + balance,
			h4: lh * 1.15 + balance,
			h5: lh * 1.15 + balance,
			h6: lh * 1.15 + balance,
			pre: lh * 1.15 + balance
		});
	});

	const writable_props = ["width", "height", "light", "dark", "opacity", "border", "absolute", "type"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Loader> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Loader", $$slots, ['default']);

	$$self.$set = $$props => {
		if ("width" in $$props) $$invalidate(8, width = $$props.width);
		if ("height" in $$props) $$invalidate(9, height = $$props.height);
		if ("light" in $$props) $$invalidate(0, light = $$props.light);
		if ("dark" in $$props) $$invalidate(1, dark = $$props.dark);
		if ("opacity" in $$props) $$invalidate(2, opacity = $$props.opacity);
		if ("border" in $$props) $$invalidate(10, border = $$props.border);
		if ("absolute" in $$props) $$invalidate(11, absolute = $$props.absolute);
		if ("type" in $$props) $$invalidate(3, type = $$props.type);
		if ("$$scope" in $$props) $$invalidate(12, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		onMount,
		classnames,
		uuid: uuidv4,
		Text,
		Circle,
		width,
		height,
		light,
		dark,
		opacity,
		border,
		absolute,
		type,
		uid,
		hTypes,
		areaWidth,
		areaHeight,
		classProp
	});

	$$self.$inject_state = $$props => {
		if ("width" in $$props) $$invalidate(8, width = $$props.width);
		if ("height" in $$props) $$invalidate(9, height = $$props.height);
		if ("light" in $$props) $$invalidate(0, light = $$props.light);
		if ("dark" in $$props) $$invalidate(1, dark = $$props.dark);
		if ("opacity" in $$props) $$invalidate(2, opacity = $$props.opacity);
		if ("border" in $$props) $$invalidate(10, border = $$props.border);
		if ("absolute" in $$props) $$invalidate(11, absolute = $$props.absolute);
		if ("type" in $$props) $$invalidate(3, type = $$props.type);
		if ("hTypes" in $$props) $$invalidate(14, hTypes = $$props.hTypes);
		if ("areaWidth" in $$props) $$invalidate(4, areaWidth = $$props.areaWidth);
		if ("areaHeight" in $$props) $$invalidate(5, areaHeight = $$props.areaHeight);
		if ("classProp" in $$props) $$invalidate(6, classProp = $$props.classProp);
	};

	let areaWidth;
	let areaHeight;
	let classProp;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*width*/ 256) {
			 $$invalidate(4, areaWidth = width.replace("%", ""));
		}

		if ($$self.$$.dirty & /*hTypes, type, height*/ 16904) {
			 $$invalidate(5, areaHeight = hTypes[type] || height);
		}

		if ($$self.$$.dirty & /*border, absolute*/ 3072) {
			 $$invalidate(6, classProp = classnames("loader", { border, absolute }));
		}
	};

	return [
		light,
		dark,
		opacity,
		type,
		areaWidth,
		areaHeight,
		classProp,
		uid,
		width,
		height,
		border,
		absolute,
		$$scope,
		$$slots
	];
}

class Loader extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document_1$2.getElementById("svelte-13ssox4-style")) add_css$g();

		init(this, options, instance$S, create_fragment$S, safe_not_equal, {
			width: 8,
			height: 9,
			light: 0,
			dark: 1,
			opacity: 2,
			border: 10,
			absolute: 11,
			type: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Loader",
			options,
			id: create_fragment$S.name
		});
	}

	get width() {
		throw new Error("<Loader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<Loader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<Loader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<Loader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get light() {
		throw new Error("<Loader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set light(value) {
		throw new Error("<Loader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get dark() {
		throw new Error("<Loader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set dark(value) {
		throw new Error("<Loader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get opacity() {
		throw new Error("<Loader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set opacity(value) {
		throw new Error("<Loader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get border() {
		throw new Error("<Loader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set border(value) {
		throw new Error("<Loader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get absolute() {
		throw new Error("<Loader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set absolute(value) {
		throw new Error("<Loader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get type() {
		throw new Error("<Loader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<Loader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/FieldErrors.svelte generated by Svelte v3.24.0 */
const file$T = "src/components/FieldErrors.svelte";
const get_after_slot_changes = dirty => ({});
const get_after_slot_context = ctx => ({});

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	return child_ctx;
}

const get_before_slot_changes = dirty => ({});
const get_before_slot_context = ctx => ({});

// (9:0) {#if list && list.length}
function create_if_block$a(ctx) {
	let t0;
	let ul;
	let ul_class_value;
	let t1;
	let current;
	const before_slot_template = /*$$slots*/ ctx[4].before;
	const before_slot = create_slot(before_slot_template, ctx, /*$$scope*/ ctx[3], get_before_slot_context);
	let each_value = /*list*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const after_slot_template = /*$$slots*/ ctx[4].after;
	const after_slot = create_slot(after_slot_template, ctx, /*$$scope*/ ctx[3], get_after_slot_context);

	const block = {
		c: function create() {
			if (before_slot) before_slot.c();
			t0 = space();
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t1 = space();
			if (after_slot) after_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			if (before_slot) before_slot.l(nodes);
			t0 = claim_space(nodes);
			ul = claim_element(nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			if (after_slot) after_slot.l(nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(ul, "class", ul_class_value = `font-primary font-w-500 h4 text-danger text-left ${/*$$props*/ ctx[1].class || ""}`);
			add_location(ul, file$T, 10, 4, 217);
		},
		m: function mount(target, anchor) {
			if (before_slot) {
				before_slot.m(target, anchor);
			}

			insert_dev(target, t0, anchor);
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			insert_dev(target, t1, anchor);

			if (after_slot) {
				after_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (before_slot) {
				if (before_slot.p && dirty & /*$$scope*/ 8) {
					update_slot(before_slot, before_slot_template, ctx, /*$$scope*/ ctx[3], dirty, get_before_slot_changes, get_before_slot_context);
				}
			}

			if (dirty & /*list*/ 1) {
				each_value = /*list*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (!current || dirty & /*$$props*/ 2 && ul_class_value !== (ul_class_value = `font-primary font-w-500 h4 text-danger text-left ${/*$$props*/ ctx[1].class || ""}`)) {
				attr_dev(ul, "class", ul_class_value);
			}

			if (after_slot) {
				if (after_slot.p && dirty & /*$$scope*/ 8) {
					update_slot(after_slot, after_slot_template, ctx, /*$$scope*/ ctx[3], dirty, get_after_slot_changes, get_after_slot_context);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(before_slot, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(after_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(before_slot, local);
			transition_out(after_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (before_slot) before_slot.d(detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t1);
			if (after_slot) after_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$a.name,
		type: "if",
		source: "(9:0) {#if list && list.length}",
		ctx
	});

	return block;
}

// (12:8) {#each list as item}
function create_each_block$1(ctx) {
	let li;
	let t0;
	let t1_value = /*item*/ ctx[5] + "";
	let t1;
	let li_intro;

	const block = {
		c: function create() {
			li = element("li");
			t0 = text("* ");
			t1 = text(t1_value);
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			t0 = claim_text(li_nodes, "* ");
			t1 = claim_text(li_nodes, t1_value);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(li, file$T, 12, 12, 345);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t0);
			append_dev(li, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*list*/ 1 && t1_value !== (t1_value = /*item*/ ctx[5] + "")) set_data_dev(t1, t1_value);
		},
		i: function intro(local) {
			if (!li_intro) {
				add_render_callback(() => {
					li_intro = create_in_transition(li, slide, {});
					li_intro.start();
				});
			}
		},
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(12:8) {#each list as item}",
		ctx
	});

	return block;
}

function create_fragment$T(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*list*/ ctx[0] && /*list*/ ctx[0].length && create_if_block$a(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*list*/ ctx[0] && /*list*/ ctx[0].length) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*list*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$a(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$T.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$T($$self, $$props, $$invalidate) {
	let { items } = $$props;
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("FieldErrors", $$slots, ['before','after']);

	$$self.$set = $$new_props => {
		$$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("items" in $$new_props) $$invalidate(2, items = $$new_props.items);
		if ("$$scope" in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({ slide, items, list });

	$$self.$inject_state = $$new_props => {
		$$invalidate(1, $$props = assign(assign({}, $$props), $$new_props));
		if ("items" in $$props) $$invalidate(2, items = $$new_props.items);
		if ("list" in $$props) $$invalidate(0, list = $$new_props.list);
	};

	let list;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*items*/ 4) {
			 $$invalidate(0, list = [].concat(items || []).slice(0, 1).filter(Boolean));
		}
	};

	$$props = exclude_internal_props($$props);
	return [list, $$props, items, $$scope, $$slots];
}

class FieldErrors extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$T, create_fragment$T, safe_not_equal, { items: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FieldErrors",
			options,
			id: create_fragment$T.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*items*/ ctx[2] === undefined && !("items" in props)) {
			console.warn("<FieldErrors> was created without expected prop 'items'");
		}
	}

	get items() {
		throw new Error("<FieldErrors>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set items(value) {
		throw new Error("<FieldErrors>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/fields/Input.svelte generated by Svelte v3.24.0 */
const file$U = "src/components/fields/Input.svelte";

function add_css$h() {
	var style = element("style");
	style.id = "svelte-1ckwvo6-style";
	style.textContent = ".inp.svelte-1ckwvo6.svelte-1ckwvo6{width:100%;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.inp.svelte-1ckwvo6 .inp-inner-wrap.svelte-1ckwvo6{position:relative;display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-item-align:stretch;align-self:stretch;-webkit-box-shadow:var(--shadow-field-inset);box-shadow:var(--shadow-field-inset);border-radius:var(--border-radius-small);background-color:rgba(var(--theme-input-bg-color))}.inp.svelte-1ckwvo6 .inp-inner.svelte-1ckwvo6{-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;color:inherit;overflow-y:auto;overflow-x:hidden;background-color:transparent;-webkit-overflow-scrolling:touch;min-width:var(--min-interactive-size);min-height:var(--min-interactive-size);border-radius:var(--border-radius-small)}.inp.disabled.svelte-1ckwvo6.svelte-1ckwvo6{opacity:.5;pointer-events:none}.inp.postIcon.svelte-1ckwvo6 .inp-inner.svelte-1ckwvo6{padding-right:var(--min-interactive-size)}.inp.svelte-1ckwvo6 .inp-inner.svelte-1ckwvo6:invalid,.inp.error.svelte-1ckwvo6 .inp-inner.svelte-1ckwvo6{-webkit-box-shadow:0 0 0 1px rgb(var(--color-danger));box-shadow:0 0 0 1px rgb(var(--color-danger));color:rgb(var(--color-danger))}.inp.svelte-1ckwvo6 .inp-inner.svelte-1ckwvo6:focus{-webkit-box-shadow:0 0 0 1px rgb(var(--color-info));box-shadow:0 0 0 1px rgb(var(--color-info));color:rgb(var(--color-info))}.inp .inp-inner:invalid+.inp-post-icon.svelte-1ckwvo6.svelte-1ckwvo6 .ico,.inp.error.svelte-1ckwvo6 .inp-post-icon.svelte-1ckwvo6 .ico{color:rgb(var(--color-danger)) !important}.inp .inp-inner:focus+.inp-post-icon.svelte-1ckwvo6.svelte-1ckwvo6 .ico{color:rgb(var(--color-info)) !important}.inp.svelte-1ckwvo6 .inp-post-icon-inner.svelte-1ckwvo6{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;width:var(--min-interactive-size)}.inp.svelte-1ckwvo6 .inp-post-icon.svelte-1ckwvo6{position:absolute;top:0;right:0;height:100%;width:var(--min-interactive-size);-webkit-box-flex:0;-ms-flex:none;flex:none;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;overflow:hidden}.inp.svelte-1ckwvo6 .inp-inner.svelte-1ckwvo6::-webkit-input-placeholder{color:rgba(var(--theme-color-primary-opposite));opacity:.2}.inp.svelte-1ckwvo6 .inp-inner.svelte-1ckwvo6::-moz-placeholder{color:rgba(var(--theme-color-primary-opposite));opacity:.2}.inp.svelte-1ckwvo6 .inp-inner.svelte-1ckwvo6:-ms-input-placeholder{color:rgba(var(--theme-color-primary-opposite));opacity:.2}.inp.svelte-1ckwvo6 .inp-inner.svelte-1ckwvo6::-ms-input-placeholder{color:rgba(var(--theme-color-primary-opposite));opacity:.2}.inp.svelte-1ckwvo6 .inp-inner.svelte-1ckwvo6::placeholder{color:rgba(var(--theme-color-primary-opposite));opacity:.2}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append_dev(document.head, style);
}

const get_post_icon_slot_changes = dirty => ({});
const get_post_icon_slot_context = ctx => ({});

// (95:4) {#if titleProp}
function create_if_block_2$1(ctx) {
	let label_1;
	let t0;
	let t1;
	let br;
	let current;
	br = new Br({ props: { size: "10" }, $$inline: true });

	const block = {
		c: function create() {
			label_1 = element("label");
			t0 = text(/*titleProp*/ ctx[19]);
			t1 = space();
			create_component(br.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			label_1 = claim_element(nodes, "LABEL", { for: true, class: true });
			var label_1_nodes = children(label_1);
			t0 = claim_text(label_1_nodes, /*titleProp*/ ctx[19]);
			t1 = claim_space(label_1_nodes);
			claim_component(br.$$.fragment, label_1_nodes);
			label_1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(label_1, "for", /*idProp*/ ctx[17]);
			attr_dev(label_1, "class", "inp-label h2 font-secondary font-w-600 text-left");
			add_location(label_1, file$U, 95, 8, 3678);
		},
		m: function mount(target, anchor) {
			insert_dev(target, label_1, anchor);
			append_dev(label_1, t0);
			append_dev(label_1, t1);
			mount_component(br, label_1, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (!current || dirty[0] & /*titleProp*/ 524288) set_data_dev(t0, /*titleProp*/ ctx[19]);

			if (!current || dirty[0] & /*idProp*/ 131072) {
				attr_dev(label_1, "for", /*idProp*/ ctx[17]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(br.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(br.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(label_1);
			destroy_component(br);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$1.name,
		type: "if",
		source: "(95:4) {#if titleProp}",
		ctx
	});

	return block;
}

// (131:8) {:else}
function create_else_block$4(ctx) {
	let input;
	let mounted;
	let dispose;

	let input_levels = [
		{ min: /*min*/ ctx[3] },
		{ max: /*max*/ ctx[4] },
		{ name: /*name*/ ctx[1] },
		{ list: /*list*/ ctx[5] },
		{ form: /*form*/ ctx[6] },
		{ align: /*align*/ ctx[10] },
		{ readOnly: /*readonly*/ ctx[12] },
		{ disabled: /*disabled*/ ctx[8] },
		{ required: /*required*/ ctx[13] },
		{ minlength: /*minlength*/ ctx[14] },
		{ maxlength: /*maxlength*/ ctx[7] },
		{ placeholder: /*placeholder*/ ctx[15] },
		{ id: /*idProp*/ ctx[17] },
		{ class: "inp-inner" },
		{ title: /*titleProp*/ ctx[19] },
		{ style: /*styleProp*/ ctx[21] },
		{ pattern: /*patternProp*/ ctx[22] },
		{ "aria-label": /*ariaLabelProp*/ ctx[20] },
		{
			autocomplete: /*autocompleteProp*/ ctx[24]
		},
		{ type: /*typeProp*/ ctx[18] }
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	const block = {
		c: function create() {
			input = element("input");
			this.h();
		},
		l: function claim(nodes) {
			input = claim_element(nodes, "INPUT", {
				min: true,
				max: true,
				name: true,
				list: true,
				form: true,
				align: true,
				readonly: true,
				disabled: true,
				required: true,
				minlength: true,
				maxlength: true,
				placeholder: true,
				id: true,
				class: true,
				title: true,
				style: true,
				pattern: true,
				"aria-label": true,
				autocomplete: true
			});

			this.h();
		},
		h: function hydrate() {
			set_attributes(input, input_data);
			toggle_class(input, "svelte-1ckwvo6", true);
			add_location(input, file$U, 131, 12, 4932);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			set_input_value(input, /*value*/ ctx[0]);

			if (!mounted) {
				dispose = [
					listen_dev(input, "input", /*input_input_handler*/ ctx[40]),
					listen_dev(input, "input", /*onInput*/ ctx[26], false, false, false),
					listen_dev(input, "change", /*onChange*/ ctx[27], false, false, false),
					listen_dev(input, "blur", /*blur_handler_1*/ ctx[41], false, false, false),
					listen_dev(input, "focus", /*focus_handler_1*/ ctx[42], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				dirty[0] & /*min*/ 8 && { min: /*min*/ ctx[3] },
				dirty[0] & /*max*/ 16 && { max: /*max*/ ctx[4] },
				dirty[0] & /*name*/ 2 && { name: /*name*/ ctx[1] },
				dirty[0] & /*list*/ 32 && { list: /*list*/ ctx[5] },
				dirty[0] & /*form*/ 64 && { form: /*form*/ ctx[6] },
				dirty[0] & /*align*/ 1024 && { align: /*align*/ ctx[10] },
				dirty[0] & /*readonly*/ 4096 && { readOnly: /*readonly*/ ctx[12] },
				dirty[0] & /*disabled*/ 256 && { disabled: /*disabled*/ ctx[8] },
				dirty[0] & /*required*/ 8192 && { required: /*required*/ ctx[13] },
				dirty[0] & /*minlength*/ 16384 && { minlength: /*minlength*/ ctx[14] },
				dirty[0] & /*maxlength*/ 128 && { maxlength: /*maxlength*/ ctx[7] },
				dirty[0] & /*placeholder*/ 32768 && { placeholder: /*placeholder*/ ctx[15] },
				dirty[0] & /*idProp*/ 131072 && { id: /*idProp*/ ctx[17] },
				{ class: "inp-inner" },
				dirty[0] & /*titleProp*/ 524288 && { title: /*titleProp*/ ctx[19] },
				dirty[0] & /*styleProp*/ 2097152 && { style: /*styleProp*/ ctx[21] },
				dirty[0] & /*patternProp*/ 4194304 && { pattern: /*patternProp*/ ctx[22] },
				dirty[0] & /*ariaLabelProp*/ 1048576 && { "aria-label": /*ariaLabelProp*/ ctx[20] },
				dirty[0] & /*autocompleteProp*/ 16777216 && {
					autocomplete: /*autocompleteProp*/ ctx[24]
				},
				dirty[0] & /*typeProp*/ 262144 && { type: /*typeProp*/ ctx[18] }
			]));

			if (dirty[0] & /*value*/ 1 && input.value !== /*value*/ ctx[0]) {
				set_input_value(input, /*value*/ ctx[0]);
			}

			toggle_class(input, "svelte-1ckwvo6", true);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$4.name,
		type: "else",
		source: "(131:8) {:else}",
		ctx
	});

	return block;
}

// (103:8) {#if rows || type === 'textarea'}
function create_if_block_1$6(ctx) {
	let textarea;
	let mounted;
	let dispose;

	let textarea_levels = [
		{ min: /*min*/ ctx[3] },
		{ max: /*max*/ ctx[4] },
		{ rows: /*rows*/ ctx[9] },
		{ name: /*name*/ ctx[1] },
		{ form: /*form*/ ctx[6] },
		{ align: /*align*/ ctx[10] },
		{ readOnly: /*readonly*/ ctx[12] },
		{ disabled: /*disabled*/ ctx[8] },
		{ required: /*required*/ ctx[13] },
		{ minlength: /*minlength*/ ctx[14] },
		{ maxlength: /*maxlength*/ ctx[7] },
		{ placeholder: /*placeholder*/ ctx[15] },
		{ id: /*idProp*/ ctx[17] },
		{ class: "inp-inner" },
		{ title: /*titleProp*/ ctx[19] },
		{ style: /*styleProp*/ ctx[21] },
		{ pattern: /*patternProp*/ ctx[22] },
		{ "aria-label": /*ariaLabelProp*/ ctx[20] },
		{
			autocomplete: /*autocompleteProp*/ ctx[24]
		},
		{ type: /*typeProp*/ ctx[18] }
	];

	let textarea_data = {};

	for (let i = 0; i < textarea_levels.length; i += 1) {
		textarea_data = assign(textarea_data, textarea_levels[i]);
	}

	const block = {
		c: function create() {
			textarea = element("textarea");
			this.h();
		},
		l: function claim(nodes) {
			textarea = claim_element(nodes, "TEXTAREA", {
				min: true,
				max: true,
				rows: true,
				name: true,
				form: true,
				align: true,
				readonly: true,
				disabled: true,
				required: true,
				minlength: true,
				maxlength: true,
				placeholder: true,
				id: true,
				class: true,
				title: true,
				style: true,
				pattern: true,
				"aria-label": true,
				autocomplete: true
			});

			children(textarea).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(textarea, textarea_data);
			toggle_class(textarea, "svelte-1ckwvo6", true);
			add_location(textarea, file$U, 103, 12, 3925);
		},
		m: function mount(target, anchor) {
			insert_dev(target, textarea, anchor);
			set_input_value(textarea, /*value*/ ctx[0]);

			if (!mounted) {
				dispose = [
					listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[37]),
					listen_dev(textarea, "input", /*onInput*/ ctx[26], false, false, false),
					listen_dev(textarea, "change", /*onChange*/ ctx[27], false, false, false),
					listen_dev(textarea, "blur", /*blur_handler*/ ctx[38], false, false, false),
					listen_dev(textarea, "focus", /*focus_handler*/ ctx[39], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			set_attributes(textarea, textarea_data = get_spread_update(textarea_levels, [
				dirty[0] & /*min*/ 8 && { min: /*min*/ ctx[3] },
				dirty[0] & /*max*/ 16 && { max: /*max*/ ctx[4] },
				dirty[0] & /*rows*/ 512 && { rows: /*rows*/ ctx[9] },
				dirty[0] & /*name*/ 2 && { name: /*name*/ ctx[1] },
				dirty[0] & /*form*/ 64 && { form: /*form*/ ctx[6] },
				dirty[0] & /*align*/ 1024 && { align: /*align*/ ctx[10] },
				dirty[0] & /*readonly*/ 4096 && { readOnly: /*readonly*/ ctx[12] },
				dirty[0] & /*disabled*/ 256 && { disabled: /*disabled*/ ctx[8] },
				dirty[0] & /*required*/ 8192 && { required: /*required*/ ctx[13] },
				dirty[0] & /*minlength*/ 16384 && { minlength: /*minlength*/ ctx[14] },
				dirty[0] & /*maxlength*/ 128 && { maxlength: /*maxlength*/ ctx[7] },
				dirty[0] & /*placeholder*/ 32768 && { placeholder: /*placeholder*/ ctx[15] },
				dirty[0] & /*idProp*/ 131072 && { id: /*idProp*/ ctx[17] },
				{ class: "inp-inner" },
				dirty[0] & /*titleProp*/ 524288 && { title: /*titleProp*/ ctx[19] },
				dirty[0] & /*styleProp*/ 2097152 && { style: /*styleProp*/ ctx[21] },
				dirty[0] & /*patternProp*/ 4194304 && { pattern: /*patternProp*/ ctx[22] },
				dirty[0] & /*ariaLabelProp*/ 1048576 && { "aria-label": /*ariaLabelProp*/ ctx[20] },
				dirty[0] & /*autocompleteProp*/ 16777216 && {
					autocomplete: /*autocompleteProp*/ ctx[24]
				},
				dirty[0] & /*typeProp*/ 262144 && { type: /*typeProp*/ ctx[18] }
			]));

			if (dirty[0] & /*value*/ 1) {
				set_input_value(textarea, /*value*/ ctx[0]);
			}

			toggle_class(textarea, "svelte-1ckwvo6", true);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(textarea);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$6.name,
		type: "if",
		source: "(103:8) {#if rows || type === 'textarea'}",
		ctx
	});

	return block;
}

// (163:16) {#if iconType}
function create_if_block$b(ctx) {
	let span;
	let icon;
	let current;

	icon = new Icon({
			props: {
				type: /*iconType*/ ctx[16],
				is: "info",
				size: "medium"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			span = element("span");
			create_component(icon.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			claim_component(icon.$$.fragment, span_nodes);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "inp-post-icon-inner svelte-1ckwvo6");
			add_location(span, file$U, 163, 20, 6050);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			mount_component(icon, span, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icon_changes = {};
			if (dirty[0] & /*iconType*/ 65536) icon_changes.type = /*iconType*/ ctx[16];
			icon.$set(icon_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			destroy_component(icon);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$b.name,
		type: "if",
		source: "(163:16) {#if iconType}",
		ctx
	});

	return block;
}

// (162:35)                  
function fallback_block$3(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*iconType*/ ctx[16] && create_if_block$b(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*iconType*/ ctx[16]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*iconType*/ 65536) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$b(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block$3.name,
		type: "fallback",
		source: "(162:35)                  ",
		ctx
	});

	return block;
}

// (173:8) <div slot="before">
function create_before_slot(ctx) {
	let div;
	let br;
	let current;
	br = new Br({ props: { size: "5" }, $$inline: true });

	const block = {
		c: function create() {
			div = element("div");
			create_component(br.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { slot: true });
			var div_nodes = children(div);
			claim_component(br.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "slot", "before");
			add_location(div, file$U, 172, 8, 6297);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(br, div, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(br.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(br.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(br);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_before_slot.name,
		type: "slot",
		source: "(173:8) <div slot=\\\"before\\\">",
		ctx
	});

	return block;
}

function create_fragment$U(ctx) {
	let div1;
	let t0;
	let div0;
	let t1;
	let label_1;
	let t2;
	let fielderrors;
	let div1_class_value;
	let current;
	let if_block0 = /*titleProp*/ ctx[19] && create_if_block_2$1(ctx);

	function select_block_type(ctx, dirty) {
		if (/*rows*/ ctx[9] || /*type*/ ctx[2] === "textarea") return create_if_block_1$6;
		return create_else_block$4;
	}

	let current_block_type = select_block_type(ctx);
	let if_block1 = current_block_type(ctx);
	const post_icon_slot_template = /*$$slots*/ ctx[36]["post-icon"];
	const post_icon_slot = create_slot(post_icon_slot_template, ctx, /*$$scope*/ ctx[43], get_post_icon_slot_context);
	const post_icon_slot_or_fallback = post_icon_slot || fallback_block$3(ctx);

	fielderrors = new FieldErrors({
			props: {
				items: /*errors*/ ctx[11],
				$$slots: { before: [create_before_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div1 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			div0 = element("div");
			if_block1.c();
			t1 = space();
			label_1 = element("label");
			if (post_icon_slot_or_fallback) post_icon_slot_or_fallback.c();
			t2 = space();
			create_component(fielderrors.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			if (if_block0) if_block0.l(div1_nodes);
			t0 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			if_block1.l(div0_nodes);
			t1 = claim_space(div0_nodes);
			label_1 = claim_element(div0_nodes, "LABEL", { for: true, class: true });
			var label_1_nodes = children(label_1);
			if (post_icon_slot_or_fallback) post_icon_slot_or_fallback.l(label_1_nodes);
			label_1_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t2 = claim_space(div1_nodes);
			claim_component(fielderrors.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(label_1, "for", /*idProp*/ ctx[17]);
			attr_dev(label_1, "class", "inp-post-icon svelte-1ckwvo6");
			add_location(label_1, file$U, 160, 8, 5920);
			attr_dev(div0, "class", "inp-inner-wrap svelte-1ckwvo6");
			add_location(div0, file$U, 101, 4, 3842);
			attr_dev(div1, "class", div1_class_value = "" + (null_to_empty(/*classProp*/ ctx[23]) + " svelte-1ckwvo6"));
			add_location(div1, file$U, 93, 0, 3626);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			if (if_block0) if_block0.m(div1, null);
			append_dev(div1, t0);
			append_dev(div1, div0);
			if_block1.m(div0, null);
			append_dev(div0, t1);
			append_dev(div0, label_1);

			if (post_icon_slot_or_fallback) {
				post_icon_slot_or_fallback.m(label_1, null);
			}

			append_dev(div1, t2);
			mount_component(fielderrors, div1, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*titleProp*/ ctx[19]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*titleProp*/ 524288) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_2$1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div1, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if_block1.d(1);
				if_block1 = current_block_type(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(div0, t1);
				}
			}

			if (post_icon_slot) {
				if (post_icon_slot.p && dirty[1] & /*$$scope*/ 4096) {
					update_slot(post_icon_slot, post_icon_slot_template, ctx, /*$$scope*/ ctx[43], dirty, get_post_icon_slot_changes, get_post_icon_slot_context);
				}
			} else {
				if (post_icon_slot_or_fallback && post_icon_slot_or_fallback.p && dirty[0] & /*iconType*/ 65536) {
					post_icon_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (!current || dirty[0] & /*idProp*/ 131072) {
				attr_dev(label_1, "for", /*idProp*/ ctx[17]);
			}

			const fielderrors_changes = {};
			if (dirty[0] & /*errors*/ 2048) fielderrors_changes.items = /*errors*/ ctx[11];

			if (dirty[1] & /*$$scope*/ 4096) {
				fielderrors_changes.$$scope = { dirty, ctx };
			}

			fielderrors.$set(fielderrors_changes);

			if (!current || dirty[0] & /*classProp*/ 8388608 && div1_class_value !== (div1_class_value = "" + (null_to_empty(/*classProp*/ ctx[23]) + " svelte-1ckwvo6"))) {
				attr_dev(div1, "class", div1_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(post_icon_slot_or_fallback, local);
			transition_in(fielderrors.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(post_icon_slot_or_fallback, local);
			transition_out(fielderrors.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if (if_block0) if_block0.d();
			if_block1.d();
			if (post_icon_slot_or_fallback) post_icon_slot_or_fallback.d(detaching);
			destroy_component(fielderrors);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$U.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function getValue$1(e) {
	return e.target.value;
}

function instance$U($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { name } = $$props;
	let { value = "" } = $$props;
	let { style = {} } = $$props;
	let { type = "text" } = $$props;
	let { id = undefined } = $$props;
	let { min = undefined } = $$props; // Specifies a minimum value for an <input> element
	let { max = undefined } = $$props; // Specifies the maximum value for an <input> element
	let { list = undefined } = $$props; // Refers to a <datalist> element that contains pre-defined options for an <input> element
	let { form = undefined } = $$props; // Specifies the form the <input> element belongs to
	let { maxlength = 1000 } = $$props;
	let { disabled = false } = $$props;
	let { rows = undefined } = $$props;
	let { align = undefined } = $$props;
	let { label = undefined } = $$props;
	let { errors = undefined } = $$props;
	let { invalid = undefined } = $$props;
	let { pattern = undefined } = $$props; // Specifies a regular expression that an <input> element's value is checked against (regexp)
	let { readonly = undefined } = $$props; // undefined|readonly
	let { required = undefined } = $$props; // undefined|required
	let { postIcon = undefined } = $$props;
	let { ariaLabel = undefined } = $$props;
	let { minlength = undefined } = $$props;
	let { placeholder = undefined } = $$props;
	let { autocomplete = undefined } = $$props; // on|off

	/**
 * autocomplete - https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete
 * names - https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill
 */
	const nameTypes = {
		"sex": { autocomplete: "sex" },
		"bday": { autocomplete: "bday" },
		"name": { autocomplete: "name" },
		"phone": { autocomplete: "tel" },
		"fname": { autocomplete: "name" },
		"lname": { autocomplete: "name" },
		"email": { autocomplete: "email" },
		"password": { autocomplete: "new-password" },
		"cvc": { autocomplete: "cc-csc" },
		"cc-exp": { autocomplete: "cc-exp" },
		"ccname": { autocomplete: "cc-name" },
		"cardnumber": { autocomplete: "cc-number" },
		"ship-state": { autocomplete: "shipping region" },
		"ship-city": { autocomplete: "shipping locality" },
		"ship-zip": { autocomplete: "shipping postal-code" },
		"ship-country": { autocomplete: "shipping country" },
		"ship-address": { autocomplete: "shipping street-address" }
	};

	const typePostIcons = { date: "calendar", search: "search" };

	function onInput(e) {
		const value = getValue$1(e);
		dispatch("input", { e, value, name });
	}

	function onChange(e) {
		const value = getValue$1(e);
		dispatch("change", { e, value, name });
	}

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Input", $$slots, ['post-icon']);

	function textarea_input_handler() {
		value = this.value;
		$$invalidate(0, value);
	}

	const blur_handler = e => !disabled && dispatch("blur", e);
	const focus_handler = e => !disabled && dispatch("focus", e);

	function input_input_handler() {
		value = this.value;
		$$invalidate(0, value);
	}

	const blur_handler_1 = e => !disabled && dispatch("blur", e);
	const focus_handler_1 = e => !disabled && dispatch("focus", e);

	$$self.$set = $$new_props => {
		$$invalidate(48, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("name" in $$new_props) $$invalidate(1, name = $$new_props.name);
		if ("value" in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ("style" in $$new_props) $$invalidate(28, style = $$new_props.style);
		if ("type" in $$new_props) $$invalidate(2, type = $$new_props.type);
		if ("id" in $$new_props) $$invalidate(29, id = $$new_props.id);
		if ("min" in $$new_props) $$invalidate(3, min = $$new_props.min);
		if ("max" in $$new_props) $$invalidate(4, max = $$new_props.max);
		if ("list" in $$new_props) $$invalidate(5, list = $$new_props.list);
		if ("form" in $$new_props) $$invalidate(6, form = $$new_props.form);
		if ("maxlength" in $$new_props) $$invalidate(7, maxlength = $$new_props.maxlength);
		if ("disabled" in $$new_props) $$invalidate(8, disabled = $$new_props.disabled);
		if ("rows" in $$new_props) $$invalidate(9, rows = $$new_props.rows);
		if ("align" in $$new_props) $$invalidate(10, align = $$new_props.align);
		if ("label" in $$new_props) $$invalidate(30, label = $$new_props.label);
		if ("errors" in $$new_props) $$invalidate(11, errors = $$new_props.errors);
		if ("invalid" in $$new_props) $$invalidate(31, invalid = $$new_props.invalid);
		if ("pattern" in $$new_props) $$invalidate(32, pattern = $$new_props.pattern);
		if ("readonly" in $$new_props) $$invalidate(12, readonly = $$new_props.readonly);
		if ("required" in $$new_props) $$invalidate(13, required = $$new_props.required);
		if ("postIcon" in $$new_props) $$invalidate(33, postIcon = $$new_props.postIcon);
		if ("ariaLabel" in $$new_props) $$invalidate(34, ariaLabel = $$new_props.ariaLabel);
		if ("minlength" in $$new_props) $$invalidate(14, minlength = $$new_props.minlength);
		if ("placeholder" in $$new_props) $$invalidate(15, placeholder = $$new_props.placeholder);
		if ("autocomplete" in $$new_props) $$invalidate(35, autocomplete = $$new_props.autocomplete);
		if ("$$scope" in $$new_props) $$invalidate(43, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		classnames,
		toCSSString,
		Br,
		Icon,
		FieldErrors,
		dispatch,
		name,
		value,
		style,
		type,
		id,
		min,
		max,
		list,
		form,
		maxlength,
		disabled,
		rows,
		align,
		label,
		errors,
		invalid,
		pattern,
		readonly,
		required,
		postIcon,
		ariaLabel,
		minlength,
		placeholder,
		autocomplete,
		nameTypes,
		typePostIcons,
		onInput,
		onChange,
		getValue: getValue$1,
		inputPredict,
		iconType,
		error,
		idProp,
		typeProp,
		titleProp,
		ariaLabelProp,
		styleProp,
		patternProp,
		classProp,
		autocompleteProp
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(48, $$props = assign(assign({}, $$props), $$new_props));
		if ("name" in $$props) $$invalidate(1, name = $$new_props.name);
		if ("value" in $$props) $$invalidate(0, value = $$new_props.value);
		if ("style" in $$props) $$invalidate(28, style = $$new_props.style);
		if ("type" in $$props) $$invalidate(2, type = $$new_props.type);
		if ("id" in $$props) $$invalidate(29, id = $$new_props.id);
		if ("min" in $$props) $$invalidate(3, min = $$new_props.min);
		if ("max" in $$props) $$invalidate(4, max = $$new_props.max);
		if ("list" in $$props) $$invalidate(5, list = $$new_props.list);
		if ("form" in $$props) $$invalidate(6, form = $$new_props.form);
		if ("maxlength" in $$props) $$invalidate(7, maxlength = $$new_props.maxlength);
		if ("disabled" in $$props) $$invalidate(8, disabled = $$new_props.disabled);
		if ("rows" in $$props) $$invalidate(9, rows = $$new_props.rows);
		if ("align" in $$props) $$invalidate(10, align = $$new_props.align);
		if ("label" in $$props) $$invalidate(30, label = $$new_props.label);
		if ("errors" in $$props) $$invalidate(11, errors = $$new_props.errors);
		if ("invalid" in $$props) $$invalidate(31, invalid = $$new_props.invalid);
		if ("pattern" in $$props) $$invalidate(32, pattern = $$new_props.pattern);
		if ("readonly" in $$props) $$invalidate(12, readonly = $$new_props.readonly);
		if ("required" in $$props) $$invalidate(13, required = $$new_props.required);
		if ("postIcon" in $$props) $$invalidate(33, postIcon = $$new_props.postIcon);
		if ("ariaLabel" in $$props) $$invalidate(34, ariaLabel = $$new_props.ariaLabel);
		if ("minlength" in $$props) $$invalidate(14, minlength = $$new_props.minlength);
		if ("placeholder" in $$props) $$invalidate(15, placeholder = $$new_props.placeholder);
		if ("autocomplete" in $$props) $$invalidate(35, autocomplete = $$new_props.autocomplete);
		if ("inputPredict" in $$props) $$invalidate(44, inputPredict = $$new_props.inputPredict);
		if ("iconType" in $$props) $$invalidate(16, iconType = $$new_props.iconType);
		if ("error" in $$props) $$invalidate(45, error = $$new_props.error);
		if ("idProp" in $$props) $$invalidate(17, idProp = $$new_props.idProp);
		if ("typeProp" in $$props) $$invalidate(18, typeProp = $$new_props.typeProp);
		if ("titleProp" in $$props) $$invalidate(19, titleProp = $$new_props.titleProp);
		if ("ariaLabelProp" in $$props) $$invalidate(20, ariaLabelProp = $$new_props.ariaLabelProp);
		if ("styleProp" in $$props) $$invalidate(21, styleProp = $$new_props.styleProp);
		if ("patternProp" in $$props) $$invalidate(22, patternProp = $$new_props.patternProp);
		if ("classProp" in $$props) $$invalidate(23, classProp = $$new_props.classProp);
		if ("autocompleteProp" in $$props) $$invalidate(24, autocompleteProp = $$new_props.autocompleteProp);
	};

	let inputPredict;
	let iconType;
	let error;
	let idProp;
	let typeProp;
	let titleProp;
	let ariaLabelProp;
	let styleProp;
	let patternProp;
	let classProp;
	let autocompleteProp;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*name*/ 2) {
			 $$invalidate(44, inputPredict = nameTypes[name] || {});
		}

		if ($$self.$$.dirty[0] & /*type*/ 4 | $$self.$$.dirty[1] & /*postIcon*/ 4) {
			 $$invalidate(16, iconType = postIcon || typePostIcons[type]);
		}

		if ($$self.$$.dirty[0] & /*errors*/ 2048 | $$self.$$.dirty[1] & /*invalid*/ 1) {
			 $$invalidate(45, error = invalid !== undefined
			? invalid
			: !!(errors || []).length);
		}

		if ($$self.$$.dirty[0] & /*id, name*/ 536870914 | $$self.$$.dirty[1] & /*inputPredict*/ 8192) {
			 $$invalidate(17, idProp = id || inputPredict.id || name);
		}

		if ($$self.$$.dirty[0] & /*type*/ 4) {
			 $$invalidate(18, typeProp = type);
		}

		if ($$self.$$.dirty[0] & /*label*/ 1073741824 | $$self.$$.dirty[1] & /*ariaLabel*/ 8) {
			 $$invalidate(19, titleProp = label || ariaLabel);
		}

		if ($$self.$$.dirty[0] & /*label, placeholder*/ 1073774592 | $$self.$$.dirty[1] & /*ariaLabel*/ 8) {
			 $$invalidate(20, ariaLabelProp = ariaLabel || label || placeholder);
		}

		if ($$self.$$.dirty[0] & /*style, align*/ 268436480) {
			 $$invalidate(21, styleProp = toCSSString({ ...style, textAlign: align }));
		}

		if ($$self.$$.dirty[0] & /*type*/ 4 | $$self.$$.dirty[1] & /*pattern*/ 2) {
			 $$invalidate(22, patternProp = type === "number" && !pattern ? "[0-9]*" : pattern);
		}

		 $$invalidate(23, classProp = classnames("inp", $$props.class, {
			disabled,
			readonly,
			required,
			error,
			postIcon: iconType
		}));

		if ($$self.$$.dirty[1] & /*autocomplete, inputPredict*/ 8208) {
			 $$invalidate(24, autocompleteProp = autocomplete || inputPredict.autocomplete);
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		value,
		name,
		type,
		min,
		max,
		list,
		form,
		maxlength,
		disabled,
		rows,
		align,
		errors,
		readonly,
		required,
		minlength,
		placeholder,
		iconType,
		idProp,
		typeProp,
		titleProp,
		ariaLabelProp,
		styleProp,
		patternProp,
		classProp,
		autocompleteProp,
		dispatch,
		onInput,
		onChange,
		style,
		id,
		label,
		invalid,
		pattern,
		postIcon,
		ariaLabel,
		autocomplete,
		$$slots,
		textarea_input_handler,
		blur_handler,
		focus_handler,
		input_input_handler,
		blur_handler_1,
		focus_handler_1,
		$$scope
	];
}

class Input extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-1ckwvo6-style")) add_css$h();

		init(
			this,
			options,
			instance$U,
			create_fragment$U,
			safe_not_equal,
			{
				name: 1,
				value: 0,
				style: 28,
				type: 2,
				id: 29,
				min: 3,
				max: 4,
				list: 5,
				form: 6,
				maxlength: 7,
				disabled: 8,
				rows: 9,
				align: 10,
				label: 30,
				errors: 11,
				invalid: 31,
				pattern: 32,
				readonly: 12,
				required: 13,
				postIcon: 33,
				ariaLabel: 34,
				minlength: 14,
				placeholder: 15,
				autocomplete: 35
			},
			[-1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Input",
			options,
			id: create_fragment$U.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*name*/ ctx[1] === undefined && !("name" in props)) {
			console.warn("<Input> was created without expected prop 'name'");
		}
	}

	get name() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get type() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get min() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set min(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get max() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set max(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get list() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set list(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get form() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set form(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get maxlength() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set maxlength(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rows() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rows(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get align() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set align(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get errors() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set errors(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get invalid() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set invalid(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get pattern() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set pattern(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get readonly() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set readonly(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get required() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set required(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get postIcon() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set postIcon(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ariaLabel() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ariaLabel(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get minlength() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set minlength(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get placeholder() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set placeholder(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get autocomplete() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set autocomplete(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/fields/Select.svelte generated by Svelte v3.24.0 */
const file$V = "src/components/fields/Select.svelte";

function add_css$i() {
	var style = element("style");
	style.id = "svelte-6fajxs-style";
	style.textContent = ".select.svelte-6fajxs.svelte-6fajxs{width:100%;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.select.disabled.svelte-6fajxs.svelte-6fajxs{opacity:.5;pointer-events:none}.select.null.svelte-6fajxs .inp-inner.svelte-6fajxs{color:rgba(var(--theme-color-primary-opposite), .2) !important}.select.svelte-6fajxs .inp-inner-wrap.svelte-6fajxs{position:relative;display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-item-align:stretch;align-self:stretch;-webkit-box-shadow:var(--shadow-field-inset);box-shadow:var(--shadow-field-inset);border-radius:var(--border-radius-small);background-color:rgba(var(--theme-bg-color))}.select.svelte-6fajxs .inp-inner.svelte-6fajxs{-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;color:inherit;overflow-y:auto;overflow-x:hidden;background-color:transparent;-webkit-overflow-scrolling:touch;min-width:var(--min-interactive-size);min-height:var(--min-interactive-size);border-radius:var(--border-radius-small)}.select.svelte-6fajxs .inp-post-icon.svelte-6fajxs{position:absolute;top:0;right:0;height:100%;width:var(--min-interactive-size);-webkit-box-flex:0;-ms-flex:none;flex:none;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;overflow:hidden}.select.svelte-6fajxs .inp-post-icon-inner.svelte-6fajxs{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;width:var(--min-interactive-size)}.select.svelte-6fajxs .inp-inner.svelte-6fajxs::-webkit-input-placeholder{color:rgba(var(--theme-color-primary-opposite));opacity:.2}.select.svelte-6fajxs .inp-inner.svelte-6fajxs::-moz-placeholder{color:rgba(var(--theme-color-primary-opposite));opacity:.2}.select.svelte-6fajxs .inp-inner.svelte-6fajxs:-ms-input-placeholder{color:rgba(var(--theme-color-primary-opposite));opacity:.2}.select.svelte-6fajxs .inp-inner.svelte-6fajxs::-ms-input-placeholder{color:rgba(var(--theme-color-primary-opposite));opacity:.2}.select.svelte-6fajxs .inp-inner.svelte-6fajxs::placeholder{color:rgba(var(--theme-color-primary-opposite));opacity:.2}.select.postIcon.svelte-6fajxs .inp-inner.svelte-6fajxs{padding-right:var(--min-interactive-size)}.select.svelte-6fajxs .inp-inner.svelte-6fajxs:invalid,.select.error.svelte-6fajxs .inp-inner.svelte-6fajxs{-webkit-box-shadow:0 0 0 1px rgb(var(--color-danger));box-shadow:0 0 0 1px rgb(var(--color-danger));color:rgb(var(--color-danger))}.select .inp-inner:invalid+.inp-post-icon.svelte-6fajxs.svelte-6fajxs .ico,.select.error.svelte-6fajxs .inp-post-icon.svelte-6fajxs .ico{color:rgb(var(--color-danger)) !important}.select.svelte-6fajxs .inp-inner.svelte-6fajxs:focus{-webkit-box-shadow:0 0 0 1px rgb(var(--color-info));box-shadow:0 0 0 1px rgb(var(--color-info));color:rgb(var(--color-info))}.select .inp-inner:focus+.inp-post-icon.svelte-6fajxs.svelte-6fajxs .ico{color:rgb(var(--color-info)) !important}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append_dev(document.head, style);
}

const get_post_icon_slot_changes$1 = dirty => ({});
const get_post_icon_slot_context$1 = ctx => ({});

function get_each_context$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[33] = list[i].label;
	child_ctx[34] = object_without_properties(list[i], ["label"]);
	return child_ctx;
}

// (55:4) {#if titleProp}
function create_if_block_3(ctx) {
	let label_1;
	let t0;
	let t1;
	let br;
	let current;
	br = new Br({ props: { size: "10" }, $$inline: true });

	const block = {
		c: function create() {
			label_1 = element("label");
			t0 = text(/*titleProp*/ ctx[14]);
			t1 = space();
			create_component(br.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			label_1 = claim_element(nodes, "LABEL", { for: true, class: true });
			var label_1_nodes = children(label_1);
			t0 = claim_text(label_1_nodes, /*titleProp*/ ctx[14]);
			label_1_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			claim_component(br.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(label_1, "for", /*idProp*/ ctx[13]);
			attr_dev(label_1, "class", "block h2 font-w-500 full-width text-left");
			add_location(label_1, file$V, 55, 8, 1745);
		},
		m: function mount(target, anchor) {
			insert_dev(target, label_1, anchor);
			append_dev(label_1, t0);
			insert_dev(target, t1, anchor);
			mount_component(br, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (!current || dirty[0] & /*titleProp*/ 16384) set_data_dev(t0, /*titleProp*/ ctx[14]);

			if (!current || dirty[0] & /*idProp*/ 8192) {
				attr_dev(label_1, "for", /*idProp*/ ctx[13]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(br.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(br.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(label_1);
			if (detaching) detach_dev(t1);
			destroy_component(br, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(55:4) {#if titleProp}",
		ctx
	});

	return block;
}

// (83:12) {#if !required}
function create_if_block_2$2(ctx) {
	let option;
	let t_value = (/*placeholder*/ ctx[8] || "") + "";
	let t;

	const block = {
		c: function create() {
			option = element("option");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			option = claim_element(nodes, "OPTION", { value: true });
			var option_nodes = children(option);
			t = claim_text(option_nodes, t_value);
			option_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			option.__value = undefined;
			option.value = option.__value;
			add_location(option, file$V, 83, 16, 2602);
		},
		m: function mount(target, anchor) {
			insert_dev(target, option, anchor);
			append_dev(option, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*placeholder*/ 256 && t_value !== (t_value = (/*placeholder*/ ctx[8] || "") + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(option);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$2.name,
		type: "if",
		source: "(83:12) {#if !required}",
		ctx
	});

	return block;
}

// (87:16) {#if option.value !== undefined && text !== undefined}
function create_if_block_1$7(ctx) {
	let option;
	let t0_value = /*text*/ ctx[33] + "";
	let t0;
	let t1;
	let option_value_value;

	const block = {
		c: function create() {
			option = element("option");
			t0 = text(t0_value);
			t1 = space();
			this.h();
		},
		l: function claim(nodes) {
			option = claim_element(nodes, "OPTION", { value: true });
			var option_nodes = children(option);
			t0 = claim_text(option_nodes, t0_value);
			t1 = claim_space(option_nodes);
			option_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			option.__value = option_value_value = /*option*/ ctx[34].value;
			option.value = option.__value;
			add_location(option, file$V, 87, 20, 2824);
		},
		m: function mount(target, anchor) {
			insert_dev(target, option, anchor);
			append_dev(option, t0);
			append_dev(option, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*options*/ 2048 && t0_value !== (t0_value = /*text*/ ctx[33] + "")) set_data_dev(t0, t0_value);

			if (dirty[0] & /*options*/ 2048 && option_value_value !== (option_value_value = /*option*/ ctx[34].value)) {
				prop_dev(option, "__value", option_value_value);
				option.value = option.__value;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(option);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$7.name,
		type: "if",
		source: "(87:16) {#if option.value !== undefined && text !== undefined}",
		ctx
	});

	return block;
}

// (86:12) {#each options as { label: text, ...option }}
function create_each_block$2(ctx) {
	let if_block_anchor;
	let if_block = /*option*/ ctx[34].value !== undefined && /*text*/ ctx[33] !== undefined && create_if_block_1$7(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*option*/ ctx[34].value !== undefined && /*text*/ ctx[33] !== undefined) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1$7(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$2.name,
		type: "each",
		source: "(86:12) {#each options as { label: text, ...option }}",
		ctx
	});

	return block;
}

// (97:16) {#if iconType}
function create_if_block$c(ctx) {
	let span;
	let icon;
	let current;

	icon = new Icon({
			props: {
				type: /*iconType*/ ctx[12],
				is: "info",
				size: "medium"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			span = element("span");
			create_component(icon.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			claim_component(icon.$$.fragment, span_nodes);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "inp-post-icon-inner svelte-6fajxs");
			add_location(span, file$V, 97, 20, 3114);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			mount_component(icon, span, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icon_changes = {};
			if (dirty[0] & /*iconType*/ 4096) icon_changes.type = /*iconType*/ ctx[12];
			icon.$set(icon_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			destroy_component(icon);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$c.name,
		type: "if",
		source: "(97:16) {#if iconType}",
		ctx
	});

	return block;
}

// (96:35)                  
function fallback_block$4(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*iconType*/ ctx[12] && create_if_block$c(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*iconType*/ ctx[12]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*iconType*/ 4096) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$c(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block$4.name,
		type: "fallback",
		source: "(96:35)                  ",
		ctx
	});

	return block;
}

function create_fragment$V(ctx) {
	let div1;
	let t0;
	let div0;
	let select;
	let if_block1_anchor;
	let t1;
	let label_1;
	let t2;
	let fielderrors;
	let div1_class_value;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*titleProp*/ ctx[14] && create_if_block_3(ctx);
	let if_block1 = !/*required*/ ctx[7] && create_if_block_2$2(ctx);
	let each_value = /*options*/ ctx[11];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
	}

	const post_icon_slot_template = /*$$slots*/ ctx[27]["post-icon"];
	const post_icon_slot = create_slot(post_icon_slot_template, ctx, /*$$scope*/ ctx[26], get_post_icon_slot_context$1);
	const post_icon_slot_or_fallback = post_icon_slot || fallback_block$4(ctx);

	fielderrors = new FieldErrors({
			props: { items: /*errors*/ ctx[10] },
			$$inline: true
		});

	const block = {
		c: function create() {
			div1 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			div0 = element("div");
			select = element("select");
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t1 = space();
			label_1 = element("label");
			if (post_icon_slot_or_fallback) post_icon_slot_or_fallback.c();
			t2 = space();
			create_component(fielderrors.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			if (if_block0) if_block0.l(div1_nodes);
			t0 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			select = claim_element(div0_nodes, "SELECT", {
				name: true,
				type: true,
				form: true,
				align: true,
				readonly: true,
				disabled: true,
				required: true,
				placeholder: true,
				autocomplete: true,
				id: true,
				class: true,
				title: true,
				style: true,
				"aria-label": true
			});

			var select_nodes = children(select);
			if (if_block1) if_block1.l(select_nodes);
			if_block1_anchor = empty();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(select_nodes);
			}

			select_nodes.forEach(detach_dev);
			t1 = claim_space(div0_nodes);
			label_1 = claim_element(div0_nodes, "LABEL", { for: true, class: true });
			var label_1_nodes = children(label_1);
			if (post_icon_slot_or_fallback) post_icon_slot_or_fallback.l(label_1_nodes);
			label_1_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t2 = claim_space(div1_nodes);
			claim_component(fielderrors.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(select, "name", /*name*/ ctx[1]);
			attr_dev(select, "type", /*type*/ ctx[2]);
			attr_dev(select, "form", /*form*/ ctx[5]);
			attr_dev(select, "align", /*align*/ ctx[3]);
			attr_dev(select, "readonly", /*readonly*/ ctx[6]);
			select.disabled = /*disabled*/ ctx[4];
			select.required = /*required*/ ctx[7];
			attr_dev(select, "placeholder", /*placeholder*/ ctx[8]);
			attr_dev(select, "autocomplete", /*autocomplete*/ ctx[9]);
			attr_dev(select, "id", /*idProp*/ ctx[13]);
			attr_dev(select, "class", "inp-inner svelte-6fajxs");
			attr_dev(select, "title", /*titleProp*/ ctx[14]);
			attr_dev(select, "style", /*styleProp*/ ctx[16]);
			attr_dev(select, "aria-label", /*ariaLabelProp*/ ctx[15]);
			if (/*value*/ ctx[0] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[28].call(select));
			add_location(select, file$V, 62, 8, 1934);
			attr_dev(label_1, "for", /*idProp*/ ctx[13]);
			attr_dev(label_1, "class", "inp-post-icon svelte-6fajxs");
			add_location(label_1, file$V, 94, 8, 2984);
			attr_dev(div0, "class", "inp-inner-wrap svelte-6fajxs");
			add_location(div0, file$V, 61, 4, 1897);
			attr_dev(div1, "class", div1_class_value = "" + (null_to_empty(/*classProp*/ ctx[17]) + " svelte-6fajxs"));
			add_location(div1, file$V, 53, 0, 1693);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			if (if_block0) if_block0.m(div1, null);
			append_dev(div1, t0);
			append_dev(div1, div0);
			append_dev(div0, select);
			if (if_block1) if_block1.m(select, null);
			append_dev(select, if_block1_anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select, null);
			}

			select_option(select, /*value*/ ctx[0]);
			append_dev(div0, t1);
			append_dev(div0, label_1);

			if (post_icon_slot_or_fallback) {
				post_icon_slot_or_fallback.m(label_1, null);
			}

			append_dev(div1, t2);
			mount_component(fielderrors, div1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(select, "change", /*select_change_handler*/ ctx[28]),
					listen_dev(select, "change", /*onChange*/ ctx[19], false, false, false),
					listen_dev(select, "blur", /*blur_handler*/ ctx[29], false, false, false),
					listen_dev(select, "focus", /*focus_handler*/ ctx[30], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (/*titleProp*/ ctx[14]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*titleProp*/ 16384) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div1, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (!/*required*/ ctx[7]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_2$2(ctx);
					if_block1.c();
					if_block1.m(select, if_block1_anchor);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty[0] & /*options*/ 2048) {
				each_value = /*options*/ ctx[11];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$2(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (!current || dirty[0] & /*name*/ 2) {
				attr_dev(select, "name", /*name*/ ctx[1]);
			}

			if (!current || dirty[0] & /*type*/ 4) {
				attr_dev(select, "type", /*type*/ ctx[2]);
			}

			if (!current || dirty[0] & /*form*/ 32) {
				attr_dev(select, "form", /*form*/ ctx[5]);
			}

			if (!current || dirty[0] & /*align*/ 8) {
				attr_dev(select, "align", /*align*/ ctx[3]);
			}

			if (!current || dirty[0] & /*readonly*/ 64) {
				attr_dev(select, "readonly", /*readonly*/ ctx[6]);
			}

			if (!current || dirty[0] & /*disabled*/ 16) {
				prop_dev(select, "disabled", /*disabled*/ ctx[4]);
			}

			if (!current || dirty[0] & /*required*/ 128) {
				prop_dev(select, "required", /*required*/ ctx[7]);
			}

			if (!current || dirty[0] & /*placeholder*/ 256) {
				attr_dev(select, "placeholder", /*placeholder*/ ctx[8]);
			}

			if (!current || dirty[0] & /*autocomplete*/ 512) {
				attr_dev(select, "autocomplete", /*autocomplete*/ ctx[9]);
			}

			if (!current || dirty[0] & /*idProp*/ 8192) {
				attr_dev(select, "id", /*idProp*/ ctx[13]);
			}

			if (!current || dirty[0] & /*titleProp*/ 16384) {
				attr_dev(select, "title", /*titleProp*/ ctx[14]);
			}

			if (!current || dirty[0] & /*styleProp*/ 65536) {
				attr_dev(select, "style", /*styleProp*/ ctx[16]);
			}

			if (!current || dirty[0] & /*ariaLabelProp*/ 32768) {
				attr_dev(select, "aria-label", /*ariaLabelProp*/ ctx[15]);
			}

			if (dirty[0] & /*value, options*/ 2049) {
				select_option(select, /*value*/ ctx[0]);
			}

			if (post_icon_slot) {
				if (post_icon_slot.p && dirty[0] & /*$$scope*/ 67108864) {
					update_slot(post_icon_slot, post_icon_slot_template, ctx, /*$$scope*/ ctx[26], dirty, get_post_icon_slot_changes$1, get_post_icon_slot_context$1);
				}
			} else {
				if (post_icon_slot_or_fallback && post_icon_slot_or_fallback.p && dirty[0] & /*iconType*/ 4096) {
					post_icon_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (!current || dirty[0] & /*idProp*/ 8192) {
				attr_dev(label_1, "for", /*idProp*/ ctx[13]);
			}

			const fielderrors_changes = {};
			if (dirty[0] & /*errors*/ 1024) fielderrors_changes.items = /*errors*/ ctx[10];
			fielderrors.$set(fielderrors_changes);

			if (!current || dirty[0] & /*classProp*/ 131072 && div1_class_value !== (div1_class_value = "" + (null_to_empty(/*classProp*/ ctx[17]) + " svelte-6fajxs"))) {
				attr_dev(div1, "class", div1_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(post_icon_slot_or_fallback, local);
			transition_in(fielderrors.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(post_icon_slot_or_fallback, local);
			transition_out(fielderrors.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			destroy_each(each_blocks, detaching);
			if (post_icon_slot_or_fallback) post_icon_slot_or_fallback.d(detaching);
			destroy_component(fielderrors);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$V.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function getValue$2(e) {
	return e.target.value;
}

function instance$V($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { name } = $$props;
	let { style = {} } = $$props;
	let { type = "select" } = $$props;
	let { value = undefined } = $$props;
	let { id = undefined } = $$props;
	let { align = undefined } = $$props;
	let { disabled = false } = $$props;
	let { label = undefined } = $$props;
	let { invalid = undefined } = $$props;
	let { form = undefined } = $$props; // Specifies the form the <input> element belongs to
	let { readonly = undefined } = $$props; // undefined|readonly
	let { required = undefined } = $$props; // undefined|required
	let { ariaLabel = undefined } = $$props;
	let { placeholder = undefined } = $$props;
	let { autocomplete = "on" } = $$props;
	let { postIcon = undefined } = $$props;
	let { errors = undefined } = $$props;
	let { options = [] } = $$props;

	function onChange(e) {
		const value = getValue$2(e);
		dispatch("change", { e, value, name });
	}

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Select", $$slots, ['post-icon']);

	function select_change_handler() {
		value = select_value(this);
		$$invalidate(0, value);
		$$invalidate(11, options);
	}

	const blur_handler = e => !disabled && dispatch("blur", e);
	const focus_handler = e => !disabled && dispatch("focus", e);

	$$self.$set = $$new_props => {
		$$invalidate(32, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("name" in $$new_props) $$invalidate(1, name = $$new_props.name);
		if ("style" in $$new_props) $$invalidate(20, style = $$new_props.style);
		if ("type" in $$new_props) $$invalidate(2, type = $$new_props.type);
		if ("value" in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ("id" in $$new_props) $$invalidate(21, id = $$new_props.id);
		if ("align" in $$new_props) $$invalidate(3, align = $$new_props.align);
		if ("disabled" in $$new_props) $$invalidate(4, disabled = $$new_props.disabled);
		if ("label" in $$new_props) $$invalidate(22, label = $$new_props.label);
		if ("invalid" in $$new_props) $$invalidate(23, invalid = $$new_props.invalid);
		if ("form" in $$new_props) $$invalidate(5, form = $$new_props.form);
		if ("readonly" in $$new_props) $$invalidate(6, readonly = $$new_props.readonly);
		if ("required" in $$new_props) $$invalidate(7, required = $$new_props.required);
		if ("ariaLabel" in $$new_props) $$invalidate(24, ariaLabel = $$new_props.ariaLabel);
		if ("placeholder" in $$new_props) $$invalidate(8, placeholder = $$new_props.placeholder);
		if ("autocomplete" in $$new_props) $$invalidate(9, autocomplete = $$new_props.autocomplete);
		if ("postIcon" in $$new_props) $$invalidate(25, postIcon = $$new_props.postIcon);
		if ("errors" in $$new_props) $$invalidate(10, errors = $$new_props.errors);
		if ("options" in $$new_props) $$invalidate(11, options = $$new_props.options);
		if ("$$scope" in $$new_props) $$invalidate(26, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		classnames,
		toCSSString,
		Br,
		Icon,
		FieldErrors,
		dispatch,
		name,
		style,
		type,
		value,
		id,
		align,
		disabled,
		label,
		invalid,
		form,
		readonly,
		required,
		ariaLabel,
		placeholder,
		autocomplete,
		postIcon,
		errors,
		options,
		onChange,
		getValue: getValue$2,
		iconType,
		error,
		idProp,
		titleProp,
		ariaLabelProp,
		styleProp,
		classProp
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(32, $$props = assign(assign({}, $$props), $$new_props));
		if ("name" in $$props) $$invalidate(1, name = $$new_props.name);
		if ("style" in $$props) $$invalidate(20, style = $$new_props.style);
		if ("type" in $$props) $$invalidate(2, type = $$new_props.type);
		if ("value" in $$props) $$invalidate(0, value = $$new_props.value);
		if ("id" in $$props) $$invalidate(21, id = $$new_props.id);
		if ("align" in $$props) $$invalidate(3, align = $$new_props.align);
		if ("disabled" in $$props) $$invalidate(4, disabled = $$new_props.disabled);
		if ("label" in $$props) $$invalidate(22, label = $$new_props.label);
		if ("invalid" in $$props) $$invalidate(23, invalid = $$new_props.invalid);
		if ("form" in $$props) $$invalidate(5, form = $$new_props.form);
		if ("readonly" in $$props) $$invalidate(6, readonly = $$new_props.readonly);
		if ("required" in $$props) $$invalidate(7, required = $$new_props.required);
		if ("ariaLabel" in $$props) $$invalidate(24, ariaLabel = $$new_props.ariaLabel);
		if ("placeholder" in $$props) $$invalidate(8, placeholder = $$new_props.placeholder);
		if ("autocomplete" in $$props) $$invalidate(9, autocomplete = $$new_props.autocomplete);
		if ("postIcon" in $$props) $$invalidate(25, postIcon = $$new_props.postIcon);
		if ("errors" in $$props) $$invalidate(10, errors = $$new_props.errors);
		if ("options" in $$props) $$invalidate(11, options = $$new_props.options);
		if ("iconType" in $$props) $$invalidate(12, iconType = $$new_props.iconType);
		if ("error" in $$props) $$invalidate(31, error = $$new_props.error);
		if ("idProp" in $$props) $$invalidate(13, idProp = $$new_props.idProp);
		if ("titleProp" in $$props) $$invalidate(14, titleProp = $$new_props.titleProp);
		if ("ariaLabelProp" in $$props) $$invalidate(15, ariaLabelProp = $$new_props.ariaLabelProp);
		if ("styleProp" in $$props) $$invalidate(16, styleProp = $$new_props.styleProp);
		if ("classProp" in $$props) $$invalidate(17, classProp = $$new_props.classProp);
	};

	let iconType;
	let error;
	let idProp;
	let titleProp;
	let ariaLabelProp;
	let styleProp;
	let classProp;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*postIcon*/ 33554432) {
			 $$invalidate(12, iconType = postIcon || "caret-down");
		}

		if ($$self.$$.dirty[0] & /*invalid, errors*/ 8389632) {
			 $$invalidate(31, error = invalid || !!(errors || []).length);
		}

		if ($$self.$$.dirty[0] & /*id, name*/ 2097154) {
			 $$invalidate(13, idProp = id || name);
		}

		if ($$self.$$.dirty[0] & /*label, ariaLabel*/ 20971520) {
			 $$invalidate(14, titleProp = label || ariaLabel);
		}

		if ($$self.$$.dirty[0] & /*ariaLabel, label, placeholder*/ 20971776) {
			 $$invalidate(15, ariaLabelProp = ariaLabel || label || placeholder);
		}

		if ($$self.$$.dirty[0] & /*style, align*/ 1048584) {
			 $$invalidate(16, styleProp = toCSSString({ ...style, textAlign: align }));
		}

		 $$invalidate(17, classProp = classnames("select", $$props.class, {
			disabled,
			readonly,
			required,
			error,
			null: value === undefined
		}));
	};

	$$props = exclude_internal_props($$props);

	return [
		value,
		name,
		type,
		align,
		disabled,
		form,
		readonly,
		required,
		placeholder,
		autocomplete,
		errors,
		options,
		iconType,
		idProp,
		titleProp,
		ariaLabelProp,
		styleProp,
		classProp,
		dispatch,
		onChange,
		style,
		id,
		label,
		invalid,
		ariaLabel,
		postIcon,
		$$scope,
		$$slots,
		select_change_handler,
		blur_handler,
		focus_handler
	];
}

class Select extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-6fajxs-style")) add_css$i();

		init(
			this,
			options,
			instance$V,
			create_fragment$V,
			safe_not_equal,
			{
				name: 1,
				style: 20,
				type: 2,
				value: 0,
				id: 21,
				align: 3,
				disabled: 4,
				label: 22,
				invalid: 23,
				form: 5,
				readonly: 6,
				required: 7,
				ariaLabel: 24,
				placeholder: 8,
				autocomplete: 9,
				postIcon: 25,
				errors: 10,
				options: 11
			},
			[-1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Select",
			options,
			id: create_fragment$V.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*name*/ ctx[1] === undefined && !("name" in props)) {
			console.warn("<Select> was created without expected prop 'name'");
		}
	}

	get name() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get type() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get align() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set align(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get invalid() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set invalid(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get form() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set form(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get readonly() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set readonly(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get required() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set required(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ariaLabel() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ariaLabel(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get placeholder() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set placeholder(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get autocomplete() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set autocomplete(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get postIcon() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set postIcon(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get errors() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set errors(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get options() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set options(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/fields/ReadField.svelte generated by Svelte v3.24.0 */
const file$W = "src/components/fields/ReadField.svelte";

// (15:4) {#if label}
function create_if_block$d(ctx) {
	let h2;
	let t0;
	let t1;
	let br;
	let current;
	br = new Br({ props: { size: "10" }, $$inline: true });

	const block = {
		c: function create() {
			h2 = element("h2");
			t0 = text(/*label*/ ctx[2]);
			t1 = space();
			create_component(br.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			h2 = claim_element(nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, /*label*/ ctx[2]);
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			claim_component(br.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "block full-width");
			add_location(h2, file$W, 15, 8, 424);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			append_dev(h2, t0);
			insert_dev(target, t1, anchor);
			mount_component(br, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (!current || dirty & /*label*/ 4) set_data_dev(t0, /*label*/ ctx[2]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(br.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(br.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t1);
			destroy_component(br, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$d.name,
		type: "if",
		source: "(15:4) {#if label}",
		ctx
	});

	return block;
}

function create_fragment$W(ctx) {
	let div;
	let t0;
	let p;
	let t1_value = (/*value*/ ctx[0] || "—") + "";
	let t1;
	let current;
	let if_block = /*label*/ ctx[2] && create_if_block$d(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if (if_block) if_block.c();
			t0 = space();
			p = element("p");
			t1 = text(t1_value);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { id: true, class: true, style: true });
			var div_nodes = children(div);
			if (if_block) if_block.l(div_nodes);
			t0 = claim_space(div_nodes);
			p = claim_element(div_nodes, "P", { class: true });
			var p_nodes = children(p);
			t1 = claim_text(p_nodes, t1_value);
			p_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "block full-width");
			add_location(p, file$W, 18, 4, 504);
			attr_dev(div, "id", /*id*/ ctx[1]);
			attr_dev(div, "class", /*classProp*/ ctx[4]);
			attr_dev(div, "style", /*styleProp*/ ctx[3]);
			add_location(div, file$W, 13, 0, 353);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append_dev(div, t0);
			append_dev(div, p);
			append_dev(p, t1);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*label*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*label*/ 4) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$d(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, t0);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if ((!current || dirty & /*value*/ 1) && t1_value !== (t1_value = (/*value*/ ctx[0] || "—") + "")) set_data_dev(t1, t1_value);

			if (!current || dirty & /*id*/ 2) {
				attr_dev(div, "id", /*id*/ ctx[1]);
			}

			if (!current || dirty & /*classProp*/ 16) {
				attr_dev(div, "class", /*classProp*/ ctx[4]);
			}

			if (!current || dirty & /*styleProp*/ 8) {
				attr_dev(div, "style", /*styleProp*/ ctx[3]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$W.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$W($$self, $$props, $$invalidate) {
	let { value = "" } = $$props;
	let { style = {} } = $$props;
	let { id = undefined } = $$props;
	let { label = undefined } = $$props;
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("ReadField", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(6, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("value" in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ("style" in $$new_props) $$invalidate(5, style = $$new_props.style);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("label" in $$new_props) $$invalidate(2, label = $$new_props.label);
	};

	$$self.$capture_state = () => ({
		classnames,
		toCSSString,
		Br,
		value,
		style,
		id,
		label,
		styleProp,
		classProp
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(6, $$props = assign(assign({}, $$props), $$new_props));
		if ("value" in $$props) $$invalidate(0, value = $$new_props.value);
		if ("style" in $$props) $$invalidate(5, style = $$new_props.style);
		if ("id" in $$props) $$invalidate(1, id = $$new_props.id);
		if ("label" in $$props) $$invalidate(2, label = $$new_props.label);
		if ("styleProp" in $$props) $$invalidate(3, styleProp = $$new_props.styleProp);
		if ("classProp" in $$props) $$invalidate(4, classProp = $$new_props.classProp);
	};

	let styleProp;
	let classProp;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*style*/ 32) {
			 $$invalidate(3, styleProp = toCSSString({ ...style }));
		}

		 $$invalidate(4, classProp = classnames("block full-width text-left", $$props.class));
	};

	$$props = exclude_internal_props($$props);
	return [value, id, label, styleProp, classProp, style];
}

class ReadField extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$W, create_fragment$W, safe_not_equal, { value: 0, style: 5, id: 1, label: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ReadField",
			options,
			id: create_fragment$W.name
		});
	}

	get value() {
		throw new Error("<ReadField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<ReadField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<ReadField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<ReadField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<ReadField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<ReadField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<ReadField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<ReadField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/fields/RadioRect.svelte generated by Svelte v3.24.0 */
const file$X = "src/components/fields/RadioRect.svelte";

const get_default_slot_changes$3 = dirty => ({
	item: dirty & /*options*/ 8,
	checked: dirty & /*value, options*/ 10
});

const get_default_slot_context$3 = ctx => ({
	item: /*radio*/ ctx[21],
	checked: /*value*/ ctx[1] === /*radio*/ ctx[21].value
});

function get_each_context$3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[21] = list[i];
	child_ctx[23] = i;
	return child_ctx;
}

// (35:4) {#if label}
function create_if_block_2$3(ctx) {
	let h2;
	let t0;
	let t1;
	let br;
	let current;
	br = new Br({ props: { size: "10" }, $$inline: true });

	const block = {
		c: function create() {
			h2 = element("h2");
			t0 = text(/*label*/ ctx[2]);
			t1 = space();
			create_component(br.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			h2 = claim_element(nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, /*label*/ ctx[2]);
			t1 = claim_space(h2_nodes);
			claim_component(br.$$.fragment, h2_nodes);
			h2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "text-left");
			add_location(h2, file$X, 35, 8, 1231);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			append_dev(h2, t0);
			append_dev(h2, t1);
			mount_component(br, h2, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (!current || dirty & /*label*/ 4) set_data_dev(t0, /*label*/ ctx[2]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(br.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(br.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
			destroy_component(br);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$3.name,
		type: "if",
		source: "(35:4) {#if label}",
		ctx
	});

	return block;
}

// (60:28) {#if radio.preIcon}
function create_if_block_1$8(ctx) {
	let icon;
	let t;
	let s;
	let current;

	icon = new Icon({
			props: {
				type: /*radio*/ ctx[21].preIcon,
				size: "medium",
				is: /*value*/ ctx[1] === /*radio*/ ctx[21].value
				? "light"
				: "info"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icon.$$.fragment);
			t = space();
			s = element("s");
			this.h();
		},
		l: function claim(nodes) {
			claim_component(icon.$$.fragment, nodes);
			t = claim_space(nodes);
			s = claim_element(nodes, "S", {});
			children(s).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(s, file$X, 61, 32, 2313);
		},
		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			insert_dev(target, t, anchor);
			insert_dev(target, s, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icon_changes = {};
			if (dirty & /*options*/ 8) icon_changes.type = /*radio*/ ctx[21].preIcon;

			if (dirty & /*value, options*/ 10) icon_changes.is = /*value*/ ctx[1] === /*radio*/ ctx[21].value
			? "light"
			: "info";

			icon.$set(icon_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon, detaching);
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(s);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$8.name,
		type: "if",
		source: "(60:28) {#if radio.preIcon}",
		ctx
	});

	return block;
}

// (67:28) {#if radio.postIcon}
function create_if_block$e(ctx) {
	let s;
	let t;
	let icon;
	let current;

	icon = new Icon({
			props: {
				type: /*radio*/ ctx[21].postIcon,
				size: "medium",
				is: /*value*/ ctx[1] === /*radio*/ ctx[21].value
				? "light"
				: "info"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			s = element("s");
			t = space();
			create_component(icon.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			s = claim_element(nodes, "S", {});
			children(s).forEach(detach_dev);
			t = claim_space(nodes);
			claim_component(icon.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			add_location(s, file$X, 67, 32, 2618);
		},
		m: function mount(target, anchor) {
			insert_dev(target, s, anchor);
			insert_dev(target, t, anchor);
			mount_component(icon, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icon_changes = {};
			if (dirty & /*options*/ 8) icon_changes.type = /*radio*/ ctx[21].postIcon;

			if (dirty & /*value, options*/ 10) icon_changes.is = /*value*/ ctx[1] === /*radio*/ ctx[21].value
			? "light"
			: "info";

			icon.$set(icon_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(s);
			if (detaching) detach_dev(t);
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$e.name,
		type: "if",
		source: "(67:28) {#if radio.postIcon}",
		ctx
	});

	return block;
}

// (58:71)                          
function fallback_block$5(ctx) {
	let p;
	let t0;
	let span;
	let t1_value = /*radio*/ ctx[21].label + "";
	let t1;
	let t2;
	let current;
	let if_block0 = /*radio*/ ctx[21].preIcon && create_if_block_1$8(ctx);
	let if_block1 = /*radio*/ ctx[21].postIcon && create_if_block$e(ctx);

	const block = {
		c: function create() {
			p = element("p");
			if (if_block0) if_block0.c();
			t0 = space();
			span = element("span");
			t1 = text(t1_value);
			t2 = space();
			if (if_block1) if_block1.c();
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true, style: true });
			var p_nodes = children(p);
			if (if_block0) if_block0.l(p_nodes);
			t0 = claim_space(p_nodes);
			span = claim_element(p_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t1 = claim_text(span_nodes, t1_value);
			span_nodes.forEach(detach_dev);
			t2 = claim_space(p_nodes);
			if (if_block1) if_block1.l(p_nodes);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "font-w-500 h3 flex flex-align-center flex-justify-center");
			add_location(span, file$X, 63, 28, 2383);
			attr_dev(p, "class", "flex flex-align-center");
			set_style(p, "padding", "10px 20px");
			add_location(p, file$X, 58, 24, 2050);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			if (if_block0) if_block0.m(p, null);
			append_dev(p, t0);
			append_dev(p, span);
			append_dev(span, t1);
			append_dev(p, t2);
			if (if_block1) if_block1.m(p, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*radio*/ ctx[21].preIcon) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*options*/ 8) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1$8(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(p, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if ((!current || dirty & /*options*/ 8) && t1_value !== (t1_value = /*radio*/ ctx[21].label + "")) set_data_dev(t1, t1_value);

			if (/*radio*/ ctx[21].postIcon) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*options*/ 8) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block$e(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(p, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block$5.name,
		type: "fallback",
		source: "(58:71)                          ",
		ctx
	});

	return block;
}

// (45:16) <Button                     auto                     htmlFor={`${idProp}_${i}`}                     is={value === radio.value ? 'info' : 'info-border'}                 >
function create_default_slot$D(ctx) {
	let input;
	let input_id_value;
	let input_value_value;
	let t;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[16].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[17], get_default_slot_context$3);
	const default_slot_or_fallback = default_slot || fallback_block$5(ctx);

	const block = {
		c: function create() {
			input = element("input");
			t = space();
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			this.h();
		},
		l: function claim(nodes) {
			input = claim_element(nodes, "INPUT", {
				form: true,
				hidden: true,
				type: true,
				id: true,
				value: true
			});

			t = claim_space(nodes);
			if (default_slot_or_fallback) default_slot_or_fallback.l(nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(input, "form", /*form*/ ctx[0]);
			input.hidden = true;
			attr_dev(input, "type", "checkbox");
			attr_dev(input, "id", input_id_value = `${/*idProp*/ ctx[4]}_${/*i*/ ctx[23]}`);
			input.value = input_value_value = /*radio*/ ctx[21].value;
			add_location(input, file$X, 49, 20, 1662);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			insert_dev(target, t, anchor);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(target, anchor);
			}

			current = true;

			if (!mounted) {
				dispose = listen_dev(
					input,
					"change",
					function () {
						if (is_function(/*onChange*/ ctx[7].bind(null, /*radio*/ ctx[21].value))) /*onChange*/ ctx[7].bind(null, /*radio*/ ctx[21].value).apply(this, arguments);
					},
					false,
					false,
					false
				);

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (!current || dirty & /*form*/ 1) {
				attr_dev(input, "form", /*form*/ ctx[0]);
			}

			if (!current || dirty & /*idProp*/ 16 && input_id_value !== (input_id_value = `${/*idProp*/ ctx[4]}_${/*i*/ ctx[23]}`)) {
				attr_dev(input, "id", input_id_value);
			}

			if (!current || dirty & /*options*/ 8 && input_value_value !== (input_value_value = /*radio*/ ctx[21].value)) {
				prop_dev(input, "value", input_value_value);
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope, options, value*/ 131082) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[17], dirty, get_default_slot_changes$3, get_default_slot_context$3);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*options, value*/ 10) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			if (detaching) detach_dev(t);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$D.name,
		type: "slot",
		source: "(45:16) <Button                     auto                     htmlFor={`${idProp}_${i}`}                     is={value === radio.value ? 'info' : 'info-border'}                 >",
		ctx
	});

	return block;
}

// (43:8) {#each options as radio, i}
function create_each_block$3(ctx) {
	let li;
	let button;
	let t;
	let current;

	button = new Button({
			props: {
				auto: true,
				htmlFor: `${/*idProp*/ ctx[4]}_${/*i*/ ctx[23]}`,
				is: /*value*/ ctx[1] === /*radio*/ ctx[21].value
				? "info"
				: "info-border",
				$$slots: { default: [create_default_slot$D] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			li = element("li");
			create_component(button.$$.fragment);
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { style: true });
			var li_nodes = children(li);
			claim_component(button.$$.fragment, li_nodes);
			t = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(li, "padding", "5px");
			add_location(li, file$X, 43, 12, 1430);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			mount_component(button, li, null);
			append_dev(li, t);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};
			if (dirty & /*idProp*/ 16) button_changes.htmlFor = `${/*idProp*/ ctx[4]}_${/*i*/ ctx[23]}`;

			if (dirty & /*value, options*/ 10) button_changes.is = /*value*/ ctx[1] === /*radio*/ ctx[21].value
			? "info"
			: "info-border";

			if (dirty & /*$$scope, options, value, form, idProp*/ 131099) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			destroy_component(button);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$3.name,
		type: "each",
		source: "(43:8) {#each options as radio, i}",
		ctx
	});

	return block;
}

function create_fragment$X(ctx) {
	let div;
	let t;
	let ul;
	let current;
	let if_block = /*label*/ ctx[2] && create_if_block_2$3(ctx);
	let each_value = /*options*/ ctx[3];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { id: true, class: true, style: true });
			var div_nodes = children(div);
			if (if_block) if_block.l(div_nodes);
			t = claim_space(div_nodes);
			ul = claim_element(div_nodes, "UL", { style: true, class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(ul, "margin", "-5px");
			attr_dev(ul, "class", "flex flex-wrap");
			add_location(ul, file$X, 41, 4, 1333);
			attr_dev(div, "id", /*idProp*/ ctx[4]);
			attr_dev(div, "class", /*classProp*/ ctx[6]);
			attr_dev(div, "style", /*styleProp*/ ctx[5]);
			add_location(div, file$X, 33, 0, 1153);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append_dev(div, t);
			append_dev(div, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*label*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*label*/ 4) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_2$3(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (dirty & /*idProp, value, options, $$scope, form, onChange*/ 131227) {
				each_value = /*options*/ ctx[3];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$3(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$3(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(ul, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (!current || dirty & /*idProp*/ 16) {
				attr_dev(div, "id", /*idProp*/ ctx[4]);
			}

			if (!current || dirty & /*classProp*/ 64) {
				attr_dev(div, "class", /*classProp*/ ctx[6]);
			}

			if (!current || dirty & /*styleProp*/ 32) {
				attr_dev(div, "style", /*styleProp*/ ctx[5]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (if_block) if_block.d();
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$X.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$X($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { name } = $$props;
	let { style = {} } = $$props;
	let { id = undefined } = $$props;
	let { form = undefined } = $$props; // Specifies the form the <input> element belongs to
	let { value = undefined } = $$props;
	let { label = undefined } = $$props;
	let { align = undefined } = $$props;
	let { options = undefined } = $$props;
	let { invalid = undefined } = $$props;
	let { disabled = undefined } = $$props;
	let { required = undefined } = $$props; // undefined|required
	let { errors = undefined } = $$props;

	function onChange(val, e) {
		dispatch("change", { e, name, value: val });
	}

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("RadioRect", $$slots, ['default']);

	$$self.$set = $$new_props => {
		$$invalidate(20, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("name" in $$new_props) $$invalidate(8, name = $$new_props.name);
		if ("style" in $$new_props) $$invalidate(9, style = $$new_props.style);
		if ("id" in $$new_props) $$invalidate(10, id = $$new_props.id);
		if ("form" in $$new_props) $$invalidate(0, form = $$new_props.form);
		if ("value" in $$new_props) $$invalidate(1, value = $$new_props.value);
		if ("label" in $$new_props) $$invalidate(2, label = $$new_props.label);
		if ("align" in $$new_props) $$invalidate(11, align = $$new_props.align);
		if ("options" in $$new_props) $$invalidate(3, options = $$new_props.options);
		if ("invalid" in $$new_props) $$invalidate(12, invalid = $$new_props.invalid);
		if ("disabled" in $$new_props) $$invalidate(13, disabled = $$new_props.disabled);
		if ("required" in $$new_props) $$invalidate(14, required = $$new_props.required);
		if ("errors" in $$new_props) $$invalidate(15, errors = $$new_props.errors);
		if ("$$scope" in $$new_props) $$invalidate(17, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		classnames,
		toCSSString,
		Br,
		Icon,
		Button,
		FieldErrors,
		dispatch,
		name,
		style,
		id,
		form,
		value,
		label,
		align,
		options,
		invalid,
		disabled,
		required,
		errors,
		onChange,
		idProp,
		error,
		styleProp,
		classProp
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(20, $$props = assign(assign({}, $$props), $$new_props));
		if ("name" in $$props) $$invalidate(8, name = $$new_props.name);
		if ("style" in $$props) $$invalidate(9, style = $$new_props.style);
		if ("id" in $$props) $$invalidate(10, id = $$new_props.id);
		if ("form" in $$props) $$invalidate(0, form = $$new_props.form);
		if ("value" in $$props) $$invalidate(1, value = $$new_props.value);
		if ("label" in $$props) $$invalidate(2, label = $$new_props.label);
		if ("align" in $$props) $$invalidate(11, align = $$new_props.align);
		if ("options" in $$props) $$invalidate(3, options = $$new_props.options);
		if ("invalid" in $$props) $$invalidate(12, invalid = $$new_props.invalid);
		if ("disabled" in $$props) $$invalidate(13, disabled = $$new_props.disabled);
		if ("required" in $$props) $$invalidate(14, required = $$new_props.required);
		if ("errors" in $$props) $$invalidate(15, errors = $$new_props.errors);
		if ("idProp" in $$props) $$invalidate(4, idProp = $$new_props.idProp);
		if ("error" in $$props) $$invalidate(18, error = $$new_props.error);
		if ("styleProp" in $$props) $$invalidate(5, styleProp = $$new_props.styleProp);
		if ("classProp" in $$props) $$invalidate(6, classProp = $$new_props.classProp);
	};

	let idProp;
	let error;
	let styleProp;
	let classProp;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*id, name*/ 1280) {
			 $$invalidate(4, idProp = id || name);
		}

		if ($$self.$$.dirty & /*invalid, errors*/ 36864) {
			 $$invalidate(18, error = invalid || !!(errors || []).length);
		}

		if ($$self.$$.dirty & /*style, align*/ 2560) {
			 $$invalidate(5, styleProp = toCSSString({ ...style, textAlign: align }));
		}

		 $$invalidate(6, classProp = classnames("radio-rect", $$props.class, { disabled, required, error }));
	};

	$$props = exclude_internal_props($$props);

	return [
		form,
		value,
		label,
		options,
		idProp,
		styleProp,
		classProp,
		onChange,
		name,
		style,
		id,
		align,
		invalid,
		disabled,
		required,
		errors,
		$$slots,
		$$scope
	];
}

class RadioRect extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$X, create_fragment$X, safe_not_equal, {
			name: 8,
			style: 9,
			id: 10,
			form: 0,
			value: 1,
			label: 2,
			align: 11,
			options: 3,
			invalid: 12,
			disabled: 13,
			required: 14,
			errors: 15
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "RadioRect",
			options,
			id: create_fragment$X.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*name*/ ctx[8] === undefined && !("name" in props)) {
			console.warn("<RadioRect> was created without expected prop 'name'");
		}
	}

	get name() {
		throw new Error("<RadioRect>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<RadioRect>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<RadioRect>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<RadioRect>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<RadioRect>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<RadioRect>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get form() {
		throw new Error("<RadioRect>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set form(value) {
		throw new Error("<RadioRect>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<RadioRect>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<RadioRect>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<RadioRect>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<RadioRect>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get align() {
		throw new Error("<RadioRect>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set align(value) {
		throw new Error("<RadioRect>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get options() {
		throw new Error("<RadioRect>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set options(value) {
		throw new Error("<RadioRect>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get invalid() {
		throw new Error("<RadioRect>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set invalid(value) {
		throw new Error("<RadioRect>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<RadioRect>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<RadioRect>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get required() {
		throw new Error("<RadioRect>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set required(value) {
		throw new Error("<RadioRect>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get errors() {
		throw new Error("<RadioRect>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set errors(value) {
		throw new Error("<RadioRect>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/fields/uploadFiles/UploadBox.svelte generated by Svelte v3.24.0 */
const file$Y = "src/components/fields/uploadFiles/UploadBox.svelte";

function add_css$j() {
	var style = element("style");
	style.id = "svelte-zm8c1o-style";
	style.textContent = ".inp-upload.svelte-zm8c1o.svelte-zm8c1o{width:100%;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-ms-flex-item-align:stretch;align-self:stretch;justify-self:stretch;overflow:hidden;border-radius:var(--border-radius-medium);color:rgba(var(--theme-color-primary-opposite), .5);background-color:rgba(var(--theme-color-primary-opposite), .07);-webkit-transform:translateZ(0);transform:translateZ(0)}.inp-upload.preview.svelte-zm8c1o .icon.svelte-zm8c1o{opacity:.5}.inp-upload.svelte-zm8c1o .icon.svelte-zm8c1o{opacity:.7}.inp-upload.disabled.svelte-zm8c1o.svelte-zm8c1o{opacity:.5;pointer-events:none}.inp-upload.error.svelte-zm8c1o.svelte-zm8c1o,input:invalid+.inp-upload.svelte-zm8c1o.svelte-zm8c1o{color:rgba(var(--color-danger), .5);background-color:rgba(var(--color-danger), .07)}input:focus+.inp-upload.svelte-zm8c1o.svelte-zm8c1o{color:rgba(var(--color-info), .5);background-color:rgba(var(--color-info), .07)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXBsb2FkQm94LnN2ZWx0ZSIsInNvdXJjZXMiOlsiVXBsb2FkQm94LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICAgIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gJ3N2ZWx0ZSdcbiAgICBpbXBvcnQgeyBjbGFzc25hbWVzLCB0b0NTU1N0cmluZyB9IGZyb20gJ0B1dGlscydcbiAgICBpbXBvcnQgQnIgZnJvbSAnQGNvbXBvbmVudHMvQnIuc3ZlbHRlJ1xuICAgIGltcG9ydCBJY29uIGZyb20gJ0Bjb21wb25lbnRzL0ljb24uc3ZlbHRlJ1xuICAgIGltcG9ydCBTcXVhcmUgZnJvbSAnQGNvbXBvbmVudHMvU3F1YXJlLnN2ZWx0ZSdcbiAgICBpbXBvcnQgUGljdHVyZSBmcm9tICdAY29tcG9uZW50cy9QaWN0dXJlLnN2ZWx0ZSdcblxuICAgIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKClcblxuICAgIGV4cG9ydCBsZXQgaWQgPSB1bmRlZmluZWRcbiAgICBleHBvcnQgbGV0IHNyYyA9IHVuZGVmaW5lZFxuICAgIGV4cG9ydCBsZXQgbmFtZSA9IHVuZGVmaW5lZFxuICAgIGV4cG9ydCBsZXQgaWNvbiA9IHVuZGVmaW5lZFxuICAgIGV4cG9ydCBsZXQgbGFiZWwgPSB1bmRlZmluZWRcbiAgICBleHBvcnQgbGV0IHZhbHVlID0gdW5kZWZpbmVkXG4gICAgZXhwb3J0IGxldCByb3VuZCA9IHVuZGVmaW5lZFxuICAgIGV4cG9ydCBsZXQgc3R5bGUgPSB1bmRlZmluZWRcbiAgICBleHBvcnQgbGV0IGljb25JcyA9IHVuZGVmaW5lZFxuICAgIGV4cG9ydCBsZXQgZXJyb3JzID0gdW5kZWZpbmVkXG4gICAgZXhwb3J0IGxldCBpbnZhbGlkID0gdW5kZWZpbmVkXG4gICAgZXhwb3J0IGxldCBtdWx0aXBsZSA9IHVuZGVmaW5lZFxuICAgIGV4cG9ydCBsZXQgZGlzYWJsZWQgPSB1bmRlZmluZWRcbiAgICBleHBvcnQgbGV0IGFjY2VwdCA9IFwiaW1hZ2UvcG5nLCBpbWFnZS9qcGVnXCJcblxuICAgIGxldCB2YWxpZFNyY1xuXG4gICAgJDogZXJyb3IgPSBpbnZhbGlkICE9PSB1bmRlZmluZWQgPyBpbnZhbGlkIDogISEoZXJyb3JzIHx8IFtdKS5sZW5ndGhcbiAgICAkOiBpY29uVHlwZSA9IGljb24gfHwgJ3VwbG9hZCdcbiAgICAkOiBpZFByb3AgPSBpZCB8fCBuYW1lXG4gICAgJDogc2V0VmFsaWRTcmMoc3JjKVxuICAgICQ6IGNsYXNzUHJvcCA9IGNsYXNzbmFtZXMoJ2lucC11cGxvYWQnLCB7IGVycm9yLCBkaXNhYmxlZCwgcHJldmlldzogc3JjIH0pXG4gICAgJDogc3R5bGVQcm9wID0gdG9DU1NTdHJpbmcoeyAuLi5zdHlsZSwgYm9yZGVyUmFkaXVzOiByb3VuZCA/ICc1MCUnIDogbnVsbCB9KVxuXG4gICAgZnVuY3Rpb24gc2V0VmFsaWRTcmMoZmlsZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBmaWxlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHZhbGlkU3JjID0gZmlsZVxuICAgICAgICAgICAgfSBlbHNlIGlmIChmaWxlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZiA9IEFycmF5LmlzQXJyYXkoZmlsZSkgPyBmaWxlWzBdIDogZmlsZVxuICAgICAgICAgICAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGUgPT4gdmFsaWRTcmMgPSBlLnRhcmdldC5yZXN1bHRcbiAgICAgICAgICAgICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChmKTsgLy8gY29udmVydCB0byBiYXNlNjQgc3RyaW5nXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFmaWxlKSB7XG4gICAgICAgICAgICAgICAgdmFsaWRTcmMgPSB1bmRlZmluZWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdVcGxvYWRCb3gvZ2V0VmFsaWRTcmMgZXJyb3I6ICcsIGVycilcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBvbkNoYW5nZShlKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gQXJyYXkuZnJvbShlLnRhcmdldC5maWxlcylcbiAgICAgICAgaWYgKCF2YWx1ZSB8fCAhdmFsdWUubGVuZ3RoKSByZXR1cm5cbiAgICAgICAgZGlzcGF0Y2goJ2NoYW5nZScsIHsgdmFsdWUsIG5hbWUsIGUgfSlcbiAgICB9XG48L3NjcmlwdD5cblxueyNpZiBsYWJlbH1cbiAgICA8aDIgY2xhc3M9XCJ0ZXh0LWxlZnRcIj57bGFiZWx9PC9oMj5cbiAgICA8QnIgc2l6ZT1cIjEwXCIvPlxuey9pZn1cbjxTcXVhcmUgY2xhc3M9eyQkcHJvcHMuY2xhc3N9IHN0eWxlPXtzdHlsZVByb3B9PlxuICAgIDxpbnB1dFxuICAgICAgICB7bmFtZX1cbiAgICAgICAge2FjY2VwdH1cbiAgICAgICAge211bHRpcGxlfVxuICAgICAgICBoaWRkZW4gXG4gICAgICAgIHR5cGU9XCJmaWxlXCIgXG4gICAgICAgIGlkPXtpZFByb3B9XG4gICAgICAgIGJpbmQ6dmFsdWVcbiAgICAgICAgb246Y2hhbmdlPXtvbkNoYW5nZX1cbiAgICA+XG4gICAgPGxhYmVsIGZvcj17aWRQcm9wfSBjbGFzcz17Y2xhc3NQcm9wfT5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZsZXggZnVsbC1hYnNvbHV0ZVwiPlxuICAgICAgICAgICAgPFBpY3R1cmUgc3JjPXt2YWxpZFNyY30gYWx0PVwi0JfQsNCy0LDQvdGC0LDQttC10L3QtSDRhNC+0YLQvlwiLz4gXG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiaWNvbiBmbGV4IHJlbGF0aXZlXCIgc3R5bGU9XCJmbGV4OiAwIDAgNzVweFwiPlxuICAgICAgICAgICAgPEljb24gdHlwZT17aWNvblR5cGV9IGlzPXtpY29uSXN9Lz5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9sYWJlbD5cbjwvU3F1YXJlPlxuXG48c3R5bGU+XG4uaW5wLXVwbG9hZCB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgLXdlYmtpdC1ib3gtZmxleDogMTtcbiAgICAgICAgLW1zLWZsZXgtcG9zaXRpdmU6IDE7XG4gICAgICAgICAgICBmbGV4LWdyb3c6IDE7XG4gICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gICAgZGlzcGxheTogLW1zLWZsZXhib3g7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xuICAgICAgICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAtd2Via2l0LWJveC1wYWNrOiBjZW50ZXI7XG4gICAgICAgIC1tcy1mbGV4LXBhY2s6IGNlbnRlcjtcbiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIC1tcy1mbGV4LWl0ZW0tYWxpZ246IHN0cmV0Y2g7XG4gICAgICAgIGFsaWduLXNlbGY6IHN0cmV0Y2g7XG4gICAganVzdGlmeS1zZWxmOiBzdHJldGNoO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgYm9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cy1tZWRpdW0pO1xuICAgIGNvbG9yOiByZ2JhKHZhcigtLXRoZW1lLWNvbG9yLXByaW1hcnktb3Bwb3NpdGUpLCAuNSk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSh2YXIoLS10aGVtZS1jb2xvci1wcmltYXJ5LW9wcG9zaXRlKSwgLjA3KTtcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWigwKTtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWigwKTtcbn1cblxuLmlucC11cGxvYWQucHJldmlldyAuaWNvbiB7XG4gICAgb3BhY2l0eTogLjU7XG59XG5cbi5pbnAtdXBsb2FkIC5pY29uIHtcbiAgICBvcGFjaXR5OiAuNztcbn1cblxuLmlucC11cGxvYWQuZGlzYWJsZWQge1xuICAgIG9wYWNpdHk6IC41O1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xufVxuXG4uaW5wLXVwbG9hZC5lcnJvcixcbmlucHV0OmludmFsaWQgKyAuaW5wLXVwbG9hZCB7XG4gICAgY29sb3I6IHJnYmEodmFyKC0tY29sb3ItZGFuZ2VyKSwgLjUpO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEodmFyKC0tY29sb3ItZGFuZ2VyKSwgLjA3KTtcbn1cblxuaW5wdXQ6Zm9jdXMgKyAuaW5wLXVwbG9hZCB7XG4gICAgY29sb3I6IHJnYmEodmFyKC0tY29sb3ItaW5mbyksIC41KTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKHZhcigtLWNvbG9yLWluZm8pLCAuMDcpO1xufTwvc3R5bGU+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBb0ZBLFdBQVcsNEJBQUMsQ0FBQyxBQUNULEtBQUssQ0FBRSxJQUFJLENBQ1gsZ0JBQWdCLENBQUUsQ0FBQyxDQUNmLGlCQUFpQixDQUFFLENBQUMsQ0FDaEIsU0FBUyxDQUFFLENBQUMsQ0FDcEIsT0FBTyxDQUFFLFdBQVcsQ0FDcEIsT0FBTyxDQUFFLFdBQVcsQ0FDcEIsT0FBTyxDQUFFLElBQUksQ0FDYixpQkFBaUIsQ0FBRSxNQUFNLENBQ3JCLGNBQWMsQ0FBRSxNQUFNLENBQ2xCLFdBQVcsQ0FBRSxNQUFNLENBQzNCLGdCQUFnQixDQUFFLE1BQU0sQ0FDcEIsYUFBYSxDQUFFLE1BQU0sQ0FDakIsZUFBZSxDQUFFLE1BQU0sQ0FDL0IsbUJBQW1CLENBQUUsT0FBTyxDQUN4QixVQUFVLENBQUUsT0FBTyxDQUN2QixZQUFZLENBQUUsT0FBTyxDQUNyQixRQUFRLENBQUUsTUFBTSxDQUNoQixhQUFhLENBQUUsSUFBSSxzQkFBc0IsQ0FBQyxDQUMxQyxLQUFLLENBQUUsS0FBSyxJQUFJLDhCQUE4QixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FDcEQsZ0JBQWdCLENBQUUsS0FBSyxJQUFJLDhCQUE4QixDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FDaEUsaUJBQWlCLENBQUUsV0FBVyxDQUFDLENBQUMsQ0FDeEIsU0FBUyxDQUFFLFdBQVcsQ0FBQyxDQUFDLEFBQ3BDLENBQUMsQUFFRCxXQUFXLHNCQUFRLENBQUMsS0FBSyxjQUFDLENBQUMsQUFDdkIsT0FBTyxDQUFFLEVBQUUsQUFDZixDQUFDLEFBRUQseUJBQVcsQ0FBQyxLQUFLLGNBQUMsQ0FBQyxBQUNmLE9BQU8sQ0FBRSxFQUFFLEFBQ2YsQ0FBQyxBQUVELFdBQVcsU0FBUyw0QkFBQyxDQUFDLEFBQ2xCLE9BQU8sQ0FBRSxFQUFFLENBQ1gsY0FBYyxDQUFFLElBQUksQUFDeEIsQ0FBQyxBQUVELFdBQVcsa0NBQU0sQ0FDakIsS0FBSyxRQUFRLENBQUcsV0FBVyw0QkFBQyxDQUFDLEFBQ3pCLEtBQUssQ0FBRSxLQUFLLElBQUksY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FDcEMsZ0JBQWdCLENBQUUsS0FBSyxJQUFJLGNBQWMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEFBQ3BELENBQUMsQUFFRCxLQUFLLE1BQU0sQ0FBRyxXQUFXLDRCQUFDLENBQUMsQUFDdkIsS0FBSyxDQUFFLEtBQUssSUFBSSxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUNsQyxnQkFBZ0IsQ0FBRSxLQUFLLElBQUksWUFBWSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQUFDbEQsQ0FBQyJ9 */";
	append_dev(document.head, style);
}

// (59:0) {#if label}
function create_if_block$f(ctx) {
	let h2;
	let t0;
	let t1;
	let br;
	let current;
	br = new Br({ props: { size: "10" }, $$inline: true });

	const block = {
		c: function create() {
			h2 = element("h2");
			t0 = text(/*label*/ ctx[2]);
			t1 = space();
			create_component(br.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			h2 = claim_element(nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, /*label*/ ctx[2]);
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			claim_component(br.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "text-left");
			add_location(h2, file$Y, 59, 4, 1961);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			append_dev(h2, t0);
			insert_dev(target, t1, anchor);
			mount_component(br, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (!current || dirty & /*label*/ 4) set_data_dev(t0, /*label*/ ctx[2]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(br.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(br.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t1);
			destroy_component(br, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$f.name,
		type: "if",
		source: "(59:0) {#if label}",
		ctx
	});

	return block;
}

// (63:0) <Square class={$$props.class} style={styleProp}>
function create_default_slot$E(ctx) {
	let input;
	let t0;
	let label_1;
	let div0;
	let picture;
	let t1;
	let div1;
	let icon_1;
	let label_1_class_value;
	let current;
	let mounted;
	let dispose;

	picture = new Picture({
			props: {
				src: /*validSrc*/ ctx[6],
				alt: "Завантажене фото"
			},
			$$inline: true
		});

	icon_1 = new Icon({
			props: {
				type: /*iconType*/ ctx[7],
				is: /*iconIs*/ ctx[3]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			input = element("input");
			t0 = space();
			label_1 = element("label");
			div0 = element("div");
			create_component(picture.$$.fragment);
			t1 = space();
			div1 = element("div");
			create_component(icon_1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			input = claim_element(nodes, "INPUT", {
				name: true,
				accept: true,
				multiple: true,
				hidden: true,
				type: true,
				id: true
			});

			t0 = claim_space(nodes);
			label_1 = claim_element(nodes, "LABEL", { for: true, class: true });
			var label_1_nodes = children(label_1);
			div0 = claim_element(label_1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(picture.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(label_1_nodes);
			div1 = claim_element(label_1_nodes, "DIV", { class: true, style: true });
			var div1_nodes = children(div1);
			claim_component(icon_1.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			label_1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(input, "name", /*name*/ ctx[1]);
			attr_dev(input, "accept", /*accept*/ ctx[5]);
			input.multiple = /*multiple*/ ctx[4];
			input.hidden = true;
			attr_dev(input, "type", "file");
			attr_dev(input, "id", /*idProp*/ ctx[8]);
			add_location(input, file$Y, 63, 4, 2075);
			attr_dev(div0, "class", "flex full-absolute");
			add_location(div0, file$Y, 74, 8, 2295);
			attr_dev(div1, "class", "icon flex relative svelte-zm8c1o");
			set_style(div1, "flex", "0 0 75px");
			add_location(div1, file$Y, 77, 8, 2413);
			attr_dev(label_1, "for", /*idProp*/ ctx[8]);
			attr_dev(label_1, "class", label_1_class_value = "" + (null_to_empty(/*classProp*/ ctx[9]) + " svelte-zm8c1o"));
			add_location(label_1, file$Y, 73, 4, 2248);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, label_1, anchor);
			append_dev(label_1, div0);
			mount_component(picture, div0, null);
			append_dev(label_1, t1);
			append_dev(label_1, div1);
			mount_component(icon_1, div1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(input, "change", /*input_change_handler*/ ctx[21]),
					listen_dev(input, "change", /*onChange*/ ctx[11], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (!current || dirty & /*name*/ 2) {
				attr_dev(input, "name", /*name*/ ctx[1]);
			}

			if (!current || dirty & /*accept*/ 32) {
				attr_dev(input, "accept", /*accept*/ ctx[5]);
			}

			if (!current || dirty & /*multiple*/ 16) {
				prop_dev(input, "multiple", /*multiple*/ ctx[4]);
			}

			if (!current || dirty & /*idProp*/ 256) {
				attr_dev(input, "id", /*idProp*/ ctx[8]);
			}

			const picture_changes = {};
			if (dirty & /*validSrc*/ 64) picture_changes.src = /*validSrc*/ ctx[6];
			picture.$set(picture_changes);
			const icon_1_changes = {};
			if (dirty & /*iconType*/ 128) icon_1_changes.type = /*iconType*/ ctx[7];
			if (dirty & /*iconIs*/ 8) icon_1_changes.is = /*iconIs*/ ctx[3];
			icon_1.$set(icon_1_changes);

			if (!current || dirty & /*idProp*/ 256) {
				attr_dev(label_1, "for", /*idProp*/ ctx[8]);
			}

			if (!current || dirty & /*classProp*/ 512 && label_1_class_value !== (label_1_class_value = "" + (null_to_empty(/*classProp*/ ctx[9]) + " svelte-zm8c1o"))) {
				attr_dev(label_1, "class", label_1_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(picture.$$.fragment, local);
			transition_in(icon_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(picture.$$.fragment, local);
			transition_out(icon_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(label_1);
			destroy_component(picture);
			destroy_component(icon_1);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$E.name,
		type: "slot",
		source: "(63:0) <Square class={$$props.class} style={styleProp}>",
		ctx
	});

	return block;
}

function create_fragment$Y(ctx) {
	let t;
	let square;
	let current;
	let if_block = /*label*/ ctx[2] && create_if_block$f(ctx);

	square = new Square({
			props: {
				class: /*$$props*/ ctx[12].class,
				style: /*styleProp*/ ctx[10],
				$$slots: { default: [create_default_slot$E] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			t = space();
			create_component(square.$$.fragment);
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			t = claim_space(nodes);
			claim_component(square.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, t, anchor);
			mount_component(square, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*label*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*label*/ 4) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$f(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(t.parentNode, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			const square_changes = {};
			if (dirty & /*$$props*/ 4096) square_changes.class = /*$$props*/ ctx[12].class;
			if (dirty & /*styleProp*/ 1024) square_changes.style = /*styleProp*/ ctx[10];

			if (dirty & /*$$scope, idProp, classProp, iconType, iconIs, validSrc, name, accept, multiple, value*/ 33555451) {
				square_changes.$$scope = { dirty, ctx };
			}

			square.$set(square_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(square.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			transition_out(square.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(t);
			destroy_component(square, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$Y.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$Y($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { id = undefined } = $$props;
	let { src = undefined } = $$props;
	let { name = undefined } = $$props;
	let { icon = undefined } = $$props;
	let { label = undefined } = $$props;
	let { value = undefined } = $$props;
	let { round = undefined } = $$props;
	let { style = undefined } = $$props;
	let { iconIs = undefined } = $$props;
	let { errors = undefined } = $$props;
	let { invalid = undefined } = $$props;
	let { multiple = undefined } = $$props;
	let { disabled = undefined } = $$props;
	let { accept = "image/png, image/jpeg" } = $$props;
	let validSrc;

	function setValidSrc(file) {
		try {
			if (typeof file === "string") {
				$$invalidate(6, validSrc = file);
			} else if (file) {
				const f = Array.isArray(file) ? file[0] : file;
				const reader = new FileReader();
				reader.onload = e => $$invalidate(6, validSrc = e.target.result);
				reader.readAsDataURL(f); // convert to base64 string
			} else if (!file) {
				$$invalidate(6, validSrc = undefined);
			}
		} catch(err) {
			console.log("UploadBox/getValidSrc error: ", err);
		}
	}

	function onChange(e) {
		const value = Array.from(e.target.files);
		if (!value || !value.length) return;
		dispatch("change", { value, name, e });
	}

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("UploadBox", $$slots, []);

	function input_change_handler() {
		value = this.value;
		$$invalidate(0, value);
	}

	$$self.$set = $$new_props => {
		$$invalidate(12, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("id" in $$new_props) $$invalidate(13, id = $$new_props.id);
		if ("src" in $$new_props) $$invalidate(14, src = $$new_props.src);
		if ("name" in $$new_props) $$invalidate(1, name = $$new_props.name);
		if ("icon" in $$new_props) $$invalidate(15, icon = $$new_props.icon);
		if ("label" in $$new_props) $$invalidate(2, label = $$new_props.label);
		if ("value" in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ("round" in $$new_props) $$invalidate(16, round = $$new_props.round);
		if ("style" in $$new_props) $$invalidate(17, style = $$new_props.style);
		if ("iconIs" in $$new_props) $$invalidate(3, iconIs = $$new_props.iconIs);
		if ("errors" in $$new_props) $$invalidate(18, errors = $$new_props.errors);
		if ("invalid" in $$new_props) $$invalidate(19, invalid = $$new_props.invalid);
		if ("multiple" in $$new_props) $$invalidate(4, multiple = $$new_props.multiple);
		if ("disabled" in $$new_props) $$invalidate(20, disabled = $$new_props.disabled);
		if ("accept" in $$new_props) $$invalidate(5, accept = $$new_props.accept);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		classnames,
		toCSSString,
		Br,
		Icon,
		Square,
		Picture,
		dispatch,
		id,
		src,
		name,
		icon,
		label,
		value,
		round,
		style,
		iconIs,
		errors,
		invalid,
		multiple,
		disabled,
		accept,
		validSrc,
		setValidSrc,
		onChange,
		error,
		iconType,
		idProp,
		classProp,
		styleProp
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(12, $$props = assign(assign({}, $$props), $$new_props));
		if ("id" in $$props) $$invalidate(13, id = $$new_props.id);
		if ("src" in $$props) $$invalidate(14, src = $$new_props.src);
		if ("name" in $$props) $$invalidate(1, name = $$new_props.name);
		if ("icon" in $$props) $$invalidate(15, icon = $$new_props.icon);
		if ("label" in $$props) $$invalidate(2, label = $$new_props.label);
		if ("value" in $$props) $$invalidate(0, value = $$new_props.value);
		if ("round" in $$props) $$invalidate(16, round = $$new_props.round);
		if ("style" in $$props) $$invalidate(17, style = $$new_props.style);
		if ("iconIs" in $$props) $$invalidate(3, iconIs = $$new_props.iconIs);
		if ("errors" in $$props) $$invalidate(18, errors = $$new_props.errors);
		if ("invalid" in $$props) $$invalidate(19, invalid = $$new_props.invalid);
		if ("multiple" in $$props) $$invalidate(4, multiple = $$new_props.multiple);
		if ("disabled" in $$props) $$invalidate(20, disabled = $$new_props.disabled);
		if ("accept" in $$props) $$invalidate(5, accept = $$new_props.accept);
		if ("validSrc" in $$props) $$invalidate(6, validSrc = $$new_props.validSrc);
		if ("error" in $$props) $$invalidate(22, error = $$new_props.error);
		if ("iconType" in $$props) $$invalidate(7, iconType = $$new_props.iconType);
		if ("idProp" in $$props) $$invalidate(8, idProp = $$new_props.idProp);
		if ("classProp" in $$props) $$invalidate(9, classProp = $$new_props.classProp);
		if ("styleProp" in $$props) $$invalidate(10, styleProp = $$new_props.styleProp);
	};

	let error;
	let iconType;
	let idProp;
	let classProp;
	let styleProp;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*invalid, errors*/ 786432) {
			 $$invalidate(22, error = invalid !== undefined
			? invalid
			: !!(errors || []).length);
		}

		if ($$self.$$.dirty & /*icon*/ 32768) {
			 $$invalidate(7, iconType = icon || "upload");
		}

		if ($$self.$$.dirty & /*id, name*/ 8194) {
			 $$invalidate(8, idProp = id || name);
		}

		if ($$self.$$.dirty & /*src*/ 16384) {
			 setValidSrc(src);
		}

		if ($$self.$$.dirty & /*error, disabled, src*/ 5259264) {
			 $$invalidate(9, classProp = classnames("inp-upload", { error, disabled, preview: src }));
		}

		if ($$self.$$.dirty & /*style, round*/ 196608) {
			 $$invalidate(10, styleProp = toCSSString({
				...style,
				borderRadius: round ? "50%" : null
			}));
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		value,
		name,
		label,
		iconIs,
		multiple,
		accept,
		validSrc,
		iconType,
		idProp,
		classProp,
		styleProp,
		onChange,
		$$props,
		id,
		src,
		icon,
		round,
		style,
		errors,
		invalid,
		disabled,
		input_change_handler
	];
}

class UploadBox extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-zm8c1o-style")) add_css$j();

		init(this, options, instance$Y, create_fragment$Y, safe_not_equal, {
			id: 13,
			src: 14,
			name: 1,
			icon: 15,
			label: 2,
			value: 0,
			round: 16,
			style: 17,
			iconIs: 3,
			errors: 18,
			invalid: 19,
			multiple: 4,
			disabled: 20,
			accept: 5
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "UploadBox",
			options,
			id: create_fragment$Y.name
		});
	}

	get id() {
		throw new Error("<UploadBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<UploadBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get src() {
		throw new Error("<UploadBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set src(value) {
		throw new Error("<UploadBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get name() {
		throw new Error("<UploadBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<UploadBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get icon() {
		throw new Error("<UploadBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set icon(value) {
		throw new Error("<UploadBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<UploadBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<UploadBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<UploadBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<UploadBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get round() {
		throw new Error("<UploadBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set round(value) {
		throw new Error("<UploadBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<UploadBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<UploadBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get iconIs() {
		throw new Error("<UploadBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set iconIs(value) {
		throw new Error("<UploadBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get errors() {
		throw new Error("<UploadBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set errors(value) {
		throw new Error("<UploadBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get invalid() {
		throw new Error("<UploadBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set invalid(value) {
		throw new Error("<UploadBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get multiple() {
		throw new Error("<UploadBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set multiple(value) {
		throw new Error("<UploadBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<UploadBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<UploadBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get accept() {
		throw new Error("<UploadBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set accept(value) {
		throw new Error("<UploadBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/fields/uploadFiles/UploadBoxGroup.svelte generated by Svelte v3.24.0 */
const file$Z = "src/components/fields/uploadFiles/UploadBoxGroup.svelte";

function add_css$k() {
	var style = element("style");
	style.id = "svelte-1he43cw-style";
	style.textContent = "ul.svelte-1he43cw{width:100%;display:grid;grid-template:auto / .5fr .5fr;grid-gap:var(--screen-padding)}ul.disabled.svelte-1he43cw{opacity:.5;pointer-events:none}button.svelte-1he43cw{position:absolute;top:0;right:0;font-size:24px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;width:40px;height:40px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXBsb2FkQm94R3JvdXAuc3ZlbHRlIiwic291cmNlcyI6WyJVcGxvYWRCb3hHcm91cC5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tICdzdmVsdGUnXG4gICAgaW1wb3J0IHsgXywgY2xhc3NuYW1lcyB9IGZyb20gJ0B1dGlscydcbiAgICBpbXBvcnQgQnIgZnJvbSAnQGNvbXBvbmVudHMvQnIuc3ZlbHRlJ1xuICAgIGltcG9ydCBJY29uIGZyb20gJ0Bjb21wb25lbnRzL0ljb24uc3ZlbHRlJ1xuICAgIGltcG9ydCBVcGxvYWRCb3ggZnJvbSAnLi9VcGxvYWRCb3guc3ZlbHRlJ1xuXG4gICAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKVxuXG4gICAgZXhwb3J0IGxldCBuYW1lXG4gICAgZXhwb3J0IGxldCBpZCA9IHVuZGVmaW5lZFxuICAgIGV4cG9ydCBsZXQgbGFiZWwgPSB1bmRlZmluZWRcbiAgICBleHBvcnQgbGV0IHZhbHVlID0gdW5kZWZpbmVkXG4gICAgZXhwb3J0IGxldCBhY2NlcHQgPSB1bmRlZmluZWRcbiAgICBleHBvcnQgbGV0IGVycm9ycyA9IHVuZGVmaW5lZFxuICAgIGV4cG9ydCBsZXQgaW52YWxpZCA9IHVuZGVmaW5lZFxuICAgIGV4cG9ydCBsZXQgbXVsdGlwbGUgPSB1bmRlZmluZWRcbiAgICBleHBvcnQgbGV0IGRpc2FibGVkID0gdW5kZWZpbmVkXG4gICAgZXhwb3J0IGxldCBpbmZvSW5kZXggPSBbMF1cblxuICAgIGNvbnN0IEJPWF9BTU9VTlQgPSA0XG5cbiAgICAkOiB2YWx1ZXMgPSB2YWx1ZSB8fCBbXVxuICAgICQ6IGVycm9yID0gaW52YWxpZCAhPT0gdW5kZWZpbmVkID8gaW52YWxpZCA6ICEhKGVycm9ycyB8fCBbXSkubGVuZ3RoXG4gICAgJDogaWRQcm9wID0gaWQgfHwgbmFtZVxuICAgICQ6IGl0ZW1zTGlzdCA9IGdldENlbGxzKHZhbHVlcylcbiAgICAkOiBjbGFzc1Byb3AgPSBjbGFzc25hbWVzKCdpbnAtdXBsb2FkLWdyb3VwJywgJCRwcm9wcy5jbGFzcywgeyBlcnJvciwgZGlzYWJsZWQgfSlcblxuICAgIGZ1bmN0aW9uIGdldENlbGxzKGxpc3QpIHtcbiAgICAgICAgY29uc3QgZGVmYXVsdExpc3QgPSBuZXcgQXJyYXkoQk9YX0FNT1VOVCAtIDEpLmZpbGwodW5kZWZpbmVkKVxuICAgICAgICBjb25zdCBsaXN0QXJyID0gW10uY29uY2F0KGxpc3QgfHwgW10pXG4gICAgICAgIGNvbnN0IGJpZ2dlckxpc3QgPSBsaXN0QXJyLmxlbmd0aCA+IGRlZmF1bHRMaXN0Lmxlbmd0aCA/IGxpc3RBcnIgOiBkZWZhdWx0TGlzdFxuICAgICAgICBiaWdnZXJMaXN0LnB1c2godW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gYmlnZ2VyTGlzdC5tYXAoKChfLCBpKSA9PiBsaXN0QXJyW2ldIHx8IGRlZmF1bHRMaXN0W2ldKSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkNoYW5nZShpLCB7IGRldGFpbDogeyBlLCB2YWx1ZSB9IH0pIHtcbiAgICAgICAgY29uc3QgdmFsID0gWy4uLnZhbHVlc11cbiAgICAgICAgdmFsLnNwbGljZShpLCAwLCAuLi52YWx1ZSlcbiAgICAgICAgdmFsdWVzID0gdmFsXG4gICAgICAgIGRpc3BhdGNoKCdjaGFuZ2UnLCB7IGUsIG5hbWUsIHZhbHVlOiB2YWx1ZXMgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvblJlbW92ZShpLCBlKSB7XG4gICAgICAgIHZhbHVlcyA9IFsuLi52YWx1ZXMuZmlsdGVyKChfLCBpbmQpID0+IGluZCAhPT0gaSldXG4gICAgICAgIGRpc3BhdGNoKCdjaGFuZ2UnLCB7IGUsIG5hbWUsIHZhbHVlOiB2YWx1ZXMgfSlcbiAgICB9XG48L3NjcmlwdD5cblxueyNpZiBsYWJlbH1cbiAgICA8aDIgY2xhc3M9XCJ0ZXh0LWxlZnRcIj57bGFiZWx9PC9oMj5cbiAgICA8QnIgc2l6ZT1cIjEwXCIvPlxuey9pZn1cbjx1bCBpZD17aWRQcm9wfSBjbGFzcz17Y2xhc3NQcm9wfT5cbiAgICB7I2VhY2ggaXRlbXNMaXN0IGFzIGl0ZW0sIGl9XG4gICAgICAgIDxsaSBjbGFzcz1cInJlbGF0aXZlXCI+XG4gICAgICAgICAgICA8VXBsb2FkQm94XG4gICAgICAgICAgICAgICAga2V5PXtpfVxuICAgICAgICAgICAgICAgIHthY2NlcHR9XG4gICAgICAgICAgICAgICAge2ludmFsaWR9XG4gICAgICAgICAgICAgICAge2Rpc2FibGVkfVxuICAgICAgICAgICAgICAgIHttdWx0aXBsZX1cbiAgICAgICAgICAgICAgICBuYW1lPXtgJHtuYW1lIHx8ICcnfVske2l9XWB9XG4gICAgICAgICAgICAgICAgc3JjPXsodmFsdWVzW2ldIHx8IHt9KS5zcmMgfHwgdmFsdWVzW2ldfVxuICAgICAgICAgICAgICAgIGVycm9ycz17Xy5nZXQoZXJyb3JzLCBpKX1cbiAgICAgICAgICAgICAgICBzdHlsZT17eyBtYXhIZWlnaHQ6ICcxNjBweCcgfX1cbiAgICAgICAgICAgICAgICBpY29uSXM9e2luZm9JbmRleC5pbmNsdWRlcyhpKSA/ICdpbmZvJyA6IHVuZGVmaW5lZH1cbiAgICAgICAgICAgICAgICBvbjpjaGFuZ2U9e29uQ2hhbmdlLmJpbmQobnVsbCwgaSl9XG4gICAgICAgICAgICAvPlxuXG4gICAgICAgICAgICB7I2lmIHZhbHVlc1tpXX1cbiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBvbjpjbGljaz17b25SZW1vdmUuYmluZChudWxsLCBpKX0+XG4gICAgICAgICAgICAgICAgICAgIDxJY29uIHNpemU9XCJiaWdcIiB0eXBlPVwiY2xvc2VcIi8+ICAgIFxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgey9pZn1cbiAgICAgICAgPC9saT5cbiAgICB7L2VhY2h9XG48L3VsPlxuXG48c3R5bGU+XG51bCB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBncmlkLXRlbXBsYXRlOiBhdXRvIC8gLjVmciAuNWZyO1xuICAgIGdyaWQtZ2FwOiB2YXIoLS1zY3JlZW4tcGFkZGluZyk7XG59XG5cbnVsLmRpc2FibGVkIHtcbiAgICBvcGFjaXR5OiAuNTtcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbn1cblxuYnV0dG9uIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwO1xuICAgIHJpZ2h0OiAwO1xuICAgIGZvbnQtc2l6ZTogMjRweDtcbiAgICBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgICBkaXNwbGF5OiAtbXMtZmxleGJveDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XG4gICAgICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIC13ZWJraXQtYm94LXBhY2s6IGNlbnRlcjtcbiAgICAgICAgLW1zLWZsZXgtcGFjazogY2VudGVyO1xuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgd2lkdGg6IDQwcHg7XG4gICAgaGVpZ2h0OiA0MHB4O1xufTwvc3R5bGU+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0ZBLEVBQUUsZUFBQyxDQUFDLEFBQ0EsS0FBSyxDQUFFLElBQUksQ0FDWCxPQUFPLENBQUUsSUFBSSxDQUNiLGFBQWEsQ0FBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQy9CLFFBQVEsQ0FBRSxJQUFJLGdCQUFnQixDQUFDLEFBQ25DLENBQUMsQUFFRCxFQUFFLFNBQVMsZUFBQyxDQUFDLEFBQ1QsT0FBTyxDQUFFLEVBQUUsQ0FDWCxjQUFjLENBQUUsSUFBSSxBQUN4QixDQUFDLEFBRUQsTUFBTSxlQUFDLENBQUMsQUFDSixRQUFRLENBQUUsUUFBUSxDQUNsQixHQUFHLENBQUUsQ0FBQyxDQUNOLEtBQUssQ0FBRSxDQUFDLENBQ1IsU0FBUyxDQUFFLElBQUksQ0FDZixPQUFPLENBQUUsV0FBVyxDQUNwQixPQUFPLENBQUUsV0FBVyxDQUNwQixPQUFPLENBQUUsSUFBSSxDQUNiLGlCQUFpQixDQUFFLE1BQU0sQ0FDckIsY0FBYyxDQUFFLE1BQU0sQ0FDbEIsV0FBVyxDQUFFLE1BQU0sQ0FDM0IsZ0JBQWdCLENBQUUsTUFBTSxDQUNwQixhQUFhLENBQUUsTUFBTSxDQUNqQixlQUFlLENBQUUsTUFBTSxDQUMvQixLQUFLLENBQUUsSUFBSSxDQUNYLE1BQU0sQ0FBRSxJQUFJLEFBQ2hCLENBQUMifQ== */";
	append_dev(document.head, style);
}

function get_each_context$4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[19] = list[i];
	child_ctx[21] = i;
	return child_ctx;
}

// (50:0) {#if label}
function create_if_block_1$9(ctx) {
	let h2;
	let t0;
	let t1;
	let br;
	let current;
	br = new Br({ props: { size: "10" }, $$inline: true });

	const block = {
		c: function create() {
			h2 = element("h2");
			t0 = text(/*label*/ ctx[1]);
			t1 = space();
			create_component(br.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			h2 = claim_element(nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, /*label*/ ctx[1]);
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			claim_component(br.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "text-left");
			add_location(h2, file$Z, 50, 4, 1614);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			append_dev(h2, t0);
			insert_dev(target, t1, anchor);
			mount_component(br, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (!current || dirty & /*label*/ 2) set_data_dev(t0, /*label*/ ctx[1]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(br.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(br.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t1);
			destroy_component(br, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$9.name,
		type: "if",
		source: "(50:0) {#if label}",
		ctx
	});

	return block;
}

// (71:12) {#if values[i]}
function create_if_block$g(ctx) {
	let button;
	let icon;
	let current;
	let mounted;
	let dispose;

	icon = new Icon({
			props: { size: "big", type: "close" },
			$$inline: true
		});

	const block = {
		c: function create() {
			button = element("button");
			create_component(icon.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", { type: true, class: true });
			var button_nodes = children(button);
			claim_component(icon.$$.fragment, button_nodes);
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "type", "button");
			attr_dev(button, "class", "svelte-1he43cw");
			add_location(button, file$Z, 71, 16, 2295);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			mount_component(icon, button, null);
			current = true;

			if (!mounted) {
				dispose = listen_dev(button, "click", /*onRemove*/ ctx[13].bind(null, /*i*/ ctx[21]), false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			destroy_component(icon);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$g.name,
		type: "if",
		source: "(71:12) {#if values[i]}",
		ctx
	});

	return block;
}

// (55:4) {#each itemsList as item, i}
function create_each_block$4(ctx) {
	let li;
	let uploadbox;
	let t0;
	let t1;
	let current;

	uploadbox = new UploadBox({
			props: {
				key: /*i*/ ctx[21],
				accept: /*accept*/ ctx[2],
				invalid: /*invalid*/ ctx[4],
				disabled: /*disabled*/ ctx[6],
				multiple: /*multiple*/ ctx[5],
				name: `${/*name*/ ctx[0] || ""}[${/*i*/ ctx[21]}]`,
				src: (/*values*/ ctx[8][/*i*/ ctx[21]] || {}).src || /*values*/ ctx[8][/*i*/ ctx[21]],
				errors: get(/*errors*/ ctx[3], /*i*/ ctx[21]),
				style: { maxHeight: "160px" },
				iconIs: /*infoIndex*/ ctx[7].includes(/*i*/ ctx[21])
				? "info"
				: undefined
			},
			$$inline: true
		});

	uploadbox.$on("change", /*onChange*/ ctx[12].bind(null, /*i*/ ctx[21]));
	let if_block = /*values*/ ctx[8][/*i*/ ctx[21]] && create_if_block$g(ctx);

	const block = {
		c: function create() {
			li = element("li");
			create_component(uploadbox.$$.fragment);
			t0 = space();
			if (if_block) if_block.c();
			t1 = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			claim_component(uploadbox.$$.fragment, li_nodes);
			t0 = claim_space(li_nodes);
			if (if_block) if_block.l(li_nodes);
			t1 = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(li, "class", "relative");
			add_location(li, file$Z, 55, 8, 1751);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			mount_component(uploadbox, li, null);
			append_dev(li, t0);
			if (if_block) if_block.m(li, null);
			append_dev(li, t1);
			current = true;
		},
		p: function update(ctx, dirty) {
			const uploadbox_changes = {};
			if (dirty & /*accept*/ 4) uploadbox_changes.accept = /*accept*/ ctx[2];
			if (dirty & /*invalid*/ 16) uploadbox_changes.invalid = /*invalid*/ ctx[4];
			if (dirty & /*disabled*/ 64) uploadbox_changes.disabled = /*disabled*/ ctx[6];
			if (dirty & /*multiple*/ 32) uploadbox_changes.multiple = /*multiple*/ ctx[5];
			if (dirty & /*name*/ 1) uploadbox_changes.name = `${/*name*/ ctx[0] || ""}[${/*i*/ ctx[21]}]`;
			if (dirty & /*values*/ 256) uploadbox_changes.src = (/*values*/ ctx[8][/*i*/ ctx[21]] || {}).src || /*values*/ ctx[8][/*i*/ ctx[21]];
			if (dirty & /*errors*/ 8) uploadbox_changes.errors = get(/*errors*/ ctx[3], /*i*/ ctx[21]);

			if (dirty & /*infoIndex*/ 128) uploadbox_changes.iconIs = /*infoIndex*/ ctx[7].includes(/*i*/ ctx[21])
			? "info"
			: undefined;

			uploadbox.$set(uploadbox_changes);

			if (/*values*/ ctx[8][/*i*/ ctx[21]]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*values*/ 256) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$g(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(li, t1);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(uploadbox.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(uploadbox.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			destroy_component(uploadbox);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$4.name,
		type: "each",
		source: "(55:4) {#each itemsList as item, i}",
		ctx
	});

	return block;
}

function create_fragment$Z(ctx) {
	let t;
	let ul;
	let ul_class_value;
	let current;
	let if_block = /*label*/ ctx[1] && create_if_block_1$9(ctx);
	let each_value = /*itemsList*/ ctx[10];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			t = space();
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			t = claim_space(nodes);
			ul = claim_element(nodes, "UL", { id: true, class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(ul, "id", /*idProp*/ ctx[9]);
			attr_dev(ul, "class", ul_class_value = "" + (null_to_empty(/*classProp*/ ctx[11]) + " svelte-1he43cw"));
			add_location(ul, file$Z, 53, 0, 1675);
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, t, anchor);
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*label*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*label*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1$9(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(t.parentNode, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (dirty & /*onRemove, values, accept, invalid, disabled, multiple, name, _, errors, infoIndex, undefined, onChange, itemsList*/ 13821) {
				each_value = /*itemsList*/ ctx[10];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$4(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$4(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(ul, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (!current || dirty & /*idProp*/ 512) {
				attr_dev(ul, "id", /*idProp*/ ctx[9]);
			}

			if (!current || dirty & /*classProp*/ 2048 && ul_class_value !== (ul_class_value = "" + (null_to_empty(/*classProp*/ ctx[11]) + " svelte-1he43cw"))) {
				attr_dev(ul, "class", ul_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$Z.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const BOX_AMOUNT = 4;

function getCells(list) {
	const defaultList = new Array(BOX_AMOUNT - 1).fill(undefined);
	const listArr = [].concat(list || []);

	const biggerList = listArr.length > defaultList.length
	? listArr
	: defaultList;

	biggerList.push(undefined);
	return biggerList.map((_, i) => listArr[i] || defaultList[i]);
}

function instance$Z($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { name } = $$props;
	let { id = undefined } = $$props;
	let { label = undefined } = $$props;
	let { value = undefined } = $$props;
	let { accept = undefined } = $$props;
	let { errors = undefined } = $$props;
	let { invalid = undefined } = $$props;
	let { multiple = undefined } = $$props;
	let { disabled = undefined } = $$props;
	let { infoIndex = [0] } = $$props;

	function onChange(i, { detail: { e, value } }) {
		const val = [...values];
		val.splice(i, 0, ...value);
		$$invalidate(8, values = val);
		dispatch("change", { e, name, value: values });
	}

	function onRemove(i, e) {
		$$invalidate(8, values = [...values.filter((_, ind) => ind !== i)]);
		dispatch("change", { e, name, value: values });
	}

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("UploadBoxGroup", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("name" in $$new_props) $$invalidate(0, name = $$new_props.name);
		if ("id" in $$new_props) $$invalidate(14, id = $$new_props.id);
		if ("label" in $$new_props) $$invalidate(1, label = $$new_props.label);
		if ("value" in $$new_props) $$invalidate(15, value = $$new_props.value);
		if ("accept" in $$new_props) $$invalidate(2, accept = $$new_props.accept);
		if ("errors" in $$new_props) $$invalidate(3, errors = $$new_props.errors);
		if ("invalid" in $$new_props) $$invalidate(4, invalid = $$new_props.invalid);
		if ("multiple" in $$new_props) $$invalidate(5, multiple = $$new_props.multiple);
		if ("disabled" in $$new_props) $$invalidate(6, disabled = $$new_props.disabled);
		if ("infoIndex" in $$new_props) $$invalidate(7, infoIndex = $$new_props.infoIndex);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		_,
		classnames,
		Br,
		Icon,
		UploadBox,
		dispatch,
		name,
		id,
		label,
		value,
		accept,
		errors,
		invalid,
		multiple,
		disabled,
		infoIndex,
		BOX_AMOUNT,
		getCells,
		onChange,
		onRemove,
		values,
		error,
		idProp,
		itemsList,
		classProp
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), $$new_props));
		if ("name" in $$props) $$invalidate(0, name = $$new_props.name);
		if ("id" in $$props) $$invalidate(14, id = $$new_props.id);
		if ("label" in $$props) $$invalidate(1, label = $$new_props.label);
		if ("value" in $$props) $$invalidate(15, value = $$new_props.value);
		if ("accept" in $$props) $$invalidate(2, accept = $$new_props.accept);
		if ("errors" in $$props) $$invalidate(3, errors = $$new_props.errors);
		if ("invalid" in $$props) $$invalidate(4, invalid = $$new_props.invalid);
		if ("multiple" in $$props) $$invalidate(5, multiple = $$new_props.multiple);
		if ("disabled" in $$props) $$invalidate(6, disabled = $$new_props.disabled);
		if ("infoIndex" in $$props) $$invalidate(7, infoIndex = $$new_props.infoIndex);
		if ("values" in $$props) $$invalidate(8, values = $$new_props.values);
		if ("error" in $$props) $$invalidate(16, error = $$new_props.error);
		if ("idProp" in $$props) $$invalidate(9, idProp = $$new_props.idProp);
		if ("itemsList" in $$props) $$invalidate(10, itemsList = $$new_props.itemsList);
		if ("classProp" in $$props) $$invalidate(11, classProp = $$new_props.classProp);
	};

	let values;
	let error;
	let idProp;
	let itemsList;
	let classProp;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value*/ 32768) {
			 $$invalidate(8, values = value || []);
		}

		if ($$self.$$.dirty & /*invalid, errors*/ 24) {
			 $$invalidate(16, error = invalid !== undefined
			? invalid
			: !!(errors || []).length);
		}

		if ($$self.$$.dirty & /*id, name*/ 16385) {
			 $$invalidate(9, idProp = id || name);
		}

		if ($$self.$$.dirty & /*values*/ 256) {
			 $$invalidate(10, itemsList = getCells(values));
		}

		 $$invalidate(11, classProp = classnames("inp-upload-group", $$props.class, { error, disabled }));
	};

	$$props = exclude_internal_props($$props);

	return [
		name,
		label,
		accept,
		errors,
		invalid,
		multiple,
		disabled,
		infoIndex,
		values,
		idProp,
		itemsList,
		classProp,
		onChange,
		onRemove,
		id,
		value
	];
}

class UploadBoxGroup extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-1he43cw-style")) add_css$k();

		init(this, options, instance$Z, create_fragment$Z, safe_not_equal, {
			name: 0,
			id: 14,
			label: 1,
			value: 15,
			accept: 2,
			errors: 3,
			invalid: 4,
			multiple: 5,
			disabled: 6,
			infoIndex: 7
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "UploadBoxGroup",
			options,
			id: create_fragment$Z.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*name*/ ctx[0] === undefined && !("name" in props)) {
			console.warn("<UploadBoxGroup> was created without expected prop 'name'");
		}
	}

	get name() {
		throw new Error("<UploadBoxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<UploadBoxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<UploadBoxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<UploadBoxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<UploadBoxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<UploadBoxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<UploadBoxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<UploadBoxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get accept() {
		throw new Error("<UploadBoxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set accept(value) {
		throw new Error("<UploadBoxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get errors() {
		throw new Error("<UploadBoxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set errors(value) {
		throw new Error("<UploadBoxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get invalid() {
		throw new Error("<UploadBoxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set invalid(value) {
		throw new Error("<UploadBoxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get multiple() {
		throw new Error("<UploadBoxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set multiple(value) {
		throw new Error("<UploadBoxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<UploadBoxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<UploadBoxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get infoIndex() {
		throw new Error("<UploadBoxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set infoIndex(value) {
		throw new Error("<UploadBoxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/fields/AvatarUpload.svelte generated by Svelte v3.24.0 */
const file$_ = "src/components/fields/AvatarUpload.svelte";

// (32:4) {#if label}
function create_if_block$h(ctx) {
	let h2;
	let t0;
	let t1;
	let br;
	let current;
	br = new Br({ props: { size: "10" }, $$inline: true });

	const block = {
		c: function create() {
			h2 = element("h2");
			t0 = text(/*label*/ ctx[4]);
			t1 = space();
			create_component(br.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			h2 = claim_element(nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, /*label*/ ctx[4]);
			t1 = claim_space(h2_nodes);
			claim_component(br.$$.fragment, h2_nodes);
			h2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "text-left");
			add_location(h2, file$_, 32, 8, 1025);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			append_dev(h2, t0);
			append_dev(h2, t1);
			mount_component(br, h2, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (!current || dirty & /*label*/ 16) set_data_dev(t0, /*label*/ ctx[4]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(br.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(br.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
			destroy_component(br);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$h.name,
		type: "if",
		source: "(32:4) {#if label}",
		ctx
	});

	return block;
}

function create_fragment$_(ctx) {
	let div1;
	let t0;
	let section;
	let uploadbox;
	let t1;
	let div0;
	let fielderrors;
	let current;
	let if_block = /*label*/ ctx[4] && create_if_block$h(ctx);

	uploadbox = new UploadBox({
			props: {
				name: /*name*/ ctx[0],
				round: /*round*/ ctx[1],
				src: /*value*/ ctx[3],
				style: /*styleProp*/ ctx[6]
			},
			$$inline: true
		});

	uploadbox.$on("change", /*onChange*/ ctx[8]);

	fielderrors = new FieldErrors({
			props: { items: /*errors*/ ctx[5] },
			$$inline: true
		});

	const block = {
		c: function create() {
			div1 = element("div");
			if (if_block) if_block.c();
			t0 = space();
			section = element("section");
			create_component(uploadbox.$$.fragment);
			t1 = space();
			div0 = element("div");
			create_component(fielderrors.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { id: true, class: true });
			var div1_nodes = children(div1);
			if (if_block) if_block.l(div1_nodes);
			t0 = claim_space(div1_nodes);
			section = claim_element(div1_nodes, "SECTION", { class: true, style: true });
			var section_nodes = children(section);
			claim_component(uploadbox.$$.fragment, section_nodes);
			section_nodes.forEach(detach_dev);
			t1 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(fielderrors.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(section, "class", "inline-flex flex-justify-center");
			set_style(section, "padding", "10px 0");
			add_location(section, file$_, 38, 4, 1127);
			attr_dev(div0, "class", "text-center");
			add_location(div0, file$_, 48, 4, 1381);
			attr_dev(div1, "id", /*id*/ ctx[2]);
			attr_dev(div1, "class", /*classProp*/ ctx[7]);
			add_location(div1, file$_, 30, 0, 972);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			if (if_block) if_block.m(div1, null);
			append_dev(div1, t0);
			append_dev(div1, section);
			mount_component(uploadbox, section, null);
			append_dev(div1, t1);
			append_dev(div1, div0);
			mount_component(fielderrors, div0, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*label*/ ctx[4]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*label*/ 16) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$h(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div1, t0);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			const uploadbox_changes = {};
			if (dirty & /*name*/ 1) uploadbox_changes.name = /*name*/ ctx[0];
			if (dirty & /*round*/ 2) uploadbox_changes.round = /*round*/ ctx[1];
			if (dirty & /*value*/ 8) uploadbox_changes.src = /*value*/ ctx[3];
			if (dirty & /*styleProp*/ 64) uploadbox_changes.style = /*styleProp*/ ctx[6];
			uploadbox.$set(uploadbox_changes);
			const fielderrors_changes = {};
			if (dirty & /*errors*/ 32) fielderrors_changes.items = /*errors*/ ctx[5];
			fielderrors.$set(fielderrors_changes);

			if (!current || dirty & /*id*/ 4) {
				attr_dev(div1, "id", /*id*/ ctx[2]);
			}

			if (!current || dirty & /*classProp*/ 128) {
				attr_dev(div1, "class", /*classProp*/ ctx[7]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(uploadbox.$$.fragment, local);
			transition_in(fielderrors.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			transition_out(uploadbox.$$.fragment, local);
			transition_out(fielderrors.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if (if_block) if_block.d();
			destroy_component(uploadbox);
			destroy_component(fielderrors);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$_.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$_($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { name } = $$props;
	let { style = {} } = $$props;
	let { round = true } = $$props;
	let { id = undefined } = $$props;
	let { value = undefined } = $$props;
	let { label = undefined } = $$props;
	let { align = "center" } = $$props;
	let { invalid = undefined } = $$props;
	let { disabled = undefined } = $$props;
	let { required = undefined } = $$props; // undefined|required
	let { errors = undefined } = $$props;

	function onChange({ detail }) {
		dispatch("change", detail);
	}

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("AvatarUpload", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(16, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("name" in $$new_props) $$invalidate(0, name = $$new_props.name);
		if ("style" in $$new_props) $$invalidate(9, style = $$new_props.style);
		if ("round" in $$new_props) $$invalidate(1, round = $$new_props.round);
		if ("id" in $$new_props) $$invalidate(2, id = $$new_props.id);
		if ("value" in $$new_props) $$invalidate(3, value = $$new_props.value);
		if ("label" in $$new_props) $$invalidate(4, label = $$new_props.label);
		if ("align" in $$new_props) $$invalidate(10, align = $$new_props.align);
		if ("invalid" in $$new_props) $$invalidate(11, invalid = $$new_props.invalid);
		if ("disabled" in $$new_props) $$invalidate(12, disabled = $$new_props.disabled);
		if ("required" in $$new_props) $$invalidate(13, required = $$new_props.required);
		if ("errors" in $$new_props) $$invalidate(5, errors = $$new_props.errors);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		classnames,
		toCSSString,
		UploadBox,
		Br,
		FieldErrors,
		dispatch,
		name,
		style,
		round,
		id,
		value,
		label,
		align,
		invalid,
		disabled,
		required,
		errors,
		onChange,
		error,
		styleProp,
		classProp
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(16, $$props = assign(assign({}, $$props), $$new_props));
		if ("name" in $$props) $$invalidate(0, name = $$new_props.name);
		if ("style" in $$props) $$invalidate(9, style = $$new_props.style);
		if ("round" in $$props) $$invalidate(1, round = $$new_props.round);
		if ("id" in $$props) $$invalidate(2, id = $$new_props.id);
		if ("value" in $$props) $$invalidate(3, value = $$new_props.value);
		if ("label" in $$props) $$invalidate(4, label = $$new_props.label);
		if ("align" in $$props) $$invalidate(10, align = $$new_props.align);
		if ("invalid" in $$props) $$invalidate(11, invalid = $$new_props.invalid);
		if ("disabled" in $$props) $$invalidate(12, disabled = $$new_props.disabled);
		if ("required" in $$props) $$invalidate(13, required = $$new_props.required);
		if ("errors" in $$props) $$invalidate(5, errors = $$new_props.errors);
		if ("error" in $$props) $$invalidate(14, error = $$new_props.error);
		if ("styleProp" in $$props) $$invalidate(6, styleProp = $$new_props.styleProp);
		if ("classProp" in $$props) $$invalidate(7, classProp = $$new_props.classProp);
	};

	let error;
	let styleProp;
	let classProp;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*invalid, errors*/ 2080) {
			 $$invalidate(14, error = invalid || !!(errors || []).length);
		}

		if ($$self.$$.dirty & /*style*/ 512) {
			 $$invalidate(6, styleProp = { width: "145px", ...style });
		}

		 $$invalidate(7, classProp = classnames("avatar-upload", $$props.class, `text-${align}`, { disabled, required, error }));
	};

	$$props = exclude_internal_props($$props);

	return [
		name,
		round,
		id,
		value,
		label,
		errors,
		styleProp,
		classProp,
		onChange,
		style,
		align,
		invalid,
		disabled,
		required
	];
}

class AvatarUpload extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$_, create_fragment$_, safe_not_equal, {
			name: 0,
			style: 9,
			round: 1,
			id: 2,
			value: 3,
			label: 4,
			align: 10,
			invalid: 11,
			disabled: 12,
			required: 13,
			errors: 5
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "AvatarUpload",
			options,
			id: create_fragment$_.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*name*/ ctx[0] === undefined && !("name" in props)) {
			console.warn("<AvatarUpload> was created without expected prop 'name'");
		}
	}

	get name() {
		throw new Error("<AvatarUpload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<AvatarUpload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<AvatarUpload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<AvatarUpload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get round() {
		throw new Error("<AvatarUpload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set round(value) {
		throw new Error("<AvatarUpload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<AvatarUpload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<AvatarUpload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<AvatarUpload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<AvatarUpload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<AvatarUpload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<AvatarUpload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get align() {
		throw new Error("<AvatarUpload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set align(value) {
		throw new Error("<AvatarUpload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get invalid() {
		throw new Error("<AvatarUpload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set invalid(value) {
		throw new Error("<AvatarUpload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<AvatarUpload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<AvatarUpload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get required() {
		throw new Error("<AvatarUpload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set required(value) {
		throw new Error("<AvatarUpload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get errors() {
		throw new Error("<AvatarUpload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set errors(value) {
		throw new Error("<AvatarUpload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/fields/checkboxes/Checkbox.svelte generated by Svelte v3.24.0 */
const file$$ = "src/components/fields/checkboxes/Checkbox.svelte";

function add_css$l() {
	var style = element("style");
	style.id = "svelte-3bj243-style";
	style.textContent = ".checkbox.svelte-3bj243.svelte-3bj243{display:block}.checkbox.svelte-3bj243 input.svelte-3bj243{-webkit-appearance:checkbox;-moz-appearance:checkbox;appearance:checkbox}.checkbox.svelte-3bj243 .inp-box-wrap.svelte-3bj243{position:relative;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex}.checkbox .inp-inner:checked+.inp-label.svelte-3bj243.svelte-3bj243 .checked{display:block}.checkbox.svelte-3bj243 .inp-label.svelte-3bj243{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:start;-ms-flex-align:start;align-items:flex-start}.checkbox.svelte-3bj243 .inp-label.svelte-3bj243 .checked{display:none;position:absolute;top:0;left:0;width:100%;height:100%}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hlY2tib3guc3ZlbHRlIiwic291cmNlcyI6WyJDaGVja2JveC5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tICdzdmVsdGUnXG4gICAgaW1wb3J0IHsgY2xhc3NuYW1lcywgdG9DU1NTdHJpbmcgfSBmcm9tICdAdXRpbHMnXG4gICAgaW1wb3J0IEJyIGZyb20gJ0Bjb21wb25lbnRzL0JyLnN2ZWx0ZSdcbiAgICBpbXBvcnQgSWNvbiBmcm9tICdAY29tcG9uZW50cy9JY29uLnN2ZWx0ZSdcbiAgICBpbXBvcnQgRmllbGRFcnJvcnMgZnJvbSAnQGNvbXBvbmVudHMvRmllbGRFcnJvcnMuc3ZlbHRlJ1xuXG4gICAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKVxuXG4gICAgZXhwb3J0IGxldCBuYW1lXG4gICAgZXhwb3J0IGxldCBzdHlsZSA9IHt9XG4gICAgZXhwb3J0IGxldCBjaGVja2VkID0gdW5kZWZpbmVkXG4gICAgZXhwb3J0IGxldCB2YWx1ZSA9IHVuZGVmaW5lZFxuICAgIGV4cG9ydCBsZXQgaWQgPSB1bmRlZmluZWRcbiAgICBleHBvcnQgbGV0IGFsaWduID0gdW5kZWZpbmVkXG4gICAgZXhwb3J0IGxldCBkaXNhYmxlZCA9IGZhbHNlXG4gICAgZXhwb3J0IGxldCBsYWJlbCA9IHVuZGVmaW5lZFxuICAgIGV4cG9ydCBsZXQgdGV4dCA9IHVuZGVmaW5lZFxuICAgIGV4cG9ydCBsZXQgaW52YWxpZCA9IHVuZGVmaW5lZFxuICAgIGV4cG9ydCBsZXQgZm9ybSA9IHVuZGVmaW5lZCAvLyBTcGVjaWZpZXMgdGhlIGZvcm0gdGhlIDxpbnB1dD4gZWxlbWVudCBiZWxvbmdzIHRvXG4gICAgZXhwb3J0IGxldCByZXF1aXJlZCA9IHVuZGVmaW5lZCAvLyB1bmRlZmluZWR8cmVxdWlyZWRcbiAgICBleHBvcnQgbGV0IGVycm9ycyA9IHVuZGVmaW5lZFxuXG4gICAgJDogaWRQcm9wID0gaWQgfHwgbmFtZSB8fCB2YWx1ZVxuICAgICQ6IGVycm9yID0gaW52YWxpZCB8fCAhIShlcnJvcnMgfHwgW10pLmxlbmd0aFxuICAgICQ6IHN0eWxlUHJvcCA9IHRvQ1NTU3RyaW5nKHsgLi4uc3R5bGUsIHRleHRBbGlnbjogYWxpZ24gfSlcbiAgICAkOiBjbGFzc1Byb3AgPSBjbGFzc25hbWVzKCdjaGVja2JveCcsICQkcHJvcHMuY2xhc3MsIHsgZGlzYWJsZWQsIHJlcXVpcmVkLCBlcnJvciB9KVxuXG4gICAgZnVuY3Rpb24gb25DaGFuZ2UoZSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGdldFZhbHVlKGUpXG4gICAgICAgIGRpc3BhdGNoKCdjaGFuZ2UnLCB7IGUsIG5hbWUsIHZhbHVlLCBjaGVja2VkOiBlLnRhcmdldC5jaGVja2VkIH0pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0VmFsdWUoZSkge1xuICAgICAgICByZXR1cm4gZS50YXJnZXQudmFsdWVcbiAgICB9XG48L3NjcmlwdD5cblxuPGRpdiBjbGFzcz17Y2xhc3NQcm9wfT5cbiAgICB7I2lmIGxhYmVsfVxuICAgICAgICA8aDIgY2xhc3M9XCJ0ZXh0LWxlZnRcIj5cbiAgICAgICAgICAgIHsgbGFiZWwgfVxuICAgICAgICAgICAgPEJyIHNpemU9XCIxMFwiLz5cbiAgICAgICAgPC9oMj5cbiAgICB7L2lmfVxuXG4gICAgPGlucHV0XG4gICAgICAgICAgICBoaWRkZW5cbiAgICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgICBpZD17aWRQcm9wfVxuICAgICAgICAgICAge25hbWV9XG4gICAgICAgICAgICB7Zm9ybX1cbiAgICAgICAgICAgIHthbGlnbn1cbiAgICAgICAgICAgIHt2YWx1ZX1cbiAgICAgICAgICAgIHtjaGVja2VkfVxuICAgICAgICAgICAge2Rpc2FibGVkfVxuICAgICAgICAgICAge3JlcXVpcmVkfVxuICAgICAgICAgICAgY2xhc3M9XCJpbnAtaW5uZXJcIlxuICAgICAgICAgICAgb246Y2hhbmdlPXtvbkNoYW5nZX1cbiAgICA+XG5cbiAgICA8bGFiZWwgZm9yPXtpZFByb3B9IGNsYXNzPVwiaW5wLWxhYmVsXCI+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwiaW5wLWJveC13cmFwXCI+XG4gICAgICAgICAgICA8SWNvbiB0eXBlPVwiYm94XCIgc2l6ZT1cImJpZ1wiIGlzPVwiaW5mb1wiIGNsYXNzPVwidW5jaGVja2VkXCIvPlxuICAgICAgICAgICAgPEljb24gdHlwZT1cImJveC1jaGVja2VkXCIgc2l6ZT1cImJpZ1wiIGlzPVwiaW5mb1wiIGNsYXNzPVwiY2hlY2tlZFwiLz5cbiAgICAgICAgPC9zcGFuPlxuICAgICAgICB7I2lmIHRleHR9XG4gICAgICAgICAgICA8cz48L3M+XG4gICAgICAgICAgICA8cz48L3M+XG4gICAgICAgICAgICA8aDMgY2xhc3M9XCJmb250LXctNTAwIHRleHQtbGVmdFwiIHN0eWxlPVwicGFkZGluZy10b3A6IDRweFwiPnsgdGV4dCB9PC9oMz5cbiAgICAgICAgey9pZn1cbiAgICA8L2xhYmVsPlxuXG4gICAgPEZpZWxkRXJyb3JzIGl0ZW1zPXtlcnJvcnN9PlxuICAgICAgICA8ZGl2IHNsb3Q9XCJiZWZvcmVcIj5cbiAgICAgICAgICAgIDxCciBzaXplPVwiNVwiLz5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9GaWVsZEVycm9ycz5cbjwvZGl2PlxuXG48c3R5bGU+XG4uY2hlY2tib3gge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xufVxuXG4uY2hlY2tib3ggaW5wdXQge1xuICAgIC13ZWJraXQtYXBwZWFyYW5jZTogY2hlY2tib3g7XG4gICAgICAgLW1vei1hcHBlYXJhbmNlOiBjaGVja2JveDtcbiAgICAgICAgICAgIGFwcGVhcmFuY2U6IGNoZWNrYm94O1xufVxuXG4uY2hlY2tib3ggLmlucC1ib3gtd3JhcCB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGRpc3BsYXk6IC13ZWJraXQtaW5saW5lLWJveDtcbiAgICBkaXNwbGF5OiAtbXMtaW5saW5lLWZsZXhib3g7XG4gICAgZGlzcGxheTogaW5saW5lLWZsZXg7XG59XG4uY2hlY2tib3ggLmlucC1pbm5lcjpjaGVja2VkICsgLmlucC1sYWJlbCA6Z2xvYmFsKC5jaGVja2VkKSB7XG4gICAgZGlzcGxheTogYmxvY2s7XG59XG5cbi5jaGVja2JveCAuaW5wLWxhYmVsIHtcbiAgICBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgICBkaXNwbGF5OiAtbXMtZmxleGJveDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIC13ZWJraXQtYm94LWFsaWduOiBzdGFydDtcbiAgICAgICAgLW1zLWZsZXgtYWxpZ246IHN0YXJ0O1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG59XG5cbi5jaGVja2JveCAuaW5wLWxhYmVsIDpnbG9iYWwoLmNoZWNrZWQpIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgbGVmdDogMDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG59PC9zdHlsZT5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpRkEsU0FBUyw0QkFBQyxDQUFDLEFBQ1AsT0FBTyxDQUFFLEtBQUssQUFDbEIsQ0FBQyxBQUVELHVCQUFTLENBQUMsS0FBSyxjQUFDLENBQUMsQUFDYixrQkFBa0IsQ0FBRSxRQUFRLENBQ3pCLGVBQWUsQ0FBRSxRQUFRLENBQ3BCLFVBQVUsQ0FBRSxRQUFRLEFBQ2hDLENBQUMsQUFFRCx1QkFBUyxDQUFDLGFBQWEsY0FBQyxDQUFDLEFBQ3JCLFFBQVEsQ0FBRSxRQUFRLENBQ2xCLE9BQU8sQ0FBRSxrQkFBa0IsQ0FDM0IsT0FBTyxDQUFFLGtCQUFrQixDQUMzQixPQUFPLENBQUUsV0FBVyxBQUN4QixDQUFDLEFBQ0QsU0FBUyxDQUFDLFVBQVUsUUFBUSxDQUFHLHNDQUFVLENBQUMsQUFBUSxRQUFRLEFBQUUsQ0FBQyxBQUN6RCxPQUFPLENBQUUsS0FBSyxBQUNsQixDQUFDLEFBRUQsdUJBQVMsQ0FBQyxVQUFVLGNBQUMsQ0FBQyxBQUNsQixPQUFPLENBQUUsV0FBVyxDQUNwQixPQUFPLENBQUUsV0FBVyxDQUNwQixPQUFPLENBQUUsSUFBSSxDQUNiLGlCQUFpQixDQUFFLEtBQUssQ0FDcEIsY0FBYyxDQUFFLEtBQUssQ0FDakIsV0FBVyxDQUFFLFVBQVUsQUFDbkMsQ0FBQyxBQUVELHVCQUFTLENBQUMsd0JBQVUsQ0FBQyxBQUFRLFFBQVEsQUFBRSxDQUFDLEFBQ3BDLE9BQU8sQ0FBRSxJQUFJLENBQ2IsUUFBUSxDQUFFLFFBQVEsQ0FDbEIsR0FBRyxDQUFFLENBQUMsQ0FDTixJQUFJLENBQUUsQ0FBQyxDQUNQLEtBQUssQ0FBRSxJQUFJLENBQ1gsTUFBTSxDQUFFLElBQUksQUFDaEIsQ0FBQyJ9 */";
	append_dev(document.head, style);
}

// (40:4) {#if label}
function create_if_block_1$a(ctx) {
	let h2;
	let t0;
	let t1;
	let br;
	let current;
	br = new Br({ props: { size: "10" }, $$inline: true });

	const block = {
		c: function create() {
			h2 = element("h2");
			t0 = text(/*label*/ ctx[5]);
			t1 = space();
			create_component(br.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			h2 = claim_element(nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, /*label*/ ctx[5]);
			t1 = claim_space(h2_nodes);
			claim_component(br.$$.fragment, h2_nodes);
			h2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "text-left");
			add_location(h2, file$$, 40, 8, 1300);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			append_dev(h2, t0);
			append_dev(h2, t1);
			mount_component(br, h2, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (!current || dirty & /*label*/ 32) set_data_dev(t0, /*label*/ ctx[5]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(br.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(br.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
			destroy_component(br);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$a.name,
		type: "if",
		source: "(40:4) {#if label}",
		ctx
	});

	return block;
}

// (67:8) {#if text}
function create_if_block$i(ctx) {
	let s0;
	let t0;
	let s1;
	let t1;
	let h3;
	let t2;

	const block = {
		c: function create() {
			s0 = element("s");
			t0 = space();
			s1 = element("s");
			t1 = space();
			h3 = element("h3");
			t2 = text(/*text*/ ctx[6]);
			this.h();
		},
		l: function claim(nodes) {
			s0 = claim_element(nodes, "S", {});
			children(s0).forEach(detach_dev);
			t0 = claim_space(nodes);
			s1 = claim_element(nodes, "S", {});
			children(s1).forEach(detach_dev);
			t1 = claim_space(nodes);
			h3 = claim_element(nodes, "H3", { class: true, style: true });
			var h3_nodes = children(h3);
			t2 = claim_text(h3_nodes, /*text*/ ctx[6]);
			h3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(s0, file$$, 67, 12, 1968);
			add_location(s1, file$$, 68, 12, 1988);
			attr_dev(h3, "class", "font-w-500 text-left");
			set_style(h3, "padding-top", "4px");
			add_location(h3, file$$, 69, 12, 2008);
		},
		m: function mount(target, anchor) {
			insert_dev(target, s0, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, s1, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, h3, anchor);
			append_dev(h3, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*text*/ 64) set_data_dev(t2, /*text*/ ctx[6]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(s0);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(s1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(h3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$i.name,
		type: "if",
		source: "(67:8) {#if text}",
		ctx
	});

	return block;
}

// (75:8) <div slot="before">
function create_before_slot$1(ctx) {
	let div;
	let br;
	let current;
	br = new Br({ props: { size: "5" }, $$inline: true });

	const block = {
		c: function create() {
			div = element("div");
			create_component(br.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { slot: true });
			var div_nodes = children(div);
			claim_component(br.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "slot", "before");
			add_location(div, file$$, 74, 8, 2149);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(br, div, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(br.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(br.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(br);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_before_slot$1.name,
		type: "slot",
		source: "(75:8) <div slot=\\\"before\\\">",
		ctx
	});

	return block;
}

function create_fragment$$(ctx) {
	let div;
	let t0;
	let input;
	let t1;
	let label_1;
	let span;
	let icon0;
	let t2;
	let icon1;
	let t3;
	let t4;
	let fielderrors;
	let div_class_value;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*label*/ ctx[5] && create_if_block_1$a(ctx);

	icon0 = new Icon({
			props: {
				type: "box",
				size: "big",
				is: "info",
				class: "unchecked"
			},
			$$inline: true
		});

	icon1 = new Icon({
			props: {
				type: "box-checked",
				size: "big",
				is: "info",
				class: "checked"
			},
			$$inline: true
		});

	let if_block1 = /*text*/ ctx[6] && create_if_block$i(ctx);

	fielderrors = new FieldErrors({
			props: {
				items: /*errors*/ ctx[9],
				$$slots: { before: [create_before_slot$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			input = element("input");
			t1 = space();
			label_1 = element("label");
			span = element("span");
			create_component(icon0.$$.fragment);
			t2 = space();
			create_component(icon1.$$.fragment);
			t3 = space();
			if (if_block1) if_block1.c();
			t4 = space();
			create_component(fielderrors.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (if_block0) if_block0.l(div_nodes);
			t0 = claim_space(div_nodes);

			input = claim_element(div_nodes, "INPUT", {
				hidden: true,
				type: true,
				id: true,
				name: true,
				form: true,
				align: true,
				value: true,
				checked: true,
				disabled: true,
				required: true,
				class: true
			});

			t1 = claim_space(div_nodes);
			label_1 = claim_element(div_nodes, "LABEL", { for: true, class: true });
			var label_1_nodes = children(label_1);
			span = claim_element(label_1_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			claim_component(icon0.$$.fragment, span_nodes);
			t2 = claim_space(span_nodes);
			claim_component(icon1.$$.fragment, span_nodes);
			span_nodes.forEach(detach_dev);
			t3 = claim_space(label_1_nodes);
			if (if_block1) if_block1.l(label_1_nodes);
			label_1_nodes.forEach(detach_dev);
			t4 = claim_space(div_nodes);
			claim_component(fielderrors.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			input.hidden = true;
			attr_dev(input, "type", "checkbox");
			attr_dev(input, "id", /*idProp*/ ctx[10]);
			attr_dev(input, "name", /*name*/ ctx[0]);
			attr_dev(input, "form", /*form*/ ctx[7]);
			attr_dev(input, "align", /*align*/ ctx[3]);
			input.value = /*value*/ ctx[2];
			input.checked = /*checked*/ ctx[1];
			input.disabled = /*disabled*/ ctx[4];
			input.required = /*required*/ ctx[8];
			attr_dev(input, "class", "inp-inner svelte-3bj243");
			add_location(input, file$$, 46, 4, 1402);
			attr_dev(span, "class", "inp-box-wrap svelte-3bj243");
			add_location(span, file$$, 62, 8, 1747);
			attr_dev(label_1, "for", /*idProp*/ ctx[10]);
			attr_dev(label_1, "class", "inp-label svelte-3bj243");
			add_location(label_1, file$$, 61, 4, 1700);
			attr_dev(div, "class", div_class_value = "" + (null_to_empty(/*classProp*/ ctx[11]) + " svelte-3bj243"));
			add_location(div, file$$, 38, 0, 1252);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append_dev(div, t0);
			append_dev(div, input);
			append_dev(div, t1);
			append_dev(div, label_1);
			append_dev(label_1, span);
			mount_component(icon0, span, null);
			append_dev(span, t2);
			mount_component(icon1, span, null);
			append_dev(label_1, t3);
			if (if_block1) if_block1.m(label_1, null);
			append_dev(div, t4);
			mount_component(fielderrors, div, null);
			current = true;

			if (!mounted) {
				dispose = listen_dev(input, "change", /*onChange*/ ctx[12], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (/*label*/ ctx[5]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*label*/ 32) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1$a(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (!current || dirty & /*idProp*/ 1024) {
				attr_dev(input, "id", /*idProp*/ ctx[10]);
			}

			if (!current || dirty & /*name*/ 1) {
				attr_dev(input, "name", /*name*/ ctx[0]);
			}

			if (!current || dirty & /*form*/ 128) {
				attr_dev(input, "form", /*form*/ ctx[7]);
			}

			if (!current || dirty & /*align*/ 8) {
				attr_dev(input, "align", /*align*/ ctx[3]);
			}

			if (!current || dirty & /*value*/ 4) {
				prop_dev(input, "value", /*value*/ ctx[2]);
			}

			if (!current || dirty & /*checked*/ 2) {
				prop_dev(input, "checked", /*checked*/ ctx[1]);
			}

			if (!current || dirty & /*disabled*/ 16) {
				prop_dev(input, "disabled", /*disabled*/ ctx[4]);
			}

			if (!current || dirty & /*required*/ 256) {
				prop_dev(input, "required", /*required*/ ctx[8]);
			}

			if (/*text*/ ctx[6]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$i(ctx);
					if_block1.c();
					if_block1.m(label_1, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (!current || dirty & /*idProp*/ 1024) {
				attr_dev(label_1, "for", /*idProp*/ ctx[10]);
			}

			const fielderrors_changes = {};
			if (dirty & /*errors*/ 512) fielderrors_changes.items = /*errors*/ ctx[9];

			if (dirty & /*$$scope*/ 1048576) {
				fielderrors_changes.$$scope = { dirty, ctx };
			}

			fielderrors.$set(fielderrors_changes);

			if (!current || dirty & /*classProp*/ 2048 && div_class_value !== (div_class_value = "" + (null_to_empty(/*classProp*/ ctx[11]) + " svelte-3bj243"))) {
				attr_dev(div, "class", div_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(icon0.$$.fragment, local);
			transition_in(icon1.$$.fragment, local);
			transition_in(fielderrors.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(icon0.$$.fragment, local);
			transition_out(icon1.$$.fragment, local);
			transition_out(fielderrors.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (if_block0) if_block0.d();
			destroy_component(icon0);
			destroy_component(icon1);
			if (if_block1) if_block1.d();
			destroy_component(fielderrors);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$$.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function getValue$3(e) {
	return e.target.value;
}

function instance$$($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { name } = $$props;
	let { style = {} } = $$props;
	let { checked = undefined } = $$props;
	let { value = undefined } = $$props;
	let { id = undefined } = $$props;
	let { align = undefined } = $$props;
	let { disabled = false } = $$props;
	let { label = undefined } = $$props;
	let { text = undefined } = $$props;
	let { invalid = undefined } = $$props;
	let { form = undefined } = $$props; // Specifies the form the <input> element belongs to
	let { required = undefined } = $$props; // undefined|required
	let { errors = undefined } = $$props;

	function onChange(e) {
		const value = getValue$3(e);

		dispatch("change", {
			e,
			name,
			value,
			checked: e.target.checked
		});
	}

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Checkbox", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(19, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("name" in $$new_props) $$invalidate(0, name = $$new_props.name);
		if ("style" in $$new_props) $$invalidate(13, style = $$new_props.style);
		if ("checked" in $$new_props) $$invalidate(1, checked = $$new_props.checked);
		if ("value" in $$new_props) $$invalidate(2, value = $$new_props.value);
		if ("id" in $$new_props) $$invalidate(14, id = $$new_props.id);
		if ("align" in $$new_props) $$invalidate(3, align = $$new_props.align);
		if ("disabled" in $$new_props) $$invalidate(4, disabled = $$new_props.disabled);
		if ("label" in $$new_props) $$invalidate(5, label = $$new_props.label);
		if ("text" in $$new_props) $$invalidate(6, text = $$new_props.text);
		if ("invalid" in $$new_props) $$invalidate(15, invalid = $$new_props.invalid);
		if ("form" in $$new_props) $$invalidate(7, form = $$new_props.form);
		if ("required" in $$new_props) $$invalidate(8, required = $$new_props.required);
		if ("errors" in $$new_props) $$invalidate(9, errors = $$new_props.errors);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		classnames,
		toCSSString,
		Br,
		Icon,
		FieldErrors,
		dispatch,
		name,
		style,
		checked,
		value,
		id,
		align,
		disabled,
		label,
		text,
		invalid,
		form,
		required,
		errors,
		onChange,
		getValue: getValue$3,
		idProp,
		error,
		styleProp,
		classProp
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(19, $$props = assign(assign({}, $$props), $$new_props));
		if ("name" in $$props) $$invalidate(0, name = $$new_props.name);
		if ("style" in $$props) $$invalidate(13, style = $$new_props.style);
		if ("checked" in $$props) $$invalidate(1, checked = $$new_props.checked);
		if ("value" in $$props) $$invalidate(2, value = $$new_props.value);
		if ("id" in $$props) $$invalidate(14, id = $$new_props.id);
		if ("align" in $$props) $$invalidate(3, align = $$new_props.align);
		if ("disabled" in $$props) $$invalidate(4, disabled = $$new_props.disabled);
		if ("label" in $$props) $$invalidate(5, label = $$new_props.label);
		if ("text" in $$props) $$invalidate(6, text = $$new_props.text);
		if ("invalid" in $$props) $$invalidate(15, invalid = $$new_props.invalid);
		if ("form" in $$props) $$invalidate(7, form = $$new_props.form);
		if ("required" in $$props) $$invalidate(8, required = $$new_props.required);
		if ("errors" in $$props) $$invalidate(9, errors = $$new_props.errors);
		if ("idProp" in $$props) $$invalidate(10, idProp = $$new_props.idProp);
		if ("error" in $$props) $$invalidate(16, error = $$new_props.error);
		if ("styleProp" in $$props) styleProp = $$new_props.styleProp;
		if ("classProp" in $$props) $$invalidate(11, classProp = $$new_props.classProp);
	};

	let idProp;
	let error;
	let styleProp;
	let classProp;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*id, name, value*/ 16389) {
			 $$invalidate(10, idProp = id || name || value);
		}

		if ($$self.$$.dirty & /*invalid, errors*/ 33280) {
			 $$invalidate(16, error = invalid || !!(errors || []).length);
		}

		if ($$self.$$.dirty & /*style, align*/ 8200) {
			 styleProp = toCSSString({ ...style, textAlign: align });
		}

		 $$invalidate(11, classProp = classnames("checkbox", $$props.class, { disabled, required, error }));
	};

	$$props = exclude_internal_props($$props);

	return [
		name,
		checked,
		value,
		align,
		disabled,
		label,
		text,
		form,
		required,
		errors,
		idProp,
		classProp,
		onChange,
		style,
		id,
		invalid
	];
}

class Checkbox extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-3bj243-style")) add_css$l();

		init(this, options, instance$$, create_fragment$$, safe_not_equal, {
			name: 0,
			style: 13,
			checked: 1,
			value: 2,
			id: 14,
			align: 3,
			disabled: 4,
			label: 5,
			text: 6,
			invalid: 15,
			form: 7,
			required: 8,
			errors: 9
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Checkbox",
			options,
			id: create_fragment$$.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*name*/ ctx[0] === undefined && !("name" in props)) {
			console.warn("<Checkbox> was created without expected prop 'name'");
		}
	}

	get name() {
		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get checked() {
		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set checked(value) {
		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get align() {
		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set align(value) {
		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get text() {
		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set text(value) {
		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get invalid() {
		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set invalid(value) {
		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get form() {
		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set form(value) {
		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get required() {
		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set required(value) {
		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get errors() {
		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set errors(value) {
		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/fields/checkboxes/CheckboxGroup.svelte generated by Svelte v3.24.0 */
const file$10 = "src/components/fields/checkboxes/CheckboxGroup.svelte";

function get_each_context$5(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[15] = list[i];
	child_ctx[17] = i;
	return child_ctx;
}

// (54:4) {#if label}
function create_if_block_1$b(ctx) {
	let h2;
	let t0;
	let t1;
	let br;
	let current;
	br = new Br({ props: { size: "10" }, $$inline: true });

	const block = {
		c: function create() {
			h2 = element("h2");
			t0 = text(/*label*/ ctx[2]);
			t1 = space();
			create_component(br.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			h2 = claim_element(nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, /*label*/ ctx[2]);
			t1 = claim_space(h2_nodes);
			claim_component(br.$$.fragment, h2_nodes);
			h2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "text-left");
			add_location(h2, file$10, 54, 8, 1735);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			append_dev(h2, t0);
			append_dev(h2, t1);
			mount_component(br, h2, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (!current || dirty & /*label*/ 4) set_data_dev(t0, /*label*/ ctx[2]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(br.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(br.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
			destroy_component(br);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$b.name,
		type: "if",
		source: "(54:4) {#if label}",
		ctx
	});

	return block;
}

// (62:8) {#if i}
function create_if_block$j(ctx) {
	let br;
	let current;
	br = new Br({ props: { size: "15" }, $$inline: true });

	const block = {
		c: function create() {
			create_component(br.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(br.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(br, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(br.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(br.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(br, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$j.name,
		type: "if",
		source: "(62:8) {#if i}",
		ctx
	});

	return block;
}

// (61:4) {#each options as checkbox, i}
function create_each_block$5(ctx) {
	let t;
	let checkbox;
	let current;
	let if_block = /*i*/ ctx[17] && create_if_block$j(ctx);

	const checkbox_spread_levels = [
		/*checkbox*/ ctx[15],
		{
			errors: /*errors*/ ctx[4][/*checkbox*/ ctx[15].name]
		},
		{
			checked: /*value*/ ctx[0] && /*getChecked*/ ctx[8](/*checkbox*/ ctx[15].name, /*checkbox*/ ctx[15].value)
		}
	];

	let checkbox_props = {};

	for (let i = 0; i < checkbox_spread_levels.length; i += 1) {
		checkbox_props = assign(checkbox_props, checkbox_spread_levels[i]);
	}

	checkbox = new Checkbox({ props: checkbox_props, $$inline: true });
	checkbox.$on("change", /*onChange*/ ctx[7]);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			t = space();
			create_component(checkbox.$$.fragment);
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			t = claim_space(nodes);
			claim_component(checkbox.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, t, anchor);
			mount_component(checkbox, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const checkbox_changes = (dirty & /*options, errors, value, getChecked*/ 281)
			? get_spread_update(checkbox_spread_levels, [
					dirty & /*options*/ 8 && get_spread_object(/*checkbox*/ ctx[15]),
					dirty & /*errors, options*/ 24 && {
						errors: /*errors*/ ctx[4][/*checkbox*/ ctx[15].name]
					},
					dirty & /*value, getChecked, options*/ 265 && {
						checked: /*value*/ ctx[0] && /*getChecked*/ ctx[8](/*checkbox*/ ctx[15].name, /*checkbox*/ ctx[15].value)
					}
				])
			: {};

			checkbox.$set(checkbox_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(checkbox.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			transition_out(checkbox.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(t);
			destroy_component(checkbox, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$5.name,
		type: "each",
		source: "(61:4) {#each options as checkbox, i}",
		ctx
	});

	return block;
}

function create_fragment$10(ctx) {
	let div;
	let t;
	let current;
	let if_block = /*label*/ ctx[2] && create_if_block_1$b(ctx);
	let each_value = /*options*/ ctx[3];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { id: true, class: true, styleProp: true });
			var div_nodes = children(div);
			if (if_block) if_block.l(div_nodes);
			t = claim_space(div_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "id", /*id*/ ctx[1]);
			attr_dev(div, "class", /*classProp*/ ctx[6]);
			attr_dev(div, "styleprop", /*styleProp*/ ctx[5]);
			add_location(div, file$10, 52, 0, 1660);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append_dev(div, t);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*label*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*label*/ 4) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1$b(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (dirty & /*options, errors, value, getChecked, onChange*/ 409) {
				each_value = /*options*/ ctx[3];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$5(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$5(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (!current || dirty & /*id*/ 2) {
				attr_dev(div, "id", /*id*/ ctx[1]);
			}

			if (!current || dirty & /*classProp*/ 64) {
				attr_dev(div, "class", /*classProp*/ ctx[6]);
			}

			if (!current || dirty & /*styleProp*/ 32) {
				attr_dev(div, "styleprop", /*styleProp*/ ctx[5]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (if_block) if_block.d();
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$10.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$10($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { name } = $$props;
	let { value = undefined } = $$props;
	let { style = undefined } = $$props;
	let { id = undefined } = $$props;
	let { align = undefined } = $$props;
	let { disabled = false } = $$props;
	let { label = undefined } = $$props;
	let { options = undefined } = $$props;
	let { errors = {} } = $$props;

	const onChange = ({ detail: { e, name: currName, value: currValue, checked } }) => {
		let newValue = cloneDeep(value);

		if (!currName && currValue) {
			if (!Array.isArray(newValue)) {
				newValue = [];
			}

			if (checked && !newValue.includes(currValue)) {
				newValue = [...newValue, currValue];
			} else if (!checked && newValue.includes(currValue)) {
				newValue = value.filter(v => v !== currValue);
			}
		} else if (currName) {
			if (!newValue) {
				newValue = {};
			}

			newValue[currName] = currValue || checked;
		}

		dispatch("change", { e, name, value: newValue });
	};

	function getChecked(currName, currValue) {
		if (Array.isArray(value)) {
			return value.includes(currValue);
		} else {
			return !!value && value[currName];
		}
	}

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("CheckboxGroup", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(14, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("name" in $$new_props) $$invalidate(9, name = $$new_props.name);
		if ("value" in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ("style" in $$new_props) $$invalidate(10, style = $$new_props.style);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("align" in $$new_props) $$invalidate(11, align = $$new_props.align);
		if ("disabled" in $$new_props) $$invalidate(12, disabled = $$new_props.disabled);
		if ("label" in $$new_props) $$invalidate(2, label = $$new_props.label);
		if ("options" in $$new_props) $$invalidate(3, options = $$new_props.options);
		if ("errors" in $$new_props) $$invalidate(4, errors = $$new_props.errors);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		classnames,
		toCSSString,
		_,
		Br,
		Checkbox,
		dispatch,
		name,
		value,
		style,
		id,
		align,
		disabled,
		label,
		options,
		errors,
		onChange,
		getChecked,
		styleProp,
		classProp
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(14, $$props = assign(assign({}, $$props), $$new_props));
		if ("name" in $$props) $$invalidate(9, name = $$new_props.name);
		if ("value" in $$props) $$invalidate(0, value = $$new_props.value);
		if ("style" in $$props) $$invalidate(10, style = $$new_props.style);
		if ("id" in $$props) $$invalidate(1, id = $$new_props.id);
		if ("align" in $$props) $$invalidate(11, align = $$new_props.align);
		if ("disabled" in $$props) $$invalidate(12, disabled = $$new_props.disabled);
		if ("label" in $$props) $$invalidate(2, label = $$new_props.label);
		if ("options" in $$props) $$invalidate(3, options = $$new_props.options);
		if ("errors" in $$props) $$invalidate(4, errors = $$new_props.errors);
		if ("styleProp" in $$props) $$invalidate(5, styleProp = $$new_props.styleProp);
		if ("classProp" in $$props) $$invalidate(6, classProp = $$new_props.classProp);
	};

	let styleProp;
	let classProp;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*style, align*/ 3072) {
			 $$invalidate(5, styleProp = toCSSString({ ...style, textAlign: align }));
		}

		 $$invalidate(6, classProp = classnames("checkbox-group", $$props.class, { disabled, error: !isEmpty(errors) }));
	};

	$$props = exclude_internal_props($$props);

	return [
		value,
		id,
		label,
		options,
		errors,
		styleProp,
		classProp,
		onChange,
		getChecked,
		name,
		style,
		align,
		disabled
	];
}

class CheckboxGroup extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$10, create_fragment$10, safe_not_equal, {
			name: 9,
			value: 0,
			style: 10,
			id: 1,
			align: 11,
			disabled: 12,
			label: 2,
			options: 3,
			errors: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CheckboxGroup",
			options,
			id: create_fragment$10.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*name*/ ctx[9] === undefined && !("name" in props)) {
			console.warn("<CheckboxGroup> was created without expected prop 'name'");
		}
	}

	get name() {
		throw new Error("<CheckboxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<CheckboxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<CheckboxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<CheckboxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<CheckboxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<CheckboxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<CheckboxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<CheckboxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get align() {
		throw new Error("<CheckboxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set align(value) {
		throw new Error("<CheckboxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<CheckboxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<CheckboxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<CheckboxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<CheckboxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get options() {
		throw new Error("<CheckboxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set options(value) {
		throw new Error("<CheckboxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get errors() {
		throw new Error("<CheckboxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set errors(value) {
		throw new Error("<CheckboxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/FormBuilder.svelte generated by Svelte v3.24.0 */

const { console: console_1 } = globals;

const file$11 = "src/components/FormBuilder.svelte";

const get_default_slot_changes$4 = dirty => ({
	item: dirty & /*items*/ 2,
	values: dirty & /*values*/ 8,
	errors: dirty & /*errors*/ 4,
	value: dirty & /*values, items*/ 10
});

const get_default_slot_context$4 = ctx => ({
	item: /*item*/ ctx[17],
	values: /*values*/ ctx[3],
	errors: /*errors*/ ctx[2],
	onChange: /*onChange*/ ctx[5],
	value: /*values*/ ctx[3][/*item*/ ctx[17].name]
});

function get_each_context$6(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[17] = list[i];
	child_ctx[19] = i;
	return child_ctx;
}

// (82:8) {#if i}
function create_if_block_10(ctx) {
	let br;
	let current;
	br = new Br({ props: { size: "30" }, $$inline: true });

	const block = {
		c: function create() {
			create_component(br.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(br.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(br, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(br.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(br.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(br, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_10.name,
		type: "if",
		source: "(82:8) {#if i}",
		ctx
	});

	return block;
}

// (165:8) {:else}
function create_else_block_2(ctx) {
	let current;
	const default_slot_template = /*$$slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], get_default_slot_context$4);
	const default_slot_or_fallback = default_slot || fallback_block$6(ctx);

	const block = {
		c: function create() {
			if (default_slot_or_fallback) default_slot_or_fallback.c();
		},
		l: function claim(nodes) {
			if (default_slot_or_fallback) default_slot_or_fallback.l(nodes);
		},
		m: function mount(target, anchor) {
			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope, items, values, errors*/ 8206) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[13], dirty, get_default_slot_changes$4, get_default_slot_context$4);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*items, values*/ 10) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_2.name,
		type: "else",
		source: "(165:8) {:else}",
		ctx
	});

	return block;
}

// (156:53) 
function create_if_block_8(ctx) {
	let radiorect;
	let current;

	const radiorect_spread_levels = [
		/*item*/ ctx[17].meta,
		{ name: /*item*/ ctx[17].name },
		{ label: /*item*/ ctx[17].label },
		{
			value: /*getValue*/ ctx[7](/*values*/ ctx[3], /*item*/ ctx[17].name)
		},
		{
			errors: /*errors*/ ctx[2][/*item*/ ctx[17].name]
		}
	];

	let radiorect_props = {};

	for (let i = 0; i < radiorect_spread_levels.length; i += 1) {
		radiorect_props = assign(radiorect_props, radiorect_spread_levels[i]);
	}

	radiorect = new RadioRect({ props: radiorect_props, $$inline: true });

	radiorect.$on("change", function () {
		if (is_function(/*getOnChange*/ ctx[6](/*item*/ ctx[17]))) /*getOnChange*/ ctx[6](/*item*/ ctx[17]).apply(this, arguments);
	});

	const block = {
		c: function create() {
			create_component(radiorect.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(radiorect.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(radiorect, target, anchor);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			const radiorect_changes = (dirty & /*items, getValue, values, errors*/ 142)
			? get_spread_update(radiorect_spread_levels, [
					dirty & /*items*/ 2 && get_spread_object(/*item*/ ctx[17].meta),
					dirty & /*items*/ 2 && { name: /*item*/ ctx[17].name },
					dirty & /*items*/ 2 && { label: /*item*/ ctx[17].label },
					dirty & /*getValue, values, items*/ 138 && {
						value: /*getValue*/ ctx[7](/*values*/ ctx[3], /*item*/ ctx[17].name)
					},
					dirty & /*errors, items*/ 6 && {
						errors: /*errors*/ ctx[2][/*item*/ ctx[17].name]
					}
				])
			: {};

			radiorect.$set(radiorect_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(radiorect.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(radiorect.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(radiorect, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_8.name,
		type: "if",
		source: "(156:53) ",
		ctx
	});

	return block;
}

// (147:49) 
function create_if_block_7(ctx) {
	let avatarupload;
	let current;

	const avatarupload_spread_levels = [
		/*item*/ ctx[17].meta,
		{ name: /*item*/ ctx[17].name },
		{ label: /*item*/ ctx[17].label },
		{
			value: /*getValue*/ ctx[7](/*values*/ ctx[3], /*item*/ ctx[17].name)
		},
		{
			errors: /*errors*/ ctx[2][/*item*/ ctx[17].name]
		}
	];

	let avatarupload_props = {};

	for (let i = 0; i < avatarupload_spread_levels.length; i += 1) {
		avatarupload_props = assign(avatarupload_props, avatarupload_spread_levels[i]);
	}

	avatarupload = new AvatarUpload({
			props: avatarupload_props,
			$$inline: true
		});

	avatarupload.$on("change", function () {
		if (is_function(/*getOnChange*/ ctx[6](/*item*/ ctx[17]))) /*getOnChange*/ ctx[6](/*item*/ ctx[17]).apply(this, arguments);
	});

	const block = {
		c: function create() {
			create_component(avatarupload.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(avatarupload.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(avatarupload, target, anchor);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			const avatarupload_changes = (dirty & /*items, getValue, values, errors*/ 142)
			? get_spread_update(avatarupload_spread_levels, [
					dirty & /*items*/ 2 && get_spread_object(/*item*/ ctx[17].meta),
					dirty & /*items*/ 2 && { name: /*item*/ ctx[17].name },
					dirty & /*items*/ 2 && { label: /*item*/ ctx[17].label },
					dirty & /*getValue, values, items*/ 138 && {
						value: /*getValue*/ ctx[7](/*values*/ ctx[3], /*item*/ ctx[17].name)
					},
					dirty & /*errors, items*/ 6 && {
						errors: /*errors*/ ctx[2][/*item*/ ctx[17].name]
					}
				])
			: {};

			avatarupload.$set(avatarupload_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(avatarupload.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(avatarupload.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(avatarupload, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_7.name,
		type: "if",
		source: "(147:49) ",
		ctx
	});

	return block;
}

// (138:48) 
function create_if_block_6(ctx) {
	let uploadboxgroup;
	let current;

	const uploadboxgroup_spread_levels = [
		/*item*/ ctx[17].meta,
		{ name: /*item*/ ctx[17].name },
		{ label: /*item*/ ctx[17].label },
		{
			value: /*getValue*/ ctx[7](/*values*/ ctx[3], /*item*/ ctx[17].name)
		},
		{
			errors: /*errors*/ ctx[2][/*item*/ ctx[17].name]
		}
	];

	let uploadboxgroup_props = {};

	for (let i = 0; i < uploadboxgroup_spread_levels.length; i += 1) {
		uploadboxgroup_props = assign(uploadboxgroup_props, uploadboxgroup_spread_levels[i]);
	}

	uploadboxgroup = new UploadBoxGroup({
			props: uploadboxgroup_props,
			$$inline: true
		});

	uploadboxgroup.$on("change", function () {
		if (is_function(/*getOnChange*/ ctx[6](/*item*/ ctx[17]))) /*getOnChange*/ ctx[6](/*item*/ ctx[17]).apply(this, arguments);
	});

	const block = {
		c: function create() {
			create_component(uploadboxgroup.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(uploadboxgroup.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(uploadboxgroup, target, anchor);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			const uploadboxgroup_changes = (dirty & /*items, getValue, values, errors*/ 142)
			? get_spread_update(uploadboxgroup_spread_levels, [
					dirty & /*items*/ 2 && get_spread_object(/*item*/ ctx[17].meta),
					dirty & /*items*/ 2 && { name: /*item*/ ctx[17].name },
					dirty & /*items*/ 2 && { label: /*item*/ ctx[17].label },
					dirty & /*getValue, values, items*/ 138 && {
						value: /*getValue*/ ctx[7](/*values*/ ctx[3], /*item*/ ctx[17].name)
					},
					dirty & /*errors, items*/ 6 && {
						errors: /*errors*/ ctx[2][/*item*/ ctx[17].name]
					}
				])
			: {};

			uploadboxgroup.$set(uploadboxgroup_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(uploadboxgroup.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(uploadboxgroup.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(uploadboxgroup, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6.name,
		type: "if",
		source: "(138:48) ",
		ctx
	});

	return block;
}

// (129:47) 
function create_if_block_5(ctx) {
	let uploadbox;
	let current;

	const uploadbox_spread_levels = [
		/*item*/ ctx[17].meta,
		{ name: /*item*/ ctx[17].name },
		{ label: /*item*/ ctx[17].label },
		{
			value: /*getValue*/ ctx[7](/*values*/ ctx[3], /*item*/ ctx[17].name)
		},
		{
			errors: /*errors*/ ctx[2][/*item*/ ctx[17].name]
		}
	];

	let uploadbox_props = {};

	for (let i = 0; i < uploadbox_spread_levels.length; i += 1) {
		uploadbox_props = assign(uploadbox_props, uploadbox_spread_levels[i]);
	}

	uploadbox = new UploadBox({ props: uploadbox_props, $$inline: true });

	uploadbox.$on("change", function () {
		if (is_function(/*getOnChange*/ ctx[6](/*item*/ ctx[17]))) /*getOnChange*/ ctx[6](/*item*/ ctx[17]).apply(this, arguments);
	});

	const block = {
		c: function create() {
			create_component(uploadbox.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(uploadbox.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(uploadbox, target, anchor);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			const uploadbox_changes = (dirty & /*items, getValue, values, errors*/ 142)
			? get_spread_update(uploadbox_spread_levels, [
					dirty & /*items*/ 2 && get_spread_object(/*item*/ ctx[17].meta),
					dirty & /*items*/ 2 && { name: /*item*/ ctx[17].name },
					dirty & /*items*/ 2 && { label: /*item*/ ctx[17].label },
					dirty & /*getValue, values, items*/ 138 && {
						value: /*getValue*/ ctx[7](/*values*/ ctx[3], /*item*/ ctx[17].name)
					},
					dirty & /*errors, items*/ 6 && {
						errors: /*errors*/ ctx[2][/*item*/ ctx[17].name]
					}
				])
			: {};

			uploadbox.$set(uploadbox_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(uploadbox.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(uploadbox.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(uploadbox, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(129:47) ",
		ctx
	});

	return block;
}

// (112:49) 
function create_if_block_3$1(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_4, create_else_block_1];
	const if_blocks = [];

	function select_block_type_2(ctx, dirty) {
		if (/*values*/ ctx[3][/*item*/ ctx[17].name] !== null) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_2(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_2(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3$1.name,
		type: "if",
		source: "(112:49) ",
		ctx
	});

	return block;
}

// (103:51) 
function create_if_block_2$4(ctx) {
	let checkboxgroup;
	let current;

	const checkboxgroup_spread_levels = [
		/*item*/ ctx[17].meta,
		{ name: /*item*/ ctx[17].name },
		{ label: /*item*/ ctx[17].label },
		{
			value: /*getValue*/ ctx[7](/*values*/ ctx[3], /*item*/ ctx[17].name)
		},
		{
			errors: /*errors*/ ctx[2][/*item*/ ctx[17].name]
		}
	];

	let checkboxgroup_props = {};

	for (let i = 0; i < checkboxgroup_spread_levels.length; i += 1) {
		checkboxgroup_props = assign(checkboxgroup_props, checkboxgroup_spread_levels[i]);
	}

	checkboxgroup = new CheckboxGroup({
			props: checkboxgroup_props,
			$$inline: true
		});

	checkboxgroup.$on("change", function () {
		if (is_function(/*getOnChange*/ ctx[6](/*item*/ ctx[17]))) /*getOnChange*/ ctx[6](/*item*/ ctx[17]).apply(this, arguments);
	});

	const block = {
		c: function create() {
			create_component(checkboxgroup.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(checkboxgroup.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(checkboxgroup, target, anchor);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			const checkboxgroup_changes = (dirty & /*items, getValue, values, errors*/ 142)
			? get_spread_update(checkboxgroup_spread_levels, [
					dirty & /*items*/ 2 && get_spread_object(/*item*/ ctx[17].meta),
					dirty & /*items*/ 2 && { name: /*item*/ ctx[17].name },
					dirty & /*items*/ 2 && { label: /*item*/ ctx[17].label },
					dirty & /*getValue, values, items*/ 138 && {
						value: /*getValue*/ ctx[7](/*values*/ ctx[3], /*item*/ ctx[17].name)
					},
					dirty & /*errors, items*/ 6 && {
						errors: /*errors*/ ctx[2][/*item*/ ctx[17].name]
					}
				])
			: {};

			checkboxgroup.$set(checkboxgroup_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(checkboxgroup.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(checkboxgroup.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(checkboxgroup, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$4.name,
		type: "if",
		source: "(103:51) ",
		ctx
	});

	return block;
}

// (85:8) {#if ['text', 'number', 'textarea', 'email', 'password', 'search', 'tel', 'url', 'date', 'datetime-local', 'time'].includes(item.type)}
function create_if_block$k(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_1$c, create_else_block$5];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*values*/ ctx[3][/*item*/ ctx[17].name] !== null) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$k.name,
		type: "if",
		source: "(85:8) {#if ['text', 'number', 'textarea', 'email', 'password', 'search', 'tel', 'url', 'date', 'datetime-local', 'time'].includes(item.type)}",
		ctx
	});

	return block;
}

// (173:16) {:else}
function create_else_block_3(ctx) {
	let div;
	let loader0;
	let t;
	let loader1;
	let current;
	loader0 = new Loader({ props: { type: "h2" }, $$inline: true });
	loader1 = new Loader({ props: { type: "p" }, $$inline: true });

	const block = {
		c: function create() {
			div = element("div");
			create_component(loader0.$$.fragment);
			t = space();
			create_component(loader1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			claim_component(loader0.$$.fragment, div_nodes);
			t = claim_space(div_nodes);
			claim_component(loader1.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(div, file$11, 173, 20, 6068);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(loader0, div, null);
			append_dev(div, t);
			mount_component(loader1, div, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(loader0.$$.fragment, local);
			transition_in(loader1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(loader0.$$.fragment, local);
			transition_out(loader1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(loader0);
			destroy_component(loader1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_3.name,
		type: "else",
		source: "(173:16) {:else}",
		ctx
	});

	return block;
}

// (167:16) {#if values[item.name] !== null}
function create_if_block_9(ctx) {
	let readfield;
	let current;

	const readfield_spread_levels = [
		/*item*/ ctx[17].meta,
		{ label: /*item*/ ctx[17].label },
		{
			value: /*getValue*/ ctx[7](/*values*/ ctx[3], /*item*/ ctx[17].name)
		}
	];

	let readfield_props = {};

	for (let i = 0; i < readfield_spread_levels.length; i += 1) {
		readfield_props = assign(readfield_props, readfield_spread_levels[i]);
	}

	readfield = new ReadField({ props: readfield_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(readfield.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(readfield.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(readfield, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const readfield_changes = (dirty & /*items, getValue, values*/ 138)
			? get_spread_update(readfield_spread_levels, [
					dirty & /*items*/ 2 && get_spread_object(/*item*/ ctx[17].meta),
					dirty & /*items*/ 2 && { label: /*item*/ ctx[17].label },
					{
						value: /*getValue*/ ctx[7](/*values*/ ctx[3], /*item*/ ctx[17].name)
					}
				])
			: {};

			readfield.$set(readfield_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(readfield.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(readfield.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(readfield, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_9.name,
		type: "if",
		source: "(167:16) {#if values[item.name] !== null}",
		ctx
	});

	return block;
}

// (166:80)                  
function fallback_block$6(ctx) {
	let current_block_type_index;
	let if_block;
	let t;
	let current;
	const if_block_creators = [create_if_block_9, create_else_block_3];
	const if_blocks = [];

	function select_block_type_3(ctx, dirty) {
		if (/*values*/ ctx[3][/*item*/ ctx[17].name] !== null) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_3(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			t = space();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			t = claim_space(nodes);
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, t, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_3(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(t.parentNode, t);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block$6.name,
		type: "fallback",
		source: "(166:80)                  ",
		ctx
	});

	return block;
}

// (123:12) {:else}
function create_else_block_1(ctx) {
	let div;
	let loader0;
	let t0;
	let loader1;
	let t1;
	let current;
	loader0 = new Loader({ props: { type: "h2" }, $$inline: true });
	loader1 = new Loader({ props: { height: "50" }, $$inline: true });

	const block = {
		c: function create() {
			div = element("div");
			create_component(loader0.$$.fragment);
			t0 = space();
			create_component(loader1.$$.fragment);
			t1 = space();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			claim_component(loader0.$$.fragment, div_nodes);
			t0 = claim_space(div_nodes);
			claim_component(loader1.$$.fragment, div_nodes);
			t1 = claim_space(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(div, file$11, 123, 16, 4135);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(loader0, div, null);
			append_dev(div, t0);
			mount_component(loader1, div, null);
			append_dev(div, t1);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(loader0.$$.fragment, local);
			transition_in(loader1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(loader0.$$.fragment, local);
			transition_out(loader1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(loader0);
			destroy_component(loader1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(123:12) {:else}",
		ctx
	});

	return block;
}

// (113:12) {#if values[item.name] !== null}
function create_if_block_4(ctx) {
	let select;
	let current;

	const select_spread_levels = [
		/*item*/ ctx[17].meta,
		{ name: /*item*/ ctx[17].name },
		{ type: /*item*/ ctx[17].type },
		{ label: /*item*/ ctx[17].label },
		{
			value: /*getValue*/ ctx[7](/*values*/ ctx[3], /*item*/ ctx[17].name)
		},
		{
			errors: /*errors*/ ctx[2][/*item*/ ctx[17].name]
		}
	];

	let select_props = {};

	for (let i = 0; i < select_spread_levels.length; i += 1) {
		select_props = assign(select_props, select_spread_levels[i]);
	}

	select = new Select({ props: select_props, $$inline: true });

	select.$on("change", function () {
		if (is_function(/*getOnChange*/ ctx[6](/*item*/ ctx[17]))) /*getOnChange*/ ctx[6](/*item*/ ctx[17]).apply(this, arguments);
	});

	const block = {
		c: function create() {
			create_component(select.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(select.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(select, target, anchor);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			const select_changes = (dirty & /*items, getValue, values, errors*/ 142)
			? get_spread_update(select_spread_levels, [
					dirty & /*items*/ 2 && get_spread_object(/*item*/ ctx[17].meta),
					dirty & /*items*/ 2 && { name: /*item*/ ctx[17].name },
					dirty & /*items*/ 2 && { type: /*item*/ ctx[17].type },
					dirty & /*items*/ 2 && { label: /*item*/ ctx[17].label },
					dirty & /*getValue, values, items*/ 138 && {
						value: /*getValue*/ ctx[7](/*values*/ ctx[3], /*item*/ ctx[17].name)
					},
					dirty & /*errors, items*/ 6 && {
						errors: /*errors*/ ctx[2][/*item*/ ctx[17].name]
					}
				])
			: {};

			select.$set(select_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(select.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(select.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(select, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(113:12) {#if values[item.name] !== null}",
		ctx
	});

	return block;
}

// (97:12) {:else}
function create_else_block$5(ctx) {
	let div;
	let loader0;
	let t0;
	let loader1;
	let t1;
	let current;
	loader0 = new Loader({ props: { type: "h2" }, $$inline: true });
	loader1 = new Loader({ props: { height: "50" }, $$inline: true });

	const block = {
		c: function create() {
			div = element("div");
			create_component(loader0.$$.fragment);
			t0 = space();
			create_component(loader1.$$.fragment);
			t1 = space();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			claim_component(loader0.$$.fragment, div_nodes);
			t0 = claim_space(div_nodes);
			claim_component(loader1.$$.fragment, div_nodes);
			t1 = claim_space(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(div, file$11, 97, 16, 3172);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(loader0, div, null);
			append_dev(div, t0);
			mount_component(loader1, div, null);
			append_dev(div, t1);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(loader0.$$.fragment, local);
			transition_in(loader1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(loader0.$$.fragment, local);
			transition_out(loader1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(loader0);
			destroy_component(loader1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$5.name,
		type: "else",
		source: "(97:12) {:else}",
		ctx
	});

	return block;
}

// (86:12) {#if values[item.name] !== null}
function create_if_block_1$c(ctx) {
	let input;
	let current;

	const input_spread_levels = [
		/*item*/ ctx[17].meta,
		{ name: /*item*/ ctx[17].name },
		{ type: /*item*/ ctx[17].type },
		{ label: /*item*/ ctx[17].label },
		{
			value: /*getValue*/ ctx[7](/*values*/ ctx[3], /*item*/ ctx[17].name)
		},
		{
			errors: /*errors*/ ctx[2][/*item*/ ctx[17].name]
		}
	];

	let input_props = {};

	for (let i = 0; i < input_spread_levels.length; i += 1) {
		input_props = assign(input_props, input_spread_levels[i]);
	}

	input = new Input({ props: input_props, $$inline: true });
	input.$on("input", /*onChange*/ ctx[5]);

	input.$on("change", function () {
		if (is_function(/*getOnChange*/ ctx[6](/*item*/ ctx[17]))) /*getOnChange*/ ctx[6](/*item*/ ctx[17]).apply(this, arguments);
	});

	const block = {
		c: function create() {
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			const input_changes = (dirty & /*items, getValue, values, errors*/ 142)
			? get_spread_update(input_spread_levels, [
					dirty & /*items*/ 2 && get_spread_object(/*item*/ ctx[17].meta),
					dirty & /*items*/ 2 && { name: /*item*/ ctx[17].name },
					dirty & /*items*/ 2 && { type: /*item*/ ctx[17].type },
					dirty & /*items*/ 2 && { label: /*item*/ ctx[17].label },
					dirty & /*getValue, values, items*/ 138 && {
						value: /*getValue*/ ctx[7](/*values*/ ctx[3], /*item*/ ctx[17].name)
					},
					dirty & /*errors, items*/ 6 && {
						errors: /*errors*/ ctx[2][/*item*/ ctx[17].name]
					}
				])
			: {};

			input.$set(input_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$c.name,
		type: "if",
		source: "(86:12) {#if values[item.name] !== null}",
		ctx
	});

	return block;
}

// (81:4) {#each items as item, i}
function create_each_block$6(ctx) {
	let t;
	let show_if;
	let show_if_1;
	let show_if_2;
	let show_if_3;
	let show_if_4;
	let show_if_5;
	let show_if_6;
	let current_block_type_index;
	let if_block1;
	let if_block1_anchor;
	let current;
	let if_block0 = /*i*/ ctx[19] && create_if_block_10(ctx);

	const if_block_creators = [
		create_if_block$k,
		create_if_block_2$4,
		create_if_block_3$1,
		create_if_block_5,
		create_if_block_6,
		create_if_block_7,
		create_if_block_8,
		create_else_block_2
	];

	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (dirty & /*items*/ 2) show_if = !![
			"text",
			"number",
			"textarea",
			"email",
			"password",
			"search",
			"tel",
			"url",
			"date",
			"datetime-local",
			"time"
		].includes(/*item*/ ctx[17].type);

		if (show_if) return 0;
		if (dirty & /*items*/ 2) show_if_1 = !!["checkbox"].includes(/*item*/ ctx[17].type);
		if (show_if_1) return 1;
		if (dirty & /*items*/ 2) show_if_2 = !!["select"].includes(/*item*/ ctx[17].type);
		if (show_if_2) return 2;
		if (dirty & /*items*/ 2) show_if_3 = !!["file"].includes(/*item*/ ctx[17].type);
		if (show_if_3) return 3;
		if (dirty & /*items*/ 2) show_if_4 = !!["files"].includes(/*item*/ ctx[17].type);
		if (show_if_4) return 4;
		if (dirty & /*items*/ 2) show_if_5 = !!["avatar"].includes(/*item*/ ctx[17].type);
		if (show_if_5) return 5;
		if (dirty & /*items*/ 2) show_if_6 = !!["radio-rect"].includes(/*item*/ ctx[17].type);
		if (show_if_6) return 6;
		return 7;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if (if_block0) if_block0.c();
			t = space();
			if_block1.c();
			if_block1_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block0) if_block0.l(nodes);
			t = claim_space(nodes);
			if_block1.l(nodes);
			if_block1_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, t, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block1 = if_blocks[current_block_type_index];

				if (!if_block1) {
					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block1.c();
				}

				transition_in(if_block1, 1);
				if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach_dev(t);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$6.name,
		type: "each",
		source: "(81:4) {#each items as item, i}",
		ctx
	});

	return block;
}

// (80:0) <Form {id} on:submit={onSubmit} class={classProp}>
function create_default_slot$F(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*items*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$6(get_each_context$6(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*items, getValue, values, errors, onChange, getOnChange, $$scope*/ 8430) {
				each_value = /*items*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$6(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$6(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$F.name,
		type: "slot",
		source: "(80:0) <Form {id} on:submit={onSubmit} class={classProp}>",
		ctx
	});

	return block;
}

function create_fragment$11(ctx) {
	let form;
	let current;

	form = new Form({
			props: {
				id: /*id*/ ctx[0],
				class: /*classProp*/ ctx[4],
				$$slots: { default: [create_default_slot$F] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	form.$on("submit", /*onSubmit*/ ctx[8]);

	const block = {
		c: function create() {
			create_component(form.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(form.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(form, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const form_changes = {};
			if (dirty & /*id*/ 1) form_changes.id = /*id*/ ctx[0];
			if (dirty & /*classProp*/ 16) form_changes.class = /*classProp*/ ctx[4];

			if (dirty & /*$$scope, items, values, errors*/ 8206) {
				form_changes.$$scope = { dirty, ctx };
			}

			form.$set(form_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(form.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(form.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(form, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$11.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$11($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { id = undefined } = $$props;
	let { items = [] } = $$props;
	let { data = {} } = $$props;
	let { errors = {} } = $$props;

	let { submit = async () => {
		
	} } = $$props;

	let { beforeChange = values => values } = $$props;
	let submitting = false;

	function onChange({ detail: { e, name, value } }) {
		$$invalidate(3, values = beforeChange(set(values, name, value)));
		dispatch("change", { e, name, value, values });
	}

	async function onDefaultImageChange({ detail: { e, name, value: rawValue } }) {
		const value = [];

		const imgMapper = img => img instanceof File
		? API.uploadImage(img).catch(() => null)
		: Promise.resolve(img);

		const imgPromises = rawValue.map(imgMapper);
		for await (const image of imgPromises) image && value.push(image);
		$$invalidate(3, values = beforeChange(set(values, name, value)));
		dispatch("change", { e, name, value, values, rawValue });
	}

	function getOnChange(item) {
		switch (true) {
			case ["file", "files", "avatar"].includes(item.type):
				return onDefaultImageChange;
			default:
				return onChange;
		}
	}

	function getValue(values, name) {
		const val = get(values, name);
		return val === undefined ? "" : val;
	}

	async function onSubmit() {
		$$invalidate(14, submitting = true);
		await submit(values).catch(err => console.warn("FormBuilder/submit error: ", err));
		$$invalidate(14, submitting = false);
	}

	const writable_props = ["id", "items", "data", "errors", "submit", "beforeChange"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<FormBuilder> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("FormBuilder", $$slots, ['default']);

	$$self.$set = $$props => {
		if ("id" in $$props) $$invalidate(0, id = $$props.id);
		if ("items" in $$props) $$invalidate(1, items = $$props.items);
		if ("data" in $$props) $$invalidate(9, data = $$props.data);
		if ("errors" in $$props) $$invalidate(2, errors = $$props.errors);
		if ("submit" in $$props) $$invalidate(10, submit = $$props.submit);
		if ("beforeChange" in $$props) $$invalidate(11, beforeChange = $$props.beforeChange);
		if ("$$scope" in $$props) $$invalidate(13, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		API,
		classnames,
		_,
		Br,
		Form,
		Loader,
		Input,
		Select,
		ReadField,
		UploadBox,
		RadioRect,
		AvatarUpload,
		CheckboxGroup,
		UploadBoxGroup,
		dispatch,
		id,
		items,
		data,
		errors,
		submit,
		beforeChange,
		submitting,
		onChange,
		onDefaultImageChange,
		getOnChange,
		getValue,
		onSubmit,
		values,
		classProp
	});

	$$self.$inject_state = $$props => {
		if ("id" in $$props) $$invalidate(0, id = $$props.id);
		if ("items" in $$props) $$invalidate(1, items = $$props.items);
		if ("data" in $$props) $$invalidate(9, data = $$props.data);
		if ("errors" in $$props) $$invalidate(2, errors = $$props.errors);
		if ("submit" in $$props) $$invalidate(10, submit = $$props.submit);
		if ("beforeChange" in $$props) $$invalidate(11, beforeChange = $$props.beforeChange);
		if ("submitting" in $$props) $$invalidate(14, submitting = $$props.submitting);
		if ("values" in $$props) $$invalidate(3, values = $$props.values);
		if ("classProp" in $$props) $$invalidate(4, classProp = $$props.classProp);
	};

	let values;
	let classProp;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*data*/ 512) {
			 $$invalidate(3, values = cloneDeep(data));
		}

		if ($$self.$$.dirty & /*submitting*/ 16384) {
			 $$invalidate(4, classProp = classnames("form-builder", { submitting }));
		}
	};

	return [
		id,
		items,
		errors,
		values,
		classProp,
		onChange,
		getOnChange,
		getValue,
		onSubmit,
		data,
		submit,
		beforeChange,
		$$slots,
		$$scope
	];
}

class FormBuilder extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$11, create_fragment$11, safe_not_equal, {
			id: 0,
			items: 1,
			data: 9,
			errors: 2,
			submit: 10,
			beforeChange: 11
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FormBuilder",
			options,
			id: create_fragment$11.name
		});
	}

	get id() {
		throw new Error("<FormBuilder>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<FormBuilder>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get items() {
		throw new Error("<FormBuilder>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set items(value) {
		throw new Error("<FormBuilder>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get data() {
		throw new Error("<FormBuilder>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set data(value) {
		throw new Error("<FormBuilder>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get errors() {
		throw new Error("<FormBuilder>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set errors(value) {
		throw new Error("<FormBuilder>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get submit() {
		throw new Error("<FormBuilder>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set submit(value) {
		throw new Error("<FormBuilder>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get beforeChange() {
		throw new Error("<FormBuilder>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set beforeChange(value) {
		throw new Error("<FormBuilder>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/app/Header.svelte generated by Svelte v3.24.0 */

const { document: document_1$3, window: window_1 } = globals;
const file$12 = "src/components/app/Header.svelte";

function add_css$m() {
	var style = element("style");
	style.id = "svelte-1x3mqf2-style";
	style.textContent = "nav.svelte-1x3mqf2.svelte-1x3mqf2{position:fixed;top:0;width:100%;height:var(--header-height);z-index:7;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-transform:translateY(-100%);transform:translateY(-100%);-webkit-transition:.2s ease-in-out;transition:.2s ease-in-out;color:rgba(var(--color-font-light));-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;-webkit-box-shadow:var(--shadow-secondary);box-shadow:var(--shadow-secondary);background-color:rgba(var(--color-dark-second))}nav.active.svelte-1x3mqf2.svelte-1x3mqf2{-webkit-transform:none;transform:none\n}.selected.svelte-1x3mqf2.svelte-1x3mqf2{position:relative;display:inline-block}.selected.svelte-1x3mqf2.svelte-1x3mqf2::after{position:absolute;content:\"\";width:calc(100% - 1em);height:2px;background-color:rgb(var(--color-danger));display:block;bottom:-1px}.nav-pages.svelte-1x3mqf2 a.svelte-1x3mqf2{padding:0.8em 0.5em}.nav-actions.svelte-1x3mqf2.svelte-1x3mqf2{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:-3px}.nav-actions.svelte-1x3mqf2 li.svelte-1x3mqf2{padding:3px}.nav-actions.svelte-1x3mqf2 a.svelte-1x3mqf2{display:block}.lang-select.svelte-1x3mqf2.svelte-1x3mqf2{padding:5px;background-color:transparent;color:rgba(var(--color-font-light))}.lang-select.svelte-1x3mqf2.svelte-1x3mqf2:hover,.lang-select.svelte-1x3mqf2.svelte-1x3mqf2:focus{-webkit-box-shadow:none;box-shadow:none;background-color:rgba(var(--color-black), 0.1)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append_dev(document_1$3.head, style);
}

// (70:12) <Button on:click={() => changeTheme(themeName === 'theme-light' ? 'theme-dark' : 'theme-light')} auto size="small">
function create_default_slot$G(ctx) {
	let icon;
	let current;

	icon = new Icon({
			props: {
				type: "moon",
				size: "medium",
				class: "theme-svg-fill-opposite",
				is: "light"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icon.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$G.name,
		type: "slot",
		source: "(70:12) <Button on:click={() => changeTheme(themeName === 'theme-light' ? 'theme-dark' : 'theme-light')} auto size=\\\"small\\\">",
		ctx
	});

	return block;
}

function create_fragment$12(ctx) {
	let nav;
	let ul0;
	let li0;
	let a0;
	let t0;
	let t1;
	let li1;
	let a1;
	let t2;
	let t3;
	let li2;
	let a2;
	let t4;
	let t5;
	let ul1;
	let li3;
	let select;
	let option0;
	let t6;
	let option1;
	let t7;
	let option2;
	let t8;
	let t9;
	let li4;
	let button;
	let t10;
	let li5;
	let a3;
	let avatar;
	let nav_class_value;
	let current;
	let mounted;
	let dispose;

	button = new Button({
			props: {
				auto: true,
				size: "small",
				$$slots: { default: [create_default_slot$G] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*click_handler*/ ctx[6]);

	avatar = new Avatar({
			props: {
				size: "small",
				src: "https://placeimg.com/30/30/people",
				alt: "avatar"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			nav = element("nav");
			ul0 = element("ul");
			li0 = element("li");
			a0 = element("a");
			t0 = text("home");
			t1 = space();
			li1 = element("li");
			a1 = element("a");
			t2 = text("lists");
			t3 = space();
			li2 = element("li");
			a2 = element("a");
			t4 = text("map");
			t5 = space();
			ul1 = element("ul");
			li3 = element("li");
			select = element("select");
			option0 = element("option");
			t6 = text("Ua");
			option1 = element("option");
			t7 = text("Ru");
			option2 = element("option");
			t8 = text("En");
			t9 = space();
			li4 = element("li");
			create_component(button.$$.fragment);
			t10 = space();
			li5 = element("li");
			a3 = element("a");
			create_component(avatar.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			nav = claim_element(nodes, "NAV", { class: true });
			var nav_nodes = children(nav);
			ul0 = claim_element(nav_nodes, "UL", { class: true });
			var ul0_nodes = children(ul0);
			li0 = claim_element(ul0_nodes, "LI", { class: true });
			var li0_nodes = children(li0);
			a0 = claim_element(li0_nodes, "A", { rel: true, href: true, class: true });
			var a0_nodes = children(a0);
			t0 = claim_text(a0_nodes, "home");
			a0_nodes.forEach(detach_dev);
			li0_nodes.forEach(detach_dev);
			t1 = claim_space(ul0_nodes);
			li1 = claim_element(ul0_nodes, "LI", { class: true });
			var li1_nodes = children(li1);
			a1 = claim_element(li1_nodes, "A", { rel: true, href: true, class: true });
			var a1_nodes = children(a1);
			t2 = claim_text(a1_nodes, "lists");
			a1_nodes.forEach(detach_dev);
			li1_nodes.forEach(detach_dev);
			t3 = claim_space(ul0_nodes);
			li2 = claim_element(ul0_nodes, "LI", { class: true });
			var li2_nodes = children(li2);
			a2 = claim_element(li2_nodes, "A", { href: true, class: true });
			var a2_nodes = children(a2);
			t4 = claim_text(a2_nodes, "map");
			a2_nodes.forEach(detach_dev);
			li2_nodes.forEach(detach_dev);
			ul0_nodes.forEach(detach_dev);
			t5 = claim_space(nav_nodes);
			ul1 = claim_element(nav_nodes, "UL", { class: true });
			var ul1_nodes = children(ul1);
			li3 = claim_element(ul1_nodes, "LI", { class: true });
			var li3_nodes = children(li3);

			select = claim_element(li3_nodes, "SELECT", {
				value: true,
				name: true,
				id: true,
				class: true
			});

			var select_nodes = children(select);
			option0 = claim_element(select_nodes, "OPTION", { value: true });
			var option0_nodes = children(option0);
			t6 = claim_text(option0_nodes, "Ua");
			option0_nodes.forEach(detach_dev);
			option1 = claim_element(select_nodes, "OPTION", { value: true });
			var option1_nodes = children(option1);
			t7 = claim_text(option1_nodes, "Ru");
			option1_nodes.forEach(detach_dev);
			option2 = claim_element(select_nodes, "OPTION", { value: true });
			var option2_nodes = children(option2);
			t8 = claim_text(option2_nodes, "En");
			option2_nodes.forEach(detach_dev);
			select_nodes.forEach(detach_dev);
			li3_nodes.forEach(detach_dev);
			t9 = claim_space(ul1_nodes);
			li4 = claim_element(ul1_nodes, "LI", { class: true });
			var li4_nodes = children(li4);
			claim_component(button.$$.fragment, li4_nodes);
			li4_nodes.forEach(detach_dev);
			t10 = claim_space(ul1_nodes);
			li5 = claim_element(ul1_nodes, "LI", { class: true });
			var li5_nodes = children(li5);
			a3 = claim_element(li5_nodes, "A", { class: true, href: true });
			var a3_nodes = children(a3);
			claim_component(avatar.$$.fragment, a3_nodes);
			a3_nodes.forEach(detach_dev);
			li5_nodes.forEach(detach_dev);
			ul1_nodes.forEach(detach_dev);
			nav_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a0, "rel", "prefetch");
			attr_dev(a0, "href", ".");
			attr_dev(a0, "class", "svelte-1x3mqf2");
			toggle_class(a0, "selected", /*segment*/ ctx[0] === undefined);
			add_location(a0, file$12, 54, 12, 1867);
			attr_dev(li0, "class", "svelte-1x3mqf2");
			add_location(li0, file$12, 54, 8, 1863);
			attr_dev(a1, "rel", "prefetch");
			attr_dev(a1, "href", "lists/funds");
			attr_dev(a1, "class", "svelte-1x3mqf2");
			toggle_class(a1, "selected", /*segment*/ ctx[0] === "lists");
			add_location(a1, file$12, 55, 12, 1959);
			attr_dev(li1, "class", "svelte-1x3mqf2");
			add_location(li1, file$12, 55, 8, 1955);
			attr_dev(a2, "href", "map");
			attr_dev(a2, "class", "svelte-1x3mqf2");
			toggle_class(a2, "selected", /*segment*/ ctx[0] === "map");
			add_location(a2, file$12, 56, 12, 2060);
			attr_dev(li2, "class", "svelte-1x3mqf2");
			add_location(li2, file$12, 56, 8, 2056);
			attr_dev(ul0, "class", "nav-pages flex svelte-1x3mqf2");
			add_location(ul0, file$12, 53, 4, 1827);
			option0.__value = "ua";
			option0.value = option0.__value;
			add_location(option0, file$12, 62, 16, 2274);
			option1.__value = "ru";
			option1.value = option1.__value;
			add_location(option1, file$12, 63, 16, 2321);
			option2.__value = "en";
			option2.value = option2.__value;
			add_location(option2, file$12, 64, 16, 2368);
			attr_dev(select, "name", "lang");
			attr_dev(select, "id", "lang");
			attr_dev(select, "class", "btn small lang-select svelte-1x3mqf2");
			add_location(select, file$12, 61, 12, 2189);
			attr_dev(li3, "class", "svelte-1x3mqf2");
			add_location(li3, file$12, 60, 8, 2172);
			attr_dev(li4, "class", "svelte-1x3mqf2");
			add_location(li4, file$12, 68, 8, 2444);
			attr_dev(a3, "class", "btn small svelte-1x3mqf2");
			attr_dev(a3, "href", "users/me");
			add_location(a3, file$12, 75, 12, 2732);
			attr_dev(li5, "class", "svelte-1x3mqf2");
			add_location(li5, file$12, 74, 8, 2715);
			attr_dev(ul1, "class", "nav-actions svelte-1x3mqf2");
			add_location(ul1, file$12, 59, 4, 2139);
			attr_dev(nav, "class", nav_class_value = "" + (null_to_empty(/*classProp*/ ctx[3]) + " svelte-1x3mqf2"));
			add_location(nav, file$12, 52, 0, 1799);
		},
		m: function mount(target, anchor) {
			insert_dev(target, nav, anchor);
			append_dev(nav, ul0);
			append_dev(ul0, li0);
			append_dev(li0, a0);
			append_dev(a0, t0);
			append_dev(ul0, t1);
			append_dev(ul0, li1);
			append_dev(li1, a1);
			append_dev(a1, t2);
			append_dev(ul0, t3);
			append_dev(ul0, li2);
			append_dev(li2, a2);
			append_dev(a2, t4);
			append_dev(nav, t5);
			append_dev(nav, ul1);
			append_dev(ul1, li3);
			append_dev(li3, select);
			append_dev(select, option0);
			append_dev(option0, t6);
			append_dev(select, option1);
			append_dev(option1, t7);
			append_dev(select, option2);
			append_dev(option2, t8);
			select_option(select, /*value*/ ctx[4]);
			append_dev(ul1, t9);
			append_dev(ul1, li4);
			mount_component(button, li4, null);
			append_dev(ul1, t10);
			append_dev(ul1, li5);
			append_dev(li5, a3);
			mount_component(avatar, a3, null);
			current = true;

			if (!mounted) {
				dispose = listen_dev(
					window_1,
					"scroll",
					function () {
						if (is_function(/*onScroll*/ ctx[1])) /*onScroll*/ ctx[1].apply(this, arguments);
					},
					false,
					false,
					false
				);

				mounted = true;
			}
		},
		p: function update(new_ctx, [dirty]) {
			ctx = new_ctx;

			if (dirty & /*segment, undefined*/ 1) {
				toggle_class(a0, "selected", /*segment*/ ctx[0] === undefined);
			}

			if (dirty & /*segment*/ 1) {
				toggle_class(a1, "selected", /*segment*/ ctx[0] === "lists");
			}

			if (dirty & /*segment*/ 1) {
				toggle_class(a2, "selected", /*segment*/ ctx[0] === "map");
			}

			const button_changes = {};

			if (dirty & /*$$scope*/ 512) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);

			if (!current || dirty & /*classProp*/ 8 && nav_class_value !== (nav_class_value = "" + (null_to_empty(/*classProp*/ ctx[3]) + " svelte-1x3mqf2"))) {
				attr_dev(nav, "class", nav_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			transition_in(avatar.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			transition_out(avatar.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(nav);
			destroy_component(button);
			destroy_component(avatar);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$12.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const gap = 50;

function instance$12($$self, $$props, $$invalidate) {
	let { segment } = $$props;
	let value = "ua";
	let isHeaderVisible = true;
	let onScroll = null;
	let lastY = 0;

	onMount(() => {
		$$invalidate(1, onScroll = () => requestAnimationFrame(function () {
			const currentY = window.pageYOffset;
			const direction = currentY - lastY;

			if (direction < -gap || currentY < 50) {
				// up (50 - max scrollTop for displaying header)
				if (!isHeaderVisible) $$invalidate(7, isHeaderVisible = true);

				lastY = currentY + gap;
			} else if (direction > gap) {
				// down
				if (isHeaderVisible) $$invalidate(7, isHeaderVisible = false);

				lastY = currentY - gap;
			}
		}));
	});

	let themeName = safeGet(() => cookieStorage.get("theme") || localStorage.get("theme"));

	function changeTheme(theme) {
		$$invalidate(2, themeName = theme);
		document.body.classList.remove("theme-dark");
		document.body.classList.remove("theme-light");
		document.body.classList.add(theme);
		document.getElementById("main").classList.remove("theme-dark");
		document.getElementById("main").classList.remove("theme-light");
		document.getElementById("main").classList.add(theme);
		cookieStorage.set("theme", theme);
		localStorage.set("theme", theme);
	}

	onMount(() => {
		changeTheme(themeName);
	});

	const writable_props = ["segment"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Header> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Header", $$slots, []);

	const click_handler = () => changeTheme(themeName === "theme-light"
	? "theme-dark"
	: "theme-light");

	$$self.$set = $$props => {
		if ("segment" in $$props) $$invalidate(0, segment = $$props.segment);
	};

	$$self.$capture_state = () => ({
		onMount,
		Storages,
		classnames,
		safeGet,
		Icon,
		Button,
		Avatar,
		segment,
		value,
		gap,
		isHeaderVisible,
		onScroll,
		lastY,
		themeName,
		changeTheme,
		classProp
	});

	$$self.$inject_state = $$props => {
		if ("segment" in $$props) $$invalidate(0, segment = $$props.segment);
		if ("value" in $$props) $$invalidate(4, value = $$props.value);
		if ("isHeaderVisible" in $$props) $$invalidate(7, isHeaderVisible = $$props.isHeaderVisible);
		if ("onScroll" in $$props) $$invalidate(1, onScroll = $$props.onScroll);
		if ("lastY" in $$props) lastY = $$props.lastY;
		if ("themeName" in $$props) $$invalidate(2, themeName = $$props.themeName);
		if ("classProp" in $$props) $$invalidate(3, classProp = $$props.classProp);
	};

	let classProp;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*isHeaderVisible*/ 128) {
			 $$invalidate(3, classProp = classnames("container", { active: isHeaderVisible }));
		}
	};

	return [segment, onScroll, themeName, classProp, value, changeTheme, click_handler];
}

class Header extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document_1$3.getElementById("svelte-1x3mqf2-style")) add_css$m();
		init(this, options, instance$12, create_fragment$12, safe_not_equal, { segment: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Header",
			options,
			id: create_fragment$12.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*segment*/ ctx[0] === undefined && !("segment" in props)) {
			console.warn("<Header> was created without expected prop 'segment'");
		}
	}

	get segment() {
		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set segment(value) {
		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/app/Footer.svelte generated by Svelte v3.24.0 */
const file$13 = "src/components/app/Footer.svelte";

function add_css$n() {
	var style = element("style");
	style.id = "svelte-e0hzot-style";
	style.textContent = "footer.svelte-e0hzot{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;padding:var(--screen-padding);-webkit-box-shadow:inset var(--shadow-primary);box-shadow:inset var(--shadow-primary);background-color:rgba(var(--theme-bg-color))}ul.svelte-e0hzot{display:-webkit-box;display:-ms-flexbox;display:flex;margin:-3px}li.svelte-e0hzot{padding:3px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRm9vdGVyLnN2ZWx0ZSIsInNvdXJjZXMiOlsiRm9vdGVyLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICAgIGltcG9ydCBCdXR0b24gZnJvbSAnQGNvbXBvbmVudHMvQnV0dG9uLnN2ZWx0ZSdcbjwvc2NyaXB0PlxuXG48Zm9vdGVyPlxuICAgIDxwPsKpIHtuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCl9PC9wPlxuICAgIDx1bD5cbiAgICAgICAgPGxpPlxuICAgICAgICAgICAgPEJ1dHRvbiBzaXplPVwic21hbGxcIiBpcz1cInN1Y2Nlc3NcIj5BY3Rpb248L0J1dHRvbj5cbiAgICAgICAgPC9saT5cbiAgICA8L3VsPlxuPC9mb290ZXI+XG5cbjxzdHlsZT5cbmZvb3RlciB7XG4gICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gICAgZGlzcGxheTogLW1zLWZsZXhib3g7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xuICAgICAgICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAtd2Via2l0LWJveC1wYWNrOiBqdXN0aWZ5O1xuICAgICAgICAtbXMtZmxleC1wYWNrOiBqdXN0aWZ5O1xuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIHBhZGRpbmc6IHZhcigtLXNjcmVlbi1wYWRkaW5nKTtcbiAgICAtd2Via2l0LWJveC1zaGFkb3c6IGluc2V0IHZhcigtLXNoYWRvdy1wcmltYXJ5KTtcbiAgICAgICAgICAgIGJveC1zaGFkb3c6IGluc2V0IHZhcigtLXNoYWRvdy1wcmltYXJ5KTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKHZhcigtLXRoZW1lLWJnLWNvbG9yKSk7XG59XG5cbnVsIHtcbiAgICBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgICBkaXNwbGF5OiAtbXMtZmxleGJveDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIG1hcmdpbjogLTNweDtcbn1cblxubGkge1xuICAgIHBhZGRpbmc6IDNweDtcbn08L3N0eWxlPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWNBLE1BQU0sY0FBQyxDQUFDLEFBQ0osT0FBTyxDQUFFLFdBQVcsQ0FDcEIsT0FBTyxDQUFFLFdBQVcsQ0FDcEIsT0FBTyxDQUFFLElBQUksQ0FDYixpQkFBaUIsQ0FBRSxNQUFNLENBQ3JCLGNBQWMsQ0FBRSxNQUFNLENBQ2xCLFdBQVcsQ0FBRSxNQUFNLENBQzNCLGdCQUFnQixDQUFFLE9BQU8sQ0FDckIsYUFBYSxDQUFFLE9BQU8sQ0FDbEIsZUFBZSxDQUFFLGFBQWEsQ0FDdEMsT0FBTyxDQUFFLElBQUksZ0JBQWdCLENBQUMsQ0FDOUIsa0JBQWtCLENBQUUsS0FBSyxDQUFDLElBQUksZ0JBQWdCLENBQUMsQ0FDdkMsVUFBVSxDQUFFLEtBQUssQ0FBQyxJQUFJLGdCQUFnQixDQUFDLENBQy9DLGdCQUFnQixDQUFFLEtBQUssSUFBSSxnQkFBZ0IsQ0FBQyxDQUFDLEFBQ2pELENBQUMsQUFFRCxFQUFFLGNBQUMsQ0FBQyxBQUNBLE9BQU8sQ0FBRSxXQUFXLENBQ3BCLE9BQU8sQ0FBRSxXQUFXLENBQ3BCLE9BQU8sQ0FBRSxJQUFJLENBQ2IsTUFBTSxDQUFFLElBQUksQUFDaEIsQ0FBQyxBQUVELEVBQUUsY0FBQyxDQUFDLEFBQ0EsT0FBTyxDQUFFLEdBQUcsQUFDaEIsQ0FBQyJ9 */";
	append_dev(document.head, style);
}

// (9:12) <Button size="small" is="success">
function create_default_slot$H(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Action");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Action");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$H.name,
		type: "slot",
		source: "(9:12) <Button size=\\\"small\\\" is=\\\"success\\\">",
		ctx
	});

	return block;
}

function create_fragment$13(ctx) {
	let footer;
	let p;
	let t0;
	let t1_value = new Date().getFullYear() + "";
	let t1;
	let t2;
	let ul;
	let li;
	let button;
	let current;

	button = new Button({
			props: {
				size: "small",
				is: "success",
				$$slots: { default: [create_default_slot$H] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			footer = element("footer");
			p = element("p");
			t0 = text("© ");
			t1 = text(t1_value);
			t2 = space();
			ul = element("ul");
			li = element("li");
			create_component(button.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			footer = claim_element(nodes, "FOOTER", { class: true });
			var footer_nodes = children(footer);
			p = claim_element(footer_nodes, "P", {});
			var p_nodes = children(p);
			t0 = claim_text(p_nodes, "© ");
			t1 = claim_text(p_nodes, t1_value);
			p_nodes.forEach(detach_dev);
			t2 = claim_space(footer_nodes);
			ul = claim_element(footer_nodes, "UL", { class: true });
			var ul_nodes = children(ul);
			li = claim_element(ul_nodes, "LI", { class: true });
			var li_nodes = children(li);
			claim_component(button.$$.fragment, li_nodes);
			li_nodes.forEach(detach_dev);
			ul_nodes.forEach(detach_dev);
			footer_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file$13, 5, 4, 84);
			attr_dev(li, "class", "svelte-e0hzot");
			add_location(li, file$13, 7, 8, 137);
			attr_dev(ul, "class", "svelte-e0hzot");
			add_location(ul, file$13, 6, 4, 124);
			attr_dev(footer, "class", "svelte-e0hzot");
			add_location(footer, file$13, 4, 0, 71);
		},
		m: function mount(target, anchor) {
			insert_dev(target, footer, anchor);
			append_dev(footer, p);
			append_dev(p, t0);
			append_dev(p, t1);
			append_dev(footer, t2);
			append_dev(footer, ul);
			append_dev(ul, li);
			mount_component(button, li, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 1) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(footer);
			destroy_component(button);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$13.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$13($$self, $$props, $$invalidate) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Footer> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Footer", $$slots, []);
	$$self.$capture_state = () => ({ Button });
	return [];
}

class Footer extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-e0hzot-style")) add_css$n();
		init(this, options, instance$13, create_fragment$13, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Footer",
			options,
			id: create_fragment$13.name
		});
	}
}

/* src/components/app/SocialsX.svelte generated by Svelte v3.24.0 */
const file$14 = "src/components/app/SocialsX.svelte";

function add_css$o() {
	var style = element("style");
	style.id = "svelte-x7o1bc-style";
	style.textContent = ".social-icons.svelte-x7o1bc li.svelte-x7o1bc{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;width:40px;height:40px;border-radius:50%;overflow:hidden;margin:0 10px}.social-icons.svelte-x7o1bc .telegram.svelte-x7o1bc{background-color:#2197D2}.social-icons.svelte-x7o1bc .facebook.svelte-x7o1bc{background-color:#4267B2}.social-icons.svelte-x7o1bc .viber.svelte-x7o1bc{background-color:#665CAC}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU29jaWFsc1guc3ZlbHRlIiwic291cmNlcyI6WyJTb2NpYWxzWC5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgICBpbXBvcnQgSWNvbiBmcm9tICcuLi9JY29uLnN2ZWx0ZSdcbiAgICBpbXBvcnQgTG9hZGVyIGZyb20gJy4uL2xvYWRlci9Mb2FkZXIuc3ZlbHRlJ1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUge3tcbiAgICAgKiAgaHJlZjogc3RyaW5nLFxuICAgICAqICB0aXRsZTogc3RyaW5nLFxuICAgICAqICB0eXBlOiBDb25maWcuSWNvbnMsXG4gICAgICogfVtdfVxuICAgICAqL1xuICAgIGV4cG9ydCBsZXQgaXRlbXNcblxuICAgICQ6IGxpc3QgPSBpdGVtcyA9PT0gbnVsbCA/IFtudWxsLCBudWxsLCBudWxsXSA6IGl0ZW1zIHx8IFtdXG48L3NjcmlwdD5cblxuPHVsIGNsYXNzPVwiZmxleCBmbGV4LWp1c3RpZnktY2VudGVyIHNvY2lhbC1pY29uc1wiPlxuICAgIHsjZWFjaCBsaXN0IGFzIGl0ZW19XG4gICAgICAgIHsjaWYgaXRlbSAhPT0gbnVsbH1cbiAgICAgICAgICAgIDxsaSBjbGFzcz17aXRlbS50eXBlfT5cbiAgICAgICAgICAgICAgICA8c2xvdCB7aXRlbX0+XG4gICAgICAgICAgICAgICAgICAgIHsjaWYgaXRlbS5ocmVmfVxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj17aXRlbS5ocmVmfSB0YXJnZXQ9XCJfYmxhbmtcIiB0aXRsZT17aXRlbS50aXRsZX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEljb24gdHlwZT17aXRlbS50eXBlfSBpcz1cImxpZ2h0XCIgc2l6ZT1cIm1lZGl1bVwiLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICAgICAgezplbHNlfVxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gb246Y2xpY2s+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEljb24gdHlwZT17aXRlbS50eXBlfSBpcz1cImxpZ2h0XCIgc2l6ZT1cIm1lZGl1bVwiLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgICAgICA8L3Nsb3Q+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICB7OmVsc2V9XG4gICAgICAgICAgICA8bGkgc3R5bGU9XCJwYWRkaW5nOiAwIDEwcHg7IHdpZHRoOiA2MHB4OyBoZWlnaHQ6IDQ1cHg7IG92ZXJmbG93OiBoaWRkZW5cIj5cbiAgICAgICAgICAgICAgICA8TG9hZGVyIHR5cGU9XCJhdmF0YXJcIi8+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICB7L2lmfVxuICAgIHsvZWFjaH1cbjwvdWw+XG5cbjxzdHlsZT5cbi5zb2NpYWwtaWNvbnMgbGkge1xuICAgIGRpc3BsYXk6IC13ZWJraXQtYm94O1xuICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgLXdlYmtpdC1ib3gtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgLXdlYmtpdC1ib3gtcGFjazogY2VudGVyO1xuICAgICAgICAtbXMtZmxleC1wYWNrOiBjZW50ZXI7XG4gICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICB3aWR0aDogNDBweDtcbiAgICBoZWlnaHQ6IDQwcHg7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgbWFyZ2luOiAwIDEwcHg7XG59XG5cbi5zb2NpYWwtaWNvbnMgLnRlbGVncmFtIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjE5N0QyO1xufVxuLnNvY2lhbC1pY29ucyAuZmFjZWJvb2sge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICM0MjY3QjI7XG59XG4uc29jaWFsLWljb25zIC52aWJlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzY2NUNBQztcbn08L3N0eWxlPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlDQSwyQkFBYSxDQUFDLEVBQUUsY0FBQyxDQUFDLEFBQ2QsT0FBTyxDQUFFLFdBQVcsQ0FDcEIsT0FBTyxDQUFFLFdBQVcsQ0FDcEIsT0FBTyxDQUFFLElBQUksQ0FDYixpQkFBaUIsQ0FBRSxNQUFNLENBQ3JCLGNBQWMsQ0FBRSxNQUFNLENBQ2xCLFdBQVcsQ0FBRSxNQUFNLENBQzNCLGdCQUFnQixDQUFFLE1BQU0sQ0FDcEIsYUFBYSxDQUFFLE1BQU0sQ0FDakIsZUFBZSxDQUFFLE1BQU0sQ0FDL0IsS0FBSyxDQUFFLElBQUksQ0FDWCxNQUFNLENBQUUsSUFBSSxDQUNaLGFBQWEsQ0FBRSxHQUFHLENBQ2xCLFFBQVEsQ0FBRSxNQUFNLENBQ2hCLE1BQU0sQ0FBRSxDQUFDLENBQUMsSUFBSSxBQUNsQixDQUFDLEFBRUQsMkJBQWEsQ0FBQyxTQUFTLGNBQUMsQ0FBQyxBQUNyQixnQkFBZ0IsQ0FBRSxPQUFPLEFBQzdCLENBQUMsQUFDRCwyQkFBYSxDQUFDLFNBQVMsY0FBQyxDQUFDLEFBQ3JCLGdCQUFnQixDQUFFLE9BQU8sQUFDN0IsQ0FBQyxBQUNELDJCQUFhLENBQUMsTUFBTSxjQUFDLENBQUMsQUFDbEIsZ0JBQWdCLENBQUUsT0FBTyxBQUM3QixDQUFDIn0= */";
	append_dev(document.head, style);
}

const get_default_slot_changes$5 = dirty => ({ item: dirty & /*list*/ 1 });
const get_default_slot_context$5 = ctx => ({ item: /*item*/ ctx[5] });

function get_each_context$7(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	return child_ctx;
}

// (33:8) {:else}
function create_else_block_1$1(ctx) {
	let li;
	let loader;
	let t;
	let current;

	loader = new Loader({
			props: { type: "avatar" },
			$$inline: true
		});

	const block = {
		c: function create() {
			li = element("li");
			create_component(loader.$$.fragment);
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { style: true, class: true });
			var li_nodes = children(li);
			claim_component(loader.$$.fragment, li_nodes);
			t = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(li, "padding", "0 10px");
			set_style(li, "width", "60px");
			set_style(li, "height", "45px");
			set_style(li, "overflow", "hidden");
			attr_dev(li, "class", "svelte-x7o1bc");
			add_location(li, file$14, 33, 12, 977);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			mount_component(loader, li, null);
			append_dev(li, t);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(loader.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(loader.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			destroy_component(loader);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1$1.name,
		type: "else",
		source: "(33:8) {:else}",
		ctx
	});

	return block;
}

// (19:8) {#if item !== null}
function create_if_block$l(ctx) {
	let li;
	let t;
	let li_class_value;
	let current;
	const default_slot_template = /*$$slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], get_default_slot_context$5);
	const default_slot_or_fallback = default_slot || fallback_block$7(ctx);

	const block = {
		c: function create() {
			li = element("li");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			if (default_slot_or_fallback) default_slot_or_fallback.l(li_nodes);
			t = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(li, "class", li_class_value = "" + (null_to_empty(/*item*/ ctx[5].type) + " svelte-x7o1bc"));
			add_location(li, file$14, 19, 12, 427);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(li, null);
			}

			append_dev(li, t);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope, list*/ 5) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[2], dirty, get_default_slot_changes$5, get_default_slot_context$5);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*list*/ 1) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (!current || dirty & /*list*/ 1 && li_class_value !== (li_class_value = "" + (null_to_empty(/*item*/ ctx[5].type) + " svelte-x7o1bc"))) {
				attr_dev(li, "class", li_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$l.name,
		type: "if",
		source: "(19:8) {#if item !== null}",
		ctx
	});

	return block;
}

// (26:20) {:else}
function create_else_block$6(ctx) {
	let span;
	let icon;
	let current;
	let mounted;
	let dispose;

	icon = new Icon({
			props: {
				type: /*item*/ ctx[5].type,
				is: "light",
				size: "medium"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			span = element("span");
			create_component(icon.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", {});
			var span_nodes = children(span);
			claim_component(icon.$$.fragment, span_nodes);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(span, file$14, 26, 24, 755);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			mount_component(icon, span, null);
			current = true;

			if (!mounted) {
				dispose = listen_dev(span, "click", /*click_handler*/ ctx[4], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			const icon_changes = {};
			if (dirty & /*list*/ 1) icon_changes.type = /*item*/ ctx[5].type;
			icon.$set(icon_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			destroy_component(icon);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$6.name,
		type: "else",
		source: "(26:20) {:else}",
		ctx
	});

	return block;
}

// (22:20) {#if item.href}
function create_if_block_1$d(ctx) {
	let a;
	let icon;
	let a_href_value;
	let a_title_value;
	let current;

	icon = new Icon({
			props: {
				type: /*item*/ ctx[5].type,
				is: "light",
				size: "medium"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			a = element("a");
			create_component(icon.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { href: true, target: true, title: true });
			var a_nodes = children(a);
			claim_component(icon.$$.fragment, a_nodes);
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", a_href_value = /*item*/ ctx[5].href);
			attr_dev(a, "target", "_blank");
			attr_dev(a, "title", a_title_value = /*item*/ ctx[5].title);
			add_location(a, file$14, 22, 24, 540);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			mount_component(icon, a, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icon_changes = {};
			if (dirty & /*list*/ 1) icon_changes.type = /*item*/ ctx[5].type;
			icon.$set(icon_changes);

			if (!current || dirty & /*list*/ 1 && a_href_value !== (a_href_value = /*item*/ ctx[5].href)) {
				attr_dev(a, "href", a_href_value);
			}

			if (!current || dirty & /*list*/ 1 && a_title_value !== (a_title_value = /*item*/ ctx[5].title)) {
				attr_dev(a, "title", a_title_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			destroy_component(icon);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$d.name,
		type: "if",
		source: "(22:20) {#if item.href}",
		ctx
	});

	return block;
}

// (21:29)                      
function fallback_block$7(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_1$d, create_else_block$6];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*item*/ ctx[5].href) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block$7.name,
		type: "fallback",
		source: "(21:29)                      ",
		ctx
	});

	return block;
}

// (18:4) {#each list as item}
function create_each_block$7(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$l, create_else_block_1$1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*item*/ ctx[5] !== null) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$7.name,
		type: "each",
		source: "(18:4) {#each list as item}",
		ctx
	});

	return block;
}

function create_fragment$14(ctx) {
	let ul;
	let current;
	let each_value = /*list*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$7(get_each_context$7(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(ul, "class", "flex flex-justify-center social-icons svelte-x7o1bc");
			add_location(ul, file$14, 16, 0, 311);
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*list, $$scope*/ 5) {
				each_value = /*list*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$7(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$7(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(ul, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$14.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$14($$self, $$props, $$invalidate) {
	let { items } = $$props;
	const writable_props = ["items"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SocialsX> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("SocialsX", $$slots, ['default']);

	function click_handler(event) {
		bubble($$self, event);
	}

	$$self.$set = $$props => {
		if ("items" in $$props) $$invalidate(1, items = $$props.items);
		if ("$$scope" in $$props) $$invalidate(2, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({ Icon, Loader, items, list });

	$$self.$inject_state = $$props => {
		if ("items" in $$props) $$invalidate(1, items = $$props.items);
		if ("list" in $$props) $$invalidate(0, list = $$props.list);
	};

	let list;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*items*/ 2) {
			 $$invalidate(0, list = items === null ? [null, null, null] : items || []);
		}
	};

	return [list, items, $$scope, $$slots, click_handler];
}

class SocialsX extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-x7o1bc-style")) add_css$o();
		init(this, options, instance$14, create_fragment$14, safe_not_equal, { items: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SocialsX",
			options,
			id: create_fragment$14.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*items*/ ctx[1] === undefined && !("items" in props)) {
			console.warn("<SocialsX> was created without expected prop 'items'");
		}
	}

	get items() {
		throw new Error("<SocialsX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set items(value) {
		throw new Error("<SocialsX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/app/SocialsY.svelte generated by Svelte v3.24.0 */
const file$15 = "src/components/app/SocialsY.svelte";

function add_css$p() {
	var style = element("style");
	style.id = "svelte-1qjherp-style";
	style.textContent = ".social-icons.svelte-1qjherp li.svelte-1qjherp{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;overflow:hidden;margin:7px 0}.social-icons.svelte-1qjherp .inner.svelte-1qjherp{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.social-icons.svelte-1qjherp .icon-wrap.svelte-1qjherp{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;width:26px;height:26px;border-radius:50%;background-color:rgba(var(--color-dark))}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU29jaWFsc1kuc3ZlbHRlIiwic291cmNlcyI6WyJTb2NpYWxzWS5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiXG48c2NyaXB0PlxuICAgIGltcG9ydCBJY29uIGZyb20gJy4uL0ljb24uc3ZlbHRlJ1xuICAgIGltcG9ydCBMb2FkZXIgZnJvbSAnLi4vbG9hZGVyL0xvYWRlci5zdmVsdGUnXG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7e1xuICAgICAqICBocmVmOiBzdHJpbmcsXG4gICAgICogIHRpdGxlOiBzdHJpbmcsXG4gICAgICogIHR5cGU6IENvbmZpZy5JY29ucyxcbiAgICAgKiB9W119XG4gICAgICovXG4gICAgZXhwb3J0IGxldCBpdGVtc1xuXG4gICAgJDogbGlzdCA9IGl0ZW1zID09PSBudWxsID8gW251bGwsIG51bGwsIG51bGxdIDogaXRlbXMgfHwgW11cbjwvc2NyaXB0PlxuXG48dWwgY2xhc3M9XCJzb2NpYWwtaWNvbnNcIj5cbiAgICB7I2VhY2ggbGlzdCBhcyBpdGVtfVxuICAgICAgICA8bGk+XG4gICAgICAgICAgICB7I2lmIGl0ZW0gIT09IG51bGx9XG4gICAgICAgICAgICAgICAgPHNsb3Qge2l0ZW19PlxuICAgICAgICAgICAgICAgICAgICB7I2lmIGl0ZW0uaHJlZn1cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9e2l0ZW0uaHJlZn0gdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJpbm5lclwiIHRpdGxlPXtpdGVtLnRpdGxlfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImljb24td3JhcFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SWNvbiB0eXBlPXtpdGVtLnR5cGV9IGlzPVwibGlnaHRcIiBzaXplPVwidGlueVwiLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHM+PC9zPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzPjwvcz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cz48L3M+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJoM1wiPntpdGVtLnRpdGxlfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICAgICAgezplbHNlfVxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBvbjpjbGljayBjbGFzcz1cImlubmVyXCIgdGl0bGU9e2l0ZW0udGl0bGV9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvbi13cmFwXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJY29uIHR5cGU9e2l0ZW0udHlwZX0gaXM9XCJsaWdodFwiIHNpemU9XCJ0aW55XCIvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cz48L3M+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHM+PC9zPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzPjwvcz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cImgzXCI+e2l0ZW0udGl0bGV9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgICAgICAgICAgPC9zbG90PlxuICAgICAgICAgICAgezplbHNlfVxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZmxleCBmbGV4LWFsaWduLWNlbnRlclwiIHN0eWxlPVwicGFkZGluZzogN3B4IDBcIj5cbiAgICAgICAgICAgICAgICAgICAgPExvYWRlciB0eXBlPVwiaDNcIi8+XG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgey9pZn1cbiAgICAgICAgPC9saT5cbiAgICB7L2VhY2h9XG48L3VsPlxuXG48c3R5bGU+XG4uc29jaWFsLWljb25zIGxpIHtcbiAgICBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgICBkaXNwbGF5OiAtbXMtZmxleGJveDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XG4gICAgICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgbWFyZ2luOiA3cHggMDtcbn1cblxuLnNvY2lhbC1pY29ucyAuaW5uZXIge1xuICAgIGRpc3BsYXk6IC13ZWJraXQtYm94O1xuICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgLXdlYmtpdC1ib3gtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG59XG5cbi5zb2NpYWwtaWNvbnMgLmljb24td3JhcCB7XG4gICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gICAgZGlzcGxheTogLW1zLWZsZXhib3g7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xuICAgICAgICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAtd2Via2l0LWJveC1wYWNrOiBjZW50ZXI7XG4gICAgICAgIC1tcy1mbGV4LXBhY2s6IGNlbnRlcjtcbiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIHdpZHRoOiAyNnB4O1xuICAgIGhlaWdodDogMjZweDtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSh2YXIoLS1jb2xvci1kYXJrKSk7XG59PC9zdHlsZT5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzREEsNEJBQWEsQ0FBQyxFQUFFLGVBQUMsQ0FBQyxBQUNkLE9BQU8sQ0FBRSxXQUFXLENBQ3BCLE9BQU8sQ0FBRSxXQUFXLENBQ3BCLE9BQU8sQ0FBRSxJQUFJLENBQ2IsaUJBQWlCLENBQUUsTUFBTSxDQUNyQixjQUFjLENBQUUsTUFBTSxDQUNsQixXQUFXLENBQUUsTUFBTSxDQUMzQixRQUFRLENBQUUsTUFBTSxDQUNoQixNQUFNLENBQUUsR0FBRyxDQUFDLENBQUMsQUFDakIsQ0FBQyxBQUVELDRCQUFhLENBQUMsTUFBTSxlQUFDLENBQUMsQUFDbEIsT0FBTyxDQUFFLFdBQVcsQ0FDcEIsT0FBTyxDQUFFLFdBQVcsQ0FDcEIsT0FBTyxDQUFFLElBQUksQ0FDYixpQkFBaUIsQ0FBRSxNQUFNLENBQ3JCLGNBQWMsQ0FBRSxNQUFNLENBQ2xCLFdBQVcsQ0FBRSxNQUFNLEFBQy9CLENBQUMsQUFFRCw0QkFBYSxDQUFDLFVBQVUsZUFBQyxDQUFDLEFBQ3RCLE9BQU8sQ0FBRSxXQUFXLENBQ3BCLE9BQU8sQ0FBRSxXQUFXLENBQ3BCLE9BQU8sQ0FBRSxJQUFJLENBQ2IsaUJBQWlCLENBQUUsTUFBTSxDQUNyQixjQUFjLENBQUUsTUFBTSxDQUNsQixXQUFXLENBQUUsTUFBTSxDQUMzQixnQkFBZ0IsQ0FBRSxNQUFNLENBQ3BCLGFBQWEsQ0FBRSxNQUFNLENBQ2pCLGVBQWUsQ0FBRSxNQUFNLENBQy9CLEtBQUssQ0FBRSxJQUFJLENBQ1gsTUFBTSxDQUFFLElBQUksQ0FDWixhQUFhLENBQUUsR0FBRyxDQUNsQixnQkFBZ0IsQ0FBRSxLQUFLLElBQUksWUFBWSxDQUFDLENBQUMsQUFDN0MsQ0FBQyJ9 */";
	append_dev(document.head, style);
}

const get_default_slot_changes$6 = dirty => ({ item: dirty & /*list*/ 1 });
const get_default_slot_context$6 = ctx => ({ item: /*item*/ ctx[5] });

function get_each_context$8(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	return child_ctx;
}

// (45:12) {:else}
function create_else_block_1$2(ctx) {
	let span;
	let loader;
	let current;
	loader = new Loader({ props: { type: "h3" }, $$inline: true });

	const block = {
		c: function create() {
			span = element("span");
			create_component(loader.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { class: true, style: true });
			var span_nodes = children(span);
			claim_component(loader.$$.fragment, span_nodes);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "flex flex-align-center");
			set_style(span, "padding", "7px 0");
			add_location(span, file$15, 45, 16, 1486);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			mount_component(loader, span, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(loader.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(loader.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			destroy_component(loader);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1$2.name,
		type: "else",
		source: "(45:12) {:else}",
		ctx
	});

	return block;
}

// (21:12) {#if item !== null}
function create_if_block$m(ctx) {
	let current;
	const default_slot_template = /*$$slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], get_default_slot_context$6);
	const default_slot_or_fallback = default_slot || fallback_block$8(ctx);

	const block = {
		c: function create() {
			if (default_slot_or_fallback) default_slot_or_fallback.c();
		},
		l: function claim(nodes) {
			if (default_slot_or_fallback) default_slot_or_fallback.l(nodes);
		},
		m: function mount(target, anchor) {
			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope, list*/ 5) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[2], dirty, get_default_slot_changes$6, get_default_slot_context$6);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*list*/ 1) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$m.name,
		type: "if",
		source: "(21:12) {#if item !== null}",
		ctx
	});

	return block;
}

// (33:20) {:else}
function create_else_block$7(ctx) {
	let div;
	let span;
	let icon;
	let t0;
	let s0;
	let t1;
	let s1;
	let t2;
	let s2;
	let t3;
	let p;
	let t4_value = /*item*/ ctx[5].title + "";
	let t4;
	let div_title_value;
	let current;
	let mounted;
	let dispose;

	icon = new Icon({
			props: {
				type: /*item*/ ctx[5].type,
				is: "light",
				size: "tiny"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			span = element("span");
			create_component(icon.$$.fragment);
			t0 = space();
			s0 = element("s");
			t1 = space();
			s1 = element("s");
			t2 = space();
			s2 = element("s");
			t3 = space();
			p = element("p");
			t4 = text(t4_value);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, title: true });
			var div_nodes = children(div);
			span = claim_element(div_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			claim_component(icon.$$.fragment, span_nodes);
			span_nodes.forEach(detach_dev);
			t0 = claim_space(div_nodes);
			s0 = claim_element(div_nodes, "S", {});
			children(s0).forEach(detach_dev);
			t1 = claim_space(div_nodes);
			s1 = claim_element(div_nodes, "S", {});
			children(s1).forEach(detach_dev);
			t2 = claim_space(div_nodes);
			s2 = claim_element(div_nodes, "S", {});
			children(s2).forEach(detach_dev);
			t3 = claim_space(div_nodes);
			p = claim_element(div_nodes, "P", { class: true });
			var p_nodes = children(p);
			t4 = claim_text(p_nodes, t4_value);
			p_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "icon-wrap svelte-1qjherp");
			add_location(span, file$15, 34, 28, 1061);
			add_location(s0, file$15, 37, 28, 1230);
			add_location(s1, file$15, 38, 28, 1266);
			add_location(s2, file$15, 39, 28, 1302);
			attr_dev(p, "class", "h3");
			add_location(p, file$15, 40, 28, 1338);
			attr_dev(div, "class", "inner svelte-1qjherp");
			attr_dev(div, "title", div_title_value = /*item*/ ctx[5].title);
			add_location(div, file$15, 33, 24, 985);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, span);
			mount_component(icon, span, null);
			append_dev(div, t0);
			append_dev(div, s0);
			append_dev(div, t1);
			append_dev(div, s1);
			append_dev(div, t2);
			append_dev(div, s2);
			append_dev(div, t3);
			append_dev(div, p);
			append_dev(p, t4);
			current = true;

			if (!mounted) {
				dispose = listen_dev(div, "click", /*click_handler*/ ctx[4], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			const icon_changes = {};
			if (dirty & /*list*/ 1) icon_changes.type = /*item*/ ctx[5].type;
			icon.$set(icon_changes);
			if ((!current || dirty & /*list*/ 1) && t4_value !== (t4_value = /*item*/ ctx[5].title + "")) set_data_dev(t4, t4_value);

			if (!current || dirty & /*list*/ 1 && div_title_value !== (div_title_value = /*item*/ ctx[5].title)) {
				attr_dev(div, "title", div_title_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(icon);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$7.name,
		type: "else",
		source: "(33:20) {:else}",
		ctx
	});

	return block;
}

// (23:20) {#if item.href}
function create_if_block_1$e(ctx) {
	let a;
	let span;
	let icon;
	let t0;
	let s0;
	let t1;
	let s1;
	let t2;
	let s2;
	let t3;
	let p;
	let t4_value = /*item*/ ctx[5].title + "";
	let t4;
	let a_href_value;
	let a_title_value;
	let current;

	icon = new Icon({
			props: {
				type: /*item*/ ctx[5].type,
				is: "light",
				size: "tiny"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			a = element("a");
			span = element("span");
			create_component(icon.$$.fragment);
			t0 = space();
			s0 = element("s");
			t1 = space();
			s1 = element("s");
			t2 = space();
			s2 = element("s");
			t3 = space();
			p = element("p");
			t4 = text(t4_value);
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", {
				href: true,
				target: true,
				class: true,
				title: true
			});

			var a_nodes = children(a);
			span = claim_element(a_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			claim_component(icon.$$.fragment, span_nodes);
			span_nodes.forEach(detach_dev);
			t0 = claim_space(a_nodes);
			s0 = claim_element(a_nodes, "S", {});
			children(s0).forEach(detach_dev);
			t1 = claim_space(a_nodes);
			s1 = claim_element(a_nodes, "S", {});
			children(s1).forEach(detach_dev);
			t2 = claim_space(a_nodes);
			s2 = claim_element(a_nodes, "S", {});
			children(s2).forEach(detach_dev);
			t3 = claim_space(a_nodes);
			p = claim_element(a_nodes, "P", { class: true });
			var p_nodes = children(p);
			t4 = claim_text(p_nodes, t4_value);
			p_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "icon-wrap svelte-1qjherp");
			add_location(span, file$15, 24, 28, 596);
			add_location(s0, file$15, 27, 28, 765);
			add_location(s1, file$15, 28, 28, 801);
			add_location(s2, file$15, 29, 28, 837);
			attr_dev(p, "class", "h3");
			add_location(p, file$15, 30, 28, 873);
			attr_dev(a, "href", a_href_value = /*item*/ ctx[5].href);
			attr_dev(a, "target", "_blank");
			attr_dev(a, "class", "inner svelte-1qjherp");
			attr_dev(a, "title", a_title_value = /*item*/ ctx[5].title);
			add_location(a, file$15, 23, 24, 498);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, span);
			mount_component(icon, span, null);
			append_dev(a, t0);
			append_dev(a, s0);
			append_dev(a, t1);
			append_dev(a, s1);
			append_dev(a, t2);
			append_dev(a, s2);
			append_dev(a, t3);
			append_dev(a, p);
			append_dev(p, t4);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icon_changes = {};
			if (dirty & /*list*/ 1) icon_changes.type = /*item*/ ctx[5].type;
			icon.$set(icon_changes);
			if ((!current || dirty & /*list*/ 1) && t4_value !== (t4_value = /*item*/ ctx[5].title + "")) set_data_dev(t4, t4_value);

			if (!current || dirty & /*list*/ 1 && a_href_value !== (a_href_value = /*item*/ ctx[5].href)) {
				attr_dev(a, "href", a_href_value);
			}

			if (!current || dirty & /*list*/ 1 && a_title_value !== (a_title_value = /*item*/ ctx[5].title)) {
				attr_dev(a, "title", a_title_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			destroy_component(icon);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$e.name,
		type: "if",
		source: "(23:20) {#if item.href}",
		ctx
	});

	return block;
}

// (22:29)                      
function fallback_block$8(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_1$e, create_else_block$7];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*item*/ ctx[5].href) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block$8.name,
		type: "fallback",
		source: "(22:29)                      ",
		ctx
	});

	return block;
}

// (19:4) {#each list as item}
function create_each_block$8(ctx) {
	let li;
	let current_block_type_index;
	let if_block;
	let t;
	let current;
	const if_block_creators = [create_if_block$m, create_else_block_1$2];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*item*/ ctx[5] !== null) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			li = element("li");
			if_block.c();
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			if_block.l(li_nodes);
			t = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(li, "class", "svelte-1qjherp");
			add_location(li, file$15, 19, 8, 371);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			if_blocks[current_block_type_index].m(li, null);
			append_dev(li, t);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(li, t);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			if_blocks[current_block_type_index].d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$8.name,
		type: "each",
		source: "(19:4) {#each list as item}",
		ctx
	});

	return block;
}

function create_fragment$15(ctx) {
	let ul;
	let current;
	let each_value = /*list*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$8(get_each_context$8(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(ul, "class", "social-icons svelte-1qjherp");
			add_location(ul, file$15, 17, 0, 312);
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*list, $$scope*/ 5) {
				each_value = /*list*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$8(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$8(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(ul, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$15.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$15($$self, $$props, $$invalidate) {
	let { items } = $$props;
	const writable_props = ["items"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SocialsY> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("SocialsY", $$slots, ['default']);

	function click_handler(event) {
		bubble($$self, event);
	}

	$$self.$set = $$props => {
		if ("items" in $$props) $$invalidate(1, items = $$props.items);
		if ("$$scope" in $$props) $$invalidate(2, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({ Icon, Loader, items, list });

	$$self.$inject_state = $$props => {
		if ("items" in $$props) $$invalidate(1, items = $$props.items);
		if ("list" in $$props) $$invalidate(0, list = $$props.list);
	};

	let list;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*items*/ 2) {
			 $$invalidate(0, list = items === null ? [null, null, null] : items || []);
		}
	};

	return [list, items, $$scope, $$slots, click_handler];
}

class SocialsY extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-1qjherp-style")) add_css$p();
		init(this, options, instance$15, create_fragment$15, safe_not_equal, { items: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SocialsY",
			options,
			id: create_fragment$15.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*items*/ ctx[1] === undefined && !("items" in props)) {
			console.warn("<SocialsY> was created without expected prop 'items'");
		}
	}

	get items() {
		throw new Error("<SocialsY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set items(value) {
		throw new Error("<SocialsY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/app/Documents.svelte generated by Svelte v3.24.0 */
const file$16 = "src/components/app/Documents.svelte";

function add_css$q() {
	var style = element("style");
	style.id = "svelte-nrl6pf-style";
	style.textContent = ".documents.active .scroll-x-center > *{-webkit-transform:none;transform:none\n}section.svelte-nrl6pf{height:calc((100vw - var(--screen-padding) * 2) * 1.428);padding:0 var(--screen-padding)}div.svelte-nrl6pf{-webkit-box-flex:0;-ms-flex:none;flex:none;display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-item-align:stretch;align-self:stretch;height:180px;width:126px;padding:15px 5px;-webkit-box-sizing:content-box;box-sizing:content-box}div.start.svelte-nrl6pf{padding-left:var(--screen-padding)}div.end.svelte-nrl6pf{padding-right:var(--screen-padding)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRG9jdW1lbnRzLnN2ZWx0ZSIsInNvdXJjZXMiOlsiRG9jdW1lbnRzLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICAgIGltcG9ydCB7IGNsYXNzbmFtZXMgfSBmcm9tICdAdXRpbHMnXG4gICAgaW1wb3J0IENhcmQgZnJvbSAnQGNvbXBvbmVudHMvQ2FyZC5zdmVsdGUnXG4gICAgaW1wb3J0IFBpY3R1cmUgZnJvbSAnQGNvbXBvbmVudHMvUGljdHVyZS5zdmVsdGUnXG4gICAgaW1wb3J0IEZhbmN5Qm94IGZyb20gJ0Bjb21wb25lbnRzL0ZhbmN5Qm94LnN2ZWx0ZSdcbiAgICBpbXBvcnQgQ2Fyb3VzZWwgZnJvbSAnQGNvbXBvbmVudHMvQ2Fyb3VzZWwuc3ZlbHRlJ1xuXG4gICAgZXhwb3J0IGxldCBpdGVtcyA9IG5ldyBBcnJheSg1KS5maWxsKHt9KVxuXG4gICAgbGV0IGFjdGl2ZSA9IGZhbHNlXG48L3NjcmlwdD5cblxuPENhcm91c2VsIGl0ZW1zPXtpdGVtc30gc2l6ZT1cImF1dG9cIiBkb3RzPXtmYWxzZX0gbGV0Oml0ZW09e2l0ZW19IGxldDppbmRleD17aW5kZXh9IGNsYXNzPXtjbGFzc25hbWVzKCdkb2N1bWVudHMnLCB7IGFjdGl2ZSB9KX0+XG4gICAgPGRpdiBjbGFzcz17IWluZGV4ID8gJ3N0YXJ0JyA6IGluZGV4ID09PSBpdGVtcy5sZW5ndGggLSAxID8gJ2VuZCcgOiAnJ30+XG4gICAgICAgIDxGYW5jeUJveCBvbjpvcGVuPXsoKSA9PiBhY3RpdmUgPSB0cnVlfSBvbjpjbG9zZT17KCkgPT4gYWN0aXZlID0gZmFsc2V9PlxuICAgICAgICAgICAgPENhcmQgY2xhc3M9XCJmbGV4XCI+XG4gICAgICAgICAgICAgICAgPFBpY3R1cmUgc3JjPXtpdGVtLnNyY30gYWx0PXtpdGVtLnRpdGxlfSBzaXplPVwiY29udGFpblwiLz5cbiAgICAgICAgICAgIDwvQ2FyZD5cbiAgICAgICAgICAgIDxzZWN0aW9uIHNsb3Q9XCJib3hcIiBjbGFzcz1cImZsZXggZnVsbC1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICA8Q2FyZCBjbGFzcz1cImZsZXhcIj5cbiAgICAgICAgICAgICAgICAgICAgPFBpY3R1cmUgc3JjPXtpdGVtLnNyY30gc3JjQmlnPXtpdGVtLnNyYzJ4fSBhbHQ9e2l0ZW0udGl0bGV9IHNpemU9XCJjb250YWluXCIvPlxuICAgICAgICAgICAgICAgIDwvQ2FyZD5cbiAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgPC9GYW5jeUJveD5cbiAgICA8L2Rpdj5cbjwvQ2Fyb3VzZWw+XG5cbjxzdHlsZT5cbjpnbG9iYWwoLmRvY3VtZW50cy5hY3RpdmUgLnNjcm9sbC14LWNlbnRlciA+ICopIHtcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogbm9uZTtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogbm9uZVxufVxuXG5zZWN0aW9uIHtcbiAgICBoZWlnaHQ6IGNhbGMoKDEwMHZ3IC0gdmFyKC0tc2NyZWVuLXBhZGRpbmcpICogMikgKiAxLjQyOCk7XG4gICAgcGFkZGluZzogMCB2YXIoLS1zY3JlZW4tcGFkZGluZyk7XG59XG5cbmRpdiB7XG4gICAgLXdlYmtpdC1ib3gtZmxleDogMDtcbiAgICAgICAgLW1zLWZsZXg6IG5vbmU7XG4gICAgICAgICAgICBmbGV4OiBub25lO1xuICAgIGRpc3BsYXk6IC13ZWJraXQtYm94O1xuICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgLW1zLWZsZXgtaXRlbS1hbGlnbjogc3RyZXRjaDtcbiAgICAgICAgYWxpZ24tc2VsZjogc3RyZXRjaDtcbiAgICBoZWlnaHQ6IDE4MHB4O1xuICAgIHdpZHRoOiAxMjZweDtcbiAgICBwYWRkaW5nOiAxNXB4IDVweDtcbiAgICAtd2Via2l0LWJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICAgICAgICAgICAgYm94LXNpemluZzogY29udGVudC1ib3g7XG59XG5cbmRpdi5zdGFydCB7XG4gICAgcGFkZGluZy1sZWZ0OiB2YXIoLS1zY3JlZW4tcGFkZGluZyk7XG59XG5cbmRpdi5lbmQge1xuICAgIHBhZGRpbmctcmlnaHQ6IHZhcigtLXNjcmVlbi1wYWRkaW5nKTtcbn08L3N0eWxlPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTRCUSxzQ0FBc0MsQUFBRSxDQUFDLEFBQzdDLGlCQUFpQixDQUFFLElBQUksQ0FDZixTQUFTLENBQUUsSUFBSTtBQUMzQixDQUFDLEFBRUQsT0FBTyxjQUFDLENBQUMsQUFDTCxNQUFNLENBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQ3pELE9BQU8sQ0FBRSxDQUFDLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQyxBQUNwQyxDQUFDLEFBRUQsR0FBRyxjQUFDLENBQUMsQUFDRCxnQkFBZ0IsQ0FBRSxDQUFDLENBQ2YsUUFBUSxDQUFFLElBQUksQ0FDVixJQUFJLENBQUUsSUFBSSxDQUNsQixPQUFPLENBQUUsV0FBVyxDQUNwQixPQUFPLENBQUUsV0FBVyxDQUNwQixPQUFPLENBQUUsSUFBSSxDQUNiLG1CQUFtQixDQUFFLE9BQU8sQ0FDeEIsVUFBVSxDQUFFLE9BQU8sQ0FDdkIsTUFBTSxDQUFFLEtBQUssQ0FDYixLQUFLLENBQUUsS0FBSyxDQUNaLE9BQU8sQ0FBRSxJQUFJLENBQUMsR0FBRyxDQUNqQixrQkFBa0IsQ0FBRSxXQUFXLENBQ3ZCLFVBQVUsQ0FBRSxXQUFXLEFBQ25DLENBQUMsQUFFRCxHQUFHLE1BQU0sY0FBQyxDQUFDLEFBQ1AsWUFBWSxDQUFFLElBQUksZ0JBQWdCLENBQUMsQUFDdkMsQ0FBQyxBQUVELEdBQUcsSUFBSSxjQUFDLENBQUMsQUFDTCxhQUFhLENBQUUsSUFBSSxnQkFBZ0IsQ0FBQyxBQUN4QyxDQUFDIn0= */";
	append_dev(document.head, style);
}

// (16:12) <Card class="flex">
function create_default_slot_3(ctx) {
	let picture;
	let current;

	picture = new Picture({
			props: {
				src: /*item*/ ctx[4].src,
				alt: /*item*/ ctx[4].title,
				size: "contain"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(picture.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(picture.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(picture, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const picture_changes = {};
			if (dirty & /*item*/ 16) picture_changes.src = /*item*/ ctx[4].src;
			if (dirty & /*item*/ 16) picture_changes.alt = /*item*/ ctx[4].title;
			picture.$set(picture_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(picture.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(picture.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(picture, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(16:12) <Card class=\\\"flex\\\">",
		ctx
	});

	return block;
}

// (20:16) <Card class="flex">
function create_default_slot_2$1(ctx) {
	let picture;
	let current;

	picture = new Picture({
			props: {
				src: /*item*/ ctx[4].src,
				srcBig: /*item*/ ctx[4].src2x,
				alt: /*item*/ ctx[4].title,
				size: "contain"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(picture.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(picture.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(picture, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const picture_changes = {};
			if (dirty & /*item*/ 16) picture_changes.src = /*item*/ ctx[4].src;
			if (dirty & /*item*/ 16) picture_changes.srcBig = /*item*/ ctx[4].src2x;
			if (dirty & /*item*/ 16) picture_changes.alt = /*item*/ ctx[4].title;
			picture.$set(picture_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(picture.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(picture.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(picture, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$1.name,
		type: "slot",
		source: "(20:16) <Card class=\\\"flex\\\">",
		ctx
	});

	return block;
}

// (19:12) <section slot="box" class="flex full-container">
function create_box_slot$1(ctx) {
	let section;
	let card;
	let current;

	card = new Card({
			props: {
				class: "flex",
				$$slots: { default: [create_default_slot_2$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			section = element("section");
			create_component(card.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { slot: true, class: true });
			var section_nodes = children(section);
			claim_component(card.$$.fragment, section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(section, "slot", "box");
			attr_dev(section, "class", "flex full-container svelte-nrl6pf");
			add_location(section, file$16, 18, 12, 764);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			mount_component(card, section, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const card_changes = {};

			if (dirty & /*$$scope, item*/ 80) {
				card_changes.$$scope = { dirty, ctx };
			}

			card.$set(card_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			destroy_component(card);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_box_slot$1.name,
		type: "slot",
		source: "(19:12) <section slot=\\\"box\\\" class=\\\"flex full-container\\\">",
		ctx
	});

	return block;
}

// (15:8) <FancyBox on:open={() => active = true} on:close={() => active = false}>
function create_default_slot_1$2(ctx) {
	let card;
	let t;
	let current;

	card = new Card({
			props: {
				class: "flex",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(card.$$.fragment);
			t = space();
		},
		l: function claim(nodes) {
			claim_component(card.$$.fragment, nodes);
			t = claim_space(nodes);
		},
		m: function mount(target, anchor) {
			mount_component(card, target, anchor);
			insert_dev(target, t, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const card_changes = {};

			if (dirty & /*$$scope, item*/ 80) {
				card_changes.$$scope = { dirty, ctx };
			}

			card.$set(card_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(card, detaching);
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$2.name,
		type: "slot",
		source: "(15:8) <FancyBox on:open={() => active = true} on:close={() => active = false}>",
		ctx
	});

	return block;
}

// (13:0) <Carousel items={items} size="auto" dots={false} let:item={item} let:index={index} class={classnames('documents', { active })}>
function create_default_slot$I(ctx) {
	let div;
	let fancybox;
	let div_class_value;
	let current;

	fancybox = new FancyBox({
			props: {
				$$slots: {
					default: [create_default_slot_1$2],
					box: [create_box_slot$1]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	fancybox.$on("open", /*open_handler*/ ctx[2]);
	fancybox.$on("close", /*close_handler*/ ctx[3]);

	const block = {
		c: function create() {
			div = element("div");
			create_component(fancybox.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(fancybox.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", div_class_value = "" + (null_to_empty(!/*index*/ ctx[5]
			? "start"
			: /*index*/ ctx[5] === /*items*/ ctx[0].length - 1
				? "end"
				: "") + " svelte-nrl6pf"));

			add_location(div, file$16, 13, 4, 472);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(fancybox, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const fancybox_changes = {};

			if (dirty & /*$$scope, item*/ 80) {
				fancybox_changes.$$scope = { dirty, ctx };
			}

			fancybox.$set(fancybox_changes);

			if (!current || dirty & /*index, items*/ 33 && div_class_value !== (div_class_value = "" + (null_to_empty(!/*index*/ ctx[5]
			? "start"
			: /*index*/ ctx[5] === /*items*/ ctx[0].length - 1
				? "end"
				: "") + " svelte-nrl6pf"))) {
				attr_dev(div, "class", div_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(fancybox.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(fancybox.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(fancybox);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$I.name,
		type: "slot",
		source: "(13:0) <Carousel items={items} size=\\\"auto\\\" dots={false} let:item={item} let:index={index} class={classnames('documents', { active })}>",
		ctx
	});

	return block;
}

function create_fragment$16(ctx) {
	let carousel;
	let current;

	carousel = new Carousel({
			props: {
				items: /*items*/ ctx[0],
				size: "auto",
				dots: false,
				class: classnames("documents", { active: /*active*/ ctx[1] }),
				$$slots: {
					default: [
						create_default_slot$I,
						({ item, index }) => ({ 4: item, 5: index }),
						({ item, index }) => (item ? 16 : 0) | (index ? 32 : 0)
					]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(carousel.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(carousel.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(carousel, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const carousel_changes = {};
			if (dirty & /*items*/ 1) carousel_changes.items = /*items*/ ctx[0];
			if (dirty & /*active*/ 2) carousel_changes.class = classnames("documents", { active: /*active*/ ctx[1] });

			if (dirty & /*$$scope, index, items, active, item*/ 115) {
				carousel_changes.$$scope = { dirty, ctx };
			}

			carousel.$set(carousel_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(carousel.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(carousel.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(carousel, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$16.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$16($$self, $$props, $$invalidate) {
	let { items = new Array(5).fill({}) } = $$props;
	let active = false;
	const writable_props = ["items"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Documents> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Documents", $$slots, []);
	const open_handler = () => $$invalidate(1, active = true);
	const close_handler = () => $$invalidate(1, active = false);

	$$self.$set = $$props => {
		if ("items" in $$props) $$invalidate(0, items = $$props.items);
	};

	$$self.$capture_state = () => ({
		classnames,
		Card,
		Picture,
		FancyBox,
		Carousel,
		items,
		active
	});

	$$self.$inject_state = $$props => {
		if ("items" in $$props) $$invalidate(0, items = $$props.items);
		if ("active" in $$props) $$invalidate(1, active = $$props.active);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [items, active, open_handler, close_handler];
}

class Documents extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-nrl6pf-style")) add_css$q();
		init(this, options, instance$16, create_fragment$16, safe_not_equal, { items: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Documents",
			options,
			id: create_fragment$16.name
		});
	}

	get items() {
		throw new Error("<Documents>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set items(value) {
		throw new Error("<Documents>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/app/ListItems.svelte generated by Svelte v3.24.0 */

const { console: console_1$1 } = globals;
const file$17 = "src/components/app/ListItems.svelte";

function add_css$r() {
	var style = element("style");
	style.id = "svelte-tzuf8q-style";
	style.textContent = ".item.svelte-tzuf8q.svelte-tzuf8q{display:block;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;padding:20px;-webkit-box-shadow:var(--shadow-primary);box-shadow:var(--shadow-primary);border-radius:var(--border-radius-big);background-color:rgba(var(--theme-bg-color))}span.svelte-tzuf8q.svelte-tzuf8q{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;overflow:hidden;padding:0 15px}span.svelte-tzuf8q h4.svelte-tzuf8q,span.svelte-tzuf8q sub.svelte-tzuf8q{max-width:100%;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGlzdEl0ZW1zLnN2ZWx0ZSIsInNvdXJjZXMiOlsiTGlzdEl0ZW1zLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICAgIGltcG9ydCBBdmF0YXIgZnJvbSAnLi4vQXZhdGFyLnN2ZWx0ZSdcbiAgICBpbXBvcnQgeyBzYWZlR2V0IH0gZnJvbSAnQHV0aWxzJ1xuXG4gICAgZXhwb3J0IGxldCBpdGVtcyA9IFtdXG4gICAgZXhwb3J0IGxldCBiYXNlUGF0aCA9ICcnXG5cbiAgICAkOiBjb25zb2xlLmxvZyhpdGVtcylcbjwvc2NyaXB0PlxuXG57I2VhY2ggaXRlbXMgYXMgaXRlbX1cbiAgICA8YSBjbGFzcz1cIml0ZW0gY29udGFpbmVyXCIgaHJlZj17YCR7YmFzZVBhdGh9LyR7aXRlbS5pZH1gfT5cbiAgICAgICAgPEF2YXRhciBzcmM9e3NhZmVHZXQoKCkgPT4gaXRlbS5hdmF0YXJzWzBdLnNyYyl9IHNpemU9XCJtZWRpdW1cIiBhbHQ9e2l0ZW0udGl0bGV9Lz5cblxuICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgIDxoND57aXRlbS50aXRsZSB8fCAnaW5jb2duaXRvJ308L2g0PlxuICAgICAgICAgICAgPHN1Yj57aXRlbS5zdWJ0aXRsZX08L3N1Yj5cbiAgICAgICAgPC9zcGFuPlxuICAgIDwvYT5cbiAgICA8YnI+XG57OmVsc2V9XG4gICAgPHNlY3Rpb24gY2xhc3M9XCJpdGVtIGNvbnRhaW5lclwiPlxuICAgICAgICA8cCBjbGFzcz1cInRleHQtY2VudGVyXCI+Tm8gb3JnYW5pemF0aW9uczwvcD5cbiAgICA8L3NlY3Rpb24+XG57L2VhY2h9XG5cbjxzdHlsZT5cbi5pdGVtIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICAtd2Via2l0LWJveC1mbGV4OiAxO1xuICAgICAgICAtbXMtZmxleDogMSAxIGF1dG87XG4gICAgICAgICAgICBmbGV4OiAxIDEgYXV0bztcbiAgICBwYWRkaW5nOiAyMHB4O1xuICAgIC13ZWJraXQtYm94LXNoYWRvdzogdmFyKC0tc2hhZG93LXByaW1hcnkpO1xuICAgICAgICAgICAgYm94LXNoYWRvdzogdmFyKC0tc2hhZG93LXByaW1hcnkpO1xuICAgIGJvcmRlci1yYWRpdXM6IHZhcigtLWJvcmRlci1yYWRpdXMtYmlnKTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKHZhcigtLXRoZW1lLWJnLWNvbG9yKSk7XG59XG5cbnNwYW4ge1xuICAgIGRpc3BsYXk6IC13ZWJraXQtYm94O1xuICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDtcbiAgICAtd2Via2l0LWJveC1kaXJlY3Rpb246IG5vcm1hbDtcbiAgICAgICAgLW1zLWZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIC13ZWJraXQtYm94LXBhY2s6IGNlbnRlcjtcbiAgICAgICAgLW1zLWZsZXgtcGFjazogY2VudGVyO1xuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICBwYWRkaW5nOiAwIDE1cHg7XG59XG5cbnNwYW4gaDQsXG5zcGFuIHN1YiB7XG4gICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbn08L3N0eWxlPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJCQSxLQUFLLDRCQUFDLENBQUMsQUFDSCxPQUFPLENBQUUsS0FBSyxDQUNkLGdCQUFnQixDQUFFLENBQUMsQ0FDZixRQUFRLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ2QsSUFBSSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUN0QixPQUFPLENBQUUsSUFBSSxDQUNiLGtCQUFrQixDQUFFLElBQUksZ0JBQWdCLENBQUMsQ0FDakMsVUFBVSxDQUFFLElBQUksZ0JBQWdCLENBQUMsQ0FDekMsYUFBYSxDQUFFLElBQUksbUJBQW1CLENBQUMsQ0FDdkMsZ0JBQWdCLENBQUUsS0FBSyxJQUFJLGdCQUFnQixDQUFDLENBQUMsQUFDakQsQ0FBQyxBQUVELElBQUksNEJBQUMsQ0FBQyxBQUNGLE9BQU8sQ0FBRSxXQUFXLENBQ3BCLE9BQU8sQ0FBRSxXQUFXLENBQ3BCLE9BQU8sQ0FBRSxJQUFJLENBQ2Isa0JBQWtCLENBQUUsUUFBUSxDQUM1QixxQkFBcUIsQ0FBRSxNQUFNLENBQ3pCLGtCQUFrQixDQUFFLE1BQU0sQ0FDdEIsY0FBYyxDQUFFLE1BQU0sQ0FDOUIsZ0JBQWdCLENBQUUsTUFBTSxDQUNwQixhQUFhLENBQUUsTUFBTSxDQUNqQixlQUFlLENBQUUsTUFBTSxDQUMvQixRQUFRLENBQUUsTUFBTSxDQUNoQixPQUFPLENBQUUsQ0FBQyxDQUFDLElBQUksQUFDbkIsQ0FBQyxBQUVELGtCQUFJLENBQUMsZ0JBQUUsQ0FDUCxrQkFBSSxDQUFDLEdBQUcsY0FBQyxDQUFDLEFBQ04sU0FBUyxDQUFFLElBQUksQ0FDZixRQUFRLENBQUUsTUFBTSxDQUNoQixXQUFXLENBQUUsTUFBTSxDQUNuQixhQUFhLENBQUUsUUFBUSxBQUMzQixDQUFDIn0= */";
	append_dev(document.head, style);
}

function get_each_context$9(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

// (21:0) {:else}
function create_else_block$8(ctx) {
	let section;
	let p;
	let t0;
	let t1;

	const block = {
		c: function create() {
			section = element("section");
			p = element("p");
			t0 = text("No organizations");
			t1 = space();
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			p = claim_element(section_nodes, "P", { class: true });
			var p_nodes = children(p);
			t0 = claim_text(p_nodes, "No organizations");
			p_nodes.forEach(detach_dev);
			t1 = claim_space(section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "text-center");
			add_location(p, file$17, 22, 8, 548);
			attr_dev(section, "class", "item container svelte-tzuf8q");
			add_location(section, file$17, 21, 4, 507);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, p);
			append_dev(p, t0);
			append_dev(section, t1);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$8.name,
		type: "else",
		source: "(21:0) {:else}",
		ctx
	});

	return block;
}

// (11:0) {#each items as item}
function create_each_block$9(ctx) {
	let a;
	let avatar;
	let t0;
	let span;
	let h4;
	let t1_value = (/*item*/ ctx[3].title || "incognito") + "";
	let t1;
	let t2;
	let sub;
	let t3_value = /*item*/ ctx[3].subtitle + "";
	let t3;
	let a_href_value;
	let t4;
	let br;
	let current;

	function func(...args) {
		return /*func*/ ctx[2](/*item*/ ctx[3], ...args);
	}

	avatar = new Avatar({
			props: {
				src: safeGet(func),
				size: "medium",
				alt: /*item*/ ctx[3].title
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			a = element("a");
			create_component(avatar.$$.fragment);
			t0 = space();
			span = element("span");
			h4 = element("h4");
			t1 = text(t1_value);
			t2 = space();
			sub = element("sub");
			t3 = text(t3_value);
			t4 = space();
			br = element("br");
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { class: true, href: true });
			var a_nodes = children(a);
			claim_component(avatar.$$.fragment, a_nodes);
			t0 = claim_space(a_nodes);
			span = claim_element(a_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			h4 = claim_element(span_nodes, "H4", { class: true });
			var h4_nodes = children(h4);
			t1 = claim_text(h4_nodes, t1_value);
			h4_nodes.forEach(detach_dev);
			t2 = claim_space(span_nodes);
			sub = claim_element(span_nodes, "SUB", { class: true });
			var sub_nodes = children(sub);
			t3 = claim_text(sub_nodes, t3_value);
			sub_nodes.forEach(detach_dev);
			span_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			br = claim_element(nodes, "BR", {});
			this.h();
		},
		h: function hydrate() {
			attr_dev(h4, "class", "svelte-tzuf8q");
			add_location(h4, file$17, 15, 12, 385);
			attr_dev(sub, "class", "svelte-tzuf8q");
			add_location(sub, file$17, 16, 12, 434);
			attr_dev(span, "class", "svelte-tzuf8q");
			add_location(span, file$17, 14, 8, 366);
			attr_dev(a, "class", "item container svelte-tzuf8q");
			attr_dev(a, "href", a_href_value = `${/*basePath*/ ctx[1]}/${/*item*/ ctx[3].id}`);
			add_location(a, file$17, 11, 4, 208);
			add_location(br, file$17, 19, 4, 490);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			mount_component(avatar, a, null);
			append_dev(a, t0);
			append_dev(a, span);
			append_dev(span, h4);
			append_dev(h4, t1);
			append_dev(span, t2);
			append_dev(span, sub);
			append_dev(sub, t3);
			insert_dev(target, t4, anchor);
			insert_dev(target, br, anchor);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const avatar_changes = {};
			if (dirty & /*items*/ 1) avatar_changes.src = safeGet(func);
			if (dirty & /*items*/ 1) avatar_changes.alt = /*item*/ ctx[3].title;
			avatar.$set(avatar_changes);
			if ((!current || dirty & /*items*/ 1) && t1_value !== (t1_value = (/*item*/ ctx[3].title || "incognito") + "")) set_data_dev(t1, t1_value);
			if ((!current || dirty & /*items*/ 1) && t3_value !== (t3_value = /*item*/ ctx[3].subtitle + "")) set_data_dev(t3, t3_value);

			if (!current || dirty & /*basePath, items*/ 3 && a_href_value !== (a_href_value = `${/*basePath*/ ctx[1]}/${/*item*/ ctx[3].id}`)) {
				attr_dev(a, "href", a_href_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(avatar.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(avatar.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			destroy_component(avatar);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(br);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$9.name,
		type: "each",
		source: "(11:0) {#each items as item}",
		ctx
	});

	return block;
}

function create_fragment$17(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*items*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$9(get_each_context$9(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	let each_1_else = null;

	if (!each_value.length) {
		each_1_else = create_else_block$8(ctx);
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();

			if (each_1_else) {
				each_1_else.c();
			}
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();

			if (each_1_else) {
				each_1_else.l(nodes);
			}
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);

			if (each_1_else) {
				each_1_else.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*basePath, items, safeGet*/ 3) {
				each_value = /*items*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$9(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$9(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();

				if (each_value.length) {
					if (each_1_else) {
						each_1_else.d(1);
						each_1_else = null;
					}
				} else if (!each_1_else) {
					each_1_else = create_else_block$8(ctx);
					each_1_else.c();
					each_1_else.m(each_1_anchor.parentNode, each_1_anchor);
				}
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
			if (each_1_else) each_1_else.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$17.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$17($$self, $$props, $$invalidate) {
	let { items = [] } = $$props;
	let { basePath = "" } = $$props;
	const writable_props = ["items", "basePath"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$1.warn(`<ListItems> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("ListItems", $$slots, []);
	const func = item => item.avatars[0].src;

	$$self.$set = $$props => {
		if ("items" in $$props) $$invalidate(0, items = $$props.items);
		if ("basePath" in $$props) $$invalidate(1, basePath = $$props.basePath);
	};

	$$self.$capture_state = () => ({ Avatar, safeGet, items, basePath });

	$$self.$inject_state = $$props => {
		if ("items" in $$props) $$invalidate(0, items = $$props.items);
		if ("basePath" in $$props) $$invalidate(1, basePath = $$props.basePath);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*items*/ 1) {
			 console.log(items);
		}
	};

	return [items, basePath, func];
}

class ListItems extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-tzuf8q-style")) add_css$r();
		init(this, options, instance$17, create_fragment$17, safe_not_equal, { items: 0, basePath: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ListItems",
			options,
			id: create_fragment$17.name
		});
	}

	get items() {
		throw new Error("<ListItems>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set items(value) {
		throw new Error("<ListItems>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get basePath() {
		throw new Error("<ListItems>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set basePath(value) {
		throw new Error("<ListItems>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/app/StoryList.svelte generated by Svelte v3.24.0 */

const { Boolean: Boolean_1 } = globals;
const file$18 = "src/components/app/StoryList.svelte";

function add_css$s() {
	var style = element("style");
	style.id = "svelte-1rv59vc-style";
	style.textContent = "table.svelte-1rv59vc tr:not(:last-child) td.svelte-1rv59vc{padding-bottom:16px}table.svelte-1rv59vc td.svelte-1rv59vc:last-child{font-weight:300}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RvcnlMaXN0LnN2ZWx0ZSIsInNvdXJjZXMiOlsiU3RvcnlMaXN0LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICAgIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gJ3N2ZWx0ZSdcbiAgICBpbXBvcnQgeyBjbGFzc25hbWVzLCB0b0NTU1N0cmluZyB9IGZyb20gJ0B1dGlscydcbiAgICBpbXBvcnQgQnIgZnJvbSAnQGNvbXBvbmVudHMvQnIuc3ZlbHRlJ1xuICAgIGltcG9ydCBJY29uIGZyb20gJ0Bjb21wb25lbnRzL0ljb24uc3ZlbHRlJ1xuICAgIGltcG9ydCBNb2RhbCBmcm9tICdAY29tcG9uZW50cy9Nb2RhbC5zdmVsdGUnXG4gICAgaW1wb3J0IExvYWRlciBmcm9tICdAY29tcG9uZW50cy9sb2FkZXInXG4gICAgaW1wb3J0IEJ1dHRvbiBmcm9tICdAY29tcG9uZW50cy9CdXR0b24uc3ZlbHRlJ1xuICAgIGltcG9ydCBGb3JtQnVpbGRlciBmcm9tICdAY29tcG9uZW50cy9Gb3JtQnVpbGRlci5zdmVsdGUnXG5cbiAgICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpXG5cbiAgICBleHBvcnQgbGV0IGlkID0gdW5kZWZpbmVkXG4gICAgZXhwb3J0IGxldCBuYW1lID0gdW5kZWZpbmVkXG4gICAgZXhwb3J0IGxldCBsYWJlbCA9IHVuZGVmaW5lZFxuICAgIGV4cG9ydCBsZXQgdmFsdWUgPSB1bmRlZmluZWRcbiAgICBleHBvcnQgbGV0IHN0eWxlID0gdW5kZWZpbmVkXG4gICAgZXhwb3J0IGxldCByZWFkb25seSA9IHVuZGVmaW5lZFxuXG4gICAgbGV0IG9wZW4gPSBmYWxzZVxuICAgIGxldCBmb3JtRXJyb3JzID0gW11cbiAgICBsZXQgZm9ybUZpZWxkcyA9IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICfQlNCw0YLQsDonLFxuICAgICAgICAgICAgdHlwZTogJ2RhdGUnLFxuICAgICAgICAgICAgbmFtZTogJ2RhdGUnLFxuICAgICAgICAgICAgbWV0YToge1xuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnMTguMDMuMjAxOS4uLicsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ9CU0L7QsdCw0LLRgtC1INC90LDQt9Cy0YMg0L/QvtC00ZbRlzonLFxuICAgICAgICAgICAgdHlwZTogJ3RleHRhcmVhJyxcbiAgICAgICAgICAgIG5hbWU6ICd0aXRsZScsXG4gICAgICAgICAgICBtZXRhOiB7XG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICfQl9Cw0LHRgNCw0LvQuCDQsiDQv9GA0LjRgtGD0LvQvtC6Li4uJyxcbiAgICAgICAgICAgICAgICByb3dzOiAzLFxuICAgICAgICAgICAgICAgIG1heGxlbmd0aDogNzVcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgXVxuXG4gICAgJDogaWRQcm9wID0gaWQgfHwgbmFtZVxuICAgICQ6IGNsYXNzUHJvcCA9IGNsYXNzbmFtZXMoJ3N0b3J5LWxpc3QnLCAkJHByb3BzLmNsYXNzKVxuICAgICQ6IHN0eWxlUHJvcCA9IHRvQ1NTU3RyaW5nKHsgLi4uc3R5bGUgfSlcblxuICAgIGZ1bmN0aW9uIG9uUmVtb3ZlKHsgaW5kZXggfSwgZSkge1xuICAgICAgICBjb25zdCB2YWwgPSBbLi4udmFsdWUuZmlsdGVyKChfLCBpbmQpID0+IGluZCAhPT0gaW5kZXgpXVxuICAgICAgICBkaXNwYXRjaCgnY2hhbmdlJywgeyBlLCBuYW1lLCB2YWx1ZTogdmFsIH0pXG4gICAgfVxuXG4gICAgYXN5bmMgZnVuY3Rpb24gb25TdWJtaXQodmFsdWVzLCBlKSB7XG4gICAgICAgIGNvbnN0IHZhbCA9IFsuLi52YWx1ZSwgdmFsdWVzXVxuICAgICAgICBkaXNwYXRjaCgnY2hhbmdlJywgeyBlLCBuYW1lLCB2YWx1ZTogdmFsIH0pXG4gICAgICAgIG9wZW4gPSBmYWxzZVxuICAgIH1cbjwvc2NyaXB0PlxuXG48c3R5bGU+XG50YWJsZSB0cjpub3QoOmxhc3QtY2hpbGQpIHRkIHtcbiAgICBwYWRkaW5nLWJvdHRvbTogMTZweDtcbn1cblxudGFibGUgdGQ6bGFzdC1jaGlsZCB7XG4gICAgZm9udC13ZWlnaHQ6IDMwMDtcbn08L3N0eWxlPlxuXG48c2VjdGlvbiBjbGFzcz17Y2xhc3NQcm9wfSBzdHlsZT17c3R5bGVQcm9wfT5cbiAgICB7I2lmIGxhYmVsfVxuICAgICAgICA8aDIgY2xhc3M9XCJ0ZXh0LWxlZnRcIj57bGFiZWx9PC9oMj5cbiAgICAgICAgPEJyIHNpemU9XCIxMFwiLz5cbiAgICB7L2lmfVxuXG4gICAgPHRhYmxlPlxuICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgICB7I2lmIHZhbHVlICE9PSBudWxsICYmIEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aH1cbiAgICAgICAgICAgICAgICB7I2VhY2ggdmFsdWUuZmlsdGVyKEJvb2xlYW4pIGFzIHZhbCwgaX1cbiAgICAgICAgICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt2YWwuZGF0ZX08L3RkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPuKAlDwvdGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3ZhbC50aXRsZX08L3RkPlxuICAgICAgICAgICAgICAgICAgICAgICAgeyNpZiAhcmVhZG9ubHl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0byBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPVwidmVydGljYWwtYWxpZ246IG1pZGRsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbjpjbGljaz17b25SZW1vdmUuYmluZChudWxsLCB7IGlkOiB2YWwuaWQsIGluZGV4OiBpIH0pfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SWNvbiB0eXBlPVwiY2xvc2VcIiBzaXplPVwibWVkaXVtXCIvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICB7L2VhY2h9XG4gICAgICAgICAgICB7OmVsc2UgaWYgdmFsdWUgPT09IG51bGx9XG4gICAgICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICAgICAgICA8dGQ+PExvYWRlciB0eXBlPVwicFwiLz48L3RkPlxuICAgICAgICAgICAgICAgICAgICA8dGQ+4oCUPC90ZD5cbiAgICAgICAgICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPExvYWRlciB0eXBlPVwicFwiLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMb2FkZXIgdHlwZT1cInBcIi8+XG4gICAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICAgICAgIDx0ZD48TG9hZGVyIHR5cGU9XCJwXCIvPjwvdGQ+XG4gICAgICAgICAgICAgICAgICAgIDx0ZD7igJQ8L3RkPlxuICAgICAgICAgICAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TG9hZGVyIHR5cGU9XCJwXCIvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPExvYWRlciB0eXBlPVwicFwiLz5cbiAgICAgICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgICAgICAgPHRkPjxMb2FkZXIgdHlwZT1cInBcIi8+PC90ZD5cbiAgICAgICAgICAgICAgICAgICAgPHRkPuKAlDwvdGQ+XG4gICAgICAgICAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMb2FkZXIgdHlwZT1cInBcIi8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TG9hZGVyIHR5cGU9XCJwXCIvPlxuICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICB7L2lmfVxuICAgICAgICA8L3Rib2R5PlxuICAgIDwvdGFibGU+XG5cbiAgICB7I2lmICFyZWFkb25seX1cbiAgICAgICAgPEJyIHNpemU9XCIyNVwiLz5cbiAgICAgICAgPEJ1dHRvbiBhdXRvIGlzPVwiaW5mb1wiIG9uOmNsaWNrPXsoKSA9PiBvcGVuID0gdHJ1ZX0+XG4gICAgICAgICAgICA8aDMgc3R5bGU9XCJwYWRkaW5nOiAxMHB4IDI1cHhcIiBjbGFzcz1cImZvbnQtdy01MDBcIj5cbiAgICAgICAgICAgICAgICDQlNC+0LTQsNGC0Lgg0L/QvtC00ZbRjlxuICAgICAgICAgICAgPC9oMz5cbiAgICAgICAgPC9CdXR0b24+XG4gICAgey9pZn1cbjwvc2VjdGlvbj5cblxuPE1vZGFsIFxuICAgIHtvcGVufVxuICAgIHN3aXBlPVwiYWxsXCJcbiAgICBpZD1cInN0b3J5LWxpZmUtbW9kYWxcIlxuICAgIHNpemU9XCJtZWRpdW1cIlxuICAgIHRpdGxlPVwi0KHRgtCy0L7RgNC10L3QvdGPINC/0L7QtNGW0ZdcIlxuICAgIG9uOmNsb3NlPXsoKSA9PiBvcGVuID0gZmFsc2V9XG4+XG4gICAgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPlxuICAgICAgICA8QnIgc2l6ZT1cIjIwXCIvPlxuICAgICAgICA8Rm9ybUJ1aWxkZXJcbiAgICAgICAgICAgICAgICBpZD1cInN0b3J5LWZvcm1cIlxuICAgICAgICAgICAgICAgIGl0ZW1zPXtmb3JtRmllbGRzfVxuICAgICAgICAgICAgICAgIGVycm9ycz17Zm9ybUVycm9yc31cbiAgICAgICAgICAgICAgICBzdWJtaXQ9e29uU3VibWl0fVxuICAgICAgICAvPlxuICAgICAgICA8QnIgc2l6ZT1cIjQwXCIvPlxuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgaXM9XCJpbmZvXCJcbiAgICAgICAgICAgICAgICBzaXplPVwibWVkaXVtXCJcbiAgICAgICAgICAgICAgICB0eXBlPVwic3VibWl0XCJcbiAgICAgICAgICAgICAgICBmb3JtPVwic3RvcnktZm9ybVwiXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJmdWxsLXdpZHRoXCJcbiAgICAgICAgPlxuICAgICAgICAgICAgPGgzPtCX0LHQtdGA0LXQs9GC0Lg8L2gzPlxuICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgPEJyIHNpemU9XCIyMFwiLz5cbiAgICA8L2Rpdj5cbjwvTW9kYWw+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMkRBLG9CQUFLLENBQUMsRUFBRSxLQUFLLFdBQVcsQ0FBQyxDQUFDLEVBQUUsZUFBQyxDQUFDLEFBQzFCLGNBQWMsQ0FBRSxJQUFJLEFBQ3hCLENBQUMsQUFFRCxvQkFBSyxDQUFDLGlCQUFFLFdBQVcsQUFBQyxDQUFDLEFBQ2pCLFdBQVcsQ0FBRSxHQUFHLEFBQ3BCLENBQUMifQ== */";
	append_dev(document.head, style);
}

function get_each_context$a(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[18] = list[i];
	child_ctx[20] = i;
	return child_ctx;
}

// (69:4) {#if label}
function create_if_block_4$1(ctx) {
	let h2;
	let t0;
	let t1;
	let br;
	let current;
	br = new Br({ props: { size: "10" }, $$inline: true });

	const block = {
		c: function create() {
			h2 = element("h2");
			t0 = text(/*label*/ ctx[0]);
			t1 = space();
			create_component(br.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			h2 = claim_element(nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, /*label*/ ctx[0]);
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			claim_component(br.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "text-left");
			add_location(h2, file$18, 69, 8, 1832);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			append_dev(h2, t0);
			insert_dev(target, t1, anchor);
			mount_component(br, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (!current || dirty & /*label*/ 1) set_data_dev(t0, /*label*/ ctx[0]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(br.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(br.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t1);
			destroy_component(br, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4$1.name,
		type: "if",
		source: "(69:4) {#if label}",
		ctx
	});

	return block;
}

// (95:37) 
function create_if_block_3$2(ctx) {
	let tr0;
	let td0;
	let loader0;
	let t0;
	let td1;
	let t1;
	let t2;
	let td2;
	let loader1;
	let t3;
	let loader2;
	let t4;
	let tr1;
	let td3;
	let loader3;
	let t5;
	let td4;
	let t6;
	let t7;
	let td5;
	let loader4;
	let t8;
	let loader5;
	let t9;
	let tr2;
	let td6;
	let loader6;
	let t10;
	let td7;
	let t11;
	let t12;
	let td8;
	let loader7;
	let t13;
	let loader8;
	let current;
	loader0 = new Loader({ props: { type: "p" }, $$inline: true });
	loader1 = new Loader({ props: { type: "p" }, $$inline: true });
	loader2 = new Loader({ props: { type: "p" }, $$inline: true });
	loader3 = new Loader({ props: { type: "p" }, $$inline: true });
	loader4 = new Loader({ props: { type: "p" }, $$inline: true });
	loader5 = new Loader({ props: { type: "p" }, $$inline: true });
	loader6 = new Loader({ props: { type: "p" }, $$inline: true });
	loader7 = new Loader({ props: { type: "p" }, $$inline: true });
	loader8 = new Loader({ props: { type: "p" }, $$inline: true });

	const block = {
		c: function create() {
			tr0 = element("tr");
			td0 = element("td");
			create_component(loader0.$$.fragment);
			t0 = space();
			td1 = element("td");
			t1 = text("—");
			t2 = space();
			td2 = element("td");
			create_component(loader1.$$.fragment);
			t3 = space();
			create_component(loader2.$$.fragment);
			t4 = space();
			tr1 = element("tr");
			td3 = element("td");
			create_component(loader3.$$.fragment);
			t5 = space();
			td4 = element("td");
			t6 = text("—");
			t7 = space();
			td5 = element("td");
			create_component(loader4.$$.fragment);
			t8 = space();
			create_component(loader5.$$.fragment);
			t9 = space();
			tr2 = element("tr");
			td6 = element("td");
			create_component(loader6.$$.fragment);
			t10 = space();
			td7 = element("td");
			t11 = text("—");
			t12 = space();
			td8 = element("td");
			create_component(loader7.$$.fragment);
			t13 = space();
			create_component(loader8.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			tr0 = claim_element(nodes, "TR", {});
			var tr0_nodes = children(tr0);
			td0 = claim_element(tr0_nodes, "TD", { class: true });
			var td0_nodes = children(td0);
			claim_component(loader0.$$.fragment, td0_nodes);
			td0_nodes.forEach(detach_dev);
			t0 = claim_space(tr0_nodes);
			td1 = claim_element(tr0_nodes, "TD", { class: true });
			var td1_nodes = children(td1);
			t1 = claim_text(td1_nodes, "—");
			td1_nodes.forEach(detach_dev);
			t2 = claim_space(tr0_nodes);
			td2 = claim_element(tr0_nodes, "TD", { class: true });
			var td2_nodes = children(td2);
			claim_component(loader1.$$.fragment, td2_nodes);
			t3 = claim_space(td2_nodes);
			claim_component(loader2.$$.fragment, td2_nodes);
			td2_nodes.forEach(detach_dev);
			tr0_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			tr1 = claim_element(nodes, "TR", {});
			var tr1_nodes = children(tr1);
			td3 = claim_element(tr1_nodes, "TD", { class: true });
			var td3_nodes = children(td3);
			claim_component(loader3.$$.fragment, td3_nodes);
			td3_nodes.forEach(detach_dev);
			t5 = claim_space(tr1_nodes);
			td4 = claim_element(tr1_nodes, "TD", { class: true });
			var td4_nodes = children(td4);
			t6 = claim_text(td4_nodes, "—");
			td4_nodes.forEach(detach_dev);
			t7 = claim_space(tr1_nodes);
			td5 = claim_element(tr1_nodes, "TD", { class: true });
			var td5_nodes = children(td5);
			claim_component(loader4.$$.fragment, td5_nodes);
			t8 = claim_space(td5_nodes);
			claim_component(loader5.$$.fragment, td5_nodes);
			td5_nodes.forEach(detach_dev);
			tr1_nodes.forEach(detach_dev);
			t9 = claim_space(nodes);
			tr2 = claim_element(nodes, "TR", {});
			var tr2_nodes = children(tr2);
			td6 = claim_element(tr2_nodes, "TD", { class: true });
			var td6_nodes = children(td6);
			claim_component(loader6.$$.fragment, td6_nodes);
			td6_nodes.forEach(detach_dev);
			t10 = claim_space(tr2_nodes);
			td7 = claim_element(tr2_nodes, "TD", { class: true });
			var td7_nodes = children(td7);
			t11 = claim_text(td7_nodes, "—");
			td7_nodes.forEach(detach_dev);
			t12 = claim_space(tr2_nodes);
			td8 = claim_element(tr2_nodes, "TD", { class: true });
			var td8_nodes = children(td8);
			claim_component(loader7.$$.fragment, td8_nodes);
			t13 = claim_space(td8_nodes);
			claim_component(loader8.$$.fragment, td8_nodes);
			td8_nodes.forEach(detach_dev);
			tr2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(td0, "class", "svelte-1rv59vc");
			add_location(td0, file$18, 96, 20, 2864);
			attr_dev(td1, "class", "svelte-1rv59vc");
			add_location(td1, file$18, 97, 20, 2912);
			attr_dev(td2, "class", "svelte-1rv59vc");
			add_location(td2, file$18, 98, 20, 2943);
			add_location(tr0, file$18, 95, 16, 2839);
			attr_dev(td3, "class", "svelte-1rv59vc");
			add_location(td3, file$18, 104, 20, 3123);
			attr_dev(td4, "class", "svelte-1rv59vc");
			add_location(td4, file$18, 105, 20, 3171);
			attr_dev(td5, "class", "svelte-1rv59vc");
			add_location(td5, file$18, 106, 20, 3202);
			add_location(tr1, file$18, 103, 16, 3098);
			attr_dev(td6, "class", "svelte-1rv59vc");
			add_location(td6, file$18, 112, 20, 3382);
			attr_dev(td7, "class", "svelte-1rv59vc");
			add_location(td7, file$18, 113, 20, 3430);
			attr_dev(td8, "class", "svelte-1rv59vc");
			add_location(td8, file$18, 114, 20, 3461);
			add_location(tr2, file$18, 111, 16, 3357);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr0, anchor);
			append_dev(tr0, td0);
			mount_component(loader0, td0, null);
			append_dev(tr0, t0);
			append_dev(tr0, td1);
			append_dev(td1, t1);
			append_dev(tr0, t2);
			append_dev(tr0, td2);
			mount_component(loader1, td2, null);
			append_dev(td2, t3);
			mount_component(loader2, td2, null);
			insert_dev(target, t4, anchor);
			insert_dev(target, tr1, anchor);
			append_dev(tr1, td3);
			mount_component(loader3, td3, null);
			append_dev(tr1, t5);
			append_dev(tr1, td4);
			append_dev(td4, t6);
			append_dev(tr1, t7);
			append_dev(tr1, td5);
			mount_component(loader4, td5, null);
			append_dev(td5, t8);
			mount_component(loader5, td5, null);
			insert_dev(target, t9, anchor);
			insert_dev(target, tr2, anchor);
			append_dev(tr2, td6);
			mount_component(loader6, td6, null);
			append_dev(tr2, t10);
			append_dev(tr2, td7);
			append_dev(td7, t11);
			append_dev(tr2, t12);
			append_dev(tr2, td8);
			mount_component(loader7, td8, null);
			append_dev(td8, t13);
			mount_component(loader8, td8, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(loader0.$$.fragment, local);
			transition_in(loader1.$$.fragment, local);
			transition_in(loader2.$$.fragment, local);
			transition_in(loader3.$$.fragment, local);
			transition_in(loader4.$$.fragment, local);
			transition_in(loader5.$$.fragment, local);
			transition_in(loader6.$$.fragment, local);
			transition_in(loader7.$$.fragment, local);
			transition_in(loader8.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(loader0.$$.fragment, local);
			transition_out(loader1.$$.fragment, local);
			transition_out(loader2.$$.fragment, local);
			transition_out(loader3.$$.fragment, local);
			transition_out(loader4.$$.fragment, local);
			transition_out(loader5.$$.fragment, local);
			transition_out(loader6.$$.fragment, local);
			transition_out(loader7.$$.fragment, local);
			transition_out(loader8.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr0);
			destroy_component(loader0);
			destroy_component(loader1);
			destroy_component(loader2);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(tr1);
			destroy_component(loader3);
			destroy_component(loader4);
			destroy_component(loader5);
			if (detaching) detach_dev(t9);
			if (detaching) detach_dev(tr2);
			destroy_component(loader6);
			destroy_component(loader7);
			destroy_component(loader8);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3$2.name,
		type: "if",
		source: "(95:37) ",
		ctx
	});

	return block;
}

// (76:12) {#if value !== null && Array.isArray(value) && value.length}
function create_if_block_1$f(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*value*/ ctx[1].filter(Boolean);
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$a(get_each_context$a(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*onRemove, value, Boolean, readonly*/ 262) {
				each_value = /*value*/ ctx[1].filter(Boolean);
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$a(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$a(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean_1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$f.name,
		type: "if",
		source: "(76:12) {#if value !== null && Array.isArray(value) && value.length}",
		ctx
	});

	return block;
}

// (82:24) {#if !readonly}
function create_if_block_2$5(ctx) {
	let td;
	let button;
	let current;

	button = new Button({
			props: {
				auto: true,
				style: "vertical-align: middle",
				$$slots: { default: [create_default_slot_3$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", function () {
		if (is_function(/*onRemove*/ ctx[8].bind(null, {
			id: /*val*/ ctx[18].id,
			index: /*i*/ ctx[20]
		}))) /*onRemove*/ ctx[8].bind(null, {
			id: /*val*/ ctx[18].id,
			index: /*i*/ ctx[20]
		}).apply(this, arguments);
	});

	const block = {
		c: function create() {
			td = element("td");
			create_component(button.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			td = claim_element(nodes, "TD", { class: true });
			var td_nodes = children(td);
			claim_component(button.$$.fragment, td_nodes);
			td_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(td, "class", "svelte-1rv59vc");
			add_location(td, file$18, 82, 28, 2276);
		},
		m: function mount(target, anchor) {
			insert_dev(target, td, anchor);
			mount_component(button, td, null);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const button_changes = {};

			if (dirty & /*$$scope*/ 2097152) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(td);
			destroy_component(button);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$5.name,
		type: "if",
		source: "(82:24) {#if !readonly}",
		ctx
	});

	return block;
}

// (84:32) <Button                                      auto                                      style="vertical-align: middle"                                     on:click={onRemove.bind(null, { id: val.id, index: i })}                                 >
function create_default_slot_3$1(ctx) {
	let icon;
	let current;

	icon = new Icon({
			props: { type: "close", size: "medium" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icon.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3$1.name,
		type: "slot",
		source: "(84:32) <Button                                      auto                                      style=\\\"vertical-align: middle\\\"                                     on:click={onRemove.bind(null, { id: val.id, index: i })}                                 >",
		ctx
	});

	return block;
}

// (77:16) {#each value.filter(Boolean) as val, i}
function create_each_block$a(ctx) {
	let tr;
	let td0;
	let t0_value = /*val*/ ctx[18].date + "";
	let t0;
	let t1;
	let td1;
	let t2;
	let t3;
	let td2;
	let t4_value = /*val*/ ctx[18].title + "";
	let t4;
	let t5;
	let t6;
	let current;
	let if_block = !/*readonly*/ ctx[2] && create_if_block_2$5(ctx);

	const block = {
		c: function create() {
			tr = element("tr");
			td0 = element("td");
			t0 = text(t0_value);
			t1 = space();
			td1 = element("td");
			t2 = text("—");
			t3 = space();
			td2 = element("td");
			t4 = text(t4_value);
			t5 = space();
			if (if_block) if_block.c();
			t6 = space();
			this.h();
		},
		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", {});
			var tr_nodes = children(tr);
			td0 = claim_element(tr_nodes, "TD", { class: true });
			var td0_nodes = children(td0);
			t0 = claim_text(td0_nodes, t0_value);
			td0_nodes.forEach(detach_dev);
			t1 = claim_space(tr_nodes);
			td1 = claim_element(tr_nodes, "TD", { class: true });
			var td1_nodes = children(td1);
			t2 = claim_text(td1_nodes, "—");
			td1_nodes.forEach(detach_dev);
			t3 = claim_space(tr_nodes);
			td2 = claim_element(tr_nodes, "TD", { class: true });
			var td2_nodes = children(td2);
			t4 = claim_text(td2_nodes, t4_value);
			td2_nodes.forEach(detach_dev);
			t5 = claim_space(tr_nodes);
			if (if_block) if_block.l(tr_nodes);
			t6 = claim_space(tr_nodes);
			tr_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(td0, "class", "svelte-1rv59vc");
			add_location(td0, file$18, 78, 24, 2108);
			attr_dev(td1, "class", "svelte-1rv59vc");
			add_location(td1, file$18, 79, 24, 2152);
			attr_dev(td2, "class", "svelte-1rv59vc");
			add_location(td2, file$18, 80, 24, 2187);
			add_location(tr, file$18, 77, 20, 2079);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr, anchor);
			append_dev(tr, td0);
			append_dev(td0, t0);
			append_dev(tr, t1);
			append_dev(tr, td1);
			append_dev(td1, t2);
			append_dev(tr, t3);
			append_dev(tr, td2);
			append_dev(td2, t4);
			append_dev(tr, t5);
			if (if_block) if_block.m(tr, null);
			append_dev(tr, t6);
			current = true;
		},
		p: function update(ctx, dirty) {
			if ((!current || dirty & /*value*/ 2) && t0_value !== (t0_value = /*val*/ ctx[18].date + "")) set_data_dev(t0, t0_value);
			if ((!current || dirty & /*value*/ 2) && t4_value !== (t4_value = /*val*/ ctx[18].title + "")) set_data_dev(t4, t4_value);

			if (!/*readonly*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*readonly*/ 4) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_2$5(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(tr, t6);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$a.name,
		type: "each",
		source: "(77:16) {#each value.filter(Boolean) as val, i}",
		ctx
	});

	return block;
}

// (124:4) {#if !readonly}
function create_if_block$n(ctx) {
	let br;
	let t;
	let button;
	let current;
	br = new Br({ props: { size: "25" }, $$inline: true });

	button = new Button({
			props: {
				auto: true,
				is: "info",
				$$slots: { default: [create_default_slot_2$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*click_handler*/ ctx[13]);

	const block = {
		c: function create() {
			create_component(br.$$.fragment);
			t = space();
			create_component(button.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(br.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(button.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(br, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(button, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 2097152) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(br.$$.fragment, local);
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(br.$$.fragment, local);
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(br, detaching);
			if (detaching) detach_dev(t);
			destroy_component(button, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$n.name,
		type: "if",
		source: "(124:4) {#if !readonly}",
		ctx
	});

	return block;
}

// (126:8) <Button auto is="info" on:click={() => open = true}>
function create_default_slot_2$2(ctx) {
	let h3;
	let t;

	const block = {
		c: function create() {
			h3 = element("h3");
			t = text("Додати подію");
			this.h();
		},
		l: function claim(nodes) {
			h3 = claim_element(nodes, "H3", { style: true, class: true });
			var h3_nodes = children(h3);
			t = claim_text(h3_nodes, "Додати подію");
			h3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(h3, "padding", "10px 25px");
			attr_dev(h3, "class", "font-w-500");
			add_location(h3, file$18, 126, 12, 3766);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h3, anchor);
			append_dev(h3, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$2.name,
		type: "slot",
		source: "(126:8) <Button auto is=\\\"info\\\" on:click={() => open = true}>",
		ctx
	});

	return block;
}

// (151:8) <Button                 is="info"                 size="medium"                 type="submit"                 form="story-form"                 class="full-width"         >
function create_default_slot_1$3(ctx) {
	let h3;
	let t;

	const block = {
		c: function create() {
			h3 = element("h3");
			t = text("Зберегти");
			this.h();
		},
		l: function claim(nodes) {
			h3 = claim_element(nodes, "H3", {});
			var h3_nodes = children(h3);
			t = claim_text(h3_nodes, "Зберегти");
			h3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h3, file$18, 157, 12, 4485);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h3, anchor);
			append_dev(h3, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$3.name,
		type: "slot",
		source: "(151:8) <Button                 is=\\\"info\\\"                 size=\\\"medium\\\"                 type=\\\"submit\\\"                 form=\\\"story-form\\\"                 class=\\\"full-width\\\"         >",
		ctx
	});

	return block;
}

// (134:0) <Modal      {open}     swipe="all"     id="story-life-modal"     size="medium"     title="Створення події"     on:close={() => open = false} >
function create_default_slot$J(ctx) {
	let div;
	let br0;
	let t0;
	let formbuilder;
	let t1;
	let br1;
	let t2;
	let button;
	let t3;
	let br2;
	let current;
	br0 = new Br({ props: { size: "20" }, $$inline: true });

	formbuilder = new FormBuilder({
			props: {
				id: "story-form",
				items: /*formFields*/ ctx[7],
				errors: /*formErrors*/ ctx[6],
				submit: /*onSubmit*/ ctx[9]
			},
			$$inline: true
		});

	br1 = new Br({ props: { size: "40" }, $$inline: true });

	button = new Button({
			props: {
				is: "info",
				size: "medium",
				type: "submit",
				form: "story-form",
				class: "full-width",
				$$slots: { default: [create_default_slot_1$3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	br2 = new Br({ props: { size: "20" }, $$inline: true });

	const block = {
		c: function create() {
			div = element("div");
			create_component(br0.$$.fragment);
			t0 = space();
			create_component(formbuilder.$$.fragment);
			t1 = space();
			create_component(br1.$$.fragment);
			t2 = space();
			create_component(button.$$.fragment);
			t3 = space();
			create_component(br2.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(br0.$$.fragment, div_nodes);
			t0 = claim_space(div_nodes);
			claim_component(formbuilder.$$.fragment, div_nodes);
			t1 = claim_space(div_nodes);
			claim_component(br1.$$.fragment, div_nodes);
			t2 = claim_space(div_nodes);
			claim_component(button.$$.fragment, div_nodes);
			t3 = claim_space(div_nodes);
			claim_component(br2.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "container");
			add_location(div, file$18, 141, 4, 4051);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(br0, div, null);
			append_dev(div, t0);
			mount_component(formbuilder, div, null);
			append_dev(div, t1);
			mount_component(br1, div, null);
			append_dev(div, t2);
			mount_component(button, div, null);
			append_dev(div, t3);
			mount_component(br2, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 2097152) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(br0.$$.fragment, local);
			transition_in(formbuilder.$$.fragment, local);
			transition_in(br1.$$.fragment, local);
			transition_in(button.$$.fragment, local);
			transition_in(br2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(br0.$$.fragment, local);
			transition_out(formbuilder.$$.fragment, local);
			transition_out(br1.$$.fragment, local);
			transition_out(button.$$.fragment, local);
			transition_out(br2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(br0);
			destroy_component(formbuilder);
			destroy_component(br1);
			destroy_component(button);
			destroy_component(br2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$J.name,
		type: "slot",
		source: "(134:0) <Modal      {open}     swipe=\\\"all\\\"     id=\\\"story-life-modal\\\"     size=\\\"medium\\\"     title=\\\"Створення події\\\"     on:close={() => open = false} >",
		ctx
	});

	return block;
}

function create_fragment$18(ctx) {
	let section;
	let t0;
	let table;
	let tbody;
	let show_if;
	let current_block_type_index;
	let if_block1;
	let t1;
	let t2;
	let modal;
	let current;
	let if_block0 = /*label*/ ctx[0] && create_if_block_4$1(ctx);
	const if_block_creators = [create_if_block_1$f, create_if_block_3$2];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (dirty & /*value*/ 2) show_if = !!(/*value*/ ctx[1] !== null && Array.isArray(/*value*/ ctx[1]) && /*value*/ ctx[1].length);
		if (show_if) return 0;
		if (/*value*/ ctx[1] === null) return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx, -1))) {
		if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	let if_block2 = !/*readonly*/ ctx[2] && create_if_block$n(ctx);

	modal = new Modal({
			props: {
				open: /*open*/ ctx[3],
				swipe: "all",
				id: "story-life-modal",
				size: "medium",
				title: "Створення події",
				$$slots: { default: [create_default_slot$J] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	modal.$on("close", /*close_handler*/ ctx[14]);

	const block = {
		c: function create() {
			section = element("section");
			if (if_block0) if_block0.c();
			t0 = space();
			table = element("table");
			tbody = element("tbody");
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			t2 = space();
			create_component(modal.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true, style: true });
			var section_nodes = children(section);
			if (if_block0) if_block0.l(section_nodes);
			t0 = claim_space(section_nodes);
			table = claim_element(section_nodes, "TABLE", { class: true });
			var table_nodes = children(table);
			tbody = claim_element(table_nodes, "TBODY", {});
			var tbody_nodes = children(tbody);
			if (if_block1) if_block1.l(tbody_nodes);
			tbody_nodes.forEach(detach_dev);
			table_nodes.forEach(detach_dev);
			t1 = claim_space(section_nodes);
			if (if_block2) if_block2.l(section_nodes);
			section_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			claim_component(modal.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			add_location(tbody, file$18, 74, 8, 1922);
			attr_dev(table, "class", "svelte-1rv59vc");
			add_location(table, file$18, 73, 4, 1906);
			attr_dev(section, "class", /*classProp*/ ctx[4]);
			attr_dev(section, "style", /*styleProp*/ ctx[5]);
			add_location(section, file$18, 67, 0, 1762);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			if (if_block0) if_block0.m(section, null);
			append_dev(section, t0);
			append_dev(section, table);
			append_dev(table, tbody);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(tbody, null);
			}

			append_dev(section, t1);
			if (if_block2) if_block2.m(section, null);
			insert_dev(target, t2, anchor);
			mount_component(modal, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*label*/ ctx[0]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*label*/ 1) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_4$1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(section, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block1) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block1 = if_blocks[current_block_type_index];

					if (!if_block1) {
						if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block1.c();
					}

					transition_in(if_block1, 1);
					if_block1.m(tbody, null);
				} else {
					if_block1 = null;
				}
			}

			if (!/*readonly*/ ctx[2]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*readonly*/ 4) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block$n(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(section, null);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (!current || dirty & /*classProp*/ 16) {
				attr_dev(section, "class", /*classProp*/ ctx[4]);
			}

			if (!current || dirty & /*styleProp*/ 32) {
				attr_dev(section, "style", /*styleProp*/ ctx[5]);
			}

			const modal_changes = {};
			if (dirty & /*open*/ 8) modal_changes.open = /*open*/ ctx[3];

			if (dirty & /*$$scope*/ 2097152) {
				modal_changes.$$scope = { dirty, ctx };
			}

			modal.$set(modal_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			transition_in(modal.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			transition_out(modal.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			if (if_block0) if_block0.d();

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d();
			}

			if (if_block2) if_block2.d();
			if (detaching) detach_dev(t2);
			destroy_component(modal, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$18.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$18($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { id = undefined } = $$props;
	let { name = undefined } = $$props;
	let { label = undefined } = $$props;
	let { value = undefined } = $$props;
	let { style = undefined } = $$props;
	let { readonly = undefined } = $$props;
	let open = false;
	let formErrors = [];

	let formFields = [
		{
			label: "Дата:",
			type: "date",
			name: "date",
			meta: { placeholder: "18.03.2019..." }
		},
		{
			label: "Добавте назву події:",
			type: "textarea",
			name: "title",
			meta: {
				placeholder: "Забрали в притулок...",
				rows: 3,
				maxlength: 75
			}
		}
	];

	function onRemove({ index }, e) {
		const val = [...value.filter((_, ind) => ind !== index)];
		dispatch("change", { e, name, value: val });
	}

	async function onSubmit(values, e) {
		const val = [...value, values];
		dispatch("change", { e, name, value: val });
		$$invalidate(3, open = false);
	}

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("StoryList", $$slots, []);
	const click_handler = () => $$invalidate(3, open = true);
	const close_handler = () => $$invalidate(3, open = false);

	$$self.$set = $$new_props => {
		$$invalidate(17, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("id" in $$new_props) $$invalidate(10, id = $$new_props.id);
		if ("name" in $$new_props) $$invalidate(11, name = $$new_props.name);
		if ("label" in $$new_props) $$invalidate(0, label = $$new_props.label);
		if ("value" in $$new_props) $$invalidate(1, value = $$new_props.value);
		if ("style" in $$new_props) $$invalidate(12, style = $$new_props.style);
		if ("readonly" in $$new_props) $$invalidate(2, readonly = $$new_props.readonly);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		classnames,
		toCSSString,
		Br,
		Icon,
		Modal,
		Loader,
		Button,
		FormBuilder,
		dispatch,
		id,
		name,
		label,
		value,
		style,
		readonly,
		open,
		formErrors,
		formFields,
		onRemove,
		onSubmit,
		idProp,
		classProp,
		styleProp
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(17, $$props = assign(assign({}, $$props), $$new_props));
		if ("id" in $$props) $$invalidate(10, id = $$new_props.id);
		if ("name" in $$props) $$invalidate(11, name = $$new_props.name);
		if ("label" in $$props) $$invalidate(0, label = $$new_props.label);
		if ("value" in $$props) $$invalidate(1, value = $$new_props.value);
		if ("style" in $$props) $$invalidate(12, style = $$new_props.style);
		if ("readonly" in $$props) $$invalidate(2, readonly = $$new_props.readonly);
		if ("open" in $$props) $$invalidate(3, open = $$new_props.open);
		if ("formErrors" in $$props) $$invalidate(6, formErrors = $$new_props.formErrors);
		if ("formFields" in $$props) $$invalidate(7, formFields = $$new_props.formFields);
		if ("idProp" in $$props) idProp = $$new_props.idProp;
		if ("classProp" in $$props) $$invalidate(4, classProp = $$new_props.classProp);
		if ("styleProp" in $$props) $$invalidate(5, styleProp = $$new_props.styleProp);
	};

	let idProp;
	let classProp;
	let styleProp;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*id, name*/ 3072) {
			 idProp = id || name;
		}

		 $$invalidate(4, classProp = classnames("story-list", $$props.class));

		if ($$self.$$.dirty & /*style*/ 4096) {
			 $$invalidate(5, styleProp = toCSSString({ ...style }));
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		label,
		value,
		readonly,
		open,
		classProp,
		styleProp,
		formErrors,
		formFields,
		onRemove,
		onSubmit,
		id,
		name,
		style,
		click_handler,
		close_handler
	];
}

class StoryList extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-1rv59vc-style")) add_css$s();

		init(this, options, instance$18, create_fragment$18, safe_not_equal, {
			id: 10,
			name: 11,
			label: 0,
			value: 1,
			style: 12,
			readonly: 2
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "StoryList",
			options,
			id: create_fragment$18.name
		});
	}

	get id() {
		throw new Error("<StoryList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<StoryList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get name() {
		throw new Error("<StoryList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<StoryList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<StoryList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<StoryList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<StoryList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<StoryList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<StoryList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<StoryList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get readonly() {
		throw new Error("<StoryList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set readonly(value) {
		throw new Error("<StoryList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/app/SearchLine.svelte generated by Svelte v3.24.0 */
const file$19 = "src/components/app/SearchLine.svelte";

function add_css$t() {
	var style = element("style");
	style.id = "svelte-16zbu6b-style";
	style.textContent = ".search.svelte-16zbu6b{}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VhcmNoTGluZS5zdmVsdGUiLCJzb3VyY2VzIjpbIlNlYXJjaExpbmUuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gICAgaW1wb3J0IElucHV0IGZyb20gJ0Bjb21wb25lbnRzL2ZpZWxkcy9JbnB1dC5zdmVsdGUnXG48L3NjcmlwdD5cblxuPHNlY3Rpb24gY2xhc3M9XCJzZWFyY2hcIj5cbiAgICA8SW5wdXQgdHlwZT1cInNlYXJjaFwiLz5cbjwvc2VjdGlvbj5cblxuPHN0eWxlPlxuLnNlYXJjaCB7XG5cbn08L3N0eWxlPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVNBLE9BQU8sZUFBQyxDQUFDLEFBRVQsQ0FBQyJ9 */";
	append_dev(document.head, style);
}

function create_fragment$19(ctx) {
	let section;
	let input;
	let current;

	input = new Input({
			props: { type: "search" },
			$$inline: true
		});

	const block = {
		c: function create() {
			section = element("section");
			create_component(input.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			claim_component(input.$$.fragment, section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(section, "class", "search svelte-16zbu6b");
			add_location(section, file$19, 4, 0, 76);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			mount_component(input, section, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			destroy_component(input);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$19.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$19($$self, $$props, $$invalidate) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SearchLine> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("SearchLine", $$slots, []);
	$$self.$capture_state = () => ({ Input });
	return [];
}

class SearchLine extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-16zbu6b-style")) add_css$t();
		init(this, options, instance$19, create_fragment$19, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SearchLine",
			options,
			id: create_fragment$19.name
		});
	}
}

/* src/components/app/TrustButton.svelte generated by Svelte v3.24.0 */
const file$1a = "src/components/app/TrustButton.svelte";

function add_css$u() {
	var style = element("style");
	style.id = "svelte-1xs9p24-style";
	style.textContent = ".trust-btn.svelte-1xs9p24.svelte-1xs9p24{position:relative;display:block;width:100%;height:0;padding-bottom:100%;border-radius:50%;overflow:hidden}div.svelte-1xs9p24.svelte-1xs9p24{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;border-radius:50%;border:4px solid rgba(var(--color-danger));background-color:rgba(var(--color-danger), .2)}.trust-btn.isActive.svelte-1xs9p24 div.svelte-1xs9p24{background-color:rgba(var(--color-danger), 1)}.trust-btn.isActive.svelte-1xs9p24 span.svelte-1xs9p24{color:rgba(var(--color-white));-webkit-animation:none;animation:none;-webkit-transform:scale(1.1);transform:scale(1.1)\n}span.svelte-1xs9p24.svelte-1xs9p24{display:-webkit-box;display:-ms-flexbox;display:flex;width:50%;height:50%;margin-top:3px;max-width:calc(100% - 10px);max-height:calc(100% - 10px);color:rgba(var(--color-danger));-webkit-animation:svelte-1xs9p24-pulse 2s infinite;animation:svelte-1xs9p24-pulse 2s infinite}@-webkit-keyframes svelte-1xs9p24-pulse{10%{-webkit-transform:scale(1.1);transform:scale(1.1)\n    }20%{-webkit-transform:scale(1.05);transform:scale(1.05)\n    }30%{-webkit-transform:scale(1.15);transform:scale(1.15)\n    }}@keyframes svelte-1xs9p24-pulse{10%{-webkit-transform:scale(1.1);transform:scale(1.1)\n    }20%{-webkit-transform:scale(1.05);transform:scale(1.05)\n    }30%{-webkit-transform:scale(1.15);transform:scale(1.15)\n    }}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHJ1c3RCdXR0b24uc3ZlbHRlIiwic291cmNlcyI6WyJUcnVzdEJ1dHRvbi5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tICdzdmVsdGUnXG4gICAgaW1wb3J0IHsgY2xhc3NuYW1lcyB9IGZyb20gJ0B1dGlscydcbiAgICBpbXBvcnQgSWNvbiBmcm9tICdAY29tcG9uZW50cy9JY29uLnN2ZWx0ZSdcblxuICAgIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKClcblxuICAgIGV4cG9ydCBsZXQgaXNBY3RpdmUgPSBudWxsXG4gICAgZXhwb3J0IGxldCBvbkFzeW5jQ2xpY2sgPSBudWxsXG5cbiAgICBsZXQgaXNBY3RpdmVMb2NhbCA9ICEhaXNBY3RpdmVcblxuICAgICQ6IGlzQWN0aXZlU3RhdGUgPSBpc0FjdGl2ZSA9PT0gbnVsbCA/IGlzQWN0aXZlTG9jYWwgOiBpc0FjdGl2ZVxuICAgICQ6IGNsYXNzUHJvcCA9IGNsYXNzbmFtZXMoJ3RydXN0LWJ0bicsICQkcHJvcHMuY2xhc3MsIHsgaXNBY3RpdmU6IGlzQWN0aXZlU3RhdGUgfSlcblxuICAgIGZ1bmN0aW9uIG9uQ2xpY2tIYW5kbGVyKGUpIHtcbiAgICAgICAgb25DbGlja0V2ZW50KGUpXG4gICAgICAgIG9uQ2xpY2tQcm9taXNlKGUpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25DbGlja0V2ZW50KGUpIHtcbiAgICAgICAgZGlzcGF0Y2goJ2NsaWNrJywgZSlcbiAgICB9XG5cbiAgICBjb25zdCBvbkNsaWNrUHJvbWlzZSA9IGFzeW5jIChlKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2Ygb25Bc3luY0NsaWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlzQWN0aXZlTG9jYWwgPSAhaXNBY3RpdmVMb2NhbFxuICAgICAgICAgICAgICAgIGF3YWl0IG9uQXN5bmNDbGljayhlKVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgaXNBY3RpdmVMb2NhbCA9ICFpc0FjdGl2ZUxvY2FsXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG48L3NjcmlwdD5cblxuPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgdGl0bGU9XCJJIHRydXN0XCIgY2xhc3M9e2NsYXNzUHJvcH0gb246Y2xpY2s9e29uQ2xpY2tIYW5kbGVyfT5cbiAgICA8ZGl2IGNsYXNzPVwiZnVsbC1hYnNvbHV0ZVwiPlxuICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgIDxJY29uIHR5cGU9XCJoZWFydFwiIGlzPXtpc0FjdGl2ZSA/ICdsaWdodCcgOiAnZGFuZ2VyJ30vPlxuICAgICAgICA8L3NwYW4+XG4gICAgPC9kaXY+XG48L2J1dHRvbj5cblxuPHN0eWxlPlxuLnRydXN0LWJ0biB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMDtcbiAgICBwYWRkaW5nLWJvdHRvbTogMTAwJTtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cblxuZGl2IHtcbiAgICBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgICBkaXNwbGF5OiAtbXMtZmxleGJveDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XG4gICAgICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIC13ZWJraXQtYm94LXBhY2s6IGNlbnRlcjtcbiAgICAgICAgLW1zLWZsZXgtcGFjazogY2VudGVyO1xuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIGJvcmRlcjogNHB4IHNvbGlkIHJnYmEodmFyKC0tY29sb3ItZGFuZ2VyKSk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSh2YXIoLS1jb2xvci1kYW5nZXIpLCAuMik7XG59XG5cbi50cnVzdC1idG4uaXNBY3RpdmUgZGl2IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKHZhcigtLWNvbG9yLWRhbmdlciksIDEpO1xufVxuXG4udHJ1c3QtYnRuLmlzQWN0aXZlIHNwYW4ge1xuICAgIGNvbG9yOiByZ2JhKHZhcigtLWNvbG9yLXdoaXRlKSk7XG4gICAgLXdlYmtpdC1hbmltYXRpb246IG5vbmU7XG4gICAgICAgICAgICBhbmltYXRpb246IG5vbmU7XG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEuMSk7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEuMSlcbn1cblxuc3BhbiB7XG4gICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gICAgZGlzcGxheTogLW1zLWZsZXhib3g7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICB3aWR0aDogNTAlO1xuICAgIGhlaWdodDogNTAlO1xuICAgIG1hcmdpbi10b3A6IDNweDtcbiAgICBtYXgtd2lkdGg6IGNhbGMoMTAwJSAtIDEwcHgpO1xuICAgIG1heC1oZWlnaHQ6IGNhbGMoMTAwJSAtIDEwcHgpO1xuICAgIGNvbG9yOiByZ2JhKHZhcigtLWNvbG9yLWRhbmdlcikpO1xuICAgIC13ZWJraXQtYW5pbWF0aW9uOiBwdWxzZSAycyBpbmZpbml0ZTtcbiAgICAgICAgICAgIGFuaW1hdGlvbjogcHVsc2UgMnMgaW5maW5pdGU7XG59XG5cbkAtd2Via2l0LWtleWZyYW1lcyBwdWxzZSB7XG4gICAgMTAlIHtcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEuMSk7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxLjEpXG4gICAgfVxuICAgIDIwJSB7XG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLjA1KTtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEuMDUpXG4gICAgfVxuICAgIDMwJSB7XG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLjE1KTtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEuMTUpXG4gICAgfVxufVxuXG5Aa2V5ZnJhbWVzIHB1bHNlIHtcbiAgICAxMCUge1xuICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMS4xKTtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEuMSlcbiAgICB9XG4gICAgMjAlIHtcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEuMDUpO1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMS4wNSlcbiAgICB9XG4gICAgMzAlIHtcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEuMTUpO1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMS4xNSlcbiAgICB9XG59PC9zdHlsZT5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE2Q0EsVUFBVSw4QkFBQyxDQUFDLEFBQ1IsUUFBUSxDQUFFLFFBQVEsQ0FDbEIsT0FBTyxDQUFFLEtBQUssQ0FDZCxLQUFLLENBQUUsSUFBSSxDQUNYLE1BQU0sQ0FBRSxDQUFDLENBQ1QsY0FBYyxDQUFFLElBQUksQ0FDcEIsYUFBYSxDQUFFLEdBQUcsQ0FDbEIsUUFBUSxDQUFFLE1BQU0sQUFDcEIsQ0FBQyxBQUVELEdBQUcsOEJBQUMsQ0FBQyxBQUNELE9BQU8sQ0FBRSxXQUFXLENBQ3BCLE9BQU8sQ0FBRSxXQUFXLENBQ3BCLE9BQU8sQ0FBRSxJQUFJLENBQ2IsaUJBQWlCLENBQUUsTUFBTSxDQUNyQixjQUFjLENBQUUsTUFBTSxDQUNsQixXQUFXLENBQUUsTUFBTSxDQUMzQixnQkFBZ0IsQ0FBRSxNQUFNLENBQ3BCLGFBQWEsQ0FBRSxNQUFNLENBQ2pCLGVBQWUsQ0FBRSxNQUFNLENBQy9CLGFBQWEsQ0FBRSxHQUFHLENBQ2xCLE1BQU0sQ0FBRSxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxjQUFjLENBQUMsQ0FBQyxDQUMzQyxnQkFBZ0IsQ0FBRSxLQUFLLElBQUksY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQUFDbkQsQ0FBQyxBQUVELFVBQVUsd0JBQVMsQ0FBQyxHQUFHLGVBQUMsQ0FBQyxBQUNyQixnQkFBZ0IsQ0FBRSxLQUFLLElBQUksY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDbEQsQ0FBQyxBQUVELFVBQVUsd0JBQVMsQ0FBQyxJQUFJLGVBQUMsQ0FBQyxBQUN0QixLQUFLLENBQUUsS0FBSyxJQUFJLGFBQWEsQ0FBQyxDQUFDLENBQy9CLGlCQUFpQixDQUFFLElBQUksQ0FDZixTQUFTLENBQUUsSUFBSSxDQUN2QixpQkFBaUIsQ0FBRSxNQUFNLEdBQUcsQ0FBQyxDQUNyQixTQUFTLENBQUUsTUFBTSxHQUFHLENBQUM7QUFDakMsQ0FBQyxBQUVELElBQUksOEJBQUMsQ0FBQyxBQUNGLE9BQU8sQ0FBRSxXQUFXLENBQ3BCLE9BQU8sQ0FBRSxXQUFXLENBQ3BCLE9BQU8sQ0FBRSxJQUFJLENBQ2IsS0FBSyxDQUFFLEdBQUcsQ0FDVixNQUFNLENBQUUsR0FBRyxDQUNYLFVBQVUsQ0FBRSxHQUFHLENBQ2YsU0FBUyxDQUFFLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FDNUIsVUFBVSxDQUFFLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FDN0IsS0FBSyxDQUFFLEtBQUssSUFBSSxjQUFjLENBQUMsQ0FBQyxDQUNoQyxpQkFBaUIsQ0FBRSxvQkFBSyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQzVCLFNBQVMsQ0FBRSxvQkFBSyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEFBQ3hDLENBQUMsQUFFRCxtQkFBbUIsb0JBQU0sQ0FBQyxBQUN0QixHQUFHLEFBQUMsQ0FBQyxBQUNELGlCQUFpQixDQUFFLE1BQU0sR0FBRyxDQUFDLENBQ3JCLFNBQVMsQ0FBRSxNQUFNLEdBQUcsQ0FBQztJQUNqQyxDQUFDLEFBQ0QsR0FBRyxBQUFDLENBQUMsQUFDRCxpQkFBaUIsQ0FBRSxNQUFNLElBQUksQ0FBQyxDQUN0QixTQUFTLENBQUUsTUFBTSxJQUFJLENBQUM7SUFDbEMsQ0FBQyxBQUNELEdBQUcsQUFBQyxDQUFDLEFBQ0QsaUJBQWlCLENBQUUsTUFBTSxJQUFJLENBQUMsQ0FDdEIsU0FBUyxDQUFFLE1BQU0sSUFBSSxDQUFDO0lBQ2xDLENBQUMsQUFDTCxDQUFDLEFBRUQsV0FBVyxvQkFBTSxDQUFDLEFBQ2QsR0FBRyxBQUFDLENBQUMsQUFDRCxpQkFBaUIsQ0FBRSxNQUFNLEdBQUcsQ0FBQyxDQUNyQixTQUFTLENBQUUsTUFBTSxHQUFHLENBQUM7SUFDakMsQ0FBQyxBQUNELEdBQUcsQUFBQyxDQUFDLEFBQ0QsaUJBQWlCLENBQUUsTUFBTSxJQUFJLENBQUMsQ0FDdEIsU0FBUyxDQUFFLE1BQU0sSUFBSSxDQUFDO0lBQ2xDLENBQUMsQUFDRCxHQUFHLEFBQUMsQ0FBQyxBQUNELGlCQUFpQixDQUFFLE1BQU0sSUFBSSxDQUFDLENBQ3RCLFNBQVMsQ0FBRSxNQUFNLElBQUksQ0FBQztJQUNsQyxDQUFDLEFBQ0wsQ0FBQyJ9 */";
	append_dev(document.head, style);
}

function create_fragment$1a(ctx) {
	let button;
	let div;
	let span;
	let icon;
	let button_class_value;
	let current;
	let mounted;
	let dispose;

	icon = new Icon({
			props: {
				type: "heart",
				is: /*isActive*/ ctx[0] ? "light" : "danger"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			button = element("button");
			div = element("div");
			span = element("span");
			create_component(icon.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", { type: true, title: true, class: true });
			var button_nodes = children(button);
			div = claim_element(button_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			span = claim_element(div_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			claim_component(icon.$$.fragment, span_nodes);
			span_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "svelte-1xs9p24");
			add_location(span, file$1a, 38, 8, 1044);
			attr_dev(div, "class", "full-absolute svelte-1xs9p24");
			add_location(div, file$1a, 37, 4, 1008);
			attr_dev(button, "type", "button");
			attr_dev(button, "title", "I trust");
			attr_dev(button, "class", button_class_value = "" + (null_to_empty(/*classProp*/ ctx[1]) + " svelte-1xs9p24"));
			add_location(button, file$1a, 36, 0, 921);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, div);
			append_dev(div, span);
			mount_component(icon, span, null);
			current = true;

			if (!mounted) {
				dispose = listen_dev(button, "click", /*onClickHandler*/ ctx[2], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			const icon_changes = {};
			if (dirty & /*isActive*/ 1) icon_changes.is = /*isActive*/ ctx[0] ? "light" : "danger";
			icon.$set(icon_changes);

			if (!current || dirty & /*classProp*/ 2 && button_class_value !== (button_class_value = "" + (null_to_empty(/*classProp*/ ctx[1]) + " svelte-1xs9p24"))) {
				attr_dev(button, "class", button_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			destroy_component(icon);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1a.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1a($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { isActive = null } = $$props;
	let { onAsyncClick = null } = $$props;
	let isActiveLocal = !!isActive;

	function onClickHandler(e) {
		onClickEvent(e);
		onClickPromise(e);
	}

	function onClickEvent(e) {
		dispatch("click", e);
	}

	const onClickPromise = async e => {
		if (typeof onAsyncClick === "function") {
			try {
				$$invalidate(4, isActiveLocal = !isActiveLocal);
				await onAsyncClick(e);
			} catch(err) {
				$$invalidate(4, isActiveLocal = !isActiveLocal);
			}
		}
	};

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("TrustButton", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(9, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("isActive" in $$new_props) $$invalidate(0, isActive = $$new_props.isActive);
		if ("onAsyncClick" in $$new_props) $$invalidate(3, onAsyncClick = $$new_props.onAsyncClick);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		classnames,
		Icon,
		dispatch,
		isActive,
		onAsyncClick,
		isActiveLocal,
		onClickHandler,
		onClickEvent,
		onClickPromise,
		isActiveState,
		classProp
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(9, $$props = assign(assign({}, $$props), $$new_props));
		if ("isActive" in $$props) $$invalidate(0, isActive = $$new_props.isActive);
		if ("onAsyncClick" in $$props) $$invalidate(3, onAsyncClick = $$new_props.onAsyncClick);
		if ("isActiveLocal" in $$props) $$invalidate(4, isActiveLocal = $$new_props.isActiveLocal);
		if ("isActiveState" in $$props) $$invalidate(5, isActiveState = $$new_props.isActiveState);
		if ("classProp" in $$props) $$invalidate(1, classProp = $$new_props.classProp);
	};

	let isActiveState;
	let classProp;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*isActive, isActiveLocal*/ 17) {
			 $$invalidate(5, isActiveState = isActive === null ? isActiveLocal : isActive);
		}

		 $$invalidate(1, classProp = classnames("trust-btn", $$props.class, { isActive: isActiveState }));
	};

	$$props = exclude_internal_props($$props);
	return [isActive, classProp, onClickHandler, onAsyncClick];
}

class TrustButton extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-1xs9p24-style")) add_css$u();
		init(this, options, instance$1a, create_fragment$1a, safe_not_equal, { isActive: 0, onAsyncClick: 3 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "TrustButton",
			options,
			id: create_fragment$1a.name
		});
	}

	get isActive() {
		throw new Error("<TrustButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isActive(value) {
		throw new Error("<TrustButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get onAsyncClick() {
		throw new Error("<TrustButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set onAsyncClick(value) {
		throw new Error("<TrustButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/app/TitleSubTitle.svelte generated by Svelte v3.24.0 */

const file$1b = "src/components/app/TitleSubTitle.svelte";

function add_css$v() {
	var style = element("style");
	style.id = "svelte-1cmj5fu-style";
	style.textContent = "section.svelte-1cmj5fu{text-align:center;padding:0 3vw}h2.svelte-1cmj5fu{font-weight:400}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGl0bGVTdWJUaXRsZS5zdmVsdGUiLCJzb3VyY2VzIjpbIlRpdGxlU3ViVGl0bGUuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gICAgZXhwb3J0IGxldCB0aXRsZSA9ICdUaGUgbWFpbiB0aXRsZSB0aGF0IGV4cGxhaW5zIHRoZSBjaGFyaXR5J1xuICAgIGV4cG9ydCBsZXQgc3VidGl0bGUgPSAnQW5kIGJpZ2dlciBkZXNjcmlwdGlvbiB0aGF0IGRlc2NyaWJlcyBpbiBzaG9ydCBrZXl3b3JkcyBhIGNoYXJpdHksIHRpdGxlIGFib3ZlIGFuZCBqdXN0IG1ha2VzIHRleHQgbG9uZ2VyJ1xuPC9zY3JpcHQ+XG5cbjxzZWN0aW9uPlxuICAgIDxoMT57dGl0bGV9PC9oMT5cbiAgICA8YnI+XG4gICAgPGgyPntzdWJ0aXRsZX08L2gyPlxuPC9zZWN0aW9uPlxuXG48c3R5bGU+XG5zZWN0aW9uIHtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgcGFkZGluZzogMCAzdnc7XG59XG5cbmgyIHtcbiAgICBmb250LXdlaWdodDogNDAwO1xufTwvc3R5bGU+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBWUEsT0FBTyxlQUFDLENBQUMsQUFDTCxVQUFVLENBQUUsTUFBTSxDQUNsQixPQUFPLENBQUUsQ0FBQyxDQUFDLEdBQUcsQUFDbEIsQ0FBQyxBQUVELEVBQUUsZUFBQyxDQUFDLEFBQ0EsV0FBVyxDQUFFLEdBQUcsQUFDcEIsQ0FBQyJ9 */";
	append_dev(document.head, style);
}

function create_fragment$1b(ctx) {
	let section;
	let h1;
	let t0;
	let t1;
	let br;
	let t2;
	let h2;
	let t3;

	const block = {
		c: function create() {
			section = element("section");
			h1 = element("h1");
			t0 = text(/*title*/ ctx[0]);
			t1 = space();
			br = element("br");
			t2 = space();
			h2 = element("h2");
			t3 = text(/*subtitle*/ ctx[1]);
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			h1 = claim_element(section_nodes, "H1", {});
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, /*title*/ ctx[0]);
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(section_nodes);
			br = claim_element(section_nodes, "BR", {});
			t2 = claim_space(section_nodes);
			h2 = claim_element(section_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t3 = claim_text(h2_nodes, /*subtitle*/ ctx[1]);
			h2_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h1, file$1b, 6, 4, 234);
			add_location(br, file$1b, 7, 4, 255);
			attr_dev(h2, "class", "svelte-1cmj5fu");
			add_location(h2, file$1b, 8, 4, 264);
			attr_dev(section, "class", "svelte-1cmj5fu");
			add_location(section, file$1b, 5, 0, 220);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, h1);
			append_dev(h1, t0);
			append_dev(section, t1);
			append_dev(section, br);
			append_dev(section, t2);
			append_dev(section, h2);
			append_dev(h2, t3);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*title*/ 1) set_data_dev(t0, /*title*/ ctx[0]);
			if (dirty & /*subtitle*/ 2) set_data_dev(t3, /*subtitle*/ ctx[1]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1b.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1b($$self, $$props, $$invalidate) {
	let { title = "The main title that explains the charity" } = $$props;
	let { subtitle = "And bigger description that describes in short keywords a charity, title above and just makes text longer" } = $$props;
	const writable_props = ["title", "subtitle"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<TitleSubTitle> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("TitleSubTitle", $$slots, []);

	$$self.$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("subtitle" in $$props) $$invalidate(1, subtitle = $$props.subtitle);
	};

	$$self.$capture_state = () => ({ title, subtitle });

	$$self.$inject_state = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("subtitle" in $$props) $$invalidate(1, subtitle = $$props.subtitle);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [title, subtitle];
}

class TitleSubTitle extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-1cmj5fu-style")) add_css$v();
		init(this, options, instance$1b, create_fragment$1b, safe_not_equal, { title: 0, subtitle: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "TitleSubTitle",
			options,
			id: create_fragment$1b.name
		});
	}

	get title() {
		throw new Error("<TitleSubTitle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<TitleSubTitle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get subtitle() {
		throw new Error("<TitleSubTitle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set subtitle(value) {
		throw new Error("<TitleSubTitle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/app/ContentHolder.svelte generated by Svelte v3.24.0 */

const file$1c = "src/components/app/ContentHolder.svelte";

function create_fragment$1c(ctx) {
	let h1;
	let t0;
	let t1;
	let br0;
	let t2;
	let br1;
	let t3;
	let pre0;
	let t4;
	let t5;
	let br2;
	let t6;
	let pre1;
	let t7;

	const block = {
		c: function create() {
			h1 = element("h1");
			t0 = text("About");
			t1 = space();
			br0 = element("br");
			t2 = space();
			br1 = element("br");
			t3 = space();
			pre0 = element("pre");
			t4 = text("This is the \"about\" section which explains people the main sense of our purpose.\n    There's not much here.\n    But this section is not the least!");
			t5 = space();
			br2 = element("br");
			t6 = space();
			pre1 = element("pre");
			t7 = text("We try to make our society more kind and we do kind things for it.\n    Nevertheless, this is the \"about\" page.\n    And there's not much here.");
			this.h();
		},
		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "About");
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			br0 = claim_element(nodes, "BR", {});
			t2 = claim_space(nodes);
			br1 = claim_element(nodes, "BR", {});
			t3 = claim_space(nodes);
			pre0 = claim_element(nodes, "PRE", {});
			var pre0_nodes = children(pre0);
			t4 = claim_text(pre0_nodes, "This is the \"about\" section which explains people the main sense of our purpose.\n    There's not much here.\n    But this section is not the least!");
			pre0_nodes.forEach(detach_dev);
			t5 = claim_space(nodes);
			br2 = claim_element(nodes, "BR", {});
			t6 = claim_space(nodes);
			pre1 = claim_element(nodes, "PRE", {});
			var pre1_nodes = children(pre1);
			t7 = claim_text(pre1_nodes, "We try to make our society more kind and we do kind things for it.\n    Nevertheless, this is the \"about\" page.\n    And there's not much here.");
			pre1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", "text-center");
			add_location(h1, file$1c, 4, 0, 21);
			add_location(br0, file$1c, 5, 0, 56);
			add_location(br1, file$1c, 6, 0, 61);
			add_location(pre0, file$1c, 7, 0, 66);
			add_location(br2, file$1c, 12, 0, 230);
			add_location(pre1, file$1c, 13, 0, 235);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			append_dev(h1, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, br0, anchor);
			insert_dev(target, t2, anchor);
			insert_dev(target, br1, anchor);
			insert_dev(target, t3, anchor);
			insert_dev(target, pre0, anchor);
			append_dev(pre0, t4);
			insert_dev(target, t5, anchor);
			insert_dev(target, br2, anchor);
			insert_dev(target, t6, anchor);
			insert_dev(target, pre1, anchor);
			append_dev(pre1, t7);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(br0);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(br1);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(pre0);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(br2);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(pre1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1c.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1c($$self, $$props) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<ContentHolder> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("ContentHolder", $$slots, []);
	return [];
}

class ContentHolder extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1c, create_fragment$1c, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ContentHolder",
			options,
			id: create_fragment$1c.name
		});
	}
}

/* src/components/app/DonationButton.svelte generated by Svelte v3.24.0 */
const file$1d = "src/components/app/DonationButton.svelte";

function add_css$w() {
	var style = element("style");
	style.id = "svelte-1nsvb2j-style";
	style.textContent = ".donate-btn.svelte-1nsvb2j{position:fixed;left:0;bottom:env(safe-area-inset-bottom);display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;width:100%;font-weight:600;font-size:1.85em;line-height:1.26;color:rgba(var(--color-white));padding:20px;z-index:9;-ms-touch-action:manipulation;touch-action:manipulation;text-align:center;-webkit-transition:.3s ease-in-out;transition:.3s ease-in-out;-webkit-transform:translateY(100%);transform:translateY(100%);background-color:rgba(var(--color-success))}span.svelte-1nsvb2j{-webkit-box-flex:0;-ms-flex:none;flex:none;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;height:32px;width:32px;border-radius:50%;overflow:hidden;background-color:rgba(var(--color-white))}.donate-btn.active.svelte-1nsvb2j{-webkit-transform:none;transform:none\n}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRG9uYXRpb25CdXR0b24uc3ZlbHRlIiwic291cmNlcyI6WyJEb25hdGlvbkJ1dHRvbi5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgICBpbXBvcnQgeyBvbk1vdW50IH0gZnJvbSAnc3ZlbHRlJ1xuICAgIGltcG9ydCB7IGNsYXNzbmFtZXMgfSBmcm9tICdAdXRpbHMnXG4gICAgaW1wb3J0IEljb24gZnJvbSAnQGNvbXBvbmVudHMvSWNvbi5zdmVsdGUnXG5cbiAgICBsZXQgYWN0aXZlRG9uYXRlQnRuID0gZmFsc2VcblxuICAgIG9uTW91bnQoKCkgPT4gc2V0VGltZW91dCgoKSA9PiBhY3RpdmVEb25hdGVCdG4gPSB0cnVlLCA1MDApKVxuXG4gICAgJDogY2xhc3NQcm9wRG9uYXRlQnRuID0gY2xhc3NuYW1lcygnZG9uYXRlLWJ0bicsIHsgYWN0aXZlOiBhY3RpdmVEb25hdGVCdG4gfSlcblxuICAgIGZ1bmN0aW9uIG9uRG9uYXRlKCkge1xuICAgICAgICBhbGVydCgn0JTRj9C60YPRjiEg8J+lsCcpXG4gICAgfVxuPC9zY3JpcHQ+XG5cbjxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPXtjbGFzc1Byb3BEb25hdGVCdG59IG9uOmNsaWNrPXtvbkRvbmF0ZX0+XG4gICAgPHNwYW4+XG4gICAgICAgIDxJY29uIHR5cGU9XCJjb2luXCIgc2l6ZT1cIm1lZGl1bVwiIGlzPVwicHJpbWFyeVwiLz5cbiAgICA8L3NwYW4+XG4gICAgPHM+PC9zPlxuICAgIDxzPjwvcz5cbiAgICDQlNC+0L/QvtC80L7Qs9GC0LhcbjwvYnV0dG9uPlxuXG48c3R5bGU+XG4uZG9uYXRlLWJ0biB7XG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIGxlZnQ6IDA7XG4gICAgYm90dG9tOiBlbnYoc2FmZS1hcmVhLWluc2V0LWJvdHRvbSk7XG4gICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gICAgZGlzcGxheTogLW1zLWZsZXhib3g7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xuICAgICAgICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAtd2Via2l0LWJveC1wYWNrOiBjZW50ZXI7XG4gICAgICAgIC1tcy1mbGV4LXBhY2s6IGNlbnRlcjtcbiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XG4gICAgZm9udC1zaXplOiAxLjg1ZW07XG4gICAgbGluZS1oZWlnaHQ6IDEuMjY7XG4gICAgY29sb3I6IHJnYmEodmFyKC0tY29sb3Itd2hpdGUpKTtcbiAgICBwYWRkaW5nOiAyMHB4O1xuICAgIHotaW5kZXg6IDk7XG4gICAgLW1zLXRvdWNoLWFjdGlvbjogbWFuaXB1bGF0aW9uO1xuICAgICAgICB0b3VjaC1hY3Rpb246IG1hbmlwdWxhdGlvbjtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgLXdlYmtpdC10cmFuc2l0aW9uOiAuM3MgZWFzZS1pbi1vdXQ7XG4gICAgdHJhbnNpdGlvbjogLjNzIGVhc2UtaW4tb3V0O1xuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDEwMCUpO1xuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDEwMCUpO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEodmFyKC0tY29sb3Itc3VjY2VzcykpO1xufVxuXG5zcGFuIHtcbiAgICAtd2Via2l0LWJveC1mbGV4OiAwO1xuICAgICAgICAtbXMtZmxleDogbm9uZTtcbiAgICAgICAgICAgIGZsZXg6IG5vbmU7XG4gICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gICAgZGlzcGxheTogLW1zLWZsZXhib3g7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xuICAgICAgICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAtd2Via2l0LWJveC1wYWNrOiBjZW50ZXI7XG4gICAgICAgIC1tcy1mbGV4LXBhY2s6IGNlbnRlcjtcbiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGhlaWdodDogMzJweDtcbiAgICB3aWR0aDogMzJweDtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKHZhcigtLWNvbG9yLXdoaXRlKSk7XG59XG5cbi5kb25hdGUtYnRuLmFjdGl2ZSB7XG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IG5vbmU7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IG5vbmVcbn08L3N0eWxlPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTBCQSxXQUFXLGVBQUMsQ0FBQyxBQUNULFFBQVEsQ0FBRSxLQUFLLENBQ2YsSUFBSSxDQUFFLENBQUMsQ0FDUCxNQUFNLENBQUUsSUFBSSxzQkFBc0IsQ0FBQyxDQUNuQyxPQUFPLENBQUUsV0FBVyxDQUNwQixPQUFPLENBQUUsV0FBVyxDQUNwQixPQUFPLENBQUUsSUFBSSxDQUNiLGlCQUFpQixDQUFFLE1BQU0sQ0FDckIsY0FBYyxDQUFFLE1BQU0sQ0FDbEIsV0FBVyxDQUFFLE1BQU0sQ0FDM0IsZ0JBQWdCLENBQUUsTUFBTSxDQUNwQixhQUFhLENBQUUsTUFBTSxDQUNqQixlQUFlLENBQUUsTUFBTSxDQUMvQixLQUFLLENBQUUsSUFBSSxDQUNYLFdBQVcsQ0FBRSxHQUFHLENBQ2hCLFNBQVMsQ0FBRSxNQUFNLENBQ2pCLFdBQVcsQ0FBRSxJQUFJLENBQ2pCLEtBQUssQ0FBRSxLQUFLLElBQUksYUFBYSxDQUFDLENBQUMsQ0FDL0IsT0FBTyxDQUFFLElBQUksQ0FDYixPQUFPLENBQUUsQ0FBQyxDQUNWLGdCQUFnQixDQUFFLFlBQVksQ0FDMUIsWUFBWSxDQUFFLFlBQVksQ0FDOUIsVUFBVSxDQUFFLE1BQU0sQ0FDbEIsa0JBQWtCLENBQUUsR0FBRyxDQUFDLFdBQVcsQ0FDbkMsVUFBVSxDQUFFLEdBQUcsQ0FBQyxXQUFXLENBQzNCLGlCQUFpQixDQUFFLFdBQVcsSUFBSSxDQUFDLENBQzNCLFNBQVMsQ0FBRSxXQUFXLElBQUksQ0FBQyxDQUNuQyxnQkFBZ0IsQ0FBRSxLQUFLLElBQUksZUFBZSxDQUFDLENBQUMsQUFDaEQsQ0FBQyxBQUVELElBQUksZUFBQyxDQUFDLEFBQ0YsZ0JBQWdCLENBQUUsQ0FBQyxDQUNmLFFBQVEsQ0FBRSxJQUFJLENBQ1YsSUFBSSxDQUFFLElBQUksQ0FDbEIsT0FBTyxDQUFFLFdBQVcsQ0FDcEIsT0FBTyxDQUFFLFdBQVcsQ0FDcEIsT0FBTyxDQUFFLElBQUksQ0FDYixpQkFBaUIsQ0FBRSxNQUFNLENBQ3JCLGNBQWMsQ0FBRSxNQUFNLENBQ2xCLFdBQVcsQ0FBRSxNQUFNLENBQzNCLGdCQUFnQixDQUFFLE1BQU0sQ0FDcEIsYUFBYSxDQUFFLE1BQU0sQ0FDakIsZUFBZSxDQUFFLE1BQU0sQ0FDL0IsTUFBTSxDQUFFLElBQUksQ0FDWixLQUFLLENBQUUsSUFBSSxDQUNYLGFBQWEsQ0FBRSxHQUFHLENBQ2xCLFFBQVEsQ0FBRSxNQUFNLENBQ2hCLGdCQUFnQixDQUFFLEtBQUssSUFBSSxhQUFhLENBQUMsQ0FBQyxBQUM5QyxDQUFDLEFBRUQsV0FBVyxPQUFPLGVBQUMsQ0FBQyxBQUNoQixpQkFBaUIsQ0FBRSxJQUFJLENBQ2YsU0FBUyxDQUFFLElBQUk7QUFDM0IsQ0FBQyJ9 */";
	append_dev(document.head, style);
}

function create_fragment$1d(ctx) {
	let button;
	let span;
	let icon;
	let t0;
	let s0;
	let t1;
	let s1;
	let t2;
	let button_class_value;
	let current;
	let mounted;
	let dispose;

	icon = new Icon({
			props: {
				type: "coin",
				size: "medium",
				is: "primary"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			button = element("button");
			span = element("span");
			create_component(icon.$$.fragment);
			t0 = space();
			s0 = element("s");
			t1 = space();
			s1 = element("s");
			t2 = text("\n    Допомогти");
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", { type: true, class: true });
			var button_nodes = children(button);
			span = claim_element(button_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			claim_component(icon.$$.fragment, span_nodes);
			span_nodes.forEach(detach_dev);
			t0 = claim_space(button_nodes);
			s0 = claim_element(button_nodes, "S", {});
			children(s0).forEach(detach_dev);
			t1 = claim_space(button_nodes);
			s1 = claim_element(button_nodes, "S", {});
			children(s1).forEach(detach_dev);
			t2 = claim_text(button_nodes, "\n    Допомогти");
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "svelte-1nsvb2j");
			add_location(span, file$1d, 17, 4, 460);
			add_location(s0, file$1d, 20, 4, 538);
			add_location(s1, file$1d, 21, 4, 550);
			attr_dev(button, "type", "button");
			attr_dev(button, "class", button_class_value = "" + (null_to_empty(/*classPropDonateBtn*/ ctx[0]) + " svelte-1nsvb2j"));
			add_location(button, file$1d, 16, 0, 386);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, span);
			mount_component(icon, span, null);
			append_dev(button, t0);
			append_dev(button, s0);
			append_dev(button, t1);
			append_dev(button, s1);
			append_dev(button, t2);
			current = true;

			if (!mounted) {
				dispose = listen_dev(button, "click", onDonate, false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*classPropDonateBtn*/ 1 && button_class_value !== (button_class_value = "" + (null_to_empty(/*classPropDonateBtn*/ ctx[0]) + " svelte-1nsvb2j"))) {
				attr_dev(button, "class", button_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			destroy_component(icon);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1d.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function onDonate() {
	alert("Дякую! 🥰");
}

function instance$1d($$self, $$props, $$invalidate) {
	let activeDonateBtn = false;
	onMount(() => setTimeout(() => $$invalidate(1, activeDonateBtn = true), 500));
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<DonationButton> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("DonationButton", $$slots, []);

	$$self.$capture_state = () => ({
		onMount,
		classnames,
		Icon,
		activeDonateBtn,
		onDonate,
		classPropDonateBtn
	});

	$$self.$inject_state = $$props => {
		if ("activeDonateBtn" in $$props) $$invalidate(1, activeDonateBtn = $$props.activeDonateBtn);
		if ("classPropDonateBtn" in $$props) $$invalidate(0, classPropDonateBtn = $$props.classPropDonateBtn);
	};

	let classPropDonateBtn;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*activeDonateBtn*/ 2) {
			 $$invalidate(0, classPropDonateBtn = classnames("donate-btn", { active: activeDonateBtn }));
		}
	};

	return [classPropDonateBtn];
}

class DonationButton extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-1nsvb2j-style")) add_css$w();
		init(this, options, instance$1d, create_fragment$1d, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "DonationButton",
			options,
			id: create_fragment$1d.name
		});
	}
}

/* src/components/app/ListOfFeatures.svelte generated by Svelte v3.24.0 */

const file$1e = "src/components/app/ListOfFeatures.svelte";

function add_css$x() {
	var style = element("style");
	style.id = "svelte-us8ild-style";
	style.textContent = "ul.svelte-us8ild{list-style:disc outside none;padding:0 calc(var(--screen-padding) * 5)}li.svelte-us8ild{display:list-item}ul.svelte-us8ild,li.svelte-us8ild,h3.svelte-us8ild,p.svelte-us8ild{max-width:100%;vertical-align:middle}h3.svelte-us8ild,p.svelte-us8ild{overflow:hidden;display:inline-block;word-break:break-word;text-overflow:ellipsis}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGlzdE9mRmVhdHVyZXMuc3ZlbHRlIiwic291cmNlcyI6WyJMaXN0T2ZGZWF0dXJlcy5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgICBjb25zdCBpdGVtcyA9IFtcbiAgICAgICAge1xuICAgICAgICAgICAgdGl0bGU6ICdDb21mb3J0IGlzIHRoZSBtYWluIGZlYXR1cmUnLFxuICAgICAgICAgICAgdGV4dDogJ0p1c3QgaW1hZ2luZywgeW91IGRvIHNvbWV0aGluZyBzaW1wbGUgYW5kIHlvdSBjYW4gc2VlIHRoZSByZXN1bHQgb2YgeW91ciBzaG9ydCB3YXkuJyxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgdGl0bGU6ICdDb21mb3J0IGlzIHRoZSBtYWluIGZlYXR1cmUnLFxuICAgICAgICAgICAgdGV4dDogJ0p1c3QgaW1hZ2luZywgeW91IGRvIHNvbWV0aGluZyBzaW1wbGUgYW5kIHlvdSBjYW4gc2VlIHRoZSByZXN1bHQgb2YgeW91ciBzaG9ydCB3YXkuJyxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgdGl0bGU6ICdDb21mb3J0IGlzIHRoZSBtYWluIGZlYXR1cmUnLFxuICAgICAgICAgICAgdGV4dDogJ0p1c3QgaW1hZ2luZywgeW91IGRvIHNvbWV0aGluZyBzaW1wbGUgYW5kIHlvdSBjYW4gc2VlIHRoZSByZXN1bHQgb2YgeW91ciBzaG9ydCB3YXkuJyxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgdGl0bGU6ICdDb21mb3J0IGlzIHRoZSBtYWluIGZlYXR1cmUnLFxuICAgICAgICAgICAgdGV4dDogJ0p1c3QgaW1hZ2luZywgeW91IGRvIHNvbWV0aGluZyBzaW1wbGUgYW5kIHlvdSBjYW4gc2VlIHRoZSByZXN1bHQgb2YgeW91ciBzaG9ydCB3YXkuJyxcbiAgICAgICAgfSxcbiAgICBdXG48L3NjcmlwdD5cblxuPHVsPlxuICAgIHsjZWFjaCBpdGVtcyBhcyBpdGVtfVxuICAgICAgICA8bGk+XG4gICAgICAgICAgICA8aDM+e2l0ZW0udGl0bGV9PC9oMz5cbiAgICAgICAgICAgIDxwPntpdGVtLnRleHR9PC9wPlxuICAgICAgICAgICAgPGJyPlxuICAgICAgICA8L2xpPlxuICAgIHsvZWFjaH1cbjwvdWw+XG5cbjxzdHlsZT5cbnVsIHtcbiAgICBsaXN0LXN0eWxlOiBkaXNjIG91dHNpZGUgbm9uZTtcbiAgICBwYWRkaW5nOiAwIGNhbGModmFyKC0tc2NyZWVuLXBhZGRpbmcpICogNSk7XG4gICAgLypsaXN0LXN0eWxlLWltYWdlOiB1cmwoXCJkYXRhOmltYWdlL3N2Zyt4bWw7dXRmOCw8c3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgd2lkdGg9JzEwJyBoZWlnaHQ9JzEwJyB2aWV3Qm94PSctMSAtMSAyIDInPjxjaXJjbGUgcj0nMScgLz48L3N2Zz5cIik7Ki9cbn1cblxubGkge1xuICAgIGRpc3BsYXk6IGxpc3QtaXRlbTtcbn1cblxudWwsIGxpLCBoMywgcCB7XG4gICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG59XG5cbmgzLCBwIHtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICB3b3JkLWJyZWFrOiBicmVhay13b3JkO1xuICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xufTwvc3R5bGU+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0NBLEVBQUUsY0FBQyxDQUFDLEFBQ0EsVUFBVSxDQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUM3QixPQUFPLENBQUUsQ0FBQyxDQUFDLEtBQUssSUFBSSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFFOUMsQ0FBQyxBQUVELEVBQUUsY0FBQyxDQUFDLEFBQ0EsT0FBTyxDQUFFLFNBQVMsQUFDdEIsQ0FBQyxBQUVELGdCQUFFLENBQUUsZ0JBQUUsQ0FBRSxnQkFBRSxDQUFFLENBQUMsY0FBQyxDQUFDLEFBQ1gsU0FBUyxDQUFFLElBQUksQ0FDZixjQUFjLENBQUUsTUFBTSxBQUMxQixDQUFDLEFBRUQsZ0JBQUUsQ0FBRSxDQUFDLGNBQUMsQ0FBQyxBQUNILFFBQVEsQ0FBRSxNQUFNLENBQ2hCLE9BQU8sQ0FBRSxZQUFZLENBQ3JCLFVBQVUsQ0FBRSxVQUFVLENBQ3RCLGFBQWEsQ0FBRSxRQUFRLEFBQzNCLENBQUMifQ== */";
	append_dev(document.head, style);
}

function get_each_context$b(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (23:4) {#each items as item}
function create_each_block$b(ctx) {
	let li;
	let h3;
	let t0_value = /*item*/ ctx[1].title + "";
	let t0;
	let t1;
	let p;
	let t2_value = /*item*/ ctx[1].text + "";
	let t2;
	let t3;
	let br;
	let t4;

	const block = {
		c: function create() {
			li = element("li");
			h3 = element("h3");
			t0 = text(t0_value);
			t1 = space();
			p = element("p");
			t2 = text(t2_value);
			t3 = space();
			br = element("br");
			t4 = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			h3 = claim_element(li_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, t0_value);
			h3_nodes.forEach(detach_dev);
			t1 = claim_space(li_nodes);
			p = claim_element(li_nodes, "P", { class: true });
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, t2_value);
			p_nodes.forEach(detach_dev);
			t3 = claim_space(li_nodes);
			br = claim_element(li_nodes, "BR", {});
			t4 = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h3, "class", "svelte-us8ild");
			add_location(h3, file$1e, 24, 12, 806);
			attr_dev(p, "class", "svelte-us8ild");
			add_location(p, file$1e, 25, 12, 840);
			add_location(br, file$1e, 26, 12, 871);
			attr_dev(li, "class", "svelte-us8ild");
			add_location(li, file$1e, 23, 8, 789);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, h3);
			append_dev(h3, t0);
			append_dev(li, t1);
			append_dev(li, p);
			append_dev(p, t2);
			append_dev(li, t3);
			append_dev(li, br);
			append_dev(li, t4);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$b.name,
		type: "each",
		source: "(23:4) {#each items as item}",
		ctx
	});

	return block;
}

function create_fragment$1e(ctx) {
	let ul;
	let each_value = /*items*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$b(get_each_context$b(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(ul, "class", "svelte-us8ild");
			add_location(ul, file$1e, 21, 0, 750);
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*items*/ 1) {
				each_value = /*items*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$b(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$b(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1e.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1e($$self, $$props, $$invalidate) {
	const items = [
		{
			title: "Comfort is the main feature",
			text: "Just imaging, you do something simple and you can see the result of your short way."
		},
		{
			title: "Comfort is the main feature",
			text: "Just imaging, you do something simple and you can see the result of your short way."
		},
		{
			title: "Comfort is the main feature",
			text: "Just imaging, you do something simple and you can see the result of your short way."
		},
		{
			title: "Comfort is the main feature",
			text: "Just imaging, you do something simple and you can see the result of your short way."
		}
	];

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<ListOfFeatures> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("ListOfFeatures", $$slots, []);
	$$self.$capture_state = () => ({ items });
	return [items];
}

class ListOfFeatures extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-us8ild-style")) add_css$x();
		init(this, options, instance$1e, create_fragment$1e, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ListOfFeatures",
			options,
			id: create_fragment$1e.name
		});
	}
}

/* src/components/app/OfflineMessage.svelte generated by Svelte v3.24.0 */

const file$1f = "src/components/app/OfflineMessage.svelte";

function add_css$y() {
	var style = element("style");
	style.id = "svelte-11znwq0-style";
	style.textContent = "#offline-message{position:fixed;z-index:11;bottom:calc(env(safe-area-inset-bottom) + 100px);left:50%;padding:10px 20px;background-color:rgba(var(--theme-bg-color));border-radius:var(--border-radius-small);overflow:hidden;-webkit-transition:.2s ease-out;transition:.2s ease-out;opacity:0;pointer-events:none;-webkit-transform:translate3d(-50%, 20px, 0);transform:translate3d(-50%, 20px, 0)}#offline-message.active{opacity:1;pointer-events:auto;-webkit-transform:translate3d(-50%, 0, 0);transform:translate3d(-50%, 0, 0)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT2ZmbGluZU1lc3NhZ2Uuc3ZlbHRlIiwic291cmNlcyI6WyJPZmZsaW5lTWVzc2FnZS5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbjwvc2NyaXB0PlxuXG48c2VjdGlvbiBpZD1cIm9mZmxpbmUtbWVzc2FnZVwiPlxuICAgINCh0YLQvtGA0ZbQvdC60LAg0L7RhNGE0LvQsNC50L1cbjwvc2VjdGlvbj5cblxuPHN0eWxlPlxuOmdsb2JhbCgjb2ZmbGluZS1tZXNzYWdlKSB7XG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIHotaW5kZXg6IDExO1xuICAgIGJvdHRvbTogY2FsYyhlbnYoc2FmZS1hcmVhLWluc2V0LWJvdHRvbSkgKyAxMDBweCk7XG4gICAgbGVmdDogNTAlO1xuICAgIHBhZGRpbmc6IDEwcHggMjBweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKHZhcigtLXRoZW1lLWJnLWNvbG9yKSk7XG4gICAgYm9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cy1zbWFsbCk7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAtd2Via2l0LXRyYW5zaXRpb246IC4ycyBlYXNlLW91dDtcbiAgICB0cmFuc2l0aW9uOiAuMnMgZWFzZS1vdXQ7XG4gICAgb3BhY2l0eTogMDtcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLTUwJSwgMjBweCwgMCk7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC01MCUsIDIwcHgsIDApO1xufVxuOmdsb2JhbCgjb2ZmbGluZS1tZXNzYWdlLmFjdGl2ZSkge1xuICAgIG9wYWNpdHk6IDE7XG4gICAgcG9pbnRlci1ldmVudHM6IGF1dG87XG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC01MCUsIDAsIDApO1xuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgtNTAlLCAwLCAwKTtcbn08L3N0eWxlPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVFRLGdCQUFnQixBQUFFLENBQUMsQUFDdkIsUUFBUSxDQUFFLEtBQUssQ0FDZixPQUFPLENBQUUsRUFBRSxDQUNYLE1BQU0sQ0FBRSxLQUFLLElBQUksc0JBQXNCLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQ2pELElBQUksQ0FBRSxHQUFHLENBQ1QsT0FBTyxDQUFFLElBQUksQ0FBQyxJQUFJLENBQ2xCLGdCQUFnQixDQUFFLEtBQUssSUFBSSxnQkFBZ0IsQ0FBQyxDQUFDLENBQzdDLGFBQWEsQ0FBRSxJQUFJLHFCQUFxQixDQUFDLENBQ3pDLFFBQVEsQ0FBRSxNQUFNLENBQ2hCLGtCQUFrQixDQUFFLEdBQUcsQ0FBQyxRQUFRLENBQ2hDLFVBQVUsQ0FBRSxHQUFHLENBQUMsUUFBUSxDQUN4QixPQUFPLENBQUUsQ0FBQyxDQUNWLGNBQWMsQ0FBRSxJQUFJLENBQ3BCLGlCQUFpQixDQUFFLFlBQVksSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ3JDLFNBQVMsQ0FBRSxZQUFZLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxBQUNqRCxDQUFDLEFBQ08sdUJBQXVCLEFBQUUsQ0FBQyxBQUM5QixPQUFPLENBQUUsQ0FBQyxDQUNWLGNBQWMsQ0FBRSxJQUFJLENBQ3BCLGlCQUFpQixDQUFFLFlBQVksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ2xDLFNBQVMsQ0FBRSxZQUFZLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxBQUM5QyxDQUFDIn0= */";
	append_dev(document.head, style);
}

function create_fragment$1f(ctx) {
	let section;
	let t;

	const block = {
		c: function create() {
			section = element("section");
			t = text("Сторінка оффлайн");
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { id: true });
			var section_nodes = children(section);
			t = claim_text(section_nodes, "Сторінка оффлайн");
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(section, "id", "offline-message");
			add_location(section, file$1f, 3, 0, 20);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, t);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1f.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1f($$self, $$props) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<OfflineMessage> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("OfflineMessage", $$slots, []);
	return [];
}

class OfflineMessage extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-11znwq0-style")) add_css$y();
		init(this, options, instance$1f, create_fragment$1f, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "OfflineMessage",
			options,
			id: create_fragment$1f.name
		});
	}
}

const contextMapbox = {};

/* src/components/map/Map.svelte generated by Svelte v3.24.0 */

const { document: document_1$4 } = globals;
const file$1g = "src/components/map/Map.svelte";

function add_css$z() {
	var style = element("style");
	style.id = "svelte-eljdnw-style";
	style.textContent = "section.svelte-eljdnw{-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;-ms-flex-item-align:stretch;align-self:stretch}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFwLnN2ZWx0ZSIsInNvdXJjZXMiOlsiTWFwLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c3R5bGU+XG5zZWN0aW9uIHtcbiAgICAtd2Via2l0LWJveC1mbGV4OiAxO1xuICAgICAgICAtbXMtZmxleC1wb3NpdGl2ZTogMTtcbiAgICAgICAgICAgIGZsZXgtZ3JvdzogMTtcbiAgICAtbXMtZmxleC1pdGVtLWFsaWduOiBzdHJldGNoO1xuICAgICAgICBhbGlnbi1zZWxmOiBzdHJldGNoO1xufTwvc3R5bGU+XG5cbjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgb25Nb3VudCwgb25EZXN0cm95LCBzZXRDb250ZXh0LCBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tICdzdmVsdGUnXG4gICAgaW1wb3J0IHsgY29udGV4dE1hcGJveCB9IGZyb20gJy4vY29udGV4dCdcblxuICAgIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKClcblxuICAgIGV4cG9ydCBsZXQgY2VudGVyID0gWzMxLjE2NTYsIDQ4LjM3OTRdXG4gICAgZXhwb3J0IGxldCB6b29tID0gMy43NVxuXG4gICAgbGV0IG1hcFxuICAgIGxldCBjb250YWluZXJcblxuICAgIHNldENvbnRleHQoY29udGV4dE1hcGJveCwge1xuICAgICAgICBnZXRNYXA6ICgpID0+IG1hcCxcbiAgICAgICAgZ2V0TWFwYm94OiAoKSA9PiB3aW5kb3cubWFwYm94Z2xcbiAgICB9KVxuXG4gICAgZnVuY3Rpb24gb25DcmVhdGVNYXAoKSB7XG4gICAgICAgIG1hcCA9IG5ldyBtYXBib3hnbC5NYXAoe1xuICAgICAgICAgICAgem9vbSxcbiAgICAgICAgICAgIGNlbnRlcixcbiAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgIHN0eWxlOiAnbWFwYm94Oi8vc3R5bGVzL21hcGJveC9zdHJlZXRzLXYxMScsXG4gICAgICAgIH0pXG5cbiAgICAgICAgbWFwLm9uKCdkcmFnZW5kJywgKCkgPT4gZGlzcGF0Y2goJ3JlY2VudHJlJywgeyBtYXAsIGNlbnRlcjogbWFwLmdldENlbnRlcigpIH0pKVxuICAgICAgICBtYXAub24oJ2xvYWQnLCAoKSA9PiBkaXNwYXRjaCgncmVhZHknLCBtYXApKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZU1hcCgpIHtcbiAgICAgICAgY29uc3Qgc2NyaXB0VGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JylcbiAgICAgICAgc2NyaXB0VGFnLnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0J1xuICAgICAgICBzY3JpcHRUYWcuc3JjID0gJ2h0dHBzOi8vYXBpLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL3YxLjcuMC9tYXBib3gtZ2wuanMnXG5cbiAgICAgICAgY29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKVxuICAgICAgICBsaW5rLnJlbCA9ICdzdHlsZXNoZWV0J1xuICAgICAgICBsaW5rLmhyZWYgPSAnaHR0cHM6Ly9hcGkubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvdjEuNy4wL21hcGJveC1nbC5jc3MnXG5cbiAgICAgICAgc2NyaXB0VGFnLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRva2VuID0gJ3BrLmV5SjFJam9pWW5WaWJHbHJJaXdpWVNJNkltTnJOWHB4ZHpneGJUQXdObmN6Ykd4d2VHMHdjVFYzY2pBaWZRLnJ0MXBlTGpDUUhaVWtyTTRBV3o1TXcnXG4gICAgICAgICAgICBtYXBib3hnbC5hY2Nlc3NUb2tlbiA9IHRva2VuXG5cbiAgICAgICAgICAgIGxpbmsub25sb2FkID0gb25DcmVhdGVNYXBcblxuICAgICAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChsaW5rKVxuICAgICAgICB9XG5cbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHRUYWcpXG4gICAgfVxuXG4gICAgb25Nb3VudCgoKSA9PiB7XG4gICAgICAgIGlmICgnbWFwYm94Z2wnIGluIHdpbmRvdykge1xuICAgICAgICAgICAgb25DcmVhdGVNYXAoKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3JlYXRlTWFwKClcbiAgICAgICAgfVxuICAgIH0pXG5cbiAgICBvbkRlc3Ryb3koKCkgPT4ge1xuICAgICAgICBtYXAgJiYgbWFwLnJlbW92ZSgpXG4gICAgfSlcbjwvc2NyaXB0PlxuXG48c2VjdGlvbiBiaW5kOnRoaXM9e2NvbnRhaW5lcn0+XG4gICAgeyNpZiBtYXB9XG4gICAgICAgIDxzbG90Pjwvc2xvdD5cbiAgICB7L2lmfVxuPC9zZWN0aW9uPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sY0FBQyxDQUFDLEFBQ0wsZ0JBQWdCLENBQUUsQ0FBQyxDQUNmLGlCQUFpQixDQUFFLENBQUMsQ0FDaEIsU0FBUyxDQUFFLENBQUMsQ0FDcEIsbUJBQW1CLENBQUUsT0FBTyxDQUN4QixVQUFVLENBQUUsT0FBTyxBQUMzQixDQUFDIn0= */";
	append_dev(document_1$4.head, style);
}

// (74:4) {#if map}
function create_if_block$o(ctx) {
	let current;
	const default_slot_template = /*$$slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		l: function claim(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 16) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[4], dirty, null, null);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$o.name,
		type: "if",
		source: "(74:4) {#if map}",
		ctx
	});

	return block;
}

function create_fragment$1g(ctx) {
	let section;
	let current;
	let if_block = /*map*/ ctx[0] && create_if_block$o(ctx);

	const block = {
		c: function create() {
			section = element("section");
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			if (if_block) if_block.l(section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(section, "class", "svelte-eljdnw");
			add_location(section, file$1g, 72, 0, 1833);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			if (if_block) if_block.m(section, null);
			/*section_binding*/ ctx[6](section);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*map*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*map*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$o(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(section, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			if (if_block) if_block.d();
			/*section_binding*/ ctx[6](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1g.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1g($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { center = [31.1656, 48.3794] } = $$props;
	let { zoom = 3.75 } = $$props;
	let map;
	let container;

	setContext(contextMapbox, {
		getMap: () => map,
		getMapbox: () => window.mapboxgl
	});

	function onCreateMap() {
		$$invalidate(0, map = new mapboxgl.Map({
				zoom,
				center,
				container,
				style: "mapbox://styles/mapbox/streets-v11"
			}));

		map.on("dragend", () => dispatch("recentre", { map, center: map.getCenter() }));
		map.on("load", () => dispatch("ready", map));
	}

	function createMap() {
		const scriptTag = document.createElement("script");
		scriptTag.type = "text/javascript";
		scriptTag.src = "https://api.mapbox.com/mapbox-gl-js/v1.7.0/mapbox-gl.js";
		const link = document.createElement("link");
		link.rel = "stylesheet";
		link.href = "https://api.mapbox.com/mapbox-gl-js/v1.7.0/mapbox-gl.css";

		scriptTag.onload = () => {
			const token = "pk.eyJ1IjoiYnVibGlrIiwiYSI6ImNrNXpxdzgxbTAwNnczbGxweG0wcTV3cjAifQ.rt1peLjCQHZUkrM4AWz5Mw";
			mapboxgl.accessToken = token;
			link.onload = onCreateMap;
			document.head.appendChild(link);
		};

		document.body.appendChild(scriptTag);
	}

	onMount(() => {
		if ("mapboxgl" in window) {
			onCreateMap();
		} else {
			createMap();
		}
	});

	onDestroy(() => {
		map && map.remove();
	});

	const writable_props = ["center", "zoom"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Map> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Map", $$slots, ['default']);

	function section_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			container = $$value;
			$$invalidate(1, container);
		});
	}

	$$self.$set = $$props => {
		if ("center" in $$props) $$invalidate(2, center = $$props.center);
		if ("zoom" in $$props) $$invalidate(3, zoom = $$props.zoom);
		if ("$$scope" in $$props) $$invalidate(4, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		onMount,
		onDestroy,
		setContext,
		createEventDispatcher,
		contextMapbox,
		dispatch,
		center,
		zoom,
		map,
		container,
		onCreateMap,
		createMap
	});

	$$self.$inject_state = $$props => {
		if ("center" in $$props) $$invalidate(2, center = $$props.center);
		if ("zoom" in $$props) $$invalidate(3, zoom = $$props.zoom);
		if ("map" in $$props) $$invalidate(0, map = $$props.map);
		if ("container" in $$props) $$invalidate(1, container = $$props.container);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [map, container, center, zoom, $$scope, $$slots, section_binding];
}

class Map$2 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document_1$4.getElementById("svelte-eljdnw-style")) add_css$z();
		init(this, options, instance$1g, create_fragment$1g, safe_not_equal, { center: 2, zoom: 3 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Map",
			options,
			id: create_fragment$1g.name
		});
	}

	get center() {
		throw new Error("<Map>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set center(value) {
		throw new Error("<Map>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get zoom() {
		throw new Error("<Map>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set zoom(value) {
		throw new Error("<Map>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/map/MapMarker.svelte generated by Svelte v3.24.0 */

function create_fragment$1h(ctx) {
	const block = {
		c: noop,
		l: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1h.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1h($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	const { getMap, getMapbox } = getContext(contextMapbox);
	const map = getMap();
	const mapbox = getMapbox();
	let { lng } = $$props;
	let { lat } = $$props;

	// export let label = 'label'
	// const popup = new mapbox.Popup({ offset: 25 }).setText(label)
	const markerEl = document.createElement("div");

	markerEl.style.fontSize = "50px";
	markerEl.style.cursor = "pointer";
	markerEl.innerHTML = "📍";

	const marker = new mapbox.Marker(markerEl, { offset: [0, -25] }).setLngLat([lng, lat]).// .setPopup(popup)
	addTo(map);

	markerEl.addEventListener("click", dispatch.bind(null, "click"));
	const writable_props = ["lng", "lat"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<MapMarker> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("MapMarker", $$slots, []);

	$$self.$set = $$props => {
		if ("lng" in $$props) $$invalidate(0, lng = $$props.lng);
		if ("lat" in $$props) $$invalidate(1, lat = $$props.lat);
	};

	$$self.$capture_state = () => ({
		getContext,
		createEventDispatcher,
		contextMapbox,
		dispatch,
		getMap,
		getMapbox,
		map,
		mapbox,
		lng,
		lat,
		markerEl,
		marker
	});

	$$self.$inject_state = $$props => {
		if ("lng" in $$props) $$invalidate(0, lng = $$props.lng);
		if ("lat" in $$props) $$invalidate(1, lat = $$props.lat);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [lng, lat];
}

class MapMarker extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1h, create_fragment$1h, safe_not_equal, { lng: 0, lat: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "MapMarker",
			options,
			id: create_fragment$1h.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*lng*/ ctx[0] === undefined && !("lng" in props)) {
			console.warn("<MapMarker> was created without expected prop 'lng'");
		}

		if (/*lat*/ ctx[1] === undefined && !("lat" in props)) {
			console.warn("<MapMarker> was created without expected prop 'lat'");
		}
	}

	get lng() {
		throw new Error("<MapMarker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set lng(value) {
		throw new Error("<MapMarker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get lat() {
		throw new Error("<MapMarker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set lat(value) {
		throw new Error("<MapMarker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/comments/Comment.svelte generated by Svelte v3.24.0 */
const file$1h = "src/components/comments/Comment.svelte";

// (25:16) <section slot="box" class="flex full-width full-height" style="height: 100vw">
function create_box_slot$2(ctx) {
	let section;
	let div;
	let avatar;
	let current;

	avatar = new Avatar({
			props: {
				src: /*src*/ ctx[0],
				alt: /*title*/ ctx[2]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			section = element("section");
			div = element("div");
			create_component(avatar.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { slot: true, class: true, style: true });
			var section_nodes = children(section);
			div = claim_element(section_nodes, "DIV", { class: true, style: true });
			var div_nodes = children(div);
			claim_component(avatar.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "flex flex-self-stretch flex-1 overflow-hidden flex-justify-stretch");
			set_style(div, "padding", "var(--screen-padding) 0");
			add_location(div, file$1h, 25, 20, 870);
			attr_dev(section, "slot", "box");
			attr_dev(section, "class", "flex full-width full-height");
			set_style(section, "height", "100vw");
			add_location(section, file$1h, 24, 16, 771);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, div);
			mount_component(avatar, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const avatar_changes = {};
			if (dirty & /*src*/ 1) avatar_changes.src = /*src*/ ctx[0];
			if (dirty & /*title*/ 4) avatar_changes.alt = /*title*/ ctx[2];
			avatar.$set(avatar_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(avatar.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(avatar.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			destroy_component(avatar);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_box_slot$2.name,
		type: "slot",
		source: "(25:16) <section slot=\\\"box\\\" class=\\\"flex full-width full-height\\\" style=\\\"height: 100vw\\\">",
		ctx
	});

	return block;
}

// (23:12) <FancyBox>
function create_default_slot_1$4(ctx) {
	let avatar;
	let t;
	let current;

	avatar = new Avatar({
			props: {
				src: /*src*/ ctx[0],
				alt: /*title*/ ctx[2],
				size: "medium"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(avatar.$$.fragment);
			t = space();
		},
		l: function claim(nodes) {
			claim_component(avatar.$$.fragment, nodes);
			t = claim_space(nodes);
		},
		m: function mount(target, anchor) {
			mount_component(avatar, target, anchor);
			insert_dev(target, t, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const avatar_changes = {};
			if (dirty & /*src*/ 1) avatar_changes.src = /*src*/ ctx[0];
			if (dirty & /*title*/ 4) avatar_changes.alt = /*title*/ ctx[2];
			avatar.$set(avatar_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(avatar.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(avatar.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(avatar, detaching);
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$4.name,
		type: "slot",
		source: "(23:12) <FancyBox>",
		ctx
	});

	return block;
}

// (32:12) {#if checked}
function create_if_block_3$3(ctx) {
	let div1;
	let icon0;
	let t;
	let div0;
	let icon1;
	let current;

	icon0 = new Icon({
			props: { type: "polygon", is: "info" },
			$$inline: true
		});

	icon1 = new Icon({
			props: { type: "check-flag", is: "light" },
			$$inline: true
		});

	const block = {
		c: function create() {
			div1 = element("div");
			create_component(icon0.$$.fragment);
			t = space();
			div0 = element("div");
			create_component(icon1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true, style: true });
			var div1_nodes = children(div1);
			claim_component(icon0.$$.fragment, div1_nodes);
			t = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true, style: true });
			var div0_nodes = children(div0);
			claim_component(icon1.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "absolute-center flex");
			set_style(div0, "width", "10px");
			set_style(div0, "height", "10px");
			add_location(div0, file$1h, 34, 16, 1334);
			attr_dev(div1, "class", "absolute flex");
			set_style(div1, "top", "-1px");
			set_style(div1, "right", "-1px");
			set_style(div1, "width", "20px");
			set_style(div1, "height", "20px");
			set_style(div1, "overflow", "hidden");
			add_location(div1, file$1h, 32, 12, 1165);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			mount_component(icon0, div1, null);
			append_dev(div1, t);
			append_dev(div1, div0);
			mount_component(icon1, div0, null);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon0.$$.fragment, local);
			transition_in(icon1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon0.$$.fragment, local);
			transition_out(icon1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(icon0);
			destroy_component(icon1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3$3.name,
		type: "if",
		source: "(32:12) {#if checked}",
		ctx
	});

	return block;
}

// (51:12) {:else}
function create_else_block_2$1(ctx) {
	let div;
	let loader;
	let current;
	loader = new Loader({ props: { type: "h3" }, $$inline: true });

	const block = {
		c: function create() {
			div = element("div");
			create_component(loader.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { style: true });
			var div_nodes = children(div);
			claim_component(loader.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(div, "width", "60%");
			add_location(div, file$1h, 51, 16, 1811);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(loader, div, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(loader.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(loader.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(loader);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_2$1.name,
		type: "else",
		source: "(51:12) {:else}",
		ctx
	});

	return block;
}

// (49:12) {#if title !== null}
function create_if_block_2$6(ctx) {
	let h3;
	let t;

	const block = {
		c: function create() {
			h3 = element("h3");
			t = text(/*title*/ ctx[2]);
			this.h();
		},
		l: function claim(nodes) {
			h3 = claim_element(nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t = claim_text(h3_nodes, /*title*/ ctx[2]);
			h3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h3, "class", "text-ellipsis font-w-500");
			add_location(h3, file$1h, 49, 16, 1723);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h3, anchor);
			append_dev(h3, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data_dev(t, /*title*/ ctx[2]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$6.name,
		type: "if",
		source: "(49:12) {#if title !== null}",
		ctx
	});

	return block;
}

// (58:22)                       [No comment]                 
function fallback_block$9(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("[No comment]");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "[No comment]");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block$9.name,
		type: "fallback",
		source: "(58:22)                       [No comment]                 ",
		ctx
	});

	return block;
}

// (76:20) {:else}
function create_else_block_1$3(ctx) {
	let div;
	let loader;
	let current;
	loader = new Loader({ props: { type: "h4" }, $$inline: true });

	const block = {
		c: function create() {
			div = element("div");
			create_component(loader.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { style: true });
			var div_nodes = children(div);
			claim_component(loader.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(div, "width", "80%");
			add_location(div, file$1h, 76, 24, 2688);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(loader, div, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(loader.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(loader.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(loader);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1$3.name,
		type: "else",
		source: "(76:20) {:else}",
		ctx
	});

	return block;
}

// (67:20) {#if date !== null}
function create_if_block_1$g(ctx) {
	let span0;
	let t0;
	let t1;
	let s0;
	let t2;
	let s1;
	let t3;
	let s2;
	let t4;
	let s3;
	let t5;
	let span1;
	let t6;
	let t7;
	let s4;
	let t8;
	let s5;

	const block = {
		c: function create() {
			span0 = element("span");
			t0 = text(/*date*/ ctx[1]);
			t1 = space();
			s0 = element("s");
			t2 = space();
			s1 = element("s");
			t3 = space();
			s2 = element("s");
			t4 = space();
			s3 = element("s");
			t5 = space();
			span1 = element("span");
			t6 = text("Відповісти");
			t7 = space();
			s4 = element("s");
			t8 = space();
			s5 = element("s");
			this.h();
		},
		l: function claim(nodes) {
			span0 = claim_element(nodes, "SPAN", { class: true, style: true });
			var span0_nodes = children(span0);
			t0 = claim_text(span0_nodes, /*date*/ ctx[1]);
			span0_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			s0 = claim_element(nodes, "S", {});
			children(s0).forEach(detach_dev);
			t2 = claim_space(nodes);
			s1 = claim_element(nodes, "S", {});
			children(s1).forEach(detach_dev);
			t3 = claim_space(nodes);
			s2 = claim_element(nodes, "S", {});
			children(s2).forEach(detach_dev);
			t4 = claim_space(nodes);
			s3 = claim_element(nodes, "S", {});
			children(s3).forEach(detach_dev);
			t5 = claim_space(nodes);
			span1 = claim_element(nodes, "SPAN", { class: true, style: true });
			var span1_nodes = children(span1);
			t6 = claim_text(span1_nodes, "Відповісти");
			span1_nodes.forEach(detach_dev);
			t7 = claim_space(nodes);
			s4 = claim_element(nodes, "S", {});
			children(s4).forEach(detach_dev);
			t8 = claim_space(nodes);
			s5 = claim_element(nodes, "S", {});
			children(s5).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span0, "class", "h4");
			set_style(span0, "opacity", ".3");
			add_location(span0, file$1h, 67, 24, 2312);
			add_location(s0, file$1h, 68, 24, 2389);
			add_location(s1, file$1h, 69, 24, 2421);
			add_location(s2, file$1h, 70, 24, 2453);
			add_location(s3, file$1h, 71, 24, 2485);
			attr_dev(span1, "class", "h4");
			set_style(span1, "opacity", ".7");
			add_location(span1, file$1h, 72, 24, 2517);
			add_location(s4, file$1h, 73, 24, 2596);
			add_location(s5, file$1h, 74, 24, 2628);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span0, anchor);
			append_dev(span0, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, s0, anchor);
			insert_dev(target, t2, anchor);
			insert_dev(target, s1, anchor);
			insert_dev(target, t3, anchor);
			insert_dev(target, s2, anchor);
			insert_dev(target, t4, anchor);
			insert_dev(target, s3, anchor);
			insert_dev(target, t5, anchor);
			insert_dev(target, span1, anchor);
			append_dev(span1, t6);
			insert_dev(target, t7, anchor);
			insert_dev(target, s4, anchor);
			insert_dev(target, t8, anchor);
			insert_dev(target, s5, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*date*/ 2) set_data_dev(t0, /*date*/ ctx[1]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(span0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(s0);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(s1);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(s2);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(s3);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(span1);
			if (detaching) detach_dev(t7);
			if (detaching) detach_dev(s4);
			if (detaching) detach_dev(t8);
			if (detaching) detach_dev(s5);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$g.name,
		type: "if",
		source: "(67:20) {#if date !== null}",
		ctx
	});

	return block;
}

// (88:20) {:else}
function create_else_block$9(ctx) {
	let span1;
	let span0;
	let t0;
	let t1;
	let loader;
	let current;

	loader = new Loader({
			props: { type: "h4", absolute: true },
			$$inline: true
		});

	const block = {
		c: function create() {
			span1 = element("span");
			span0 = element("span");
			t0 = text("199");
			t1 = space();
			create_component(loader.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			span1 = claim_element(nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			span0 = claim_element(span1_nodes, "SPAN", { style: true });
			var span0_nodes = children(span0);
			t0 = claim_text(span0_nodes, "199");
			span0_nodes.forEach(detach_dev);
			t1 = claim_space(span1_nodes);
			claim_component(loader.$$.fragment, span1_nodes);
			span1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(span0, "visibility", "hidden");
			add_location(span0, file$1h, 89, 28, 3313);
			attr_dev(span1, "class", "h4 relative flex-self-start");
			add_location(span1, file$1h, 88, 24, 3242);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span1, anchor);
			append_dev(span1, span0);
			append_dev(span0, t0);
			append_dev(span1, t1);
			mount_component(loader, span1, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(loader.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(loader.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span1);
			destroy_component(loader);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$9.name,
		type: "else",
		source: "(88:20) {:else}",
		ctx
	});

	return block;
}

// (86:20) {#if amount !== null}
function create_if_block$p(ctx) {
	let h4;
	let t;

	const block = {
		c: function create() {
			h4 = element("h4");
			t = text(/*amount*/ ctx[3]);
			this.h();
		},
		l: function claim(nodes) {
			h4 = claim_element(nodes, "H4", {});
			var h4_nodes = children(h4);
			t = claim_text(h4_nodes, /*amount*/ ctx[3]);
			h4_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h4, file$1h, 86, 24, 3170);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h4, anchor);
			append_dev(h4, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*amount*/ 8) set_data_dev(t, /*amount*/ ctx[3]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h4);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$p.name,
		type: "if",
		source: "(86:20) {#if amount !== null}",
		ctx
	});

	return block;
}

// (19:0) <Card class={classProp}>
function create_default_slot$K(ctx) {
	let section;
	let div0;
	let fancybox;
	let t0;
	let t1;
	let s0;
	let t2;
	let s1;
	let t3;
	let s2;
	let t4;
	let s3;
	let t5;
	let div2;
	let current_block_type_index;
	let if_block1;
	let t6;
	let br0;
	let t7;
	let pre;
	let t8;
	let br1;
	let t9;
	let div1;
	let p;
	let current_block_type_index_1;
	let if_block2;
	let t10;
	let span1;
	let span0;
	let icon;
	let span0_style_value;
	let t11;
	let s4;
	let t12;
	let s5;
	let t13;
	let current_block_type_index_2;
	let if_block3;
	let current;

	fancybox = new FancyBox({
			props: {
				$$slots: {
					default: [create_default_slot_1$4],
					box: [create_box_slot$2]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	let if_block0 = /*checked*/ ctx[4] && create_if_block_3$3(ctx);
	const if_block_creators = [create_if_block_2$6, create_else_block_2$1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*title*/ ctx[2] !== null) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	br0 = new Br({ props: { size: "5" }, $$inline: true });
	const default_slot_template = /*$$slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
	const default_slot_or_fallback = default_slot || fallback_block$9(ctx);
	br1 = new Br({ props: { size: "10" }, $$inline: true });
	const if_block_creators_1 = [create_if_block_1$g, create_else_block_1$3];
	const if_blocks_1 = [];

	function select_block_type_1(ctx, dirty) {
		if (/*date*/ ctx[1] !== null) return 0;
		return 1;
	}

	current_block_type_index_1 = select_block_type_1(ctx);
	if_block2 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);

	icon = new Icon({
			props: {
				type: "heart",
				is: "danger",
				size: "small"
			},
			$$inline: true
		});

	const if_block_creators_2 = [create_if_block$p, create_else_block$9];
	const if_blocks_2 = [];

	function select_block_type_2(ctx, dirty) {
		if (/*amount*/ ctx[3] !== null) return 0;
		return 1;
	}

	current_block_type_index_2 = select_block_type_2(ctx);
	if_block3 = if_blocks_2[current_block_type_index_2] = if_block_creators_2[current_block_type_index_2](ctx);

	const block = {
		c: function create() {
			section = element("section");
			div0 = element("div");
			create_component(fancybox.$$.fragment);
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			s0 = element("s");
			t2 = space();
			s1 = element("s");
			t3 = space();
			s2 = element("s");
			t4 = space();
			s3 = element("s");
			t5 = space();
			div2 = element("div");
			if_block1.c();
			t6 = space();
			create_component(br0.$$.fragment);
			t7 = space();
			pre = element("pre");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			t8 = space();
			create_component(br1.$$.fragment);
			t9 = space();
			div1 = element("div");
			p = element("p");
			if_block2.c();
			t10 = space();
			span1 = element("span");
			span0 = element("span");
			create_component(icon.$$.fragment);
			t11 = space();
			s4 = element("s");
			t12 = space();
			s5 = element("s");
			t13 = space();
			if_block3.c();
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true, style: true });
			var section_nodes = children(section);
			div0 = claim_element(section_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(fancybox.$$.fragment, div0_nodes);
			t0 = claim_space(div0_nodes);
			if (if_block0) if_block0.l(div0_nodes);
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(section_nodes);
			s0 = claim_element(section_nodes, "S", {});
			children(s0).forEach(detach_dev);
			t2 = claim_space(section_nodes);
			s1 = claim_element(section_nodes, "S", {});
			children(s1).forEach(detach_dev);
			t3 = claim_space(section_nodes);
			s2 = claim_element(section_nodes, "S", {});
			children(s2).forEach(detach_dev);
			t4 = claim_space(section_nodes);
			s3 = claim_element(section_nodes, "S", {});
			children(s3).forEach(detach_dev);
			t5 = claim_space(section_nodes);
			div2 = claim_element(section_nodes, "DIV", { class: true, style: true });
			var div2_nodes = children(div2);
			if_block1.l(div2_nodes);
			t6 = claim_space(div2_nodes);
			claim_component(br0.$$.fragment, div2_nodes);
			t7 = claim_space(div2_nodes);
			pre = claim_element(div2_nodes, "PRE", { class: true, style: true });
			var pre_nodes = children(pre);
			if (default_slot_or_fallback) default_slot_or_fallback.l(pre_nodes);
			pre_nodes.forEach(detach_dev);
			t8 = claim_space(div2_nodes);
			claim_component(br1.$$.fragment, div2_nodes);
			t9 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			p = claim_element(div1_nodes, "P", { class: true });
			var p_nodes = children(p);
			if_block2.l(p_nodes);
			p_nodes.forEach(detach_dev);
			t10 = claim_space(div1_nodes);
			span1 = claim_element(div1_nodes, "SPAN", { class: true, style: true });
			var span1_nodes = children(span1);
			span0 = claim_element(span1_nodes, "SPAN", { style: true });
			var span0_nodes = children(span0);
			claim_component(icon.$$.fragment, span0_nodes);
			span0_nodes.forEach(detach_dev);
			t11 = claim_space(span1_nodes);
			s4 = claim_element(span1_nodes, "S", {});
			children(s4).forEach(detach_dev);
			t12 = claim_space(span1_nodes);
			s5 = claim_element(span1_nodes, "S", {});
			children(s5).forEach(detach_dev);
			t13 = claim_space(span1_nodes);
			if_block3.l(span1_nodes);
			span1_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "flex relative");
			add_location(div0, file$1h, 21, 8, 642);
			add_location(s0, file$1h, 41, 8, 1545);
			add_location(s1, file$1h, 42, 8, 1561);
			add_location(s2, file$1h, 43, 8, 1577);
			add_location(s3, file$1h, 44, 8, 1593);
			attr_dev(pre, "class", "h4 font-w-300");
			set_style(pre, "line-height", "1.46");
			add_location(pre, file$1h, 56, 12, 1921);
			attr_dev(p, "class", "flex flex-align-center flex-justify-between");
			add_location(p, file$1h, 65, 16, 2192);
			attr_dev(span0, "style", span0_style_value = `opacity: ${/*amount*/ ctx[3] > 2 ? 1 : 0.5}`);
			add_location(span0, file$1h, 80, 20, 2901);
			add_location(s4, file$1h, 83, 20, 3068);
			add_location(s5, file$1h, 84, 20, 3096);
			attr_dev(span1, "class", "h5 flex flex-align-center font-secondary");
			set_style(span1, "min-width", "4em");
			add_location(span1, file$1h, 79, 16, 2802);
			attr_dev(div1, "class", "flex flex-align-center flex-justify-between");
			add_location(div1, file$1h, 64, 12, 2118);
			attr_dev(div2, "class", "flex flex-column flex-1");
			set_style(div2, "overflow", "hidden");
			add_location(div2, file$1h, 46, 8, 1610);
			attr_dev(section, "class", "comment flex flex-align-start");
			set_style(section, "padding", "20px");
			add_location(section, file$1h, 19, 4, 563);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, div0);
			mount_component(fancybox, div0, null);
			append_dev(div0, t0);
			if (if_block0) if_block0.m(div0, null);
			append_dev(section, t1);
			append_dev(section, s0);
			append_dev(section, t2);
			append_dev(section, s1);
			append_dev(section, t3);
			append_dev(section, s2);
			append_dev(section, t4);
			append_dev(section, s3);
			append_dev(section, t5);
			append_dev(section, div2);
			if_blocks[current_block_type_index].m(div2, null);
			append_dev(div2, t6);
			mount_component(br0, div2, null);
			append_dev(div2, t7);
			append_dev(div2, pre);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(pre, null);
			}

			append_dev(div2, t8);
			mount_component(br1, div2, null);
			append_dev(div2, t9);
			append_dev(div2, div1);
			append_dev(div1, p);
			if_blocks_1[current_block_type_index_1].m(p, null);
			append_dev(div1, t10);
			append_dev(div1, span1);
			append_dev(span1, span0);
			mount_component(icon, span0, null);
			append_dev(span1, t11);
			append_dev(span1, s4);
			append_dev(span1, t12);
			append_dev(span1, s5);
			append_dev(span1, t13);
			if_blocks_2[current_block_type_index_2].m(span1, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const fancybox_changes = {};

			if (dirty & /*$$scope, src, title*/ 133) {
				fancybox_changes.$$scope = { dirty, ctx };
			}

			fancybox.$set(fancybox_changes);

			if (/*checked*/ ctx[4]) {
				if (if_block0) {
					if (dirty & /*checked*/ 16) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_3$3(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div0, null);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block1 = if_blocks[current_block_type_index];

				if (!if_block1) {
					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block1.c();
				}

				transition_in(if_block1, 1);
				if_block1.m(div2, t6);
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 128) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[7], dirty, null, null);
				}
			}

			let previous_block_index_1 = current_block_type_index_1;
			current_block_type_index_1 = select_block_type_1(ctx);

			if (current_block_type_index_1 === previous_block_index_1) {
				if_blocks_1[current_block_type_index_1].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
					if_blocks_1[previous_block_index_1] = null;
				});

				check_outros();
				if_block2 = if_blocks_1[current_block_type_index_1];

				if (!if_block2) {
					if_block2 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
					if_block2.c();
				}

				transition_in(if_block2, 1);
				if_block2.m(p, null);
			}

			if (!current || dirty & /*amount*/ 8 && span0_style_value !== (span0_style_value = `opacity: ${/*amount*/ ctx[3] > 2 ? 1 : 0.5}`)) {
				attr_dev(span0, "style", span0_style_value);
			}

			let previous_block_index_2 = current_block_type_index_2;
			current_block_type_index_2 = select_block_type_2(ctx);

			if (current_block_type_index_2 === previous_block_index_2) {
				if_blocks_2[current_block_type_index_2].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks_2[previous_block_index_2], 1, 1, () => {
					if_blocks_2[previous_block_index_2] = null;
				});

				check_outros();
				if_block3 = if_blocks_2[current_block_type_index_2];

				if (!if_block3) {
					if_block3 = if_blocks_2[current_block_type_index_2] = if_block_creators_2[current_block_type_index_2](ctx);
					if_block3.c();
				}

				transition_in(if_block3, 1);
				if_block3.m(span1, null);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(fancybox.$$.fragment, local);
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(br0.$$.fragment, local);
			transition_in(default_slot_or_fallback, local);
			transition_in(br1.$$.fragment, local);
			transition_in(if_block2);
			transition_in(icon.$$.fragment, local);
			transition_in(if_block3);
			current = true;
		},
		o: function outro(local) {
			transition_out(fancybox.$$.fragment, local);
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(br0.$$.fragment, local);
			transition_out(default_slot_or_fallback, local);
			transition_out(br1.$$.fragment, local);
			transition_out(if_block2);
			transition_out(icon.$$.fragment, local);
			transition_out(if_block3);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			destroy_component(fancybox);
			if (if_block0) if_block0.d();
			if_blocks[current_block_type_index].d();
			destroy_component(br0);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			destroy_component(br1);
			if_blocks_1[current_block_type_index_1].d();
			destroy_component(icon);
			if_blocks_2[current_block_type_index_2].d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$K.name,
		type: "slot",
		source: "(19:0) <Card class={classProp}>",
		ctx
	});

	return block;
}

function create_fragment$1i(ctx) {
	let card;
	let current;

	card = new Card({
			props: {
				class: /*classProp*/ ctx[5],
				$$slots: { default: [create_default_slot$K] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(card.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(card.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(card, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const card_changes = {};
			if (dirty & /*classProp*/ 32) card_changes.class = /*classProp*/ ctx[5];

			if (dirty & /*$$scope, amount, date, title, checked, src*/ 159) {
				card_changes.$$scope = { dirty, ctx };
			}

			card.$set(card_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(card, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1i.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1i($$self, $$props, $$invalidate) {
	let { src = null } = $$props;
	let { date = null } = $$props;
	let { title = null } = $$props;
	let { amount = null } = $$props;
	let { checked = null } = $$props;
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Comment", $$slots, ['default']);

	$$self.$set = $$new_props => {
		$$invalidate(8, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("src" in $$new_props) $$invalidate(0, src = $$new_props.src);
		if ("date" in $$new_props) $$invalidate(1, date = $$new_props.date);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("amount" in $$new_props) $$invalidate(3, amount = $$new_props.amount);
		if ("checked" in $$new_props) $$invalidate(4, checked = $$new_props.checked);
		if ("$$scope" in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		classnames,
		Br,
		Icon,
		Card,
		Avatar,
		FancyBox,
		Loader,
		src,
		date,
		title,
		amount,
		checked,
		classProp
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(8, $$props = assign(assign({}, $$props), $$new_props));
		if ("src" in $$props) $$invalidate(0, src = $$new_props.src);
		if ("date" in $$props) $$invalidate(1, date = $$new_props.date);
		if ("title" in $$props) $$invalidate(2, title = $$new_props.title);
		if ("amount" in $$props) $$invalidate(3, amount = $$new_props.amount);
		if ("checked" in $$props) $$invalidate(4, checked = $$new_props.checked);
		if ("classProp" in $$props) $$invalidate(5, classProp = $$new_props.classProp);
	};

	let classProp;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		 $$invalidate(5, classProp = classnames($$props.class));
	};

	$$props = exclude_internal_props($$props);
	return [src, date, title, amount, checked, classProp, $$slots, $$scope];
}

class Comment extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1i, create_fragment$1i, safe_not_equal, {
			src: 0,
			date: 1,
			title: 2,
			amount: 3,
			checked: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Comment",
			options,
			id: create_fragment$1i.name
		});
	}

	get src() {
		throw new Error("<Comment>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set src(value) {
		throw new Error("<Comment>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get date() {
		throw new Error("<Comment>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set date(value) {
		throw new Error("<Comment>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<Comment>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Comment>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get amount() {
		throw new Error("<Comment>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set amount(value) {
		throw new Error("<Comment>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get checked() {
		throw new Error("<Comment>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set checked(value) {
		throw new Error("<Comment>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/comments/Comments.svelte generated by Svelte v3.24.0 */
const file$1i = "src/components/comments/Comments.svelte";

function add_css$A() {
	var style = element("style");
	style.id = "svelte-gsvbhk-style";
	style.textContent = ".comments.svelte-gsvbhk.svelte-gsvbhk{width:100%;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;display:-webkit-box;display:-ms-flexbox;display:flex;overflow-y:auto;overflow-x:hidden;-ms-flex-item-align:stretch;align-self:stretch;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;padding:15px}.comments-form.svelte-gsvbhk.svelte-gsvbhk{position:relative;-webkit-box-flex:0;-ms-flex:none;flex:none}.comments-wrap.svelte-gsvbhk.svelte-gsvbhk{width:100%;margin:-5px 0}.comments-wrap.svelte-gsvbhk li.svelte-gsvbhk{width:100%;padding:5px 0}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbWVudHMuc3ZlbHRlIiwic291cmNlcyI6WyJDb21tZW50cy5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tICdzdmVsdGUnXG5cbiAgICBpbXBvcnQgQnIgZnJvbSAnQGNvbXBvbmVudHMvQnIuc3ZlbHRlJ1xuICAgIGltcG9ydCBJY29uIGZyb20gJ0Bjb21wb25lbnRzL0ljb24uc3ZlbHRlJ1xuICAgIGltcG9ydCBGb3JtIGZyb20gJ0Bjb21wb25lbnRzL0Zvcm0uc3ZlbHRlJ1xuICAgIGltcG9ydCBJbnB1dCBmcm9tICdAY29tcG9uZW50cy9maWVsZHMvSW5wdXQuc3ZlbHRlJ1xuICAgIGltcG9ydCBCdXR0b24gZnJvbSAnQGNvbXBvbmVudHMvQnV0dG9uLnN2ZWx0ZSdcbiAgICBpbXBvcnQgTG9hZGVyIGZyb20gJ0Bjb21wb25lbnRzL2xvYWRlcidcbiAgICBpbXBvcnQgQ29tbWVudCBmcm9tICcuL0NvbW1lbnQuc3ZlbHRlJ1xuXG4gICAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKVxuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQGV2ZW50OiBzdWJtaXQgLSBzdWJtaXQgdmFsdWVzIG9mIGEgbmV3IGNvbW1lbnQgXG4gICAgICogXG4gICAgICovXG4gICAgXG4gICAgLyoqXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgZXhwb3J0IGxldCB3aXRoRm9ybSA9IHRydWVcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHt7XG4gICAgICogICAgICBsaWtlczogbnVtYmVyLFxuICAgICAqICAgICAgYXZhdGFyOiBzdHJpbmcsXG4gICAgICogICAgICBhdXRob3I6IHN0cmluZyxcbiAgICAgKiAgICAgIGNvbW1lbnQ6IHN0cmluZyxcbiAgICAgKiAgICAgIGNoZWNrZWQ6IGJvb2xlYW4sXG4gICAgICogICAgICBjcmVhdGVkX2F0OiBzdHJpbmcsXG4gICAgICogfX1cbiAgICAgKi9cbiAgICBleHBvcnQgbGV0IGl0ZW1zID0gbmV3IEFycmF5KDQpLmZpbGwoeyBjb21tZW50OiBudWxsIH0pXG48L3NjcmlwdD5cblxuPHNlY3Rpb24gY2xhc3M9XCJjb21tZW50c1wiPlxuICAgIDx1bCBjbGFzcz1cImNvbW1lbnRzLXdyYXBcIj5cbiAgICAgICAgeyNlYWNoIGl0ZW1zIGFzIGNvbW1lbnR9XG4gICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgPENvbW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz17Y29tbWVudC5hdmF0YXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT17Y29tbWVudC5hdXRob3J9XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlPXtjb21tZW50LmNyZWF0ZWRfYXQgJiYgbmV3IERhdGUoY29tbWVudC5jcmVhdGVkX2F0KS50b0xvY2FsZURhdGVTdHJpbmcoKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFtb3VudD17Y29tbWVudC5saWtlc31cbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9e2NvbW1lbnQuY2hlY2tlZH1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIHsjaWYgY29tbWVudC5jb21tZW50ICE9PSBudWxsfVxuICAgICAgICAgICAgICAgICAgICAgICAge2NvbW1lbnQuY29tbWVudH1cbiAgICAgICAgICAgICAgICAgICAgezplbHNlfVxuICAgICAgICAgICAgICAgICAgICAgICAgPExvYWRlciB0eXBlPVwiaDRcIi8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TG9hZGVyIHR5cGU9XCJoNFwiLz5cbiAgICAgICAgICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgICAgICA8L0NvbW1lbnQ+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICB7L2VhY2h9XG4gICAgPC91bD5cblxuICAgIDxCciBzaXplPVwiMjBcIi8+ICBcblxuICAgIDxwIGNsYXNzPVwiaDMgZm9udC13LTUwMCBmb250LXNlY29uZGFyeSB1bmRlcmxpbmUgdGV4dC1jZW50ZXJcIj5cbiAgICAgICAgPHNwYW4+0JLRgdGWINC60L7QvNC10L3RgtCw0YDRljwvc3Bhbj5cbiAgICAgICAgPEljb24gdHlwZT1cImNhcmV0LWRvd25cIiBzaXplPVwic21hbGxcIi8+XG4gICAgPC9wPlxuXG4gICAgeyNpZiB3aXRoRm9ybX1cbiAgICAgICAgPEJyIHNpemU9XCI0MFwiLz4gIFxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29tbWVudHMtZm9ybSBmb250LXNlY29uZGFyeSBoM1wiPlxuICAgICAgICAgICAgPEZvcm0gY2xhc3M9XCJmbGV4XCIgbmFtZT1cImNvbW1lbnQtZm9ybVwiIG9uOnN1Ym1pdD17dmFsdWVzID0+IGRpc3BhdGNoKCdzdW1iaXQnLCB2YWx1ZXMpfT5cbiAgICAgICAgICAgICAgICA8SW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0YXJlYVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwiY29tbWVudFwiXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dzPVwiMVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImNvbW1lbnQtZmllbGQgZmxleC1zZWxmLXN0cmV0Y2hcIlxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCLQl9Cw0LvQuNGI0YLQtSDRgdCy0ZbQuSDQutC+0LzQtdC90YLQsNGAXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9Gb3JtPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXggYWJzb2x1dGVcIiBzdHlsZT1cInRvcDogMDsgcmlnaHQ6IDA7IGhlaWdodDogMTAwJTsgd2lkdGg6IDUwcHhcIj5cbiAgICAgICAgICAgICAgICA8QnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBjbGFzcz1cImZsZXggZnVsbC13aWR0aCBmbGV4LXNlbGYtc3RyZXRjaCBmbGV4LWp1c3RpZnktc3RhcnRcIj5cbiAgICAgICAgICAgICAgICAgICAgPEljb24gdHlwZT1cInNlbmRcIiBpcz1cImluZm9cIiBzaXplPVwibWVkaXVtXCIvPlxuICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIHsvaWZ9XG48L3NlY3Rpb24+XG5cbjxzdHlsZT5cbi5jb21tZW50cyB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgLXdlYmtpdC1ib3gtZmxleDogMTtcbiAgICAgICAgLW1zLWZsZXgtcG9zaXRpdmU6IDE7XG4gICAgICAgICAgICBmbGV4LWdyb3c6IDE7XG4gICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gICAgZGlzcGxheTogLW1zLWZsZXhib3g7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBvdmVyZmxvdy15OiBhdXRvO1xuICAgIG92ZXJmbG93LXg6IGhpZGRlbjtcbiAgICAtbXMtZmxleC1pdGVtLWFsaWduOiBzdHJldGNoO1xuICAgICAgICBhbGlnbi1zZWxmOiBzdHJldGNoO1xuICAgIC13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWw7XG4gICAgLXdlYmtpdC1ib3gtZGlyZWN0aW9uOiBub3JtYWw7XG4gICAgICAgIC1tcy1mbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBwYWRkaW5nOiAxNXB4O1xufVxuXG4uY29tbWVudHMtZm9ybSB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XG4gICAgICAgIC1tcy1mbGV4OiBub25lO1xuICAgICAgICAgICAgZmxleDogbm9uZTtcbn1cblxuLmNvbW1lbnRzLXdyYXAge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1hcmdpbjogLTVweCAwO1xufVxuXG4uY29tbWVudHMtd3JhcCBsaSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZzogNXB4IDA7XG59PC9zdHlsZT5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF3RkEsU0FBUyw0QkFBQyxDQUFDLEFBQ1AsS0FBSyxDQUFFLElBQUksQ0FDWCxnQkFBZ0IsQ0FBRSxDQUFDLENBQ2YsaUJBQWlCLENBQUUsQ0FBQyxDQUNoQixTQUFTLENBQUUsQ0FBQyxDQUNwQixPQUFPLENBQUUsV0FBVyxDQUNwQixPQUFPLENBQUUsV0FBVyxDQUNwQixPQUFPLENBQUUsSUFBSSxDQUNiLFVBQVUsQ0FBRSxJQUFJLENBQ2hCLFVBQVUsQ0FBRSxNQUFNLENBQ2xCLG1CQUFtQixDQUFFLE9BQU8sQ0FDeEIsVUFBVSxDQUFFLE9BQU8sQ0FDdkIsa0JBQWtCLENBQUUsUUFBUSxDQUM1QixxQkFBcUIsQ0FBRSxNQUFNLENBQ3pCLGtCQUFrQixDQUFFLE1BQU0sQ0FDdEIsY0FBYyxDQUFFLE1BQU0sQ0FDOUIsT0FBTyxDQUFFLElBQUksQUFDakIsQ0FBQyxBQUVELGNBQWMsNEJBQUMsQ0FBQyxBQUNaLFFBQVEsQ0FBRSxRQUFRLENBQ2xCLGdCQUFnQixDQUFFLENBQUMsQ0FDZixRQUFRLENBQUUsSUFBSSxDQUNWLElBQUksQ0FBRSxJQUFJLEFBQ3RCLENBQUMsQUFFRCxjQUFjLDRCQUFDLENBQUMsQUFDWixLQUFLLENBQUUsSUFBSSxDQUNYLE1BQU0sQ0FBRSxJQUFJLENBQUMsQ0FBQyxBQUNsQixDQUFDLEFBRUQsNEJBQWMsQ0FBQyxFQUFFLGNBQUMsQ0FBQyxBQUNmLEtBQUssQ0FBRSxJQUFJLENBQ1gsT0FBTyxDQUFFLEdBQUcsQ0FBQyxDQUFDLEFBQ2xCLENBQUMifQ== */";
	append_dev(document.head, style);
}

function get_each_context$c(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (51:20) {:else}
function create_else_block$a(ctx) {
	let loader0;
	let t;
	let loader1;
	let current;
	loader0 = new Loader({ props: { type: "h4" }, $$inline: true });
	loader1 = new Loader({ props: { type: "h4" }, $$inline: true });

	const block = {
		c: function create() {
			create_component(loader0.$$.fragment);
			t = space();
			create_component(loader1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(loader0.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(loader1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(loader0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(loader1, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(loader0.$$.fragment, local);
			transition_in(loader1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(loader0.$$.fragment, local);
			transition_out(loader1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(loader0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(loader1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$a.name,
		type: "else",
		source: "(51:20) {:else}",
		ctx
	});

	return block;
}

// (49:20) {#if comment.comment !== null}
function create_if_block_1$h(ctx) {
	let t_value = /*comment*/ ctx[4].comment + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*items*/ 2 && t_value !== (t_value = /*comment*/ ctx[4].comment + "")) set_data_dev(t, t_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$h.name,
		type: "if",
		source: "(49:20) {#if comment.comment !== null}",
		ctx
	});

	return block;
}

// (42:16) <Comment                         src={comment.avatar}                         title={comment.author}                         date={comment.created_at && new Date(comment.created_at).toLocaleDateString()}                         amount={comment.likes}                         checked={comment.checked}                 >
function create_default_slot_2$3(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_1$h, create_else_block$a];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*comment*/ ctx[4].comment !== null) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$3.name,
		type: "slot",
		source: "(42:16) <Comment                         src={comment.avatar}                         title={comment.author}                         date={comment.created_at && new Date(comment.created_at).toLocaleDateString()}                         amount={comment.likes}                         checked={comment.checked}                 >",
		ctx
	});

	return block;
}

// (40:8) {#each items as comment}
function create_each_block$c(ctx) {
	let li;
	let comment;
	let t;
	let current;

	comment = new Comment({
			props: {
				src: /*comment*/ ctx[4].avatar,
				title: /*comment*/ ctx[4].author,
				date: /*comment*/ ctx[4].created_at && new Date(/*comment*/ ctx[4].created_at).toLocaleDateString(),
				amount: /*comment*/ ctx[4].likes,
				checked: /*comment*/ ctx[4].checked,
				$$slots: { default: [create_default_slot_2$3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			li = element("li");
			create_component(comment.$$.fragment);
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			claim_component(comment.$$.fragment, li_nodes);
			t = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(li, "class", "svelte-gsvbhk");
			add_location(li, file$1i, 40, 12, 993);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			mount_component(comment, li, null);
			append_dev(li, t);
			current = true;
		},
		p: function update(ctx, dirty) {
			const comment_changes = {};
			if (dirty & /*items*/ 2) comment_changes.src = /*comment*/ ctx[4].avatar;
			if (dirty & /*items*/ 2) comment_changes.title = /*comment*/ ctx[4].author;
			if (dirty & /*items*/ 2) comment_changes.date = /*comment*/ ctx[4].created_at && new Date(/*comment*/ ctx[4].created_at).toLocaleDateString();
			if (dirty & /*items*/ 2) comment_changes.amount = /*comment*/ ctx[4].likes;
			if (dirty & /*items*/ 2) comment_changes.checked = /*comment*/ ctx[4].checked;

			if (dirty & /*$$scope, items*/ 130) {
				comment_changes.$$scope = { dirty, ctx };
			}

			comment.$set(comment_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(comment.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(comment.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			destroy_component(comment);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$c.name,
		type: "each",
		source: "(40:8) {#each items as comment}",
		ctx
	});

	return block;
}

// (67:4) {#if withForm}
function create_if_block$q(ctx) {
	let br;
	let t0;
	let div1;
	let form;
	let t1;
	let div0;
	let button;
	let current;
	br = new Br({ props: { size: "40" }, $$inline: true });

	form = new Form({
			props: {
				class: "flex",
				name: "comment-form",
				$$slots: { default: [create_default_slot_1$5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	form.$on("submit", /*submit_handler*/ ctx[3]);

	button = new Button({
			props: {
				type: "submit",
				class: "flex full-width flex-self-stretch flex-justify-start",
				$$slots: { default: [create_default_slot$L] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(br.$$.fragment);
			t0 = space();
			div1 = element("div");
			create_component(form.$$.fragment);
			t1 = space();
			div0 = element("div");
			create_component(button.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			claim_component(br.$$.fragment, nodes);
			t0 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			claim_component(form.$$.fragment, div1_nodes);
			t1 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true, style: true });
			var div0_nodes = children(div0);
			claim_component(button.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "flex absolute");
			set_style(div0, "top", "0");
			set_style(div0, "right", "0");
			set_style(div0, "height", "100%");
			set_style(div0, "width", "50px");
			add_location(div0, file$1i, 78, 12, 2332);
			attr_dev(div1, "class", "comments-form font-secondary h3 svelte-gsvbhk");
			add_location(div1, file$1i, 68, 8, 1875);
		},
		m: function mount(target, anchor) {
			mount_component(br, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, div1, anchor);
			mount_component(form, div1, null);
			append_dev(div1, t1);
			append_dev(div1, div0);
			mount_component(button, div0, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const form_changes = {};

			if (dirty & /*$$scope*/ 128) {
				form_changes.$$scope = { dirty, ctx };
			}

			form.$set(form_changes);
			const button_changes = {};

			if (dirty & /*$$scope*/ 128) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(br.$$.fragment, local);
			transition_in(form.$$.fragment, local);
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(br.$$.fragment, local);
			transition_out(form.$$.fragment, local);
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(br, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div1);
			destroy_component(form);
			destroy_component(button);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$q.name,
		type: "if",
		source: "(67:4) {#if withForm}",
		ctx
	});

	return block;
}

// (70:12) <Form class="flex" name="comment-form" on:submit={values => dispatch('sumbit', values)}>
function create_default_slot_1$5(ctx) {
	let input;
	let current;

	input = new Input({
			props: {
				type: "textarea",
				name: "comment",
				rows: "1",
				class: "comment-field flex-self-stretch",
				placeholder: "Залиште свій коментар"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(input, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$5.name,
		type: "slot",
		source: "(70:12) <Form class=\\\"flex\\\" name=\\\"comment-form\\\" on:submit={values => dispatch('sumbit', values)}>",
		ctx
	});

	return block;
}

// (80:16) <Button type="submit" class="flex full-width flex-self-stretch flex-justify-start">
function create_default_slot$L(ctx) {
	let icon;
	let current;

	icon = new Icon({
			props: { type: "send", is: "info", size: "medium" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icon.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$L.name,
		type: "slot",
		source: "(80:16) <Button type=\\\"submit\\\" class=\\\"flex full-width flex-self-stretch flex-justify-start\\\">",
		ctx
	});

	return block;
}

function create_fragment$1j(ctx) {
	let section;
	let ul;
	let t0;
	let br;
	let t1;
	let p;
	let span;
	let t2;
	let t3;
	let icon;
	let t4;
	let current;
	let each_value = /*items*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$c(get_each_context$c(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	br = new Br({ props: { size: "20" }, $$inline: true });

	icon = new Icon({
			props: { type: "caret-down", size: "small" },
			$$inline: true
		});

	let if_block = /*withForm*/ ctx[0] && create_if_block$q(ctx);

	const block = {
		c: function create() {
			section = element("section");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			create_component(br.$$.fragment);
			t1 = space();
			p = element("p");
			span = element("span");
			t2 = text("Всі коментарі");
			t3 = space();
			create_component(icon.$$.fragment);
			t4 = space();
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			ul = claim_element(section_nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			t0 = claim_space(section_nodes);
			claim_component(br.$$.fragment, section_nodes);
			t1 = claim_space(section_nodes);
			p = claim_element(section_nodes, "P", { class: true });
			var p_nodes = children(p);
			span = claim_element(p_nodes, "SPAN", {});
			var span_nodes = children(span);
			t2 = claim_text(span_nodes, "Всі коментарі");
			span_nodes.forEach(detach_dev);
			t3 = claim_space(p_nodes);
			claim_component(icon.$$.fragment, p_nodes);
			p_nodes.forEach(detach_dev);
			t4 = claim_space(section_nodes);
			if (if_block) if_block.l(section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(ul, "class", "comments-wrap svelte-gsvbhk");
			add_location(ul, file$1i, 38, 4, 921);
			add_location(span, file$1i, 62, 8, 1738);
			attr_dev(p, "class", "h3 font-w-500 font-secondary underline text-center");
			add_location(p, file$1i, 61, 4, 1667);
			attr_dev(section, "class", "comments svelte-gsvbhk");
			add_location(section, file$1i, 37, 0, 890);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			append_dev(section, t0);
			mount_component(br, section, null);
			append_dev(section, t1);
			append_dev(section, p);
			append_dev(p, span);
			append_dev(span, t2);
			append_dev(p, t3);
			mount_component(icon, p, null);
			append_dev(section, t4);
			if (if_block) if_block.m(section, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*items, Date*/ 2) {
				each_value = /*items*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$c(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$c(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(ul, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (/*withForm*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*withForm*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$q(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(section, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(br.$$.fragment, local);
			transition_in(icon.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(br.$$.fragment, local);
			transition_out(icon.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			destroy_each(each_blocks, detaching);
			destroy_component(br);
			destroy_component(icon);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1j.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1j($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { withForm = true } = $$props;
	let { items = new Array(4).fill({ comment: null }) } = $$props;
	const writable_props = ["withForm", "items"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Comments> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Comments", $$slots, []);
	const submit_handler = values => dispatch("sumbit", values);

	$$self.$set = $$props => {
		if ("withForm" in $$props) $$invalidate(0, withForm = $$props.withForm);
		if ("items" in $$props) $$invalidate(1, items = $$props.items);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		Br,
		Icon,
		Form,
		Input,
		Button,
		Loader,
		Comment,
		dispatch,
		withForm,
		items
	});

	$$self.$inject_state = $$props => {
		if ("withForm" in $$props) $$invalidate(0, withForm = $$props.withForm);
		if ("items" in $$props) $$invalidate(1, items = $$props.items);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [withForm, items, dispatch, submit_handler];
}

class Comments extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-gsvbhk-style")) add_css$A();
		init(this, options, instance$1j, create_fragment$1j, safe_not_equal, { withForm: 0, items: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Comments",
			options,
			id: create_fragment$1j.name
		});
	}

	get withForm() {
		throw new Error("<Comments>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set withForm(value) {
		throw new Error("<Comments>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get items() {
		throw new Error("<Comments>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set items(value) {
		throw new Error("<Comments>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/donators/DonatorsCard.svelte generated by Svelte v3.24.0 */
const file$1j = "src/components/donators/DonatorsCard.svelte";

function add_css$B() {
	var style = element("style");
	style.id = "svelte-3bffko-style";
	style.textContent = "li.svelte-3bffko{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:20px;width:100%}li.svelte-3bffko:not(:last-child){background-image:-webkit-gradient(linear, left top, right top, color-stop(50%, rgba(var(--theme-color-primary-opposite), 0.1)), color-stop(0%, rgba(var(--theme-color-primary-opposite), 0)));background-image:linear-gradient(to right, rgba(var(--theme-color-primary-opposite), 0.1) 50%, rgba(var(--theme-color-primary-opposite), 0) 0%);background-position:bottom;background-size:20px 1px;background-repeat:repeat-x}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRG9uYXRvcnNDYXJkLnN2ZWx0ZSIsInNvdXJjZXMiOlsiRG9uYXRvcnNDYXJkLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICAgIGltcG9ydCBJY29uIGZyb20gJ0Bjb21wb25lbnRzL0ljb24uc3ZlbHRlJ1xuICAgIGltcG9ydCBDYXJkIGZyb20gJ0Bjb21wb25lbnRzL0NhcmQuc3ZlbHRlJ1xuICAgIGltcG9ydCBBdmF0YXIgZnJvbSAnQGNvbXBvbmVudHMvQXZhdGFyLnN2ZWx0ZSdcbiAgICBpbXBvcnQgTG9hZGVyIGZyb20gJ0Bjb21wb25lbnRzL2xvYWRlcidcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHt7XG4gICAgICogIGlkOiBzdHJpbmcsXG4gICAgICogIHNyYzogc3RyaW5nLFxuICAgICAqICB0aXRsZTogc3RyaW5nLFxuICAgICAqICBzdWJ0aXRsZTogc3RyaW5nLFxuICAgICAqICBjaGVja2VkOiBib29sZWFuLFxuICAgICAqIH19XG4gICAgICovXG4gICAgZXhwb3J0IGxldCBpdGVtc1xuPC9zY3JpcHQ+XG5cbnsjaWYgQXJyYXkuaXNBcnJheShpdGVtcykgJiYgaXRlbXMubGVuZ3RofVxuICAgIDxDYXJkPlxuICAgICAgICA8dWwgY2xhc3M9XCJmdWxsLXdpZHRoXCI+XG4gICAgICAgICAgICB7I2VhY2ggaXRlbXMgYXMgaXRlbX1cbiAgICAgICAgICAgICAgICA8bGkga2V5PXtpdGVtLmlkfT5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJlbGF0aXZlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8QXZhdGFyIHNyYz17aXRlbS5zcmN9IHNpemU9XCJtZWRpdW1cIiBhbHQ9e2l0ZW0uc3VidGl0bGV9Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsjaWYgaXRlbS5jaGVja2VkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhYnNvbHV0ZSBmbGV4XCIgc3R5bGU9XCJ0b3A6IC0xcHg7IHJpZ2h0OiAtMXB4OyB3aWR0aDogMjBweDsgaGVpZ2h0OiAyMHB4OyBvdmVyZmxvdzogaGlkZGVuXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJY29uIHR5cGU9XCJwb2x5Z29uXCIgaXM9XCJpbmZvXCIvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYWJzb2x1dGUtY2VudGVyIGZsZXhcIiBzdHlsZT1cIndpZHRoOiAxMHB4OyBoZWlnaHQ6IDEwcHg7XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SWNvbiB0eXBlPVwiY2hlY2stZmxhZ1wiIGlzPVwibGlnaHRcIi8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxzPjwvcz5cbiAgICAgICAgICAgICAgICAgICAgPHM+PC9zPlxuICAgICAgICAgICAgICAgICAgICA8cz48L3M+XG4gICAgICAgICAgICAgICAgICAgIDxzPjwvcz5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cIm92ZXJmbG93OiBoaWRkZW47XCIgY2xhc3M9XCJmbGV4IGZsZXgtY29sdW1uIGZsZXgtanVzdGlmeS1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsjaWYgaXRlbS50aXRsZSAhPT0gbnVsbH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9XCJ0ZXh0LWVsbGlwc2lzXCI+eyBpdGVtLnRpdGxlIH08L2gyPlxuICAgICAgICAgICAgICAgICAgICAgICAgezplbHNlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaDIgcmVsYXRpdmUgZmxleC1zZWxmLXN0YXJ0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPVwidmlzaWJpbGl0eTogaGlkZGVuXCI+4oK0IDEwMDA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMb2FkZXIgdHlwZT1cImgyXCIgYWJzb2x1dGUvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4gIFxuICAgICAgICAgICAgICAgICAgICAgICAgey9pZn1cblxuICAgICAgICAgICAgICAgICAgICAgICAgeyNpZiBpdGVtLnN1YnRpdGxlICE9PSBudWxsfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaDQgZm9udC13LTMwMCB0ZXh0LWVsbGlwc2lzXCI+eyBpdGVtLnN1YnRpdGxlIH08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICB7OmVsc2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPExvYWRlciB0eXBlPVwiaDRcIi8+XG4gICAgICAgICAgICAgICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgey9lYWNofVxuICAgICAgICA8L3VsPlxuICAgIDwvQ2FyZD5cbnsvaWZ9XG5cbjxzdHlsZT5cbmxpIHtcbiAgICBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgICBkaXNwbGF5OiAtbXMtZmxleGJveDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XG4gICAgICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIHBhZGRpbmc6IDIwcHg7XG4gICAgd2lkdGg6IDEwMCU7XG59XG5cbmxpOm5vdCg6bGFzdC1jaGlsZCkge1xuICAgIGJhY2tncm91bmQtaW1hZ2U6IC13ZWJraXQtZ3JhZGllbnQobGluZWFyLCBsZWZ0IHRvcCwgcmlnaHQgdG9wLCBjb2xvci1zdG9wKDUwJSwgcmdiYSh2YXIoLS10aGVtZS1jb2xvci1wcmltYXJ5LW9wcG9zaXRlKSwgMC4xKSksIGNvbG9yLXN0b3AoMCUsIHJnYmEodmFyKC0tdGhlbWUtY29sb3ItcHJpbWFyeS1vcHBvc2l0ZSksIDApKSk7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCByZ2JhKHZhcigtLXRoZW1lLWNvbG9yLXByaW1hcnktb3Bwb3NpdGUpLCAwLjEpIDUwJSwgcmdiYSh2YXIoLS10aGVtZS1jb2xvci1wcmltYXJ5LW9wcG9zaXRlKSwgMCkgMCUpO1xuICAgIGJhY2tncm91bmQtcG9zaXRpb246IGJvdHRvbTtcbiAgICBiYWNrZ3JvdW5kLXNpemU6IDIwcHggMXB4O1xuICAgIGJhY2tncm91bmQtcmVwZWF0OiByZXBlYXQteDtcbn08L3N0eWxlPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTZEQSxFQUFFLGNBQUMsQ0FBQyxBQUNBLE9BQU8sQ0FBRSxXQUFXLENBQ3BCLE9BQU8sQ0FBRSxXQUFXLENBQ3BCLE9BQU8sQ0FBRSxJQUFJLENBQ2IsaUJBQWlCLENBQUUsTUFBTSxDQUNyQixjQUFjLENBQUUsTUFBTSxDQUNsQixXQUFXLENBQUUsTUFBTSxDQUMzQixPQUFPLENBQUUsSUFBSSxDQUNiLEtBQUssQ0FBRSxJQUFJLEFBQ2YsQ0FBQyxBQUVELGdCQUFFLEtBQUssV0FBVyxDQUFDLEFBQUMsQ0FBQyxBQUNqQixnQkFBZ0IsQ0FBRSxpQkFBaUIsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEtBQUssSUFBSSw4QkFBOEIsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLDhCQUE4QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQzlMLGdCQUFnQixDQUFFLGdCQUFnQixFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxJQUFJLDhCQUE4QixDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLElBQUksOEJBQThCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUNoSixtQkFBbUIsQ0FBRSxNQUFNLENBQzNCLGVBQWUsQ0FBRSxJQUFJLENBQUMsR0FBRyxDQUN6QixpQkFBaUIsQ0FBRSxRQUFRLEFBQy9CLENBQUMifQ== */";
	append_dev(document.head, style);
}

function get_each_context$d(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (19:0) {#if Array.isArray(items) && items.length}
function create_if_block$r(ctx) {
	let card;
	let current;

	card = new Card({
			props: {
				$$slots: { default: [create_default_slot$M] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(card.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(card.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(card, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const card_changes = {};

			if (dirty & /*$$scope, items*/ 17) {
				card_changes.$$scope = { dirty, ctx };
			}

			card.$set(card_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(card, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$r.name,
		type: "if",
		source: "(19:0) {#if Array.isArray(items) && items.length}",
		ctx
	});

	return block;
}

// (26:24) {#if item.checked}
function create_if_block_3$4(ctx) {
	let div1;
	let icon0;
	let t;
	let div0;
	let icon1;
	let current;

	icon0 = new Icon({
			props: { type: "polygon", is: "info" },
			$$inline: true
		});

	icon1 = new Icon({
			props: { type: "check-flag", is: "light" },
			$$inline: true
		});

	const block = {
		c: function create() {
			div1 = element("div");
			create_component(icon0.$$.fragment);
			t = space();
			div0 = element("div");
			create_component(icon1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true, style: true });
			var div1_nodes = children(div1);
			claim_component(icon0.$$.fragment, div1_nodes);
			t = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true, style: true });
			var div0_nodes = children(div0);
			claim_component(icon1.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "absolute-center flex");
			set_style(div0, "width", "10px");
			set_style(div0, "height", "10px");
			add_location(div0, file$1j, 28, 32, 942);
			attr_dev(div1, "class", "absolute flex");
			set_style(div1, "top", "-1px");
			set_style(div1, "right", "-1px");
			set_style(div1, "width", "20px");
			set_style(div1, "height", "20px");
			set_style(div1, "overflow", "hidden");
			add_location(div1, file$1j, 26, 28, 741);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			mount_component(icon0, div1, null);
			append_dev(div1, t);
			append_dev(div1, div0);
			mount_component(icon1, div0, null);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon0.$$.fragment, local);
			transition_in(icon1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon0.$$.fragment, local);
			transition_out(icon1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(icon0);
			destroy_component(icon1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3$4.name,
		type: "if",
		source: "(26:24) {#if item.checked}",
		ctx
	});

	return block;
}

// (42:24) {:else}
function create_else_block_1$4(ctx) {
	let span1;
	let span0;
	let t0;
	let t1;
	let loader;
	let current;

	loader = new Loader({
			props: { type: "h2", absolute: true },
			$$inline: true
		});

	const block = {
		c: function create() {
			span1 = element("span");
			span0 = element("span");
			t0 = text("₴ 1000");
			t1 = space();
			create_component(loader.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			span1 = claim_element(nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			span0 = claim_element(span1_nodes, "SPAN", { style: true });
			var span0_nodes = children(span0);
			t0 = claim_text(span0_nodes, "₴ 1000");
			span0_nodes.forEach(detach_dev);
			t1 = claim_space(span1_nodes);
			claim_component(loader.$$.fragment, span1_nodes);
			span1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(span0, "visibility", "hidden");
			add_location(span0, file$1j, 43, 32, 1684);
			attr_dev(span1, "class", "h2 relative flex-self-start");
			add_location(span1, file$1j, 42, 28, 1609);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span1, anchor);
			append_dev(span1, span0);
			append_dev(span0, t0);
			append_dev(span1, t1);
			mount_component(loader, span1, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(loader.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(loader.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span1);
			destroy_component(loader);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1$4.name,
		type: "else",
		source: "(42:24) {:else}",
		ctx
	});

	return block;
}

// (40:24) {#if item.title !== null}
function create_if_block_2$7(ctx) {
	let h2;
	let t_value = /*item*/ ctx[1].title + "";
	let t;

	const block = {
		c: function create() {
			h2 = element("h2");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			h2 = claim_element(nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t = claim_text(h2_nodes, t_value);
			h2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "text-ellipsis");
			add_location(h2, file$1j, 40, 28, 1503);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			append_dev(h2, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*items*/ 1 && t_value !== (t_value = /*item*/ ctx[1].title + "")) set_data_dev(t, t_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$7.name,
		type: "if",
		source: "(40:24) {#if item.title !== null}",
		ctx
	});

	return block;
}

// (51:24) {:else}
function create_else_block$b(ctx) {
	let loader;
	let current;
	loader = new Loader({ props: { type: "h4" }, $$inline: true });

	const block = {
		c: function create() {
			create_component(loader.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(loader.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(loader, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(loader.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(loader.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(loader, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$b.name,
		type: "else",
		source: "(51:24) {:else}",
		ctx
	});

	return block;
}

// (49:24) {#if item.subtitle !== null}
function create_if_block_1$i(ctx) {
	let span;
	let t_value = /*item*/ ctx[1].subtitle + "";
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, t_value);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "h4 font-w-300 text-ellipsis");
			add_location(span, file$1j, 49, 28, 1942);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*items*/ 1 && t_value !== (t_value = /*item*/ ctx[1].subtitle + "")) set_data_dev(t, t_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$i.name,
		type: "if",
		source: "(49:24) {#if item.subtitle !== null}",
		ctx
	});

	return block;
}

// (22:12) {#each items as item}
function create_each_block$d(ctx) {
	let li;
	let div0;
	let avatar;
	let t0;
	let t1;
	let s0;
	let t2;
	let s1;
	let t3;
	let s2;
	let t4;
	let s3;
	let t5;
	let div1;
	let current_block_type_index;
	let if_block1;
	let t6;
	let current_block_type_index_1;
	let if_block2;
	let t7;
	let li_key_value;
	let current;

	avatar = new Avatar({
			props: {
				src: /*item*/ ctx[1].src,
				size: "medium",
				alt: /*item*/ ctx[1].subtitle
			},
			$$inline: true
		});

	let if_block0 = /*item*/ ctx[1].checked && create_if_block_3$4(ctx);
	const if_block_creators = [create_if_block_2$7, create_else_block_1$4];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*item*/ ctx[1].title !== null) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	const if_block_creators_1 = [create_if_block_1$i, create_else_block$b];
	const if_blocks_1 = [];

	function select_block_type_1(ctx, dirty) {
		if (/*item*/ ctx[1].subtitle !== null) return 0;
		return 1;
	}

	current_block_type_index_1 = select_block_type_1(ctx);
	if_block2 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);

	const block = {
		c: function create() {
			li = element("li");
			div0 = element("div");
			create_component(avatar.$$.fragment);
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			s0 = element("s");
			t2 = space();
			s1 = element("s");
			t3 = space();
			s2 = element("s");
			t4 = space();
			s3 = element("s");
			t5 = space();
			div1 = element("div");
			if_block1.c();
			t6 = space();
			if_block2.c();
			t7 = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { key: true, class: true });
			var li_nodes = children(li);
			div0 = claim_element(li_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(avatar.$$.fragment, div0_nodes);
			t0 = claim_space(div0_nodes);
			if (if_block0) if_block0.l(div0_nodes);
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(li_nodes);
			s0 = claim_element(li_nodes, "S", {});
			children(s0).forEach(detach_dev);
			t2 = claim_space(li_nodes);
			s1 = claim_element(li_nodes, "S", {});
			children(s1).forEach(detach_dev);
			t3 = claim_space(li_nodes);
			s2 = claim_element(li_nodes, "S", {});
			children(s2).forEach(detach_dev);
			t4 = claim_space(li_nodes);
			s3 = claim_element(li_nodes, "S", {});
			children(s3).forEach(detach_dev);
			t5 = claim_space(li_nodes);
			div1 = claim_element(li_nodes, "DIV", { style: true, class: true });
			var div1_nodes = children(div1);
			if_block1.l(div1_nodes);
			t6 = claim_space(div1_nodes);
			if_block2.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			t7 = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "relative");
			add_location(div0, file$1j, 23, 20, 564);
			add_location(s0, file$1j, 34, 20, 1236);
			add_location(s1, file$1j, 35, 20, 1264);
			add_location(s2, file$1j, 36, 20, 1292);
			add_location(s3, file$1j, 37, 20, 1320);
			set_style(div1, "overflow", "hidden");
			attr_dev(div1, "class", "flex flex-column flex-justify-center");
			add_location(div1, file$1j, 38, 20, 1348);
			attr_dev(li, "key", li_key_value = /*item*/ ctx[1].id);
			attr_dev(li, "class", "svelte-3bffko");
			add_location(li, file$1j, 22, 16, 525);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, div0);
			mount_component(avatar, div0, null);
			append_dev(div0, t0);
			if (if_block0) if_block0.m(div0, null);
			append_dev(li, t1);
			append_dev(li, s0);
			append_dev(li, t2);
			append_dev(li, s1);
			append_dev(li, t3);
			append_dev(li, s2);
			append_dev(li, t4);
			append_dev(li, s3);
			append_dev(li, t5);
			append_dev(li, div1);
			if_blocks[current_block_type_index].m(div1, null);
			append_dev(div1, t6);
			if_blocks_1[current_block_type_index_1].m(div1, null);
			append_dev(li, t7);
			current = true;
		},
		p: function update(ctx, dirty) {
			const avatar_changes = {};
			if (dirty & /*items*/ 1) avatar_changes.src = /*item*/ ctx[1].src;
			if (dirty & /*items*/ 1) avatar_changes.alt = /*item*/ ctx[1].subtitle;
			avatar.$set(avatar_changes);

			if (/*item*/ ctx[1].checked) {
				if (if_block0) {
					if (dirty & /*items*/ 1) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_3$4(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div0, null);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block1 = if_blocks[current_block_type_index];

				if (!if_block1) {
					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block1.c();
				}

				transition_in(if_block1, 1);
				if_block1.m(div1, t6);
			}

			let previous_block_index_1 = current_block_type_index_1;
			current_block_type_index_1 = select_block_type_1(ctx);

			if (current_block_type_index_1 === previous_block_index_1) {
				if_blocks_1[current_block_type_index_1].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
					if_blocks_1[previous_block_index_1] = null;
				});

				check_outros();
				if_block2 = if_blocks_1[current_block_type_index_1];

				if (!if_block2) {
					if_block2 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
					if_block2.c();
				}

				transition_in(if_block2, 1);
				if_block2.m(div1, null);
			}

			if (!current || dirty & /*items*/ 1 && li_key_value !== (li_key_value = /*item*/ ctx[1].id)) {
				attr_dev(li, "key", li_key_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(avatar.$$.fragment, local);
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			current = true;
		},
		o: function outro(local) {
			transition_out(avatar.$$.fragment, local);
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			destroy_component(avatar);
			if (if_block0) if_block0.d();
			if_blocks[current_block_type_index].d();
			if_blocks_1[current_block_type_index_1].d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$d.name,
		type: "each",
		source: "(22:12) {#each items as item}",
		ctx
	});

	return block;
}

// (20:4) <Card>
function create_default_slot$M(ctx) {
	let ul;
	let current;
	let each_value = /*items*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$d(get_each_context$d(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(ul, "class", "full-width");
			add_location(ul, file$1j, 20, 8, 451);
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*items*/ 1) {
				each_value = /*items*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$d(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$d(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(ul, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$M.name,
		type: "slot",
		source: "(20:4) <Card>",
		ctx
	});

	return block;
}

function create_fragment$1k(ctx) {
	let show_if = Array.isArray(/*items*/ ctx[0]) && /*items*/ ctx[0].length;
	let if_block_anchor;
	let current;
	let if_block = show_if && create_if_block$r(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*items*/ 1) show_if = Array.isArray(/*items*/ ctx[0]) && /*items*/ ctx[0].length;

			if (show_if) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*items*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$r(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1k.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1k($$self, $$props, $$invalidate) {
	let { items } = $$props;
	const writable_props = ["items"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<DonatorsCard> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("DonatorsCard", $$slots, []);

	$$self.$set = $$props => {
		if ("items" in $$props) $$invalidate(0, items = $$props.items);
	};

	$$self.$capture_state = () => ({ Icon, Card, Avatar, Loader, items });

	$$self.$inject_state = $$props => {
		if ("items" in $$props) $$invalidate(0, items = $$props.items);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [items];
}

class DonatorsCard extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-3bffko-style")) add_css$B();
		init(this, options, instance$1k, create_fragment$1k, safe_not_equal, { items: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "DonatorsCard",
			options,
			id: create_fragment$1k.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*items*/ ctx[0] === undefined && !("items" in props)) {
			console.warn("<DonatorsCard> was created without expected prop 'items'");
		}
	}

	get items() {
		throw new Error("<DonatorsCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set items(value) {
		throw new Error("<DonatorsCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/donators/DonatorsList.svelte generated by Svelte v3.24.0 */

const { console: console_1$2 } = globals;
const file$1k = "src/components/donators/DonatorsList.svelte";

function add_css$C() {
	var style = element("style");
	style.id = "svelte-1pn9uv2-style";
	style.textContent = "ul.svelte-1pn9uv2{width:100%;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:start;-ms-flex-align:start;align-items:flex-start;max-width:100%;overflow-y:hidden;overflow-x:auto;padding:var(--screen-padding) 0}li.svelte-1pn9uv2{-webkit-box-flex:0;-ms-flex:none;flex:none;-ms-flex-item-align:stretch;align-self:stretch;width:260px;padding:0 5px}li.svelte-1pn9uv2:first-child{padding-left:15px}li.svelte-1pn9uv2:last-child{padding-right:15px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRG9uYXRvcnNMaXN0LnN2ZWx0ZSIsInNvdXJjZXMiOlsiRG9uYXRvcnNMaXN0LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICAgIGltcG9ydCB7IHRpY2sgfSBmcm9tICdzdmVsdGUnXG4gICAgaW1wb3J0IERvbmF0b3JzQ2FyZCBmcm9tICcuL0RvbmF0b3JzQ2FyZC5zdmVsdGUnXG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7e1xuICAgICAqICBpZDogc3RyaW5nLFxuICAgICAqICBzcmM6IHN0cmluZyxcbiAgICAgKiAgdGl0bGU6IHN0cmluZyxcbiAgICAgKiAgc3VidGl0bGU6IHN0cmluZyxcbiAgICAgKiAgY2hlY2tlZDogYm9vbGVhbixcbiAgICAgKiB9W119XG4gICAgICovXG4gICAgZXhwb3J0IGxldCBpdGVtcyA9IG5ldyBBcnJheSg4KS5maWxsKHsgdGl0bGU6IG51bGwsIHN1YnRpdGxlOiBudWxsIH0pXG5cbiAgICBsZXQgaXRlbXNQcmV2ID0gW11cbiAgICBsZXQgY29udGFpbmVyID0gbnVsbFxuICAgIGxldCBncm91cGVkID0gW11cbiAgICBcbiAgICAkOiBncm91cGVkID0gaXRlbXMucmV2ZXJzZSgpLnJlZHVjZSgoYWNjLCBpdGVtKSA9PiB7XG4gICAgICAgIGNvbnN0IGxhc3RJbmQgPSBNYXRoLm1heChhY2MubGVuZ3RoIC0gMSwgMClcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGFjY1tsYXN0SW5kXSkpIHtcbiAgICAgICAgICAgIGFjY1tsYXN0SW5kXSA9IFtdXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFjY1tsYXN0SW5kXS5sZW5ndGggPCAzKSB7XG4gICAgICAgICAgICBhY2NbbGFzdEluZF0ucHVzaChpdGVtKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWNjLnB1c2goW10pXG4gICAgICAgICAgICBhY2NbbGFzdEluZCArIDFdLnB1c2goaXRlbSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjXG4gICAgfSwgW10pLnJldmVyc2UoKVxuXG4gICAgJDogb25JdGVtc0NoYW5nZShpdGVtcywgY29udGFpbmVyKVxuXG4gICAgYXN5bmMgZnVuY3Rpb24gb25JdGVtc0NoYW5nZShpdGVtcywgY29udGFpbmVyKSB7XG4gICAgICAgIGlmIChpdGVtcyAmJiBpdGVtcy5sZW5ndGggJiYgIShpdGVtc1ByZXYgJiYgaXRlbXNQcmV2Lmxlbmd0aCkpIHtcbiAgICAgICAgICAgIGF3YWl0IHRpY2soKVxuICAgICAgICAgICAgc2Nyb2xsRW5kKGNvbnRhaW5lcilcbiAgICAgICAgfVxuICAgICAgICBpdGVtc1ByZXYgPSBpdGVtc1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjcm9sbEVuZChub2RlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBub2RlICYmIG5vZGUuc2Nyb2xsVG8obm9kZS5zY3JvbGxXaWR0aCwgMClcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYFRoZSBNYWdpYyB0b2xkIG1lIFwiJHtlcnIubWVzc2FnZX1cIi4gSXQncyBhIHdlaXJkIHJlYXNvbiwgSSBrbm93LCBidXQgSSBjb3VsZG4ndCBzY3JvbGwgdG8gdGhlIGVuZCBvZiAke25vZGV9IHdpdGggaXQ6IGAsIGVycilcbiAgICAgICAgfVxuICAgIH1cbjwvc2NyaXB0PlxuXG48dWwgY2xhc3M9XCJkb25hdG9ycyBzY3JvbGwteC1jZW50ZXJcIiBiaW5kOnRoaXM9e2NvbnRhaW5lcn0+XG4gICAgeyNlYWNoIGdyb3VwZWQgYXMgY2FyZHN9XG4gICAgICAgIDxsaT5cbiAgICAgICAgICAgIDxEb25hdG9yc0NhcmQgaXRlbXM9e2NhcmRzfS8+XG4gICAgICAgIDwvbGk+XG4gICAgey9lYWNofVxuPC91bD5cblxuPHN0eWxlPlxudWwge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGRpc3BsYXk6IC13ZWJraXQtYm94O1xuICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgLXdlYmtpdC1ib3gtYWxpZ246IHN0YXJ0O1xuICAgICAgICAtbXMtZmxleC1hbGlnbjogc3RhcnQ7XG4gICAgICAgICAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbiAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgb3ZlcmZsb3cteTogaGlkZGVuO1xuICAgIG92ZXJmbG93LXg6IGF1dG87XG4gICAgcGFkZGluZzogdmFyKC0tc2NyZWVuLXBhZGRpbmcpIDA7XG59XG5cbmxpIHtcbiAgICAtd2Via2l0LWJveC1mbGV4OiAwO1xuICAgICAgICAtbXMtZmxleDogbm9uZTtcbiAgICAgICAgICAgIGZsZXg6IG5vbmU7XG4gICAgLW1zLWZsZXgtaXRlbS1hbGlnbjogc3RyZXRjaDtcbiAgICAgICAgYWxpZ24tc2VsZjogc3RyZXRjaDtcbiAgICB3aWR0aDogMjYwcHg7XG4gICAgcGFkZGluZzogMCA1cHg7XG59XG5cbmxpOmZpcnN0LWNoaWxkIHtcbiAgICBwYWRkaW5nLWxlZnQ6IDE1cHg7XG59XG5cbmxpOmxhc3QtY2hpbGQge1xuICAgIHBhZGRpbmctcmlnaHQ6IDE1cHg7XG59PC9zdHlsZT5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE2REEsRUFBRSxlQUFDLENBQUMsQUFDQSxLQUFLLENBQUUsSUFBSSxDQUNYLE9BQU8sQ0FBRSxXQUFXLENBQ3BCLE9BQU8sQ0FBRSxXQUFXLENBQ3BCLE9BQU8sQ0FBRSxJQUFJLENBQ2IsaUJBQWlCLENBQUUsS0FBSyxDQUNwQixjQUFjLENBQUUsS0FBSyxDQUNqQixXQUFXLENBQUUsVUFBVSxDQUMvQixTQUFTLENBQUUsSUFBSSxDQUNmLFVBQVUsQ0FBRSxNQUFNLENBQ2xCLFVBQVUsQ0FBRSxJQUFJLENBQ2hCLE9BQU8sQ0FBRSxJQUFJLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxBQUNwQyxDQUFDLEFBRUQsRUFBRSxlQUFDLENBQUMsQUFDQSxnQkFBZ0IsQ0FBRSxDQUFDLENBQ2YsUUFBUSxDQUFFLElBQUksQ0FDVixJQUFJLENBQUUsSUFBSSxDQUNsQixtQkFBbUIsQ0FBRSxPQUFPLENBQ3hCLFVBQVUsQ0FBRSxPQUFPLENBQ3ZCLEtBQUssQ0FBRSxLQUFLLENBQ1osT0FBTyxDQUFFLENBQUMsQ0FBQyxHQUFHLEFBQ2xCLENBQUMsQUFFRCxpQkFBRSxZQUFZLEFBQUMsQ0FBQyxBQUNaLFlBQVksQ0FBRSxJQUFJLEFBQ3RCLENBQUMsQUFFRCxpQkFBRSxXQUFXLEFBQUMsQ0FBQyxBQUNYLGFBQWEsQ0FBRSxJQUFJLEFBQ3ZCLENBQUMifQ== */";
	append_dev(document.head, style);
}

function get_each_context$e(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (54:4) {#each grouped as cards}
function create_each_block$e(ctx) {
	let li;
	let donatorscard;
	let t;
	let current;

	donatorscard = new DonatorsCard({
			props: { items: /*cards*/ ctx[6] },
			$$inline: true
		});

	const block = {
		c: function create() {
			li = element("li");
			create_component(donatorscard.$$.fragment);
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			claim_component(donatorscard.$$.fragment, li_nodes);
			t = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(li, "class", "svelte-1pn9uv2");
			add_location(li, file$1k, 54, 8, 1474);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			mount_component(donatorscard, li, null);
			append_dev(li, t);
			current = true;
		},
		p: function update(ctx, dirty) {
			const donatorscard_changes = {};
			if (dirty & /*grouped*/ 2) donatorscard_changes.items = /*cards*/ ctx[6];
			donatorscard.$set(donatorscard_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(donatorscard.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(donatorscard.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			destroy_component(donatorscard);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$e.name,
		type: "each",
		source: "(54:4) {#each grouped as cards}",
		ctx
	});

	return block;
}

function create_fragment$1l(ctx) {
	let ul;
	let current;
	let each_value = /*grouped*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$e(get_each_context$e(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(ul, "class", "donators scroll-x-center svelte-1pn9uv2");
			add_location(ul, file$1k, 52, 0, 1377);
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			/*ul_binding*/ ctx[3](ul);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*grouped*/ 2) {
				each_value = /*grouped*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$e(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$e(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(ul, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
			/*ul_binding*/ ctx[3](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1l.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function scrollEnd(node) {
	try {
		node && node.scrollTo(node.scrollWidth, 0);
	} catch(err) {
		console.warn(`The Magic told me "${err.message}". It's a weird reason, I know, but I couldn't scroll to the end of ${node} with it: `, err);
	}
}

function instance$1l($$self, $$props, $$invalidate) {
	let { items = new Array(8).fill({ title: null, subtitle: null }) } = $$props;
	let itemsPrev = [];
	let container = null;
	let grouped = [];

	async function onItemsChange(items, container) {
		if (items && items.length && !(itemsPrev && itemsPrev.length)) {
			await tick();
			scrollEnd(container);
		}

		itemsPrev = items;
	}

	const writable_props = ["items"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$2.warn(`<DonatorsList> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("DonatorsList", $$slots, []);

	function ul_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			container = $$value;
			$$invalidate(0, container);
		});
	}

	$$self.$set = $$props => {
		if ("items" in $$props) $$invalidate(2, items = $$props.items);
	};

	$$self.$capture_state = () => ({
		tick,
		DonatorsCard,
		items,
		itemsPrev,
		container,
		grouped,
		onItemsChange,
		scrollEnd
	});

	$$self.$inject_state = $$props => {
		if ("items" in $$props) $$invalidate(2, items = $$props.items);
		if ("itemsPrev" in $$props) itemsPrev = $$props.itemsPrev;
		if ("container" in $$props) $$invalidate(0, container = $$props.container);
		if ("grouped" in $$props) $$invalidate(1, grouped = $$props.grouped);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*items*/ 4) {
			 $$invalidate(1, grouped = items.reverse().reduce(
				(acc, item) => {
					const lastInd = Math.max(acc.length - 1, 0);

					if (!Array.isArray(acc[lastInd])) {
						acc[lastInd] = [];
					}

					if (acc[lastInd].length < 3) {
						acc[lastInd].push(item);
					} else {
						acc.push([]);
						acc[lastInd + 1].push(item);
					}

					return acc;
				},
				[]
			).reverse());
		}

		if ($$self.$$.dirty & /*items, container*/ 5) {
			 onItemsChange(items, container);
		}
	};

	return [container, grouped, items, ul_binding];
}

class DonatorsList extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-1pn9uv2-style")) add_css$C();
		init(this, options, instance$1l, create_fragment$1l, safe_not_equal, { items: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "DonatorsList",
			options,
			id: create_fragment$1l.name
		});
	}

	get items() {
		throw new Error("<DonatorsList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set items(value) {
		throw new Error("<DonatorsList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/newsList/NewsItem.svelte generated by Svelte v3.24.0 */
const file$1l = "src/components/newsList/NewsItem.svelte";

// (34:12) {:else}
function create_else_block_3$1(ctx) {
	let div0;
	let loader0;
	let t;
	let div1;
	let loader1;
	let current;
	loader0 = new Loader({ props: { type: "h3" }, $$inline: true });
	loader1 = new Loader({ props: { type: "h3" }, $$inline: true });

	const block = {
		c: function create() {
			div0 = element("div");
			create_component(loader0.$$.fragment);
			t = space();
			div1 = element("div");
			create_component(loader1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { style: true });
			var div0_nodes = children(div0);
			claim_component(loader0.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { style: true });
			var div1_nodes = children(div1);
			claim_component(loader1.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(div0, "width", "80%");
			add_location(div0, file$1l, 34, 16, 1140);
			set_style(div1, "width", "80%");
			add_location(div1, file$1l, 35, 16, 1206);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			mount_component(loader0, div0, null);
			insert_dev(target, t, anchor);
			insert_dev(target, div1, anchor);
			mount_component(loader1, div1, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(loader0.$$.fragment, local);
			transition_in(loader1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(loader0.$$.fragment, local);
			transition_out(loader1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			destroy_component(loader0);
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(div1);
			destroy_component(loader1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_3$1.name,
		type: "else",
		source: "(34:12) {:else}",
		ctx
	});

	return block;
}

// (32:12) {#if title !== null}
function create_if_block_3$5(ctx) {
	let h3;
	let t;

	const block = {
		c: function create() {
			h3 = element("h3");
			t = text(/*title*/ ctx[2]);
			this.h();
		},
		l: function claim(nodes) {
			h3 = claim_element(nodes, "H3", { class: true, style: true });
			var h3_nodes = children(h3);
			t = claim_text(h3_nodes, /*title*/ ctx[2]);
			h3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h3, "class", "font-w-500 text-ellipsis-multiline");
			set_style(h3, "--max-lines", "2");
			add_location(h3, file$1l, 32, 16, 1019);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h3, anchor);
			append_dev(h3, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data_dev(t, /*title*/ ctx[2]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3$5.name,
		type: "if",
		source: "(32:12) {#if title !== null}",
		ctx
	});

	return block;
}

// (43:12) {:else}
function create_else_block_2$2(ctx) {
	let div0;
	let loader0;
	let t;
	let div1;
	let loader1;
	let current;
	loader0 = new Loader({ props: { type: "p" }, $$inline: true });
	loader1 = new Loader({ props: { type: "p" }, $$inline: true });

	const block = {
		c: function create() {
			div0 = element("div");
			create_component(loader0.$$.fragment);
			t = space();
			div1 = element("div");
			create_component(loader1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { style: true });
			var div0_nodes = children(div0);
			claim_component(loader0.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { style: true });
			var div1_nodes = children(div1);
			claim_component(loader1.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(div0, "width", "100%");
			add_location(div0, file$1l, 43, 16, 1478);
			set_style(div1, "width", "100%");
			add_location(div1, file$1l, 44, 16, 1544);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			mount_component(loader0, div0, null);
			insert_dev(target, t, anchor);
			insert_dev(target, div1, anchor);
			mount_component(loader1, div1, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(loader0.$$.fragment, local);
			transition_in(loader1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(loader0.$$.fragment, local);
			transition_out(loader1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			destroy_component(loader0);
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(div1);
			destroy_component(loader1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_2$2.name,
		type: "else",
		source: "(43:12) {:else}",
		ctx
	});

	return block;
}

// (41:12) {#if subtitle !== null}
function create_if_block_2$8(ctx) {
	let p;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text(/*subtitle*/ ctx[5]);
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true, style: true });
			var p_nodes = children(p);
			t = claim_text(p_nodes, /*subtitle*/ ctx[5]);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "font-w-300 text-ellipsis-multiline");
			set_style(p, "--max-lines", "3");
			add_location(p, file$1l, 41, 16, 1356);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*subtitle*/ 32) set_data_dev(t, /*subtitle*/ ctx[5]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$8.name,
		type: "if",
		source: "(41:12) {#if subtitle !== null}",
		ctx
	});

	return block;
}

// (52:20) {:else}
function create_else_block_1$5(ctx) {
	let div;
	let loader;
	let current;
	loader = new Loader({ props: { type: "h4" }, $$inline: true });

	const block = {
		c: function create() {
			div = element("div");
			create_component(loader.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { style: true });
			var div_nodes = children(div);
			claim_component(loader.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(div, "width", "60%");
			add_location(div, file$1l, 52, 24, 1872);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(loader, div, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(loader.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(loader.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(loader);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1$5.name,
		type: "else",
		source: "(52:20) {:else}",
		ctx
	});

	return block;
}

// (50:20) {#if date !== null}
function create_if_block_1$j(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text(/*date*/ ctx[1]);
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { class: true, style: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, /*date*/ ctx[1]);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "h4");
			set_style(span, "opacity", ".3");
			add_location(span, file$1l, 50, 24, 1767);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*date*/ 2) set_data_dev(t, /*date*/ ctx[1]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$j.name,
		type: "if",
		source: "(50:20) {#if date !== null}",
		ctx
	});

	return block;
}

// (67:24) {:else}
function create_else_block$c(ctx) {
	let span1;
	let span0;
	let t0;
	let t1;
	let loader;
	let current;

	loader = new Loader({
			props: { type: "h4", absolute: true },
			$$inline: true
		});

	const block = {
		c: function create() {
			span1 = element("span");
			span0 = element("span");
			t0 = text("199");
			t1 = space();
			create_component(loader.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			span1 = claim_element(nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			span0 = claim_element(span1_nodes, "SPAN", { style: true });
			var span0_nodes = children(span0);
			t0 = claim_text(span0_nodes, "199");
			span0_nodes.forEach(detach_dev);
			t1 = claim_space(span1_nodes);
			claim_component(loader.$$.fragment, span1_nodes);
			span1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(span0, "visibility", "hidden");
			add_location(span0, file$1l, 68, 32, 2653);
			attr_dev(span1, "class", "h4 relative");
			add_location(span1, file$1l, 67, 28, 2594);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span1, anchor);
			append_dev(span1, span0);
			append_dev(span0, t0);
			append_dev(span1, t1);
			mount_component(loader, span1, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(loader.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(loader.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span1);
			destroy_component(loader);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$c.name,
		type: "else",
		source: "(67:24) {:else}",
		ctx
	});

	return block;
}

// (65:24) {#if likes !== null}
function create_if_block$s(ctx) {
	let h4;
	let t;

	const block = {
		c: function create() {
			h4 = element("h4");
			t = text(/*likes*/ ctx[3]);
			this.h();
		},
		l: function claim(nodes) {
			h4 = claim_element(nodes, "H4", {});
			var h4_nodes = children(h4);
			t = claim_text(h4_nodes, /*likes*/ ctx[3]);
			h4_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h4, file$1l, 65, 28, 2515);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h4, anchor);
			append_dev(h4, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*likes*/ 8) set_data_dev(t, /*likes*/ ctx[3]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h4);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$s.name,
		type: "if",
		source: "(65:24) {#if likes !== null}",
		ctx
	});

	return block;
}

// (59:20) <Button size="medium" on:click={(e) => dispatch('onLike', !isLiked)}>
function create_default_slot_1$6(ctx) {
	let span;
	let icon;
	let span_style_value;
	let t0;
	let s0;
	let t1;
	let s1;
	let t2;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;

	icon = new Icon({
			props: {
				type: "heart",
				is: "danger",
				size: "small"
			},
			$$inline: true
		});

	const if_block_creators = [create_if_block$s, create_else_block$c];
	const if_blocks = [];

	function select_block_type_3(ctx, dirty) {
		if (/*likes*/ ctx[3] !== null) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_3(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			span = element("span");
			create_component(icon.$$.fragment);
			t0 = space();
			s0 = element("s");
			t1 = space();
			s1 = element("s");
			t2 = space();
			if_block.c();
			if_block_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { style: true });
			var span_nodes = children(span);
			claim_component(icon.$$.fragment, span_nodes);
			span_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			s0 = claim_element(nodes, "S", {});
			children(s0).forEach(detach_dev);
			t1 = claim_space(nodes);
			s1 = claim_element(nodes, "S", {});
			children(s1).forEach(detach_dev);
			t2 = claim_space(nodes);
			if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "style", span_style_value = `opacity: ${/*isLiked*/ ctx[4] ? 1 : 0.5}`);
			add_location(span, file$1l, 59, 24, 2226);
			add_location(s0, file$1l, 62, 24, 2402);
			add_location(s1, file$1l, 63, 24, 2434);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			mount_component(icon, span, null);
			insert_dev(target, t0, anchor);
			insert_dev(target, s0, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, s1, anchor);
			insert_dev(target, t2, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (!current || dirty & /*isLiked*/ 16 && span_style_value !== (span_style_value = `opacity: ${/*isLiked*/ ctx[4] ? 1 : 0.5}`)) {
				attr_dev(span, "style", span_style_value);
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_3(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			destroy_component(icon);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(s0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(s1);
			if (detaching) detach_dev(t2);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$6.name,
		type: "slot",
		source: "(59:20) <Button size=\\\"medium\\\" on:click={(e) => dispatch('onLike', !isLiked)}>",
		ctx
	});

	return block;
}

// (23:0) <Card class={classProp}>
function create_default_slot$N(ctx) {
	let section;
	let div0;
	let picture;
	let t0;
	let div2;
	let current_block_type_index;
	let if_block0;
	let t1;
	let br;
	let t2;
	let current_block_type_index_1;
	let if_block1;
	let t3;
	let div1;
	let p;
	let current_block_type_index_2;
	let if_block2;
	let t4;
	let s0;
	let t5;
	let s1;
	let t6;
	let span;
	let button;
	let current;

	picture = new Picture({
			props: {
				src: /*src*/ ctx[0],
				alt: /*title*/ ctx[2]
			},
			$$inline: true
		});

	const if_block_creators = [create_if_block_3$5, create_else_block_3$1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*title*/ ctx[2] !== null) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	br = new Br({ props: { size: "10" }, $$inline: true });
	const if_block_creators_1 = [create_if_block_2$8, create_else_block_2$2];
	const if_blocks_1 = [];

	function select_block_type_1(ctx, dirty) {
		if (/*subtitle*/ ctx[5] !== null) return 0;
		return 1;
	}

	current_block_type_index_1 = select_block_type_1(ctx);
	if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
	const if_block_creators_2 = [create_if_block_1$j, create_else_block_1$5];
	const if_blocks_2 = [];

	function select_block_type_2(ctx, dirty) {
		if (/*date*/ ctx[1] !== null) return 0;
		return 1;
	}

	current_block_type_index_2 = select_block_type_2(ctx);
	if_block2 = if_blocks_2[current_block_type_index_2] = if_block_creators_2[current_block_type_index_2](ctx);

	button = new Button({
			props: {
				size: "medium",
				$$slots: { default: [create_default_slot_1$6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*click_handler*/ ctx[8]);

	const block = {
		c: function create() {
			section = element("section");
			div0 = element("div");
			create_component(picture.$$.fragment);
			t0 = space();
			div2 = element("div");
			if_block0.c();
			t1 = space();
			create_component(br.$$.fragment);
			t2 = space();
			if_block1.c();
			t3 = space();
			div1 = element("div");
			p = element("p");
			if_block2.c();
			t4 = space();
			s0 = element("s");
			t5 = space();
			s1 = element("s");
			t6 = space();
			span = element("span");
			create_component(button.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div0 = claim_element(section_nodes, "DIV", { class: true, style: true });
			var div0_nodes = children(div0);
			claim_component(picture.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(section_nodes);
			div2 = claim_element(section_nodes, "DIV", { class: true, style: true });
			var div2_nodes = children(div2);
			if_block0.l(div2_nodes);
			t1 = claim_space(div2_nodes);
			claim_component(br.$$.fragment, div2_nodes);
			t2 = claim_space(div2_nodes);
			if_block1.l(div2_nodes);
			t3 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			p = claim_element(div1_nodes, "P", {});
			var p_nodes = children(p);
			if_block2.l(p_nodes);
			p_nodes.forEach(detach_dev);
			t4 = claim_space(div1_nodes);
			s0 = claim_element(div1_nodes, "S", {});
			children(s0).forEach(detach_dev);
			t5 = claim_space(div1_nodes);
			s1 = claim_element(div1_nodes, "S", {});
			children(s1).forEach(detach_dev);
			t6 = claim_space(div1_nodes);
			span = claim_element(div1_nodes, "SPAN", { class: true, style: true });
			var span_nodes = children(span);
			claim_component(button.$$.fragment, span_nodes);
			span_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "flex flex-none relative");
			set_style(div0, "width", "110px");
			add_location(div0, file$1l, 25, 8, 730);
			add_location(p, file$1l, 48, 16, 1699);
			add_location(s0, file$1l, 55, 16, 1985);
			add_location(s1, file$1l, 56, 16, 2009);
			attr_dev(span, "class", "h5 flex flex-align-center font-secondary");
			set_style(span, "min-width", "4em");
			add_location(span, file$1l, 57, 16, 2033);
			attr_dev(div1, "class", "flex flex-align-center flex-justify-between");
			add_location(div1, file$1l, 47, 12, 1625);
			attr_dev(div2, "class", "flex flex-column flex-1 container overflow-hidden");
			set_style(div2, "padding-top", "20px");
			set_style(div2, "padding-bottom", "5px");
			add_location(div2, file$1l, 29, 8, 858);
			attr_dev(section, "class", "news-item flex");
			add_location(section, file$1l, 23, 4, 688);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, div0);
			mount_component(picture, div0, null);
			append_dev(section, t0);
			append_dev(section, div2);
			if_blocks[current_block_type_index].m(div2, null);
			append_dev(div2, t1);
			mount_component(br, div2, null);
			append_dev(div2, t2);
			if_blocks_1[current_block_type_index_1].m(div2, null);
			append_dev(div2, t3);
			append_dev(div2, div1);
			append_dev(div1, p);
			if_blocks_2[current_block_type_index_2].m(p, null);
			append_dev(div1, t4);
			append_dev(div1, s0);
			append_dev(div1, t5);
			append_dev(div1, s1);
			append_dev(div1, t6);
			append_dev(div1, span);
			mount_component(button, span, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const picture_changes = {};
			if (dirty & /*src*/ 1) picture_changes.src = /*src*/ ctx[0];
			if (dirty & /*title*/ 4) picture_changes.alt = /*title*/ ctx[2];
			picture.$set(picture_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				}

				transition_in(if_block0, 1);
				if_block0.m(div2, t1);
			}

			let previous_block_index_1 = current_block_type_index_1;
			current_block_type_index_1 = select_block_type_1(ctx);

			if (current_block_type_index_1 === previous_block_index_1) {
				if_blocks_1[current_block_type_index_1].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
					if_blocks_1[previous_block_index_1] = null;
				});

				check_outros();
				if_block1 = if_blocks_1[current_block_type_index_1];

				if (!if_block1) {
					if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
					if_block1.c();
				}

				transition_in(if_block1, 1);
				if_block1.m(div2, t3);
			}

			let previous_block_index_2 = current_block_type_index_2;
			current_block_type_index_2 = select_block_type_2(ctx);

			if (current_block_type_index_2 === previous_block_index_2) {
				if_blocks_2[current_block_type_index_2].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks_2[previous_block_index_2], 1, 1, () => {
					if_blocks_2[previous_block_index_2] = null;
				});

				check_outros();
				if_block2 = if_blocks_2[current_block_type_index_2];

				if (!if_block2) {
					if_block2 = if_blocks_2[current_block_type_index_2] = if_block_creators_2[current_block_type_index_2](ctx);
					if_block2.c();
				}

				transition_in(if_block2, 1);
				if_block2.m(p, null);
			}

			const button_changes = {};

			if (dirty & /*$$scope, likes, isLiked*/ 1048) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(picture.$$.fragment, local);
			transition_in(if_block0);
			transition_in(br.$$.fragment, local);
			transition_in(if_block1);
			transition_in(if_block2);
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(picture.$$.fragment, local);
			transition_out(if_block0);
			transition_out(br.$$.fragment, local);
			transition_out(if_block1);
			transition_out(if_block2);
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			destroy_component(picture);
			if_blocks[current_block_type_index].d();
			destroy_component(br);
			if_blocks_1[current_block_type_index_1].d();
			if_blocks_2[current_block_type_index_2].d();
			destroy_component(button);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$N.name,
		type: "slot",
		source: "(23:0) <Card class={classProp}>",
		ctx
	});

	return block;
}

function create_fragment$1m(ctx) {
	let card;
	let current;

	card = new Card({
			props: {
				class: /*classProp*/ ctx[6],
				$$slots: { default: [create_default_slot$N] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(card.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(card.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(card, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const card_changes = {};
			if (dirty & /*classProp*/ 64) card_changes.class = /*classProp*/ ctx[6];

			if (dirty & /*$$scope, isLiked, likes, date, subtitle, title, src*/ 1087) {
				card_changes.$$scope = { dirty, ctx };
			}

			card.$set(card_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(card, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1m.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1m($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { src = null } = $$props;
	let { date = null } = $$props;
	let { title = null } = $$props;
	let { likes = null } = $$props;
	let { isLiked = null } = $$props;
	let { subtitle = null } = $$props;
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("NewsItem", $$slots, []);
	const click_handler = e => dispatch("onLike", !isLiked);

	$$self.$set = $$new_props => {
		$$invalidate(9, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("src" in $$new_props) $$invalidate(0, src = $$new_props.src);
		if ("date" in $$new_props) $$invalidate(1, date = $$new_props.date);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("likes" in $$new_props) $$invalidate(3, likes = $$new_props.likes);
		if ("isLiked" in $$new_props) $$invalidate(4, isLiked = $$new_props.isLiked);
		if ("subtitle" in $$new_props) $$invalidate(5, subtitle = $$new_props.subtitle);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		classnames,
		Br,
		Icon,
		Card,
		Button,
		Picture,
		Loader,
		dispatch,
		src,
		date,
		title,
		likes,
		isLiked,
		subtitle,
		classProp
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(9, $$props = assign(assign({}, $$props), $$new_props));
		if ("src" in $$props) $$invalidate(0, src = $$new_props.src);
		if ("date" in $$props) $$invalidate(1, date = $$new_props.date);
		if ("title" in $$props) $$invalidate(2, title = $$new_props.title);
		if ("likes" in $$props) $$invalidate(3, likes = $$new_props.likes);
		if ("isLiked" in $$props) $$invalidate(4, isLiked = $$new_props.isLiked);
		if ("subtitle" in $$props) $$invalidate(5, subtitle = $$new_props.subtitle);
		if ("classProp" in $$props) $$invalidate(6, classProp = $$new_props.classProp);
	};

	let classProp;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		 $$invalidate(6, classProp = classnames($$props.class));
	};

	$$props = exclude_internal_props($$props);
	return [src, date, title, likes, isLiked, subtitle, classProp, dispatch, click_handler];
}

class NewsItem extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1m, create_fragment$1m, safe_not_equal, {
			src: 0,
			date: 1,
			title: 2,
			likes: 3,
			isLiked: 4,
			subtitle: 5
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "NewsItem",
			options,
			id: create_fragment$1m.name
		});
	}

	get src() {
		throw new Error("<NewsItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set src(value) {
		throw new Error("<NewsItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get date() {
		throw new Error("<NewsItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set date(value) {
		throw new Error("<NewsItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<NewsItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<NewsItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get likes() {
		throw new Error("<NewsItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set likes(value) {
		throw new Error("<NewsItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isLiked() {
		throw new Error("<NewsItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isLiked(value) {
		throw new Error("<NewsItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get subtitle() {
		throw new Error("<NewsItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set subtitle(value) {
		throw new Error("<NewsItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/newsList/NewsList.svelte generated by Svelte v3.24.0 */
const file$1m = "src/components/newsList/NewsList.svelte";

function add_css$D() {
	var style = element("style");
	style.id = "svelte-11jv2m5-style";
	style.textContent = ".news-list.svelte-11jv2m5.svelte-11jv2m5{width:100%;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;display:-webkit-box;display:-ms-flexbox;display:flex;overflow-y:auto;overflow-x:hidden;-ms-flex-item-align:stretch;align-self:stretch;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.news-list-wrap.svelte-11jv2m5.svelte-11jv2m5{width:100%;margin:-5px 0}.news-list-wrap.svelte-11jv2m5 li.svelte-11jv2m5{position:relative;width:100%;padding:5px 0}.arrow.svelte-11jv2m5.svelte-11jv2m5{position:absolute;top:8px;right:15px;color:rgba(var(--color-info))}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTmV3c0xpc3Quc3ZlbHRlIiwic291cmNlcyI6WyJOZXdzTGlzdC5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tICdzdmVsdGUnXG4gICAgaW1wb3J0IHsgb25Nb3VudCB9IGZyb20gJ3N2ZWx0ZSdcbiAgICBpbXBvcnQgeyBBUEksIERhdGVzIH0gZnJvbSAnQHNlcnZpY2VzJ1xuICAgIFxuICAgIGltcG9ydCBCciBmcm9tICdAY29tcG9uZW50cy9Cci5zdmVsdGUnXG4gICAgaW1wb3J0IEljb24gZnJvbSAnQGNvbXBvbmVudHMvSWNvbi5zdmVsdGUnXG4gICAgaW1wb3J0IEJ1dHRvbiBmcm9tICdAY29tcG9uZW50cy9CdXR0b24uc3ZlbHRlJ1xuICAgIGltcG9ydCBOZXdzSXRlbSBmcm9tICcuL05ld3NJdGVtLnN2ZWx0ZSdcblxuICAgIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKClcbiAgIFxuICAgLyoqXG4gICAgKiBAdHlwZSB7e1xuICAgICogICBpZDogc3RyaW5nLFxuICAgICogICBzcmM6IHN0cmluZyxcbiAgICAqICAgbGlrZXM6IG51bWJlcixcbiAgICAqICAgdGl0bGU6IHN0cmluZyxcbiAgICAqICAgc3VidGl0bGU6IHN0cmluZyxcbiAgICAqICAgY3JlYXRlZF9hdDogc3RyaW5nLFxuICAgICogfX1cbiAgICAqL1xuICAgIGV4cG9ydCBsZXQgaXRlbXMgPSBuZXcgQXJyYXkoMykuZmlsbCh7IHRpdGxlOiBudWxsLCBzdWJ0aXRsZTogbnVsbCwgY3JlYXRlZF9hdDogbnVsbCwgbGlrZXM6IG51bGwgfSlcbjwvc2NyaXB0PlxuXG48c2VjdGlvbiBjbGFzcz1cIm5ld3MtbGlzdFwiPlxuICAgIDx1bCBjbGFzcz1cIm5ld3MtbGlzdC13cmFwXCI+XG4gICAgICAgIHsjZWFjaCBpdGVtcyBhcyBpdGVtLCBpbmRleH1cbiAgICAgICAgICAgIDxsaSByb2xlPVwiYnV0dG9uXCIgb246Y2xpY2s9eygpID0+IGRpc3BhdGNoKCdjbGljaycsIHsgaXRlbSwgaW5kZXggfSl9IGtleT17aXRlbS5pZH0+XG4gICAgICAgICAgICAgICAgPE5ld3NJdGVtXG4gICAgICAgICAgICAgICAgICAgICAgICBzcmM9e2l0ZW0uc3JjfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9e2l0ZW0udGl0bGV9XG4gICAgICAgICAgICAgICAgICAgICAgICBsaWtlcz17aXRlbS5saWtlc31cbiAgICAgICAgICAgICAgICAgICAgICAgIGlzTGlrZWQ9e2l0ZW0uaXNMaWtlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnRpdGxlPXtpdGVtLnN1YnRpdGxlfVxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZT17aXRlbS5jcmVhdGVkX2F0ID09PSBudWxsID8gbnVsbCA6IERhdGVzKGl0ZW0uY3JlYXRlZF9hdCkuZnJvbU5vdygpfVxuICAgICAgICAgICAgICAgIC8+XG5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImFycm93XCI+XG4gICAgICAgICAgICAgICAgICAgIDxJY29uIHR5cGU9XCJhcnJvdy1yaWdodFwiIHNpemU9XCJzbWFsbFwiIGlzPVwiaW5mb1wiLz5cbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICB7L2VhY2h9XG4gICAgPC91bD5cblxuICAgIDxCciBzaXplPVwiMjBcIi8+ICBcblxuICAgIDxwIGNsYXNzPVwiaDMgZm9udC13LTUwMCBmb250LXNlY29uZGFyeSB1bmRlcmxpbmUgdGV4dC1jZW50ZXJcIj5cbiAgICAgICAgPHNwYW4+0JLRgdGWINC90L7QstC40L3QuDwvc3Bhbj5cbiAgICAgICAgPEljb24gdHlwZT1cImNhcmV0LWRvd25cIiBzaXplPVwic21hbGxcIi8+XG4gICAgPC9wPlxuPC9zZWN0aW9uPlxuXG48c3R5bGU+XG4ubmV3cy1saXN0IHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICAtd2Via2l0LWJveC1mbGV4OiAxO1xuICAgICAgICAtbXMtZmxleC1wb3NpdGl2ZTogMTtcbiAgICAgICAgICAgIGZsZXgtZ3JvdzogMTtcbiAgICBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgICBkaXNwbGF5OiAtbXMtZmxleGJveDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIG92ZXJmbG93LXk6IGF1dG87XG4gICAgb3ZlcmZsb3cteDogaGlkZGVuO1xuICAgIC1tcy1mbGV4LWl0ZW0tYWxpZ246IHN0cmV0Y2g7XG4gICAgICAgIGFsaWduLXNlbGY6IHN0cmV0Y2g7XG4gICAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDtcbiAgICAtd2Via2l0LWJveC1kaXJlY3Rpb246IG5vcm1hbDtcbiAgICAgICAgLW1zLWZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xufVxuXG4ubmV3cy1saXN0LXdyYXAge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1hcmdpbjogLTVweCAwO1xufVxuXG4ubmV3cy1saXN0LXdyYXAgbGkge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nOiA1cHggMDtcbn1cblxuLmFycm93IHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiA4cHg7XG4gICAgcmlnaHQ6IDE1cHg7XG4gICAgY29sb3I6IHJnYmEodmFyKC0tY29sb3ItaW5mbykpO1xufTwvc3R5bGU+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0RBLFVBQVUsOEJBQUMsQ0FBQyxBQUNSLEtBQUssQ0FBRSxJQUFJLENBQ1gsZ0JBQWdCLENBQUUsQ0FBQyxDQUNmLGlCQUFpQixDQUFFLENBQUMsQ0FDaEIsU0FBUyxDQUFFLENBQUMsQ0FDcEIsT0FBTyxDQUFFLFdBQVcsQ0FDcEIsT0FBTyxDQUFFLFdBQVcsQ0FDcEIsT0FBTyxDQUFFLElBQUksQ0FDYixVQUFVLENBQUUsSUFBSSxDQUNoQixVQUFVLENBQUUsTUFBTSxDQUNsQixtQkFBbUIsQ0FBRSxPQUFPLENBQ3hCLFVBQVUsQ0FBRSxPQUFPLENBQ3ZCLGtCQUFrQixDQUFFLFFBQVEsQ0FDNUIscUJBQXFCLENBQUUsTUFBTSxDQUN6QixrQkFBa0IsQ0FBRSxNQUFNLENBQ3RCLGNBQWMsQ0FBRSxNQUFNLEFBQ2xDLENBQUMsQUFFRCxlQUFlLDhCQUFDLENBQUMsQUFDYixLQUFLLENBQUUsSUFBSSxDQUNYLE1BQU0sQ0FBRSxJQUFJLENBQUMsQ0FBQyxBQUNsQixDQUFDLEFBRUQsOEJBQWUsQ0FBQyxFQUFFLGVBQUMsQ0FBQyxBQUNoQixRQUFRLENBQUUsUUFBUSxDQUNsQixLQUFLLENBQUUsSUFBSSxDQUNYLE9BQU8sQ0FBRSxHQUFHLENBQUMsQ0FBQyxBQUNsQixDQUFDLEFBRUQsTUFBTSw4QkFBQyxDQUFDLEFBQ0osUUFBUSxDQUFFLFFBQVEsQ0FDbEIsR0FBRyxDQUFFLEdBQUcsQ0FDUixLQUFLLENBQUUsSUFBSSxDQUNYLEtBQUssQ0FBRSxLQUFLLElBQUksWUFBWSxDQUFDLENBQUMsQUFDbEMsQ0FBQyJ9 */";
	append_dev(document.head, style);
}

function get_each_context$f(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	child_ctx[5] = i;
	return child_ctx;
}

// (28:8) {#each items as item, index}
function create_each_block$f(ctx) {
	let li;
	let newsitem;
	let t0;
	let span;
	let icon;
	let t1;
	let li_key_value;
	let current;
	let mounted;
	let dispose;

	newsitem = new NewsItem({
			props: {
				src: /*item*/ ctx[3].src,
				title: /*item*/ ctx[3].title,
				likes: /*item*/ ctx[3].likes,
				isLiked: /*item*/ ctx[3].isLiked,
				subtitle: /*item*/ ctx[3].subtitle,
				date: /*item*/ ctx[3].created_at === null
				? null
				: dayjs_min(/*item*/ ctx[3].created_at).fromNow()
			},
			$$inline: true
		});

	icon = new Icon({
			props: {
				type: "arrow-right",
				size: "small",
				is: "info"
			},
			$$inline: true
		});

	function click_handler(...args) {
		return /*click_handler*/ ctx[2](/*item*/ ctx[3], /*index*/ ctx[5], ...args);
	}

	const block = {
		c: function create() {
			li = element("li");
			create_component(newsitem.$$.fragment);
			t0 = space();
			span = element("span");
			create_component(icon.$$.fragment);
			t1 = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { role: true, key: true, class: true });
			var li_nodes = children(li);
			claim_component(newsitem.$$.fragment, li_nodes);
			t0 = claim_space(li_nodes);
			span = claim_element(li_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			claim_component(icon.$$.fragment, span_nodes);
			span_nodes.forEach(detach_dev);
			t1 = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "arrow svelte-11jv2m5");
			add_location(span, file$1m, 38, 16, 1251);
			attr_dev(li, "role", "button");
			attr_dev(li, "key", li_key_value = /*item*/ ctx[3].id);
			attr_dev(li, "class", "svelte-11jv2m5");
			add_location(li, file$1m, 28, 12, 785);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			mount_component(newsitem, li, null);
			append_dev(li, t0);
			append_dev(li, span);
			mount_component(icon, span, null);
			append_dev(li, t1);
			current = true;

			if (!mounted) {
				dispose = listen_dev(li, "click", click_handler, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const newsitem_changes = {};
			if (dirty & /*items*/ 1) newsitem_changes.src = /*item*/ ctx[3].src;
			if (dirty & /*items*/ 1) newsitem_changes.title = /*item*/ ctx[3].title;
			if (dirty & /*items*/ 1) newsitem_changes.likes = /*item*/ ctx[3].likes;
			if (dirty & /*items*/ 1) newsitem_changes.isLiked = /*item*/ ctx[3].isLiked;
			if (dirty & /*items*/ 1) newsitem_changes.subtitle = /*item*/ ctx[3].subtitle;

			if (dirty & /*items*/ 1) newsitem_changes.date = /*item*/ ctx[3].created_at === null
			? null
			: dayjs_min(/*item*/ ctx[3].created_at).fromNow();

			newsitem.$set(newsitem_changes);

			if (!current || dirty & /*items*/ 1 && li_key_value !== (li_key_value = /*item*/ ctx[3].id)) {
				attr_dev(li, "key", li_key_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(newsitem.$$.fragment, local);
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(newsitem.$$.fragment, local);
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			destroy_component(newsitem);
			destroy_component(icon);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$f.name,
		type: "each",
		source: "(28:8) {#each items as item, index}",
		ctx
	});

	return block;
}

function create_fragment$1n(ctx) {
	let section;
	let ul;
	let t0;
	let br;
	let t1;
	let p;
	let span;
	let t2;
	let t3;
	let icon;
	let current;
	let each_value = /*items*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$f(get_each_context$f(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	br = new Br({ props: { size: "20" }, $$inline: true });

	icon = new Icon({
			props: { type: "caret-down", size: "small" },
			$$inline: true
		});

	const block = {
		c: function create() {
			section = element("section");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			create_component(br.$$.fragment);
			t1 = space();
			p = element("p");
			span = element("span");
			t2 = text("Всі новини");
			t3 = space();
			create_component(icon.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			ul = claim_element(section_nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			t0 = claim_space(section_nodes);
			claim_component(br.$$.fragment, section_nodes);
			t1 = claim_space(section_nodes);
			p = claim_element(section_nodes, "P", { class: true });
			var p_nodes = children(p);
			span = claim_element(p_nodes, "SPAN", {});
			var span_nodes = children(span);
			t2 = claim_text(span_nodes, "Всі новини");
			span_nodes.forEach(detach_dev);
			t3 = claim_space(p_nodes);
			claim_component(icon.$$.fragment, p_nodes);
			p_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(ul, "class", "news-list-wrap svelte-11jv2m5");
			add_location(ul, file$1m, 26, 4, 708);
			add_location(span, file$1m, 48, 8, 1509);
			attr_dev(p, "class", "h3 font-w-500 font-secondary underline text-center");
			add_location(p, file$1m, 47, 4, 1438);
			attr_dev(section, "class", "news-list svelte-11jv2m5");
			add_location(section, file$1m, 25, 0, 676);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			append_dev(section, t0);
			mount_component(br, section, null);
			append_dev(section, t1);
			append_dev(section, p);
			append_dev(p, span);
			append_dev(span, t2);
			append_dev(p, t3);
			mount_component(icon, p, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*items, dispatch, Dates*/ 3) {
				each_value = /*items*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$f(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$f(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(ul, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(br.$$.fragment, local);
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(br.$$.fragment, local);
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			destroy_each(each_blocks, detaching);
			destroy_component(br);
			destroy_component(icon);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1n.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1n($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();

	let { items = new Array(3).fill({
		title: null,
		subtitle: null,
		created_at: null,
		likes: null
	}) } = $$props;

	const writable_props = ["items"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<NewsList> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("NewsList", $$slots, []);
	const click_handler = (item, index) => dispatch("click", { item, index });

	$$self.$set = $$props => {
		if ("items" in $$props) $$invalidate(0, items = $$props.items);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		onMount,
		API,
		Dates: dayjs_min,
		Br,
		Icon,
		Button,
		NewsItem,
		dispatch,
		items
	});

	$$self.$inject_state = $$props => {
		if ("items" in $$props) $$invalidate(0, items = $$props.items);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [items, dispatch, click_handler];
}

class NewsList extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-11jv2m5-style")) add_css$D();
		init(this, options, instance$1n, create_fragment$1n, safe_not_equal, { items: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "NewsList",
			options,
			id: create_fragment$1n.name
		});
	}

	get items() {
		throw new Error("<NewsList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set items(value) {
		throw new Error("<NewsList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/fundCards/FundCard.svelte generated by Svelte v3.24.0 */
const file$1n = "src/components/fundCards/FundCard.svelte";
const get_button_slot_changes = dirty => ({});
const get_button_slot_context = ctx => ({});

// (39:12) {:else}
function create_else_block_2$3(ctx) {
	let loader0;
	let t;
	let loader1;
	let current;
	loader0 = new Loader({ props: { type: "h2" }, $$inline: true });
	loader1 = new Loader({ props: { type: "h2" }, $$inline: true });

	const block = {
		c: function create() {
			create_component(loader0.$$.fragment);
			t = space();
			create_component(loader1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(loader0.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(loader1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(loader0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(loader1, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(loader0.$$.fragment, local);
			transition_in(loader1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(loader0.$$.fragment, local);
			transition_out(loader1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(loader0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(loader1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_2$3.name,
		type: "else",
		source: "(39:12) {:else}",
		ctx
	});

	return block;
}

// (35:12) {#if title !== null}
function create_if_block_2$9(ctx) {
	let h2;
	let t;

	const block = {
		c: function create() {
			h2 = element("h2");
			t = text(/*title*/ ctx[2]);
			this.h();
		},
		l: function claim(nodes) {
			h2 = claim_element(nodes, "H2", { class: true, style: true });
			var h2_nodes = children(h2);
			t = claim_text(h2_nodes, /*title*/ ctx[2]);
			h2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "text-ellipsis-multiline");
			set_style(h2, "--max-lines", "2");
			add_location(h2, file$1n, 35, 16, 1242);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			append_dev(h2, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data_dev(t, /*title*/ ctx[2]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$9.name,
		type: "if",
		source: "(35:12) {#if title !== null}",
		ctx
	});

	return block;
}

// (53:12) {:else}
function create_else_block_1$6(ctx) {
	let div;
	let loader;
	let current;
	loader = new Loader({ props: { type: "p" }, $$inline: true });

	const block = {
		c: function create() {
			div = element("div");
			create_component(loader.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { style: true });
			var div_nodes = children(div);
			claim_component(loader.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(div, "width", "40%");
			add_location(div, file$1n, 53, 16, 1865);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(loader, div, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(loader.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(loader.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(loader);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1$6.name,
		type: "else",
		source: "(53:12) {:else}",
		ctx
	});

	return block;
}

// (46:12) {#if city !== null}
function create_if_block_1$k(ctx) {
	let p;
	let icon;
	let t0;
	let s;
	let t1;
	let span;
	let t2;
	let t3;
	let br;
	let current;

	icon = new Icon({
			props: { type: "location", size: "small" },
			$$inline: true
		});

	br = new Br({ props: { size: "10" }, $$inline: true });

	const block = {
		c: function create() {
			p = element("p");
			create_component(icon.$$.fragment);
			t0 = space();
			s = element("s");
			t1 = space();
			span = element("span");
			t2 = text(/*city*/ ctx[1]);
			t3 = space();
			create_component(br.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true, style: true });
			var p_nodes = children(p);
			claim_component(icon.$$.fragment, p_nodes);
			t0 = claim_space(p_nodes);
			s = claim_element(p_nodes, "S", {});
			children(s).forEach(detach_dev);
			t1 = claim_space(p_nodes);
			span = claim_element(p_nodes, "SPAN", {});
			var span_nodes = children(span);
			t2 = claim_text(span_nodes, /*city*/ ctx[1]);
			span_nodes.forEach(detach_dev);
			p_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			claim_component(br.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			add_location(s, file$1n, 48, 20, 1723);
			add_location(span, file$1n, 49, 20, 1751);
			attr_dev(p, "class", "flex flex-align-center font-secondary font-w-500");
			set_style(p, "opacity", ".7");
			set_style(p, "margin-left", "-2px");
			add_location(p, file$1n, 46, 16, 1546);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			mount_component(icon, p, null);
			append_dev(p, t0);
			append_dev(p, s);
			append_dev(p, t1);
			append_dev(p, span);
			append_dev(span, t2);
			insert_dev(target, t3, anchor);
			mount_component(br, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (!current || dirty & /*city*/ 2) set_data_dev(t2, /*city*/ ctx[1]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			transition_in(br.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			transition_out(br.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
			destroy_component(icon);
			if (detaching) detach_dev(t3);
			destroy_component(br, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$k.name,
		type: "if",
		source: "(46:12) {#if city !== null}",
		ctx
	});

	return block;
}

// (64:16) {:else}
function create_else_block$d(ctx) {
	let div;
	let loader;
	let current;
	loader = new Loader({ props: { type: "h1" }, $$inline: true });

	const block = {
		c: function create() {
			div = element("div");
			create_component(loader.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { style: true });
			var div_nodes = children(div);
			claim_component(loader.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(div, "width", "80%");
			set_style(div, "flex", "none");
			add_location(div, file$1n, 64, 20, 2333);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(loader, div, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(loader.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(loader.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(loader);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$d.name,
		type: "else",
		source: "(64:16) {:else}",
		ctx
	});

	return block;
}

// (60:16) {#if current !== null && total !== null}
function create_if_block$t(ctx) {
	let span0;
	let t0;
	let t1;
	let t2;
	let t3;
	let s;
	let t4;
	let span1;
	let t5;
	let t6;
	let t7;
	let t8;

	const block = {
		c: function create() {
			span0 = element("span");
			t0 = text(/*currency*/ ctx[5]);
			t1 = space();
			t2 = text(/*current*/ ctx[4]);
			t3 = space();
			s = element("s");
			t4 = space();
			span1 = element("span");
			t5 = text("/ ");
			t6 = text(/*currency*/ ctx[5]);
			t7 = space();
			t8 = text(/*total*/ ctx[3]);
			this.h();
		},
		l: function claim(nodes) {
			span0 = claim_element(nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);
			t0 = claim_text(span0_nodes, /*currency*/ ctx[5]);
			t1 = claim_space(span0_nodes);
			t2 = claim_text(span0_nodes, /*current*/ ctx[4]);
			span0_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			s = claim_element(nodes, "S", {});
			children(s).forEach(detach_dev);
			t4 = claim_space(nodes);
			span1 = claim_element(nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			t5 = claim_text(span1_nodes, "/ ");
			t6 = claim_text(span1_nodes, /*currency*/ ctx[5]);
			t7 = claim_space(span1_nodes);
			t8 = claim_text(span1_nodes, /*total*/ ctx[3]);
			span1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span0, "class", "h1 font-w-500");
			add_location(span0, file$1n, 60, 20, 2140);
			add_location(s, file$1n, 61, 20, 2216);
			attr_dev(span1, "class", "h4");
			add_location(span1, file$1n, 62, 20, 2244);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span0, anchor);
			append_dev(span0, t0);
			append_dev(span0, t1);
			append_dev(span0, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, s, anchor);
			insert_dev(target, t4, anchor);
			insert_dev(target, span1, anchor);
			append_dev(span1, t5);
			append_dev(span1, t6);
			append_dev(span1, t7);
			append_dev(span1, t8);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*currency*/ 32) set_data_dev(t0, /*currency*/ ctx[5]);
			if (dirty & /*current*/ 16) set_data_dev(t2, /*current*/ ctx[4]);
			if (dirty & /*currency*/ 32) set_data_dev(t6, /*currency*/ ctx[5]);
			if (dirty & /*total*/ 8) set_data_dev(t8, /*total*/ ctx[3]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(span0);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(s);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(span1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$t.name,
		type: "if",
		source: "(60:16) {#if current !== null && total !== null}",
		ctx
	});

	return block;
}

// (19:0) <Card class="flex flex-column">
function create_default_slot$O(ctx) {
	let div0;
	let carousel;
	let t0;
	let section;
	let div1;
	let br0;
	let t1;
	let current_block_type_index;
	let if_block0;
	let t2;
	let br1;
	let t3;
	let current_block_type_index_1;
	let if_block1;
	let t4;
	let div2;
	let p;
	let current_block_type_index_2;
	let if_block2;
	let t5;
	let br2;
	let t6;
	let progress;
	let t7;
	let br3;
	let t8;
	let t9;
	let br4;
	let current;

	carousel = new Carousel({
			props: {
				items: [
					{
						src: /*src*/ ctx[0],
						alt: /*title*/ ctx[2]
					},
					{
						src: /*src*/ ctx[0],
						alt: /*title*/ ctx[2]
					},
					{
						src: /*src*/ ctx[0],
						alt: /*title*/ ctx[2]
					}
				],
				disableFancy: true,
				dotsBelow: false,
				rounded: false,
				stopPropagation: true
			},
			$$inline: true
		});

	br0 = new Br({ props: { size: "20" }, $$inline: true });
	const if_block_creators = [create_if_block_2$9, create_else_block_2$3];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*title*/ ctx[2] !== null) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	br1 = new Br({ props: { size: "5" }, $$inline: true });
	const if_block_creators_1 = [create_if_block_1$k, create_else_block_1$6];
	const if_blocks_1 = [];

	function select_block_type_1(ctx, dirty) {
		if (/*city*/ ctx[1] !== null) return 0;
		return 1;
	}

	current_block_type_index_1 = select_block_type_1(ctx);
	if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
	const if_block_creators_2 = [create_if_block$t, create_else_block$d];
	const if_blocks_2 = [];

	function select_block_type_2(ctx, dirty) {
		if (/*current*/ ctx[4] !== null && /*total*/ ctx[3] !== null) return 0;
		return 1;
	}

	current_block_type_index_2 = select_block_type_2(ctx);
	if_block2 = if_blocks_2[current_block_type_index_2] = if_block_creators_2[current_block_type_index_2](ctx);
	br2 = new Br({ props: { size: "20" }, $$inline: true });

	progress = new Progress({
			props: {
				value: Math.floor(/*current*/ ctx[4] / /*total*/ ctx[3] * 100)
			},
			$$inline: true
		});

	br3 = new Br({ props: { size: "40" }, $$inline: true });
	const button_slot_template = /*$$slots*/ ctx[6].button;
	const button_slot = create_slot(button_slot_template, ctx, /*$$scope*/ ctx[7], get_button_slot_context);
	br4 = new Br({ props: { size: "30" }, $$inline: true });

	const block = {
		c: function create() {
			div0 = element("div");
			create_component(carousel.$$.fragment);
			t0 = space();
			section = element("section");
			div1 = element("div");
			create_component(br0.$$.fragment);
			t1 = space();
			if_block0.c();
			t2 = space();
			create_component(br1.$$.fragment);
			t3 = space();
			if_block1.c();
			t4 = space();
			div2 = element("div");
			p = element("p");
			if_block2.c();
			t5 = space();
			create_component(br2.$$.fragment);
			t6 = space();
			create_component(progress.$$.fragment);
			t7 = space();
			create_component(br3.$$.fragment);
			t8 = space();
			if (button_slot) button_slot.c();
			t9 = space();
			create_component(br4.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { style: true, class: true });
			var div0_nodes = children(div0);
			claim_component(carousel.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div1 = claim_element(section_nodes, "DIV", { class: true, style: true });
			var div1_nodes = children(div1);
			claim_component(br0.$$.fragment, div1_nodes);
			t1 = claim_space(div1_nodes);
			if_block0.l(div1_nodes);
			t2 = claim_space(div1_nodes);
			claim_component(br1.$$.fragment, div1_nodes);
			t3 = claim_space(div1_nodes);
			if_block1.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			t4 = claim_space(section_nodes);
			div2 = claim_element(section_nodes, "DIV", {});
			var div2_nodes = children(div2);
			p = claim_element(div2_nodes, "P", { class: true, style: true });
			var p_nodes = children(p);
			if_block2.l(p_nodes);
			p_nodes.forEach(detach_dev);
			t5 = claim_space(div2_nodes);
			claim_component(br2.$$.fragment, div2_nodes);
			t6 = claim_space(div2_nodes);
			claim_component(progress.$$.fragment, div2_nodes);
			t7 = claim_space(div2_nodes);
			claim_component(br3.$$.fragment, div2_nodes);
			t8 = claim_space(div2_nodes);
			if (button_slot) button_slot.l(div2_nodes);
			t9 = claim_space(div2_nodes);
			claim_component(br4.$$.fragment, div2_nodes);
			div2_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(div0, "height", "160px");
			attr_dev(div0, "class", "flex flex-none");
			add_location(div0, file$1n, 20, 4, 629);
			attr_dev(div1, "class", "flex-none overflow-hidden");
			set_style(div1, "height", "calc(2 * var(--font-line-height-h2) + var(--font-line-height) + 20px + 5px + 10px)");
			add_location(div1, file$1n, 31, 8, 1020);
			attr_dev(p, "class", "font-secondary flex flex-wrap flex-align-end");
			set_style(p, "letter-spacing", "-0.5px");
			add_location(p, file$1n, 58, 12, 1975);
			add_location(div2, file$1n, 57, 8, 1957);
			attr_dev(section, "class", "container flex flex-column flex-justify-between flex-1");
			add_location(section, file$1n, 30, 4, 939);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			mount_component(carousel, div0, null);
			insert_dev(target, t0, anchor);
			insert_dev(target, section, anchor);
			append_dev(section, div1);
			mount_component(br0, div1, null);
			append_dev(div1, t1);
			if_blocks[current_block_type_index].m(div1, null);
			append_dev(div1, t2);
			mount_component(br1, div1, null);
			append_dev(div1, t3);
			if_blocks_1[current_block_type_index_1].m(div1, null);
			append_dev(section, t4);
			append_dev(section, div2);
			append_dev(div2, p);
			if_blocks_2[current_block_type_index_2].m(p, null);
			append_dev(div2, t5);
			mount_component(br2, div2, null);
			append_dev(div2, t6);
			mount_component(progress, div2, null);
			append_dev(div2, t7);
			mount_component(br3, div2, null);
			append_dev(div2, t8);

			if (button_slot) {
				button_slot.m(div2, null);
			}

			append_dev(div2, t9);
			mount_component(br4, div2, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const carousel_changes = {};

			if (dirty & /*src, title*/ 5) carousel_changes.items = [
				{
					src: /*src*/ ctx[0],
					alt: /*title*/ ctx[2]
				},
				{
					src: /*src*/ ctx[0],
					alt: /*title*/ ctx[2]
				},
				{
					src: /*src*/ ctx[0],
					alt: /*title*/ ctx[2]
				}
			];

			carousel.$set(carousel_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				}

				transition_in(if_block0, 1);
				if_block0.m(div1, t2);
			}

			let previous_block_index_1 = current_block_type_index_1;
			current_block_type_index_1 = select_block_type_1(ctx);

			if (current_block_type_index_1 === previous_block_index_1) {
				if_blocks_1[current_block_type_index_1].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
					if_blocks_1[previous_block_index_1] = null;
				});

				check_outros();
				if_block1 = if_blocks_1[current_block_type_index_1];

				if (!if_block1) {
					if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
					if_block1.c();
				}

				transition_in(if_block1, 1);
				if_block1.m(div1, null);
			}

			let previous_block_index_2 = current_block_type_index_2;
			current_block_type_index_2 = select_block_type_2(ctx);

			if (current_block_type_index_2 === previous_block_index_2) {
				if_blocks_2[current_block_type_index_2].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks_2[previous_block_index_2], 1, 1, () => {
					if_blocks_2[previous_block_index_2] = null;
				});

				check_outros();
				if_block2 = if_blocks_2[current_block_type_index_2];

				if (!if_block2) {
					if_block2 = if_blocks_2[current_block_type_index_2] = if_block_creators_2[current_block_type_index_2](ctx);
					if_block2.c();
				}

				transition_in(if_block2, 1);
				if_block2.m(p, null);
			}

			const progress_changes = {};
			if (dirty & /*current, total*/ 24) progress_changes.value = Math.floor(/*current*/ ctx[4] / /*total*/ ctx[3] * 100);
			progress.$set(progress_changes);

			if (button_slot) {
				if (button_slot.p && dirty & /*$$scope*/ 128) {
					update_slot(button_slot, button_slot_template, ctx, /*$$scope*/ ctx[7], dirty, get_button_slot_changes, get_button_slot_context);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(carousel.$$.fragment, local);
			transition_in(br0.$$.fragment, local);
			transition_in(if_block0);
			transition_in(br1.$$.fragment, local);
			transition_in(if_block1);
			transition_in(if_block2);
			transition_in(br2.$$.fragment, local);
			transition_in(progress.$$.fragment, local);
			transition_in(br3.$$.fragment, local);
			transition_in(button_slot, local);
			transition_in(br4.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(carousel.$$.fragment, local);
			transition_out(br0.$$.fragment, local);
			transition_out(if_block0);
			transition_out(br1.$$.fragment, local);
			transition_out(if_block1);
			transition_out(if_block2);
			transition_out(br2.$$.fragment, local);
			transition_out(progress.$$.fragment, local);
			transition_out(br3.$$.fragment, local);
			transition_out(button_slot, local);
			transition_out(br4.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			destroy_component(carousel);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(section);
			destroy_component(br0);
			if_blocks[current_block_type_index].d();
			destroy_component(br1);
			if_blocks_1[current_block_type_index_1].d();
			if_blocks_2[current_block_type_index_2].d();
			destroy_component(br2);
			destroy_component(progress);
			destroy_component(br3);
			if (button_slot) button_slot.d(detaching);
			destroy_component(br4);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$O.name,
		type: "slot",
		source: "(19:0) <Card class=\\\"flex flex-column\\\">",
		ctx
	});

	return block;
}

function create_fragment$1o(ctx) {
	let card;
	let current;

	card = new Card({
			props: {
				class: "flex flex-column",
				$$slots: { default: [create_default_slot$O] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(card.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(card.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(card, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const card_changes = {};

			if (dirty & /*$$scope, current, total, currency, city, title, src*/ 191) {
				card_changes.$$scope = { dirty, ctx };
			}

			card.$set(card_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(card, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1o.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1o($$self, $$props, $$invalidate) {
	let { src = null } = $$props;
	let { city = null } = $$props;
	let { title = null } = $$props;
	let { total = null } = $$props;
	let { current = null } = $$props;
	let { currency = null } = $$props;
	const writable_props = ["src", "city", "title", "total", "current", "currency"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<FundCard> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("FundCard", $$slots, ['button']);

	$$self.$set = $$props => {
		if ("src" in $$props) $$invalidate(0, src = $$props.src);
		if ("city" in $$props) $$invalidate(1, city = $$props.city);
		if ("title" in $$props) $$invalidate(2, title = $$props.title);
		if ("total" in $$props) $$invalidate(3, total = $$props.total);
		if ("current" in $$props) $$invalidate(4, current = $$props.current);
		if ("currency" in $$props) $$invalidate(5, currency = $$props.currency);
		if ("$$scope" in $$props) $$invalidate(7, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		Br,
		Icon,
		Card,
		Loader,
		Button,
		Progress,
		FancyBox,
		Carousel,
		src,
		city,
		title,
		total,
		current,
		currency
	});

	$$self.$inject_state = $$props => {
		if ("src" in $$props) $$invalidate(0, src = $$props.src);
		if ("city" in $$props) $$invalidate(1, city = $$props.city);
		if ("title" in $$props) $$invalidate(2, title = $$props.title);
		if ("total" in $$props) $$invalidate(3, total = $$props.total);
		if ("current" in $$props) $$invalidate(4, current = $$props.current);
		if ("currency" in $$props) $$invalidate(5, currency = $$props.currency);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [src, city, title, total, current, currency, $$slots, $$scope];
}

class FundCard extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1o, create_fragment$1o, safe_not_equal, {
			src: 0,
			city: 1,
			title: 2,
			total: 3,
			current: 4,
			currency: 5
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FundCard",
			options,
			id: create_fragment$1o.name
		});
	}

	get src() {
		throw new Error("<FundCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set src(value) {
		throw new Error("<FundCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get city() {
		throw new Error("<FundCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set city(value) {
		throw new Error("<FundCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<FundCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<FundCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get total() {
		throw new Error("<FundCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set total(value) {
		throw new Error("<FundCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get current() {
		throw new Error("<FundCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set current(value) {
		throw new Error("<FundCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get currency() {
		throw new Error("<FundCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set currency(value) {
		throw new Error("<FundCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/fundCards/FundCards.svelte generated by Svelte v3.24.0 */
const file$1o = "src/components/fundCards/FundCards.svelte";

function add_css$E() {
	var style = element("style");
	style.id = "svelte-yc0ge7-style";
	style.textContent = ".charities.active .scroll-x-center > *{-webkit-transform:none;transform:none\n}div.svelte-yc0ge7{-webkit-box-flex:0;-ms-flex:none;flex:none;display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-item-align:stretch;align-self:stretch;height:500px;width:77vw;max-width:350px;padding:15px 5px;-webkit-box-sizing:content-box;box-sizing:content-box}div.start.svelte-yc0ge7{padding-left:var(--screen-padding)}div.end.svelte-yc0ge7{padding-right:var(--screen-padding)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRnVuZENhcmRzLnN2ZWx0ZSIsInNvdXJjZXMiOlsiRnVuZENhcmRzLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICAgIGltcG9ydCBDYXJvdXNlbCBmcm9tICdAY29tcG9uZW50cy9DYXJvdXNlbC5zdmVsdGUnXG4gICAgaW1wb3J0IEJ1dHRvbiBmcm9tICdAY29tcG9uZW50cy9CdXR0b24uc3ZlbHRlJ1xuICAgIGltcG9ydCBGdW5kQ2FyZCBmcm9tICcuL0Z1bmRDYXJkLnN2ZWx0ZSdcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHt7XG4gICAgICogIGlkOiBzdHJpbmcsXG4gICAgICogIHNyYzogc3RyaW5nLFxuICAgICAqICB0b3RhbDogbnVtYmVyLFxuICAgICAqICBjdXJyZW50OiBudW1iZXIsXG4gICAgICogIGN1cnJlbmN5OiBzdHJpbmcsXG4gICAgICogIGNpdHk6IHN0cmluZyxcbiAgICAgKiAgdGl0bGU6IHN0cmluZyxcbiAgICAgKiB9fVxuICAgICAqL1xuICAgIGV4cG9ydCBsZXQgaXRlbXMgPSBbe30sIHt9LCB7fV1cbjwvc2NyaXB0PlxuXG48Q2Fyb3VzZWwge2l0ZW1zfSBzaXplPVwiYXV0b1wiIGxldDppbmRleD17aW5kZXh9IGxldDppdGVtPXtpdGVtfSBjbGFzcz1cImNoYXJpdGllc1wiPlxuICAgIDxkaXYgY2xhc3M9eyFpbmRleCA/ICdzdGFydCcgOiBpbmRleCA9PT0gaXRlbXMubGVuZ3RoIC0gMSA/ICdlbmQnIDogJyd9IGtleT17aXRlbS5pZH0+XG4gICAgICAgIDxGdW5kQ2FyZFxuICAgICAgICAgICAgc3JjPXtpdGVtLnNyY31cbiAgICAgICAgICAgIHRvdGFsPXtpdGVtLnRvdGFsfVxuICAgICAgICAgICAgY3VycmVudD17aXRlbS5jdXJyZW50fVxuICAgICAgICAgICAgY3VycmVuY3k9e2l0ZW0uY3VycmVuY3l9XG4gICAgICAgICAgICBjaXR5PXtpdGVtLmNpdHl9XG4gICAgICAgICAgICB0aXRsZT17aXRlbS50aXRsZX1cbiAgICAgICAgPlxuICAgICAgICAgICAgPHNwYW4gc2xvdD1cImJ1dHRvblwiIGxldDppZD17aWR9PlxuICAgICAgICAgICAgICAgIDxzbG90IG5hbWU9XCJidXR0b25cIj5cbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBzaXplPVwiYmlnXCIgaXM9XCJzdWNjZXNzXCIgaHJlZj17aWR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJoMiBmb250LXNlY29uZGFyeSBmb250LXctNjAwXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAg0JTQvtC/0L7QvNC+0LPRgtC4XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvc2xvdD5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9GdW5kQ2FyZD5cbiAgICA8L2Rpdj5cbjwvQ2Fyb3VzZWw+XG5cbjxzdHlsZT5cbjpnbG9iYWwoLmNoYXJpdGllcy5hY3RpdmUgLnNjcm9sbC14LWNlbnRlciA+ICopIHtcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogbm9uZTtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogbm9uZVxufVxuZGl2IHtcbiAgICAtd2Via2l0LWJveC1mbGV4OiAwO1xuICAgICAgICAtbXMtZmxleDogbm9uZTtcbiAgICAgICAgICAgIGZsZXg6IG5vbmU7XG4gICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gICAgZGlzcGxheTogLW1zLWZsZXhib3g7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICAtbXMtZmxleC1pdGVtLWFsaWduOiBzdHJldGNoO1xuICAgICAgICBhbGlnbi1zZWxmOiBzdHJldGNoO1xuICAgIGhlaWdodDogNTAwcHg7XG4gICAgd2lkdGg6IDc3dnc7XG4gICAgbWF4LXdpZHRoOiAzNTBweDtcbiAgICBwYWRkaW5nOiAxNXB4IDVweDtcbiAgICAtd2Via2l0LWJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICAgICAgICAgICAgYm94LXNpemluZzogY29udGVudC1ib3g7XG59XG5cbmRpdi5zdGFydCB7XG4gICAgcGFkZGluZy1sZWZ0OiB2YXIoLS1zY3JlZW4tcGFkZGluZyk7XG59XG5cbmRpdi5lbmQge1xuICAgIHBhZGRpbmctcmlnaHQ6IHZhcigtLXNjcmVlbi1wYWRkaW5nKTtcbn08L3N0eWxlPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJDUSxzQ0FBc0MsQUFBRSxDQUFDLEFBQzdDLGlCQUFpQixDQUFFLElBQUksQ0FDZixTQUFTLENBQUUsSUFBSTtBQUMzQixDQUFDLEFBQ0QsR0FBRyxjQUFDLENBQUMsQUFDRCxnQkFBZ0IsQ0FBRSxDQUFDLENBQ2YsUUFBUSxDQUFFLElBQUksQ0FDVixJQUFJLENBQUUsSUFBSSxDQUNsQixPQUFPLENBQUUsV0FBVyxDQUNwQixPQUFPLENBQUUsV0FBVyxDQUNwQixPQUFPLENBQUUsSUFBSSxDQUNiLG1CQUFtQixDQUFFLE9BQU8sQ0FDeEIsVUFBVSxDQUFFLE9BQU8sQ0FDdkIsTUFBTSxDQUFFLEtBQUssQ0FDYixLQUFLLENBQUUsSUFBSSxDQUNYLFNBQVMsQ0FBRSxLQUFLLENBQ2hCLE9BQU8sQ0FBRSxJQUFJLENBQUMsR0FBRyxDQUNqQixrQkFBa0IsQ0FBRSxXQUFXLENBQ3ZCLFVBQVUsQ0FBRSxXQUFXLEFBQ25DLENBQUMsQUFFRCxHQUFHLE1BQU0sY0FBQyxDQUFDLEFBQ1AsWUFBWSxDQUFFLElBQUksZ0JBQWdCLENBQUMsQUFDdkMsQ0FBQyxBQUVELEdBQUcsSUFBSSxjQUFDLENBQUMsQUFDTCxhQUFhLENBQUUsSUFBSSxnQkFBZ0IsQ0FBQyxBQUN4QyxDQUFDIn0= */";
	append_dev(document.head, style);
}

const get_button_slot_changes$1 = dirty => ({});
const get_button_slot_context$1 = ctx => ({});

// (32:20) <Button size="big" is="success" href={id}>
function create_default_slot_2$4(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Допомогти");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Допомогти");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "h2 font-secondary font-w-600");
			add_location(span, file$1o, 32, 24, 971);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$4.name,
		type: "slot",
		source: "(32:20) <Button size=\\\"big\\\" is=\\\"success\\\" href={id}>",
		ctx
	});

	return block;
}

// (31:36)                      
function fallback_block$a(ctx) {
	let button;
	let current;

	button = new Button({
			props: {
				size: "big",
				is: "success",
				href: /*id*/ ctx[5],
				$$slots: { default: [create_default_slot_2$4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(button.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(button.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};
			if (dirty & /*id*/ 32) button_changes.href = /*id*/ ctx[5];

			if (dirty & /*$$scope*/ 4) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(button, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block$a.name,
		type: "fallback",
		source: "(31:36)                      ",
		ctx
	});

	return block;
}

// (30:12) <span slot="button" let:id={id}>
function create_button_slot(ctx) {
	let span;
	let current;
	const button_slot_template = /*$$slots*/ ctx[1].button;
	const button_slot = create_slot(button_slot_template, ctx, /*$$scope*/ ctx[2], get_button_slot_context$1);
	const button_slot_or_fallback = button_slot || fallback_block$a(ctx);

	const block = {
		c: function create() {
			span = element("span");
			if (button_slot_or_fallback) button_slot_or_fallback.c();
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			if (button_slot_or_fallback) button_slot_or_fallback.l(span_nodes);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "button");
			add_location(span, file$1o, 29, 12, 814);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);

			if (button_slot_or_fallback) {
				button_slot_or_fallback.m(span, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (button_slot) {
				if (button_slot.p && dirty & /*$$scope*/ 4) {
					update_slot(button_slot, button_slot_template, ctx, /*$$scope*/ ctx[2], dirty, get_button_slot_changes$1, get_button_slot_context$1);
				}
			} else {
				if (button_slot_or_fallback && button_slot_or_fallback.p && dirty & /*id*/ 32) {
					button_slot_or_fallback.p(ctx, dirty);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button_slot_or_fallback, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button_slot_or_fallback, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			if (button_slot_or_fallback) button_slot_or_fallback.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_button_slot.name,
		type: "slot",
		source: "(30:12) <span slot=\\\"button\\\" let:id={id}>",
		ctx
	});

	return block;
}

// (20:0) <Carousel {items} size="auto" let:index={index} let:item={item} class="charities">
function create_default_slot$P(ctx) {
	let div;
	let fundcard;
	let div_class_value;
	let div_key_value;
	let current;

	fundcard = new FundCard({
			props: {
				src: /*item*/ ctx[4].src,
				total: /*item*/ ctx[4].total,
				current: /*item*/ ctx[4].current,
				currency: /*item*/ ctx[4].currency,
				city: /*item*/ ctx[4].city,
				title: /*item*/ ctx[4].title,
				$$slots: {
					button: [create_button_slot, ({ id }) => ({ 5: id }), ({ id }) => id ? 32 : 0]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(fundcard.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, key: true });
			var div_nodes = children(div);
			claim_component(fundcard.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", div_class_value = "" + (null_to_empty(!/*index*/ ctx[3]
			? "start"
			: /*index*/ ctx[3] === /*items*/ ctx[0].length - 1
				? "end"
				: "") + " svelte-yc0ge7"));

			attr_dev(div, "key", div_key_value = /*item*/ ctx[4].id);
			add_location(div, file$1o, 20, 4, 497);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(fundcard, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const fundcard_changes = {};
			if (dirty & /*item*/ 16) fundcard_changes.src = /*item*/ ctx[4].src;
			if (dirty & /*item*/ 16) fundcard_changes.total = /*item*/ ctx[4].total;
			if (dirty & /*item*/ 16) fundcard_changes.current = /*item*/ ctx[4].current;
			if (dirty & /*item*/ 16) fundcard_changes.currency = /*item*/ ctx[4].currency;
			if (dirty & /*item*/ 16) fundcard_changes.city = /*item*/ ctx[4].city;
			if (dirty & /*item*/ 16) fundcard_changes.title = /*item*/ ctx[4].title;

			if (dirty & /*$$scope, id*/ 36) {
				fundcard_changes.$$scope = { dirty, ctx };
			}

			fundcard.$set(fundcard_changes);

			if (!current || dirty & /*index, items*/ 9 && div_class_value !== (div_class_value = "" + (null_to_empty(!/*index*/ ctx[3]
			? "start"
			: /*index*/ ctx[3] === /*items*/ ctx[0].length - 1
				? "end"
				: "") + " svelte-yc0ge7"))) {
				attr_dev(div, "class", div_class_value);
			}

			if (!current || dirty & /*item*/ 16 && div_key_value !== (div_key_value = /*item*/ ctx[4].id)) {
				attr_dev(div, "key", div_key_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(fundcard.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(fundcard.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(fundcard);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$P.name,
		type: "slot",
		source: "(20:0) <Carousel {items} size=\\\"auto\\\" let:index={index} let:item={item} class=\\\"charities\\\">",
		ctx
	});

	return block;
}

function create_fragment$1p(ctx) {
	let carousel;
	let current;

	carousel = new Carousel({
			props: {
				items: /*items*/ ctx[0],
				size: "auto",
				class: "charities",
				$$slots: {
					default: [
						create_default_slot$P,
						({ index, item }) => ({ 3: index, 4: item }),
						({ index, item }) => (index ? 8 : 0) | (item ? 16 : 0)
					]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(carousel.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(carousel.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(carousel, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const carousel_changes = {};
			if (dirty & /*items*/ 1) carousel_changes.items = /*items*/ ctx[0];

			if (dirty & /*$$scope, index, items, item*/ 29) {
				carousel_changes.$$scope = { dirty, ctx };
			}

			carousel.$set(carousel_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(carousel.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(carousel.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(carousel, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1p.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1p($$self, $$props, $$invalidate) {
	let { items = [{}, {}, {}] } = $$props;
	const writable_props = ["items"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<FundCards> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("FundCards", $$slots, ['button']);

	$$self.$set = $$props => {
		if ("items" in $$props) $$invalidate(0, items = $$props.items);
		if ("$$scope" in $$props) $$invalidate(2, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({ Carousel, Button, FundCard, items });

	$$self.$inject_state = $$props => {
		if ("items" in $$props) $$invalidate(0, items = $$props.items);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [items, $$slots, $$scope];
}

class FundCards extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-yc0ge7-style")) add_css$E();
		init(this, options, instance$1p, create_fragment$1p, safe_not_equal, { items: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FundCards",
			options,
			id: create_fragment$1p.name
		});
	}

	get items() {
		throw new Error("<FundCards>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set items(value) {
		throw new Error("<FundCards>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/_layout.svelte generated by Svelte v3.24.0 */
const file$1p = "src/routes/_layout.svelte";

function create_fragment$1q(ctx) {
	let main;
	let header;
	let t0;
	let section;
	let t1;
	let offlinemessage;
	let current;

	header = new Header({
			props: { segment: /*segment*/ ctx[0] },
			$$inline: true
		});

	const default_slot_template = /*$$slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);
	offlinemessage = new OfflineMessage({ $$inline: true });

	const block = {
		c: function create() {
			main = element("main");
			create_component(header.$$.fragment);
			t0 = space();
			section = element("section");
			if (default_slot) default_slot.c();
			t1 = space();
			create_component(offlinemessage.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			main = claim_element(nodes, "MAIN", { id: true, class: true });
			var main_nodes = children(main);
			claim_component(header.$$.fragment, main_nodes);
			t0 = claim_space(main_nodes);
			section = claim_element(main_nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			if (default_slot) default_slot.l(section_nodes);
			section_nodes.forEach(detach_dev);
			t1 = claim_space(main_nodes);
			claim_component(offlinemessage.$$.fragment, main_nodes);
			main_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(section, "class", "pages");
			add_location(section, file$1p, 20, 1, 519);
			attr_dev(main, "id", "main");
			attr_dev(main, "class", /*classProp*/ ctx[1]);
			add_location(main, file$1p, 17, 0, 461);
		},
		m: function mount(target, anchor) {
			insert_dev(target, main, anchor);
			mount_component(header, main, null);
			append_dev(main, t0);
			append_dev(main, section);

			if (default_slot) {
				default_slot.m(section, null);
			}

			append_dev(main, t1);
			mount_component(offlinemessage, main, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const header_changes = {};
			if (dirty & /*segment*/ 1) header_changes.segment = /*segment*/ ctx[0];
			header.$set(header_changes);

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 4) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[2], dirty, null, null);
				}
			}

			if (!current || dirty & /*classProp*/ 2) {
				attr_dev(main, "class", /*classProp*/ ctx[1]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(header.$$.fragment, local);
			transition_in(default_slot, local);
			transition_in(offlinemessage.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(header.$$.fragment, local);
			transition_out(default_slot, local);
			transition_out(offlinemessage.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(main);
			destroy_component(header);
			if (default_slot) default_slot.d(detaching);
			destroy_component(offlinemessage);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1q.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1q($$self, $$props, $$invalidate) {
	let { segment } = $$props;
	let theme = safeGet(() => cookieStorage.get("theme") || localStorage.get("theme"));

	onMount(() => {
		disableDoubleTapZoom([document]);
	});

	const writable_props = ["segment"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Layout> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Layout", $$slots, ['default']);

	$$self.$set = $$props => {
		if ("segment" in $$props) $$invalidate(0, segment = $$props.segment);
		if ("$$scope" in $$props) $$invalidate(2, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		onMount,
		Header,
		OfflineMessage,
		Storages,
		safeGet,
		disableDoubleTapZoom,
		classnames,
		segment,
		theme,
		classProp
	});

	$$self.$inject_state = $$props => {
		if ("segment" in $$props) $$invalidate(0, segment = $$props.segment);
		if ("theme" in $$props) $$invalidate(4, theme = $$props.theme);
		if ("classProp" in $$props) $$invalidate(1, classProp = $$props.classProp);
	};

	let classProp;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	 $$invalidate(1, classProp = classnames("theme-bg-color-secondary", theme));
	return [segment, classProp, $$scope, $$slots];
}

class Layout extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1q, create_fragment$1q, safe_not_equal, { segment: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Layout",
			options,
			id: create_fragment$1q.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*segment*/ ctx[0] === undefined && !("segment" in props)) {
			console.warn("<Layout> was created without expected prop 'segment'");
		}
	}

	get segment() {
		throw new Error("<Layout>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set segment(value) {
		throw new Error("<Layout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/_error.svelte generated by Svelte v3.24.0 */

const { Error: Error_1$1 } = globals;
const file$1q = "src/routes/_error.svelte";

function create_fragment$1r(ctx) {
	let title_value;
	let t0;
	let br0;
	let t1;
	let br1;
	let t2;
	let br2;
	let t3;
	let br3;
	let t4;
	let div0;
	let h10;
	let t5;
	let t6;
	let div1;
	let h11;
	let t7;
	let t8;
	let t9;
	let br4;
	let t10;
	let p;
	let t11;
	let t12_value = /*error*/ ctx[1].message + "";
	let t12;
	let t13;
	let br5;
	let t14;
	let br6;
	document.title = title_value = "Error: " + /*status*/ ctx[0];

	const block = {
		c: function create() {
			t0 = space();
			br0 = element("br");
			t1 = space();
			br1 = element("br");
			t2 = space();
			br2 = element("br");
			t3 = space();
			br3 = element("br");
			t4 = space();
			div0 = element("div");
			h10 = element("h1");
			t5 = text("ой 🙃");
			t6 = space();
			div1 = element("div");
			h11 = element("h1");
			t7 = text("Error: ");
			t8 = text(/*status*/ ctx[0]);
			t9 = space();
			br4 = element("br");
			t10 = space();
			p = element("p");
			t11 = text("Reason: ");
			t12 = text(t12_value);
			t13 = space();
			br5 = element("br");
			t14 = space();
			br6 = element("br");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-oxohxa\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			br0 = claim_element(nodes, "BR", {});
			t1 = claim_space(nodes);
			br1 = claim_element(nodes, "BR", {});
			t2 = claim_space(nodes);
			br2 = claim_element(nodes, "BR", {});
			t3 = claim_space(nodes);
			br3 = claim_element(nodes, "BR", {});
			t4 = claim_space(nodes);
			div0 = claim_element(nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h10 = claim_element(div0_nodes, "H1", {});
			var h10_nodes = children(h10);
			t5 = claim_text(h10_nodes, "ой 🙃");
			h10_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t6 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { hidden: true, class: true });
			var div1_nodes = children(div1);
			h11 = claim_element(div1_nodes, "H1", {});
			var h11_nodes = children(h11);
			t7 = claim_text(h11_nodes, "Error: ");
			t8 = claim_text(h11_nodes, /*status*/ ctx[0]);
			h11_nodes.forEach(detach_dev);
			t9 = claim_space(div1_nodes);
			br4 = claim_element(div1_nodes, "BR", {});
			t10 = claim_space(div1_nodes);
			p = claim_element(div1_nodes, "P", {});
			var p_nodes = children(p);
			t11 = claim_text(p_nodes, "Reason: ");
			t12 = claim_text(p_nodes, t12_value);
			p_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t13 = claim_space(nodes);
			br5 = claim_element(nodes, "BR", {});
			t14 = claim_space(nodes);
			br6 = claim_element(nodes, "BR", {});
			this.h();
		},
		h: function hydrate() {
			add_location(br0, file$1q, 13, 0, 185);
			add_location(br1, file$1q, 14, 0, 190);
			add_location(br2, file$1q, 15, 0, 195);
			add_location(br3, file$1q, 16, 0, 200);
			add_location(h10, file$1q, 18, 1, 232);
			attr_dev(div0, "class", "text-center");
			add_location(div0, file$1q, 17, 0, 205);
			add_location(h11, file$1q, 21, 1, 288);
			add_location(br4, file$1q, 22, 1, 314);
			add_location(p, file$1q, 23, 1, 320);
			div1.hidden = true;
			attr_dev(div1, "class", "text-center");
			add_location(div1, file$1q, 20, 0, 254);
			add_location(br5, file$1q, 25, 0, 358);
			add_location(br6, file$1q, 26, 0, 363);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, br0, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, br1, anchor);
			insert_dev(target, t2, anchor);
			insert_dev(target, br2, anchor);
			insert_dev(target, t3, anchor);
			insert_dev(target, br3, anchor);
			insert_dev(target, t4, anchor);
			insert_dev(target, div0, anchor);
			append_dev(div0, h10);
			append_dev(h10, t5);
			insert_dev(target, t6, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, h11);
			append_dev(h11, t7);
			append_dev(h11, t8);
			append_dev(div1, t9);
			append_dev(div1, br4);
			append_dev(div1, t10);
			append_dev(div1, p);
			append_dev(p, t11);
			append_dev(p, t12);
			insert_dev(target, t13, anchor);
			insert_dev(target, br5, anchor);
			insert_dev(target, t14, anchor);
			insert_dev(target, br6, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*status*/ 1 && title_value !== (title_value = "Error: " + /*status*/ ctx[0])) {
				document.title = title_value;
			}

			if (dirty & /*status*/ 1) set_data_dev(t8, /*status*/ ctx[0]);
			if (dirty & /*error*/ 2 && t12_value !== (t12_value = /*error*/ ctx[1].message + "")) set_data_dev(t12, t12_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(br0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(br1);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(br2);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(br3);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(div0);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(div1);
			if (detaching) detach_dev(t13);
			if (detaching) detach_dev(br5);
			if (detaching) detach_dev(t14);
			if (detaching) detach_dev(br6);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1r.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1r($$self, $$props, $$invalidate) {
	let { status } = $$props;
	let { error } = $$props;
	const dev = "development" === "development";
	const writable_props = ["status", "error"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Error> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Error", $$slots, []);

	$$self.$set = $$props => {
		if ("status" in $$props) $$invalidate(0, status = $$props.status);
		if ("error" in $$props) $$invalidate(1, error = $$props.error);
	};

	$$self.$capture_state = () => ({ status, error, dev });

	$$self.$inject_state = $$props => {
		if ("status" in $$props) $$invalidate(0, status = $$props.status);
		if ("error" in $$props) $$invalidate(1, error = $$props.error);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [status, error];
}

class Error$1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1r, create_fragment$1r, safe_not_equal, { status: 0, error: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Error",
			options,
			id: create_fragment$1r.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*status*/ ctx[0] === undefined && !("status" in props)) {
			console.warn("<Error> was created without expected prop 'status'");
		}

		if (/*error*/ ctx[1] === undefined && !("error" in props)) {
			console.warn("<Error> was created without expected prop 'error'");
		}
	}

	get status() {
		throw new Error_1$1("<Error>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set status(value) {
		throw new Error_1$1("<Error>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get error() {
		throw new Error_1$1("<Error>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set error(value) {
		throw new Error_1$1("<Error>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/node_modules/@sapper/internal/App.svelte generated by Svelte v3.24.0 */

const { Error: Error_1$2 } = globals;

// (24:1) {:else}
function create_else_block$e(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	const switch_instance_spread_levels = [{ segment: /*segments*/ ctx[2][1] }, /*level1*/ ctx[4].props];
	var switch_value = /*level1*/ ctx[4].component;

	function switch_props(ctx) {
		let switch_instance_props = {
			$$slots: { default: [create_default_slot_1$7] },
			$$scope: { ctx }
		};

		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
		}

		return {
			props: switch_instance_props,
			$$inline: true
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	const block = {
		c: function create() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		l: function claim(nodes) {
			if (switch_instance) claim_component(switch_instance.$$.fragment, nodes);
			switch_instance_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert_dev(target, switch_instance_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const switch_instance_changes = (dirty & /*segments, level1*/ 20)
			? get_spread_update(switch_instance_spread_levels, [
					dirty & /*segments*/ 4 && { segment: /*segments*/ ctx[2][1] },
					dirty & /*level1*/ 16 && get_spread_object(/*level1*/ ctx[4].props)
				])
			: {};

			if (dirty & /*$$scope, level2*/ 288) {
				switch_instance_changes.$$scope = { dirty, ctx };
			}

			if (switch_value !== (switch_value = /*level1*/ ctx[4].component)) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i: function intro(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$e.name,
		type: "else",
		source: "(24:1) {:else}",
		ctx
	});

	return block;
}

// (22:1) {#if error}
function create_if_block$u(ctx) {
	let error_1;
	let current;

	error_1 = new Error$1({
			props: {
				error: /*error*/ ctx[0],
				status: /*status*/ ctx[1]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(error_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(error_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(error_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const error_1_changes = {};
			if (dirty & /*error*/ 1) error_1_changes.error = /*error*/ ctx[0];
			if (dirty & /*status*/ 2) error_1_changes.status = /*status*/ ctx[1];
			error_1.$set(error_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(error_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(error_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(error_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$u.name,
		type: "if",
		source: "(22:1) {#if error}",
		ctx
	});

	return block;
}

// (26:3) {#if level2}
function create_if_block_1$l(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	const switch_instance_spread_levels = [/*level2*/ ctx[5].props];
	var switch_value = /*level2*/ ctx[5].component;

	function switch_props(ctx) {
		let switch_instance_props = {};

		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
		}

		return {
			props: switch_instance_props,
			$$inline: true
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
	}

	const block = {
		c: function create() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		l: function claim(nodes) {
			if (switch_instance) claim_component(switch_instance.$$.fragment, nodes);
			switch_instance_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert_dev(target, switch_instance_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const switch_instance_changes = (dirty & /*level2*/ 32)
			? get_spread_update(switch_instance_spread_levels, [get_spread_object(/*level2*/ ctx[5].props)])
			: {};

			if (switch_value !== (switch_value = /*level2*/ ctx[5].component)) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i: function intro(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$l.name,
		type: "if",
		source: "(26:3) {#if level2}",
		ctx
	});

	return block;
}

// (25:2) <svelte:component this="{level1.component}" segment="{segments[1]}" {...level1.props}>
function create_default_slot_1$7(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*level2*/ ctx[5] && create_if_block_1$l(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*level2*/ ctx[5]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*level2*/ 32) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1$l(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$7.name,
		type: "slot",
		source: "(25:2) <svelte:component this=\\\"{level1.component}\\\" segment=\\\"{segments[1]}\\\" {...level1.props}>",
		ctx
	});

	return block;
}

// (21:0) <Layout segment="{segments[0]}" {...level0.props}>
function create_default_slot$Q(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$u, create_else_block$e];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*error*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$Q.name,
		type: "slot",
		source: "(21:0) <Layout segment=\\\"{segments[0]}\\\" {...level0.props}>",
		ctx
	});

	return block;
}

function create_fragment$1s(ctx) {
	let layout;
	let current;
	const layout_spread_levels = [{ segment: /*segments*/ ctx[2][0] }, /*level0*/ ctx[3].props];

	let layout_props = {
		$$slots: { default: [create_default_slot$Q] },
		$$scope: { ctx }
	};

	for (let i = 0; i < layout_spread_levels.length; i += 1) {
		layout_props = assign(layout_props, layout_spread_levels[i]);
	}

	layout = new Layout({ props: layout_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(layout.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(layout.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(layout, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const layout_changes = (dirty & /*segments, level0*/ 12)
			? get_spread_update(layout_spread_levels, [
					dirty & /*segments*/ 4 && { segment: /*segments*/ ctx[2][0] },
					dirty & /*level0*/ 8 && get_spread_object(/*level0*/ ctx[3].props)
				])
			: {};

			if (dirty & /*$$scope, error, status, level1, segments, level2*/ 311) {
				layout_changes.$$scope = { dirty, ctx };
			}

			layout.$set(layout_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(layout.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(layout.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(layout, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1s.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1s($$self, $$props, $$invalidate) {
	let { stores } = $$props;
	let { error } = $$props;
	let { status } = $$props;
	let { segments } = $$props;
	let { level0 } = $$props;
	let { level1 = null } = $$props;
	let { level2 = null } = $$props;
	let { notify } = $$props;
	afterUpdate(notify);
	setContext(CONTEXT_KEY, stores);

	const writable_props = [
		"stores",
		"error",
		"status",
		"segments",
		"level0",
		"level1",
		"level2",
		"notify"
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<App> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("App", $$slots, []);

	$$self.$set = $$props => {
		if ("stores" in $$props) $$invalidate(6, stores = $$props.stores);
		if ("error" in $$props) $$invalidate(0, error = $$props.error);
		if ("status" in $$props) $$invalidate(1, status = $$props.status);
		if ("segments" in $$props) $$invalidate(2, segments = $$props.segments);
		if ("level0" in $$props) $$invalidate(3, level0 = $$props.level0);
		if ("level1" in $$props) $$invalidate(4, level1 = $$props.level1);
		if ("level2" in $$props) $$invalidate(5, level2 = $$props.level2);
		if ("notify" in $$props) $$invalidate(7, notify = $$props.notify);
	};

	$$self.$capture_state = () => ({
		setContext,
		afterUpdate,
		CONTEXT_KEY,
		Layout,
		Error: Error$1,
		stores,
		error,
		status,
		segments,
		level0,
		level1,
		level2,
		notify
	});

	$$self.$inject_state = $$props => {
		if ("stores" in $$props) $$invalidate(6, stores = $$props.stores);
		if ("error" in $$props) $$invalidate(0, error = $$props.error);
		if ("status" in $$props) $$invalidate(1, status = $$props.status);
		if ("segments" in $$props) $$invalidate(2, segments = $$props.segments);
		if ("level0" in $$props) $$invalidate(3, level0 = $$props.level0);
		if ("level1" in $$props) $$invalidate(4, level1 = $$props.level1);
		if ("level2" in $$props) $$invalidate(5, level2 = $$props.level2);
		if ("notify" in $$props) $$invalidate(7, notify = $$props.notify);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [error, status, segments, level0, level1, level2, stores, notify];
}

class App extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1s, create_fragment$1s, safe_not_equal, {
			stores: 6,
			error: 0,
			status: 1,
			segments: 2,
			level0: 3,
			level1: 4,
			level2: 5,
			notify: 7
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "App",
			options,
			id: create_fragment$1s.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*stores*/ ctx[6] === undefined && !("stores" in props)) {
			console.warn("<App> was created without expected prop 'stores'");
		}

		if (/*error*/ ctx[0] === undefined && !("error" in props)) {
			console.warn("<App> was created without expected prop 'error'");
		}

		if (/*status*/ ctx[1] === undefined && !("status" in props)) {
			console.warn("<App> was created without expected prop 'status'");
		}

		if (/*segments*/ ctx[2] === undefined && !("segments" in props)) {
			console.warn("<App> was created without expected prop 'segments'");
		}

		if (/*level0*/ ctx[3] === undefined && !("level0" in props)) {
			console.warn("<App> was created without expected prop 'level0'");
		}

		if (/*notify*/ ctx[7] === undefined && !("notify" in props)) {
			console.warn("<App> was created without expected prop 'notify'");
		}
	}

	get stores() {
		throw new Error_1$2("<App>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set stores(value) {
		throw new Error_1$2("<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get error() {
		throw new Error_1$2("<App>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set error(value) {
		throw new Error_1$2("<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get status() {
		throw new Error_1$2("<App>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set status(value) {
		throw new Error_1$2("<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get segments() {
		throw new Error_1$2("<App>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set segments(value) {
		throw new Error_1$2("<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get level0() {
		throw new Error_1$2("<App>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set level0(value) {
		throw new Error_1$2("<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get level1() {
		throw new Error_1$2("<App>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set level1(value) {
		throw new Error_1$2("<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get level2() {
		throw new Error_1$2("<App>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set level2(value) {
		throw new Error_1$2("<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get notify() {
		throw new Error_1$2("<App>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set notify(value) {
		throw new Error_1$2("<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

// This file is generated by Sapper — do not edit it!

const ignore = [/^\/organizations\/components\/?$/, /^\/organizations\/edit\/?$/, /^\/organizations\/view\/?$/, /^\/funds\/components\/?$/, /^\/funds\/edit\/?$/, /^\/funds\/view\/?$/, /^\/lists\/components\/?$/];

const components = [
	{
		js: () => import('./index.790ab27b.js'),
		css: []
	},
	{
		js: () => import('./[id].7fbc8ac0.js'),
		css: []
	},
	{
		js: () => import('./[id].95efea46.js'),
		css: []
	},
	{
		js: () => import('./_layout.44d3b9ba.js'),
		css: []
	},
	{
		js: () => import('./index.efa5bbf8.js'),
		css: []
	},
	{
		js: () => import('./organizations.631f951c.js'),
		css: []
	},
	{
		js: () => import('./funds.6edc473f.js'),
		css: []
	},
	{
		js: () => import('./index.52ee1720.js'),
		css: []
	},
	{
		js: () => import('./me.c2e18192.js'),
		css: []
	},
	{
		js: () => import('./[id].83cec44a.js'),
		css: []
	},
	{
		js: () => import('./index.99d5483b.js'),
		css: []
	},
	{
		js: () => import('./[id].bb4690ff.js'),
		css: []
	}
];

const routes = (d => [
	{
		// index.svelte
		pattern: /^\/$/,
		parts: [
			{ i: 0 }
		]
	},

	{
		// organizations/[id].svelte
		pattern: /^\/organizations\/([^\/]+?)\/?$/,
		parts: [
			null,
			{ i: 1, params: match => ({ id: d(match[1]) }) }
		]
	},

	{
		// funds/[id].svelte
		pattern: /^\/funds\/([^\/]+?)\/?$/,
		parts: [
			null,
			{ i: 2, params: match => ({ id: d(match[1]) }) }
		]
	},

	{
		// lists/index.svelte
		pattern: /^\/lists\/?$/,
		parts: [
			{ i: 3 },
			{ i: 4 }
		]
	},

	{
		// lists/organizations.svelte
		pattern: /^\/lists\/organizations\/?$/,
		parts: [
			{ i: 3 },
			{ i: 5 }
		]
	},

	{
		// lists/funds.svelte
		pattern: /^\/lists\/funds\/?$/,
		parts: [
			{ i: 3 },
			{ i: 6 }
		]
	},

	{
		// users/index.svelte
		pattern: /^\/users\/?$/,
		parts: [
			{ i: 7 }
		]
	},

	{
		// users/me.svelte
		pattern: /^\/users\/me\/?$/,
		parts: [
			null,
			{ i: 8 }
		]
	},

	{
		// users/[id].svelte
		pattern: /^\/users\/([^\/]+?)\/?$/,
		parts: [
			null,
			{ i: 9, params: match => ({ id: d(match[1]) }) }
		]
	},

	{
		// map/index.svelte
		pattern: /^\/map\/?$/,
		parts: [
			{ i: 10 }
		]
	},

	{
		// map/[id].svelte
		pattern: /^\/map\/([^\/]+?)\/?$/,
		parts: [
			null,
			{ i: 11, params: match => ({ id: d(match[1]) }) }
		]
	}
])(decodeURIComponent);

if (typeof window !== 'undefined') {
	import('./sapper-dev-client.1e7a4a5e.js').then(client => {
		client.connect(10000);
	});
}

function goto(href, opts = { replaceState: false }) {
	const target = select_target(new URL(href, document.baseURI));

	if (target) {
		_history[opts.replaceState ? 'replaceState' : 'pushState']({ id: cid }, '', href);
		return navigate(target, null).then(() => {});
	}

	location.href = href;
	return new Promise(f => {}); // never resolves
}

/** Callback to inform of a value updates. */



















function page_store(value) {
	const store = writable(value);
	let ready = true;

	function notify() {
		ready = true;
		store.update(val => val);
	}

	function set(new_value) {
		ready = false;
		store.set(new_value);
	}

	function subscribe(run) {
		let old_value;
		return store.subscribe((value) => {
			if (old_value === undefined || (ready && value !== old_value)) {
				run(old_value = value);
			}
		});
	}

	return { notify, set, subscribe };
}

const initial_data = typeof __SAPPER__ !== 'undefined' && __SAPPER__;

let ready = false;
let root_component;
let current_token;
let root_preloaded;
let current_branch = [];
let current_query = '{}';

const stores = {
	page: page_store({}),
	preloading: writable(null),
	session: writable(initial_data && initial_data.session)
};

let $session;
let session_dirty;

stores.session.subscribe(async value => {
	$session = value;

	if (!ready) return;
	session_dirty = true;

	const target = select_target(new URL(location.href));

	const token = current_token = {};
	const { redirect, props, branch } = await hydrate_target(target);
	if (token !== current_token) return; // a secondary navigation happened while we were loading

	await render(redirect, branch, props, target.page);
});

let prefetching


 = null;
function set_prefetching(href, promise) {
	prefetching = { href, promise };
}

let target;
function set_target(element) {
	target = element;
}

let uid = 1;
function set_uid(n) {
	uid = n;
}

let cid;
function set_cid(n) {
	cid = n;
}

const _history = typeof history !== 'undefined' ? history : {
	pushState: (state, title, href) => {},
	replaceState: (state, title, href) => {},
	scrollRestoration: ''
};

const scroll_history = {};

function extract_query(search) {
	const query = Object.create(null);
	if (search.length > 0) {
		search.slice(1).split('&').forEach(searchParam => {
			let [, key, value = ''] = /([^=]*)(?:=(.*))?/.exec(decodeURIComponent(searchParam.replace(/\+/g, ' ')));
			if (typeof query[key] === 'string') query[key] = [query[key]];
			if (typeof query[key] === 'object') (query[key] ).push(value);
			else query[key] = value;
		});
	}
	return query;
}

function select_target(url) {
	if (url.origin !== location.origin) return null;
	if (!url.pathname.startsWith(initial_data.baseUrl)) return null;

	let path = url.pathname.slice(initial_data.baseUrl.length);

	if (path === '') {
		path = '/';
	}

	// avoid accidental clashes between server routes and page routes
	if (ignore.some(pattern => pattern.test(path))) return;

	for (let i = 0; i < routes.length; i += 1) {
		const route = routes[i];

		const match = route.pattern.exec(path);

		if (match) {
			const query = extract_query(url.search);
			const part = route.parts[route.parts.length - 1];
			const params = part.params ? part.params(match) : {};

			const page = { host: location.host, path, query, params };

			return { href: url.href, route, match, page };
		}
	}
}

function handle_error(url) {
	const { host, pathname, search } = location;
	const { session, preloaded, status, error } = initial_data;

	if (!root_preloaded) {
		root_preloaded = preloaded && preloaded[0];
	}

	const props = {
		error,
		status,
		session,
		level0: {
			props: root_preloaded
		},
		level1: {
			props: {
				status,
				error
			},
			component: Error$1
		},
		segments: preloaded

	};
	const query = extract_query(search);
	render(null, [], props, { host, path: pathname, query, params: {} });
}

function scroll_state() {
	return {
		x: pageXOffset,
		y: pageYOffset
	};
}

async function navigate(target, id, noscroll, hash) {
	if (id) {
		// popstate or initial navigation
		cid = id;
	} else {
		const current_scroll = scroll_state();

		// clicked on a link. preserve scroll state
		scroll_history[cid] = current_scroll;

		id = cid = ++uid;
		scroll_history[cid] = noscroll ? current_scroll : { x: 0, y: 0 };
	}

	cid = id;

	if (root_component) stores.preloading.set(true);

	const loaded = prefetching && prefetching.href === target.href ?
		prefetching.promise :
		hydrate_target(target);

	prefetching = null;

	const token = current_token = {};
	const { redirect, props, branch } = await loaded;
	if (token !== current_token) return; // a secondary navigation happened while we were loading

	await render(redirect, branch, props, target.page);
	if (document.activeElement) document.activeElement.blur();

	if (!noscroll) {
		let scroll = scroll_history[id];

		if (hash) {
			// scroll is an element id (from a hash), we need to compute y.
			const deep_linked = document.getElementById(hash.slice(1));

			if (deep_linked) {
				scroll = {
					x: 0,
					y: deep_linked.getBoundingClientRect().top + scrollY
				};
			}
		}

		scroll_history[cid] = scroll;
		if (scroll) scrollTo(scroll.x, scroll.y);
	}
}

async function render(redirect, branch, props, page) {
	if (redirect) return goto(redirect.location, { replaceState: true });

	stores.page.set(page);
	stores.preloading.set(false);

	if (root_component) {
		root_component.$set(props);
	} else {
		props.stores = {
			page: { subscribe: stores.page.subscribe },
			preloading: { subscribe: stores.preloading.subscribe },
			session: stores.session
		};
		props.level0 = {
			props: await root_preloaded
		};
		props.notify = stores.page.notify;

		// first load — remove SSR'd <head> contents
		const start = document.querySelector('#sapper-head-start');
		const end = document.querySelector('#sapper-head-end');

		if (start && end) {
			while (start.nextSibling !== end) detach$1(start.nextSibling);
			detach$1(start);
			detach$1(end);
		}

		root_component = new App({
			target,
			props,
			hydrate: true
		});
	}

	current_branch = branch;
	current_query = JSON.stringify(page.query);
	ready = true;
	session_dirty = false;
}

function part_changed(i, segment, match, stringified_query) {
	// TODO only check query string changes for preload functions
	// that do in fact depend on it (using static analysis or
	// runtime instrumentation)
	if (stringified_query !== current_query) return true;

	const previous = current_branch[i];

	if (!previous) return false;
	if (segment !== previous.segment) return true;
	if (previous.match) {
		if (JSON.stringify(previous.match.slice(1, i + 2)) !== JSON.stringify(match.slice(1, i + 2))) {
			return true;
		}
	}
}

async function hydrate_target(target)



 {
	const { route, page } = target;
	const segments = page.path.split('/').filter(Boolean);

	let redirect = null;

	const props = { error: null, status: 200, segments: [segments[0]] };

	const preload_context = {
		fetch: (url, opts) => fetch(url, opts),
		redirect: (statusCode, location) => {
			if (redirect && (redirect.statusCode !== statusCode || redirect.location !== location)) {
				throw new Error(`Conflicting redirects`);
			}
			redirect = { statusCode, location };
		},
		error: (status, error) => {
			props.error = typeof error === 'string' ? new Error(error) : error;
			props.status = status;
		}
	};

	if (!root_preloaded) {
		root_preloaded = initial_data.preloaded[0] || preload.call(preload_context, {
			host: page.host,
			path: page.path,
			query: page.query,
			params: {}
		}, $session);
	}

	let branch;
	let l = 1;

	try {
		const stringified_query = JSON.stringify(page.query);
		const match = route.pattern.exec(page.path);

		let segment_dirty = false;

		branch = await Promise.all(route.parts.map(async (part, i) => {
			const segment = segments[i];

			if (part_changed(i, segment, match, stringified_query)) segment_dirty = true;

			props.segments[l] = segments[i + 1]; // TODO make this less confusing
			if (!part) return { segment };

			const j = l++;

			if (!session_dirty && !segment_dirty && current_branch[i] && current_branch[i].part === part.i) {
				return current_branch[i];
			}

			segment_dirty = false;

			const { default: component, preload } = await load_component(components[part.i]);

			let preloaded;
			if (ready || !initial_data.preloaded[i + 1]) {
				preloaded = preload
					? await preload.call(preload_context, {
						host: page.host,
						path: page.path,
						query: page.query,
						params: part.params ? part.params(target.match) : {}
					}, $session)
					: {};
			} else {
				preloaded = initial_data.preloaded[i + 1];
			}

			return (props[`level${j}`] = { component, props: preloaded, segment, match, part: part.i });
		}));
	} catch (error) {
		props.error = error;
		props.status = 500;
		branch = [];
	}

	return { redirect, props, branch };
}

function load_css(chunk) {
	const href = `client/${chunk}`;
	if (document.querySelector(`link[href="${href}"]`)) return;

	return new Promise((fulfil, reject) => {
		const link = document.createElement('link');
		link.rel = 'stylesheet';
		link.href = href;

		link.onload = () => fulfil();
		link.onerror = reject;

		document.head.appendChild(link);
	});
}

function load_component(component)


 {
	// TODO this is temporary — once placeholders are
	// always rewritten, scratch the ternary
	const promises = (typeof component.css === 'string' ? [] : component.css.map(load_css));
	promises.unshift(component.js());
	return Promise.all(promises).then(values => values[0]);
}

function detach$1(node) {
	node.parentNode.removeChild(node);
}

function prefetch(href) {
	const target = select_target(new URL(href, document.baseURI));

	if (target) {
		if (!prefetching || href !== prefetching.href) {
			set_prefetching(href, hydrate_target(target));
		}

		return prefetching.promise;
	}
}

function start(opts

) {
	if ('scrollRestoration' in _history) {
		_history.scrollRestoration = 'manual';
	}
	
	// Adopted from Nuxt.js
	// Reset scrollRestoration to auto when leaving page, allowing page reload
	// and back-navigation from other pages to use the browser to restore the
	// scrolling position.
	addEventListener('beforeunload', () => {
		_history.scrollRestoration = 'auto';
	});

	// Setting scrollRestoration to manual again when returning to this page.
	addEventListener('load', () => {
		_history.scrollRestoration = 'manual';
	});

	set_target(opts.target);

	addEventListener('click', handle_click);
	addEventListener('popstate', handle_popstate);

	// prefetch
	addEventListener('touchstart', trigger_prefetch);
	addEventListener('mousemove', handle_mousemove);

	return Promise.resolve().then(() => {
		const { hash, href } = location;

		_history.replaceState({ id: uid }, '', href);

		const url = new URL(location.href);

		if (initial_data.error) return handle_error();

		const target = select_target(url);
		if (target) return navigate(target, uid, true, hash);
	});
}

let mousemove_timeout;

function handle_mousemove(event) {
	clearTimeout(mousemove_timeout);
	mousemove_timeout = setTimeout(() => {
		trigger_prefetch(event);
	}, 20);
}

function trigger_prefetch(event) {
	const a = find_anchor(event.target);
	if (!a || a.rel !== 'prefetch') return;

	prefetch(a.href);
}

function handle_click(event) {
	// Adapted from https://github.com/visionmedia/page.js
	// MIT license https://github.com/visionmedia/page.js#license
	if (which(event) !== 1) return;
	if (event.metaKey || event.ctrlKey || event.shiftKey) return;
	if (event.defaultPrevented) return;

	const a = find_anchor(event.target);
	if (!a) return;

	if (!a.href) return;

	// check if link is inside an svg
	// in this case, both href and target are always inside an object
	const svg = typeof a.href === 'object' && a.href.constructor.name === 'SVGAnimatedString';
	const href = String(svg ? (a).href.baseVal : a.href);

	if (href === location.href) {
		if (!location.hash) event.preventDefault();
		return;
	}

	// Ignore if tag has
	// 1. 'download' attribute
	// 2. rel='external' attribute
	if (a.hasAttribute('download') || a.getAttribute('rel') === 'external') return;

	// Ignore if <a> has a target
	if (svg ? (a).target.baseVal : a.target) return;

	const url = new URL(href);

	// Don't handle hash changes
	if (url.pathname === location.pathname && url.search === location.search) return;

	const target = select_target(url);
	if (target) {
		const noscroll = a.hasAttribute('sapper-noscroll');
		navigate(target, null, noscroll, url.hash);
		event.preventDefault();
		_history.pushState({ id: cid }, '', url.href);
	}
}

function which(event) {
	return event.which === null ? event.button : event.which;
}

function find_anchor(node) {
	while (node && node.nodeName.toUpperCase() !== 'A') node = node.parentNode; // SVG <a> elements have a lowercase name
	return node;
}

function handle_popstate(event) {
	scroll_history[cid] = scroll_state();

	if (event.state) {
		const url = new URL(location.href);
		const target = select_target(url);
		if (target) {
			navigate(target, event.state.id);
		} else {
			location.href = location.href;
		}
	} else {
		// hashchange
		set_uid(uid + 1);
		set_cid(uid);
		_history.replaceState({ id: cid }, '', location.href);
	}
}

const stores$1 = () => getContext(CONTEXT_KEY);

start({
	target: document.querySelector('#sapper')
});

export { Documents as $, TrustButton as A, Br as B, Carousel as C, Divider as D, createEventDispatcher as E, Footer as F, set_style as G, Button as H, Icon as I, DonatorsList as J, FundCards as K, ListOfFeatures as L, Modal as M, set_data_dev as N, Loader as O, Progress as P, empty as Q, group_outros as R, SvelteComponentDev as S, TitleSubTitle as T, check_outros as U, NewsList as V, onMount as W, modals as X, bodyScroll as Y, safeGet as Z, FancyBox as _, append_dev as a, Card as a0, Avatar as a1, SocialsX as a2, SocialsY as a3, Picture as a4, classnames as a5, null_to_empty as a6, EditCard as a7, FormBuilder as a8, bubble as a9, run_all as aA, SearchLine as aB, create_slot as aC, binding_callbacks as aD, bind as aE, add_flush_callback as aF, update_slot as aG, goto as aH, ListItems as aI, Map$2 as aJ, MapMarker as aK, options as aa, LazyToggle as ab, stores$1 as ac, validate_store as ad, component_subscribe as ae, API as af, delay as ag, EditArea as ah, globals as ai, validate_each_argument as aj, destroy_each as ak, _ as al, StoryList as am, find as an, vaccinations as ao, formatTextToBullets as ap, Square as aq, RadioRect as ar, assign as as, is_function as at, get_spread_update as au, get_spread_object as av, DonationButton as aw, toggle_class as ax, exclude_internal_props as ay, listen_dev as az, ContentHolder as b, Comments as c, dispatch_dev as d, element as e, space as f, create_component as g, detach_dev as h, init as i, claim_space as j, claim_element as k, children as l, claim_component as m, claim_text as n, attr_dev as o, add_location as p, query_selector_all as q, insert_dev as r, safe_not_equal as s, text as t, mount_component as u, validate_slots as v, noop as w, transition_in as x, transition_out as y, destroy_component as z };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
