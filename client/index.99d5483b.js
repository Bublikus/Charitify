import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, B as Br, aJ as Map, ac as stores$1, v as validate_slots, aH as goto, af as API, aK as MapMarker, ai as globals, aj as validate_each_argument, f as space, g as create_component, q as query_selector_all, h as detach_dev, j as claim_space, m as claim_component, r as insert_dev, u as mount_component, x as transition_in, y as transition_out, z as destroy_component, at as is_function, Q as empty, R as group_outros, U as check_outros, ak as destroy_each } from './client.02b1df94.js';

/* src/routes/map/index.svelte generated by Svelte v3.24.0 */

const { console: console_1 } = globals;

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (38:4) {#each organizations as o}
function create_each_block(ctx) {
	let mapmarker;
	let current;

	mapmarker = new MapMarker({
			props: {
				lat: /*o*/ ctx[4].location.lat,
				lng: /*o*/ ctx[4].location.lng
			},
			$$inline: true
		});

	mapmarker.$on("click", function () {
		if (is_function(/*onMarkerClick*/ ctx[2].bind(null, /*o*/ ctx[4]))) /*onMarkerClick*/ ctx[2].bind(null, /*o*/ ctx[4]).apply(this, arguments);
	});

	const block = {
		c: function create() {
			create_component(mapmarker.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(mapmarker.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(mapmarker, target, anchor);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const mapmarker_changes = {};
			if (dirty & /*organizations*/ 1) mapmarker_changes.lat = /*o*/ ctx[4].location.lat;
			if (dirty & /*organizations*/ 1) mapmarker_changes.lng = /*o*/ ctx[4].location.lng;
			mapmarker.$set(mapmarker_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(mapmarker.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(mapmarker.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(mapmarker, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(38:4) {#each organizations as o}",
		ctx
	});

	return block;
}

// (37:0) <Map on:ready={onCreate}>
function create_default_slot(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*organizations*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*organizations, onMarkerClick*/ 5) {
				each_value = /*organizations*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(37:0) <Map on:ready={onCreate}>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let br;
	let t1;
	let map;
	let current;

	br = new Br({
			props: { size: "var(--header-height)" },
			$$inline: true
		});

	map = new Map({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	map.$on("ready", /*onCreate*/ ctx[1]);

	const block = {
		c: function create() {
			t0 = space();
			create_component(br.$$.fragment);
			t1 = space();
			create_component(map.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1vy6te4\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			claim_component(br.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(map.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			document.title = "Charitify - Map of organizations.";
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			mount_component(br, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(map, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const map_changes = {};

			if (dirty & /*$$scope, organizations*/ 129) {
				map_changes.$$scope = { dirty, ctx };
			}

			map.$set(map_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(br.$$.fragment, local);
			transition_in(map.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(br.$$.fragment, local);
			transition_out(map.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			destroy_component(br, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(map, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const { page } = stores$1();
	let organizations = [];

	async function onCreate({ detail: map }) {
		await new Promise(r => setTimeout(r, 2000));
		$$invalidate(0, organizations = await API.getOrganizations());
		console.log(organizations);
		const getRange = (type, metric) => Math[type](...organizations.map(o => o.location[metric]));
		const scale = -2;

		const area = [
			[getRange("min", "lng") + scale, getRange("min", "lat") + scale],
			[getRange("max", "lng") - scale, getRange("max", "lat") - scale]
		];

		map.fitBounds(area);
	}

	async function onMarkerClick(organization) {
		goto(`organizations/${organization.id}`);
	}

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Map> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Map", $$slots, []);

	$$self.$capture_state = () => ({
		stores: stores$1,
		goto,
		page,
		API,
		Br,
		Map,
		MapMarker,
		organizations,
		onCreate,
		onMarkerClick
	});

	$$self.$inject_state = $$props => {
		if ("organizations" in $$props) $$invalidate(0, organizations = $$props.organizations);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [organizations, onCreate, onMarkerClick];
}

class Map_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Map_1",
			options,
			id: create_fragment.name
		});
	}
}

export default Map_1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguOTlkNTQ4M2IuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvbWFwL2luZGV4LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c3ZlbHRlOmhlYWQ+XG4gICAgPHRpdGxlPkNoYXJpdGlmeSAtIE1hcCBvZiBvcmdhbml6YXRpb25zLjwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuXG48c3R5bGU+XG48L3N0eWxlPlxuXG48c2NyaXB0PlxuICAgIGltcG9ydCB7IHN0b3JlcywgZ290byB9IGZyb20gJ0BzYXBwZXIvYXBwJztcbiAgICBjb25zdCB7IHBhZ2UgfSA9IHN0b3JlcygpO1xuICAgIGltcG9ydCB7IEFQSSB9IGZyb20gJ0BzZXJ2aWNlcydcbiAgICBpbXBvcnQgeyBCciwgTWFwLCBNYXBNYXJrZXIgfSBmcm9tICdAY29tcG9uZW50cydcblxuICAgIGxldCBvcmdhbml6YXRpb25zID0gW11cblxuICAgIGFzeW5jIGZ1bmN0aW9uIG9uQ3JlYXRlKHsgZGV0YWlsOiBtYXAgfSkge1xuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyID0+IHNldFRpbWVvdXQociwgMjAwMCkpXG4gICAgICAgIG9yZ2FuaXphdGlvbnMgPSBhd2FpdCBBUEkuZ2V0T3JnYW5pemF0aW9ucygpXG5cbiAgICAgICAgY29uc29sZS5sb2cob3JnYW5pemF0aW9ucylcblxuICAgICAgICBjb25zdCBnZXRSYW5nZSA9ICh0eXBlLCBtZXRyaWMpID0+IE1hdGhbdHlwZV0oLi4ub3JnYW5pemF0aW9ucy5tYXAobyA9PiBvLmxvY2F0aW9uW21ldHJpY10pKVxuXG4gICAgICAgIGNvbnN0IHNjYWxlID0gLTJcbiAgICAgICAgY29uc3QgYXJlYSA9IFtcbiAgICAgICAgICAgIFtnZXRSYW5nZSgnbWluJywgJ2xuZycpICsgc2NhbGUsIGdldFJhbmdlKCdtaW4nLCAnbGF0JykgKyBzY2FsZV0sXG4gICAgICAgICAgICBbZ2V0UmFuZ2UoJ21heCcsICdsbmcnKSAtIHNjYWxlLCBnZXRSYW5nZSgnbWF4JywgJ2xhdCcpIC0gc2NhbGVdXG4gICAgICAgIF1cbiAgICAgICAgbWFwLmZpdEJvdW5kcyhhcmVhKTtcbiAgICB9XG5cbiAgICBhc3luYyBmdW5jdGlvbiBvbk1hcmtlckNsaWNrKG9yZ2FuaXphdGlvbikge1xuICAgICAgICBnb3RvKGBvcmdhbml6YXRpb25zLyR7b3JnYW5pemF0aW9uLmlkfWApXG4gICAgfVxuPC9zY3JpcHQ+XG5cbjxCciBzaXplPVwidmFyKC0taGVhZGVyLWhlaWdodClcIi8+XG48TWFwIG9uOnJlYWR5PXtvbkNyZWF0ZX0+XG4gICAgeyNlYWNoIG9yZ2FuaXphdGlvbnMgYXMgb31cbiAgICAgICAgPE1hcE1hcmtlciBsYXQ9e28ubG9jYXRpb24ubGF0fSBsbmc9e28ubG9jYXRpb24ubG5nfSBvbjpjbGljaz17b25NYXJrZXJDbGljay5iaW5kKG51bGwsIG8pfS8+XG4gICAgey9lYWNofVxuPC9NYXA+XG4iXSwibmFtZXMiOlsic3RvcmVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O2VBc0N3QixHQUFDLElBQUMsUUFBUSxDQUFDLEdBQUc7ZUFBTyxHQUFDLElBQUMsUUFBUSxDQUFDLEdBQUc7Ozs7OztvQ0FBWSxHQUFhLElBQUMsSUFBSSxDQUFDLElBQUksUUFBRSxHQUFDLHlCQUExQixHQUFhLElBQUMsSUFBSSxDQUFDLElBQUksUUFBRSxHQUFDOzs7Ozs7Ozs7Ozs7Ozs7OztrRUFBekUsR0FBQyxJQUFDLFFBQVEsQ0FBQyxHQUFHO2tFQUFPLEdBQUMsSUFBQyxRQUFRLENBQUMsR0FBRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0NBRGhELEdBQWE7Ozs7Z0NBQWxCLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzttQ0FBQyxHQUFhOzs7OytCQUFsQixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7O3dCQUFKLE1BQUk7Ozs7Ozs7Ozs7a0NBQUosTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrQkFESyxHQUFROzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7U0E1QlgsSUFBSSxLQUFLQSxRQUFNO0tBSW5CLGFBQWE7O2dCQUVGLFFBQVEsR0FBRyxNQUFNLEVBQUUsR0FBRztZQUN2QixPQUFPLENBQUMsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxDQUFDLEVBQUUsSUFBSTtrQkFDekMsYUFBYSxTQUFTLEdBQUcsQ0FBQyxnQkFBZ0I7RUFFMUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhO1FBRW5CLFFBQVEsSUFBSSxJQUFJLEVBQUUsTUFBTSxLQUFLLElBQUksQ0FBQyxJQUFJLEtBQUssYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNO1FBRW5GLEtBQUssSUFBSSxDQUFDOztRQUNWLElBQUk7SUFDTCxRQUFRLENBQUMsS0FBSyxFQUFFLEtBQUssSUFBSSxLQUFLLEVBQUUsUUFBUSxDQUFDLEtBQUssRUFBRSxLQUFLLElBQUksS0FBSztJQUM5RCxRQUFRLENBQUMsS0FBSyxFQUFFLEtBQUssSUFBSSxLQUFLLEVBQUUsUUFBUSxDQUFDLEtBQUssRUFBRSxLQUFLLElBQUksS0FBSzs7O0VBRW5FLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSTs7O2dCQUdQLGFBQWEsQ0FBQyxZQUFZO0VBQ3JDLElBQUksa0JBQWtCLFlBQVksQ0FBQyxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
