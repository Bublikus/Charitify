import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_slots, e as element, f as space, t as text, k as claim_element, l as children, j as claim_space, n as claim_text, h as detach_dev, p as add_location, r as insert_dev, a as append_dev, w as noop } from './client.02b1df94.js';

/* src/routes/users/index.svelte generated by Svelte v3.24.0 */

const file = "src/routes/users/index.svelte";

function create_fragment(ctx) {
	let section;
	let br0;
	let t0;
	let br1;
	let t1;
	let br2;
	let t2;
	let br3;
	let t3;
	let br4;
	let t4;
	let br5;

	const block = {
		c: function create() {
			section = element("section");
			br0 = element("br");
			t0 = space();
			br1 = element("br");
			t1 = space();
			br2 = element("br");
			t2 = text("\n    Here will be users for ADMIN\n    ");
			br3 = element("br");
			t3 = space();
			br4 = element("br");
			t4 = space();
			br5 = element("br");
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", {});
			var section_nodes = children(section);
			br0 = claim_element(section_nodes, "BR", {});
			t0 = claim_space(section_nodes);
			br1 = claim_element(section_nodes, "BR", {});
			t1 = claim_space(section_nodes);
			br2 = claim_element(section_nodes, "BR", {});
			t2 = claim_text(section_nodes, "\n    Here will be users for ADMIN\n    ");
			br3 = claim_element(section_nodes, "BR", {});
			t3 = claim_space(section_nodes);
			br4 = claim_element(section_nodes, "BR", {});
			t4 = claim_space(section_nodes);
			br5 = claim_element(section_nodes, "BR", {});
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(br0, file, 5, 4, 35);
			add_location(br1, file, 6, 4, 44);
			add_location(br2, file, 7, 4, 53);
			add_location(br3, file, 9, 4, 95);
			add_location(br4, file, 10, 4, 104);
			add_location(br5, file, 11, 4, 113);
			add_location(section, file, 4, 0, 21);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, br0);
			append_dev(section, t0);
			append_dev(section, br1);
			append_dev(section, t1);
			append_dev(section, br2);
			append_dev(section, t2);
			append_dev(section, br3);
			append_dev(section, t3);
			append_dev(section, br4);
			append_dev(section, t4);
			append_dev(section, br5);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Users> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Users", $$slots, []);
	return [];
}

class Users extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Users",
			options,
			id: create_fragment.name
		});
	}
}

export default Users;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguNTJlZTE3MjAuanMiLCJzb3VyY2VzIjpbXSwic291cmNlc0NvbnRlbnQiOltdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
